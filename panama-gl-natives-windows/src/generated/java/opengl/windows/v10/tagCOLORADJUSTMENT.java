// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class tagCOLORADJUSTMENT {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("caSize"),
        Constants$root.C_SHORT$LAYOUT.withName("caFlags"),
        Constants$root.C_SHORT$LAYOUT.withName("caIlluminantIndex"),
        Constants$root.C_SHORT$LAYOUT.withName("caRedGamma"),
        Constants$root.C_SHORT$LAYOUT.withName("caGreenGamma"),
        Constants$root.C_SHORT$LAYOUT.withName("caBlueGamma"),
        Constants$root.C_SHORT$LAYOUT.withName("caReferenceBlack"),
        Constants$root.C_SHORT$LAYOUT.withName("caReferenceWhite"),
        Constants$root.C_SHORT$LAYOUT.withName("caContrast"),
        Constants$root.C_SHORT$LAYOUT.withName("caBrightness"),
        Constants$root.C_SHORT$LAYOUT.withName("caColorfulness"),
        Constants$root.C_SHORT$LAYOUT.withName("caRedGreenTint")
    ).withName("tagCOLORADJUSTMENT");
    public static MemoryLayout $LAYOUT() {
        return tagCOLORADJUSTMENT.$struct$LAYOUT;
    }
    static final VarHandle caSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("caSize"));
    public static VarHandle caSize$VH() {
        return tagCOLORADJUSTMENT.caSize$VH;
    }
    public static short caSize$get(MemorySegment seg) {
        return (short)tagCOLORADJUSTMENT.caSize$VH.get(seg);
    }
    public static void caSize$set( MemorySegment seg, short x) {
        tagCOLORADJUSTMENT.caSize$VH.set(seg, x);
    }
    public static short caSize$get(MemorySegment seg, long index) {
        return (short)tagCOLORADJUSTMENT.caSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void caSize$set(MemorySegment seg, long index, short x) {
        tagCOLORADJUSTMENT.caSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle caFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("caFlags"));
    public static VarHandle caFlags$VH() {
        return tagCOLORADJUSTMENT.caFlags$VH;
    }
    public static short caFlags$get(MemorySegment seg) {
        return (short)tagCOLORADJUSTMENT.caFlags$VH.get(seg);
    }
    public static void caFlags$set( MemorySegment seg, short x) {
        tagCOLORADJUSTMENT.caFlags$VH.set(seg, x);
    }
    public static short caFlags$get(MemorySegment seg, long index) {
        return (short)tagCOLORADJUSTMENT.caFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void caFlags$set(MemorySegment seg, long index, short x) {
        tagCOLORADJUSTMENT.caFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle caIlluminantIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("caIlluminantIndex"));
    public static VarHandle caIlluminantIndex$VH() {
        return tagCOLORADJUSTMENT.caIlluminantIndex$VH;
    }
    public static short caIlluminantIndex$get(MemorySegment seg) {
        return (short)tagCOLORADJUSTMENT.caIlluminantIndex$VH.get(seg);
    }
    public static void caIlluminantIndex$set( MemorySegment seg, short x) {
        tagCOLORADJUSTMENT.caIlluminantIndex$VH.set(seg, x);
    }
    public static short caIlluminantIndex$get(MemorySegment seg, long index) {
        return (short)tagCOLORADJUSTMENT.caIlluminantIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void caIlluminantIndex$set(MemorySegment seg, long index, short x) {
        tagCOLORADJUSTMENT.caIlluminantIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle caRedGamma$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("caRedGamma"));
    public static VarHandle caRedGamma$VH() {
        return tagCOLORADJUSTMENT.caRedGamma$VH;
    }
    public static short caRedGamma$get(MemorySegment seg) {
        return (short)tagCOLORADJUSTMENT.caRedGamma$VH.get(seg);
    }
    public static void caRedGamma$set( MemorySegment seg, short x) {
        tagCOLORADJUSTMENT.caRedGamma$VH.set(seg, x);
    }
    public static short caRedGamma$get(MemorySegment seg, long index) {
        return (short)tagCOLORADJUSTMENT.caRedGamma$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void caRedGamma$set(MemorySegment seg, long index, short x) {
        tagCOLORADJUSTMENT.caRedGamma$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle caGreenGamma$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("caGreenGamma"));
    public static VarHandle caGreenGamma$VH() {
        return tagCOLORADJUSTMENT.caGreenGamma$VH;
    }
    public static short caGreenGamma$get(MemorySegment seg) {
        return (short)tagCOLORADJUSTMENT.caGreenGamma$VH.get(seg);
    }
    public static void caGreenGamma$set( MemorySegment seg, short x) {
        tagCOLORADJUSTMENT.caGreenGamma$VH.set(seg, x);
    }
    public static short caGreenGamma$get(MemorySegment seg, long index) {
        return (short)tagCOLORADJUSTMENT.caGreenGamma$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void caGreenGamma$set(MemorySegment seg, long index, short x) {
        tagCOLORADJUSTMENT.caGreenGamma$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle caBlueGamma$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("caBlueGamma"));
    public static VarHandle caBlueGamma$VH() {
        return tagCOLORADJUSTMENT.caBlueGamma$VH;
    }
    public static short caBlueGamma$get(MemorySegment seg) {
        return (short)tagCOLORADJUSTMENT.caBlueGamma$VH.get(seg);
    }
    public static void caBlueGamma$set( MemorySegment seg, short x) {
        tagCOLORADJUSTMENT.caBlueGamma$VH.set(seg, x);
    }
    public static short caBlueGamma$get(MemorySegment seg, long index) {
        return (short)tagCOLORADJUSTMENT.caBlueGamma$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void caBlueGamma$set(MemorySegment seg, long index, short x) {
        tagCOLORADJUSTMENT.caBlueGamma$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle caReferenceBlack$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("caReferenceBlack"));
    public static VarHandle caReferenceBlack$VH() {
        return tagCOLORADJUSTMENT.caReferenceBlack$VH;
    }
    public static short caReferenceBlack$get(MemorySegment seg) {
        return (short)tagCOLORADJUSTMENT.caReferenceBlack$VH.get(seg);
    }
    public static void caReferenceBlack$set( MemorySegment seg, short x) {
        tagCOLORADJUSTMENT.caReferenceBlack$VH.set(seg, x);
    }
    public static short caReferenceBlack$get(MemorySegment seg, long index) {
        return (short)tagCOLORADJUSTMENT.caReferenceBlack$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void caReferenceBlack$set(MemorySegment seg, long index, short x) {
        tagCOLORADJUSTMENT.caReferenceBlack$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle caReferenceWhite$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("caReferenceWhite"));
    public static VarHandle caReferenceWhite$VH() {
        return tagCOLORADJUSTMENT.caReferenceWhite$VH;
    }
    public static short caReferenceWhite$get(MemorySegment seg) {
        return (short)tagCOLORADJUSTMENT.caReferenceWhite$VH.get(seg);
    }
    public static void caReferenceWhite$set( MemorySegment seg, short x) {
        tagCOLORADJUSTMENT.caReferenceWhite$VH.set(seg, x);
    }
    public static short caReferenceWhite$get(MemorySegment seg, long index) {
        return (short)tagCOLORADJUSTMENT.caReferenceWhite$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void caReferenceWhite$set(MemorySegment seg, long index, short x) {
        tagCOLORADJUSTMENT.caReferenceWhite$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle caContrast$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("caContrast"));
    public static VarHandle caContrast$VH() {
        return tagCOLORADJUSTMENT.caContrast$VH;
    }
    public static short caContrast$get(MemorySegment seg) {
        return (short)tagCOLORADJUSTMENT.caContrast$VH.get(seg);
    }
    public static void caContrast$set( MemorySegment seg, short x) {
        tagCOLORADJUSTMENT.caContrast$VH.set(seg, x);
    }
    public static short caContrast$get(MemorySegment seg, long index) {
        return (short)tagCOLORADJUSTMENT.caContrast$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void caContrast$set(MemorySegment seg, long index, short x) {
        tagCOLORADJUSTMENT.caContrast$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle caBrightness$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("caBrightness"));
    public static VarHandle caBrightness$VH() {
        return tagCOLORADJUSTMENT.caBrightness$VH;
    }
    public static short caBrightness$get(MemorySegment seg) {
        return (short)tagCOLORADJUSTMENT.caBrightness$VH.get(seg);
    }
    public static void caBrightness$set( MemorySegment seg, short x) {
        tagCOLORADJUSTMENT.caBrightness$VH.set(seg, x);
    }
    public static short caBrightness$get(MemorySegment seg, long index) {
        return (short)tagCOLORADJUSTMENT.caBrightness$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void caBrightness$set(MemorySegment seg, long index, short x) {
        tagCOLORADJUSTMENT.caBrightness$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle caColorfulness$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("caColorfulness"));
    public static VarHandle caColorfulness$VH() {
        return tagCOLORADJUSTMENT.caColorfulness$VH;
    }
    public static short caColorfulness$get(MemorySegment seg) {
        return (short)tagCOLORADJUSTMENT.caColorfulness$VH.get(seg);
    }
    public static void caColorfulness$set( MemorySegment seg, short x) {
        tagCOLORADJUSTMENT.caColorfulness$VH.set(seg, x);
    }
    public static short caColorfulness$get(MemorySegment seg, long index) {
        return (short)tagCOLORADJUSTMENT.caColorfulness$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void caColorfulness$set(MemorySegment seg, long index, short x) {
        tagCOLORADJUSTMENT.caColorfulness$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle caRedGreenTint$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("caRedGreenTint"));
    public static VarHandle caRedGreenTint$VH() {
        return tagCOLORADJUSTMENT.caRedGreenTint$VH;
    }
    public static short caRedGreenTint$get(MemorySegment seg) {
        return (short)tagCOLORADJUSTMENT.caRedGreenTint$VH.get(seg);
    }
    public static void caRedGreenTint$set( MemorySegment seg, short x) {
        tagCOLORADJUSTMENT.caRedGreenTint$VH.set(seg, x);
    }
    public static short caRedGreenTint$get(MemorySegment seg, long index) {
        return (short)tagCOLORADJUSTMENT.caRedGreenTint$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void caRedGreenTint$set(MemorySegment seg, long index, short x) {
        tagCOLORADJUSTMENT.caRedGreenTint$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


