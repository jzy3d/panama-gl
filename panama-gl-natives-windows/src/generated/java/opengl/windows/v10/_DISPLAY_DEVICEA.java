// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _DISPLAY_DEVICEA {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cb"),
        MemoryLayout.sequenceLayout(32, Constants$root.C_CHAR$LAYOUT).withName("DeviceName"),
        MemoryLayout.sequenceLayout(128, Constants$root.C_CHAR$LAYOUT).withName("DeviceString"),
        Constants$root.C_LONG$LAYOUT.withName("StateFlags"),
        MemoryLayout.sequenceLayout(128, Constants$root.C_CHAR$LAYOUT).withName("DeviceID"),
        MemoryLayout.sequenceLayout(128, Constants$root.C_CHAR$LAYOUT).withName("DeviceKey")
    ).withName("_DISPLAY_DEVICEA");
    public static MemoryLayout $LAYOUT() {
        return _DISPLAY_DEVICEA.$struct$LAYOUT;
    }
    static final VarHandle cb$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cb"));
    public static VarHandle cb$VH() {
        return _DISPLAY_DEVICEA.cb$VH;
    }
    public static int cb$get(MemorySegment seg) {
        return (int)_DISPLAY_DEVICEA.cb$VH.get(seg);
    }
    public static void cb$set( MemorySegment seg, int x) {
        _DISPLAY_DEVICEA.cb$VH.set(seg, x);
    }
    public static int cb$get(MemorySegment seg, long index) {
        return (int)_DISPLAY_DEVICEA.cb$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cb$set(MemorySegment seg, long index, int x) {
        _DISPLAY_DEVICEA.cb$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment DeviceName$slice(MemorySegment seg) {
        return seg.asSlice(4, 32);
    }
    public static MemorySegment DeviceString$slice(MemorySegment seg) {
        return seg.asSlice(36, 128);
    }
    static final VarHandle StateFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("StateFlags"));
    public static VarHandle StateFlags$VH() {
        return _DISPLAY_DEVICEA.StateFlags$VH;
    }
    public static int StateFlags$get(MemorySegment seg) {
        return (int)_DISPLAY_DEVICEA.StateFlags$VH.get(seg);
    }
    public static void StateFlags$set( MemorySegment seg, int x) {
        _DISPLAY_DEVICEA.StateFlags$VH.set(seg, x);
    }
    public static int StateFlags$get(MemorySegment seg, long index) {
        return (int)_DISPLAY_DEVICEA.StateFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StateFlags$set(MemorySegment seg, long index, int x) {
        _DISPLAY_DEVICEA.StateFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment DeviceID$slice(MemorySegment seg) {
        return seg.asSlice(168, 128);
    }
    public static MemorySegment DeviceKey$slice(MemorySegment seg) {
        return seg.asSlice(296, 128);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


