// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _EXCEPTION_DEBUG_INFO {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("ExceptionCode"),
            Constants$root.C_LONG$LAYOUT.withName("ExceptionFlags"),
            Constants$root.C_POINTER$LAYOUT.withName("ExceptionRecord"),
            Constants$root.C_POINTER$LAYOUT.withName("ExceptionAddress"),
            Constants$root.C_LONG$LAYOUT.withName("NumberParameters"),
            MemoryLayout.paddingLayout(32),
            MemoryLayout.sequenceLayout(15, Constants$root.C_LONG_LONG$LAYOUT).withName("ExceptionInformation")
        ).withName("ExceptionRecord"),
        Constants$root.C_LONG$LAYOUT.withName("dwFirstChance"),
        MemoryLayout.paddingLayout(32)
    ).withName("_EXCEPTION_DEBUG_INFO");
    public static MemoryLayout $LAYOUT() {
        return _EXCEPTION_DEBUG_INFO.$struct$LAYOUT;
    }
    public static MemorySegment ExceptionRecord$slice(MemorySegment seg) {
        return seg.asSlice(0, 152);
    }
    static final VarHandle dwFirstChance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwFirstChance"));
    public static VarHandle dwFirstChance$VH() {
        return _EXCEPTION_DEBUG_INFO.dwFirstChance$VH;
    }
    public static int dwFirstChance$get(MemorySegment seg) {
        return (int)_EXCEPTION_DEBUG_INFO.dwFirstChance$VH.get(seg);
    }
    public static void dwFirstChance$set( MemorySegment seg, int x) {
        _EXCEPTION_DEBUG_INFO.dwFirstChance$VH.set(seg, x);
    }
    public static int dwFirstChance$get(MemorySegment seg, long index) {
        return (int)_EXCEPTION_DEBUG_INFO.dwFirstChance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFirstChance$set(MemorySegment seg, long index, int x) {
        _EXCEPTION_DEBUG_INFO.dwFirstChance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


