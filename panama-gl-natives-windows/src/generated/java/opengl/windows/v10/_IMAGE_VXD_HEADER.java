// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _IMAGE_VXD_HEADER {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("e32_magic"),
        Constants$root.C_CHAR$LAYOUT.withName("e32_border"),
        Constants$root.C_CHAR$LAYOUT.withName("e32_worder"),
        Constants$root.C_LONG$LAYOUT.withName("e32_level"),
        Constants$root.C_SHORT$LAYOUT.withName("e32_cpu"),
        Constants$root.C_SHORT$LAYOUT.withName("e32_os"),
        Constants$root.C_LONG$LAYOUT.withName("e32_ver"),
        Constants$root.C_LONG$LAYOUT.withName("e32_mflags"),
        Constants$root.C_LONG$LAYOUT.withName("e32_mpages"),
        Constants$root.C_LONG$LAYOUT.withName("e32_startobj"),
        Constants$root.C_LONG$LAYOUT.withName("e32_eip"),
        Constants$root.C_LONG$LAYOUT.withName("e32_stackobj"),
        Constants$root.C_LONG$LAYOUT.withName("e32_esp"),
        Constants$root.C_LONG$LAYOUT.withName("e32_pagesize"),
        Constants$root.C_LONG$LAYOUT.withName("e32_lastpagesize"),
        Constants$root.C_LONG$LAYOUT.withName("e32_fixupsize"),
        Constants$root.C_LONG$LAYOUT.withName("e32_fixupsum"),
        Constants$root.C_LONG$LAYOUT.withName("e32_ldrsize"),
        Constants$root.C_LONG$LAYOUT.withName("e32_ldrsum"),
        Constants$root.C_LONG$LAYOUT.withName("e32_objtab"),
        Constants$root.C_LONG$LAYOUT.withName("e32_objcnt"),
        Constants$root.C_LONG$LAYOUT.withName("e32_objmap"),
        Constants$root.C_LONG$LAYOUT.withName("e32_itermap"),
        Constants$root.C_LONG$LAYOUT.withName("e32_rsrctab"),
        Constants$root.C_LONG$LAYOUT.withName("e32_rsrccnt"),
        Constants$root.C_LONG$LAYOUT.withName("e32_restab"),
        Constants$root.C_LONG$LAYOUT.withName("e32_enttab"),
        Constants$root.C_LONG$LAYOUT.withName("e32_dirtab"),
        Constants$root.C_LONG$LAYOUT.withName("e32_dircnt"),
        Constants$root.C_LONG$LAYOUT.withName("e32_fpagetab"),
        Constants$root.C_LONG$LAYOUT.withName("e32_frectab"),
        Constants$root.C_LONG$LAYOUT.withName("e32_impmod"),
        Constants$root.C_LONG$LAYOUT.withName("e32_impmodcnt"),
        Constants$root.C_LONG$LAYOUT.withName("e32_impproc"),
        Constants$root.C_LONG$LAYOUT.withName("e32_pagesum"),
        Constants$root.C_LONG$LAYOUT.withName("e32_datapage"),
        Constants$root.C_LONG$LAYOUT.withName("e32_preload"),
        Constants$root.C_LONG$LAYOUT.withName("e32_nrestab"),
        Constants$root.C_LONG$LAYOUT.withName("e32_cbnrestab"),
        Constants$root.C_LONG$LAYOUT.withName("e32_nressum"),
        Constants$root.C_LONG$LAYOUT.withName("e32_autodata"),
        Constants$root.C_LONG$LAYOUT.withName("e32_debuginfo"),
        Constants$root.C_LONG$LAYOUT.withName("e32_debuglen"),
        Constants$root.C_LONG$LAYOUT.withName("e32_instpreload"),
        Constants$root.C_LONG$LAYOUT.withName("e32_instdemand"),
        Constants$root.C_LONG$LAYOUT.withName("e32_heapsize"),
        MemoryLayout.sequenceLayout(12, Constants$root.C_CHAR$LAYOUT).withName("e32_res3"),
        Constants$root.C_LONG$LAYOUT.withName("e32_winresoff"),
        Constants$root.C_LONG$LAYOUT.withName("e32_winreslen"),
        Constants$root.C_SHORT$LAYOUT.withName("e32_devid"),
        Constants$root.C_SHORT$LAYOUT.withName("e32_ddkver")
    ).withName("_IMAGE_VXD_HEADER");
    public static MemoryLayout $LAYOUT() {
        return _IMAGE_VXD_HEADER.$struct$LAYOUT;
    }
    static final VarHandle e32_magic$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_magic"));
    public static VarHandle e32_magic$VH() {
        return _IMAGE_VXD_HEADER.e32_magic$VH;
    }
    public static short e32_magic$get(MemorySegment seg) {
        return (short)_IMAGE_VXD_HEADER.e32_magic$VH.get(seg);
    }
    public static void e32_magic$set( MemorySegment seg, short x) {
        _IMAGE_VXD_HEADER.e32_magic$VH.set(seg, x);
    }
    public static short e32_magic$get(MemorySegment seg, long index) {
        return (short)_IMAGE_VXD_HEADER.e32_magic$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_magic$set(MemorySegment seg, long index, short x) {
        _IMAGE_VXD_HEADER.e32_magic$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_border$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_border"));
    public static VarHandle e32_border$VH() {
        return _IMAGE_VXD_HEADER.e32_border$VH;
    }
    public static byte e32_border$get(MemorySegment seg) {
        return (byte)_IMAGE_VXD_HEADER.e32_border$VH.get(seg);
    }
    public static void e32_border$set( MemorySegment seg, byte x) {
        _IMAGE_VXD_HEADER.e32_border$VH.set(seg, x);
    }
    public static byte e32_border$get(MemorySegment seg, long index) {
        return (byte)_IMAGE_VXD_HEADER.e32_border$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_border$set(MemorySegment seg, long index, byte x) {
        _IMAGE_VXD_HEADER.e32_border$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_worder$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_worder"));
    public static VarHandle e32_worder$VH() {
        return _IMAGE_VXD_HEADER.e32_worder$VH;
    }
    public static byte e32_worder$get(MemorySegment seg) {
        return (byte)_IMAGE_VXD_HEADER.e32_worder$VH.get(seg);
    }
    public static void e32_worder$set( MemorySegment seg, byte x) {
        _IMAGE_VXD_HEADER.e32_worder$VH.set(seg, x);
    }
    public static byte e32_worder$get(MemorySegment seg, long index) {
        return (byte)_IMAGE_VXD_HEADER.e32_worder$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_worder$set(MemorySegment seg, long index, byte x) {
        _IMAGE_VXD_HEADER.e32_worder$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_level$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_level"));
    public static VarHandle e32_level$VH() {
        return _IMAGE_VXD_HEADER.e32_level$VH;
    }
    public static int e32_level$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_level$VH.get(seg);
    }
    public static void e32_level$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_level$VH.set(seg, x);
    }
    public static int e32_level$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_level$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_level$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_level$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_cpu$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_cpu"));
    public static VarHandle e32_cpu$VH() {
        return _IMAGE_VXD_HEADER.e32_cpu$VH;
    }
    public static short e32_cpu$get(MemorySegment seg) {
        return (short)_IMAGE_VXD_HEADER.e32_cpu$VH.get(seg);
    }
    public static void e32_cpu$set( MemorySegment seg, short x) {
        _IMAGE_VXD_HEADER.e32_cpu$VH.set(seg, x);
    }
    public static short e32_cpu$get(MemorySegment seg, long index) {
        return (short)_IMAGE_VXD_HEADER.e32_cpu$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_cpu$set(MemorySegment seg, long index, short x) {
        _IMAGE_VXD_HEADER.e32_cpu$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_os$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_os"));
    public static VarHandle e32_os$VH() {
        return _IMAGE_VXD_HEADER.e32_os$VH;
    }
    public static short e32_os$get(MemorySegment seg) {
        return (short)_IMAGE_VXD_HEADER.e32_os$VH.get(seg);
    }
    public static void e32_os$set( MemorySegment seg, short x) {
        _IMAGE_VXD_HEADER.e32_os$VH.set(seg, x);
    }
    public static short e32_os$get(MemorySegment seg, long index) {
        return (short)_IMAGE_VXD_HEADER.e32_os$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_os$set(MemorySegment seg, long index, short x) {
        _IMAGE_VXD_HEADER.e32_os$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_ver$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_ver"));
    public static VarHandle e32_ver$VH() {
        return _IMAGE_VXD_HEADER.e32_ver$VH;
    }
    public static int e32_ver$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_ver$VH.get(seg);
    }
    public static void e32_ver$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_ver$VH.set(seg, x);
    }
    public static int e32_ver$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_ver$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_ver$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_ver$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_mflags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_mflags"));
    public static VarHandle e32_mflags$VH() {
        return _IMAGE_VXD_HEADER.e32_mflags$VH;
    }
    public static int e32_mflags$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_mflags$VH.get(seg);
    }
    public static void e32_mflags$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_mflags$VH.set(seg, x);
    }
    public static int e32_mflags$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_mflags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_mflags$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_mflags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_mpages$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_mpages"));
    public static VarHandle e32_mpages$VH() {
        return _IMAGE_VXD_HEADER.e32_mpages$VH;
    }
    public static int e32_mpages$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_mpages$VH.get(seg);
    }
    public static void e32_mpages$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_mpages$VH.set(seg, x);
    }
    public static int e32_mpages$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_mpages$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_mpages$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_mpages$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_startobj$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_startobj"));
    public static VarHandle e32_startobj$VH() {
        return _IMAGE_VXD_HEADER.e32_startobj$VH;
    }
    public static int e32_startobj$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_startobj$VH.get(seg);
    }
    public static void e32_startobj$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_startobj$VH.set(seg, x);
    }
    public static int e32_startobj$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_startobj$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_startobj$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_startobj$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_eip$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_eip"));
    public static VarHandle e32_eip$VH() {
        return _IMAGE_VXD_HEADER.e32_eip$VH;
    }
    public static int e32_eip$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_eip$VH.get(seg);
    }
    public static void e32_eip$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_eip$VH.set(seg, x);
    }
    public static int e32_eip$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_eip$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_eip$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_eip$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_stackobj$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_stackobj"));
    public static VarHandle e32_stackobj$VH() {
        return _IMAGE_VXD_HEADER.e32_stackobj$VH;
    }
    public static int e32_stackobj$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_stackobj$VH.get(seg);
    }
    public static void e32_stackobj$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_stackobj$VH.set(seg, x);
    }
    public static int e32_stackobj$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_stackobj$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_stackobj$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_stackobj$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_esp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_esp"));
    public static VarHandle e32_esp$VH() {
        return _IMAGE_VXD_HEADER.e32_esp$VH;
    }
    public static int e32_esp$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_esp$VH.get(seg);
    }
    public static void e32_esp$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_esp$VH.set(seg, x);
    }
    public static int e32_esp$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_esp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_esp$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_esp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_pagesize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_pagesize"));
    public static VarHandle e32_pagesize$VH() {
        return _IMAGE_VXD_HEADER.e32_pagesize$VH;
    }
    public static int e32_pagesize$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_pagesize$VH.get(seg);
    }
    public static void e32_pagesize$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_pagesize$VH.set(seg, x);
    }
    public static int e32_pagesize$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_pagesize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_pagesize$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_pagesize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_lastpagesize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_lastpagesize"));
    public static VarHandle e32_lastpagesize$VH() {
        return _IMAGE_VXD_HEADER.e32_lastpagesize$VH;
    }
    public static int e32_lastpagesize$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_lastpagesize$VH.get(seg);
    }
    public static void e32_lastpagesize$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_lastpagesize$VH.set(seg, x);
    }
    public static int e32_lastpagesize$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_lastpagesize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_lastpagesize$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_lastpagesize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_fixupsize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_fixupsize"));
    public static VarHandle e32_fixupsize$VH() {
        return _IMAGE_VXD_HEADER.e32_fixupsize$VH;
    }
    public static int e32_fixupsize$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_fixupsize$VH.get(seg);
    }
    public static void e32_fixupsize$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_fixupsize$VH.set(seg, x);
    }
    public static int e32_fixupsize$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_fixupsize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_fixupsize$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_fixupsize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_fixupsum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_fixupsum"));
    public static VarHandle e32_fixupsum$VH() {
        return _IMAGE_VXD_HEADER.e32_fixupsum$VH;
    }
    public static int e32_fixupsum$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_fixupsum$VH.get(seg);
    }
    public static void e32_fixupsum$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_fixupsum$VH.set(seg, x);
    }
    public static int e32_fixupsum$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_fixupsum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_fixupsum$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_fixupsum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_ldrsize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_ldrsize"));
    public static VarHandle e32_ldrsize$VH() {
        return _IMAGE_VXD_HEADER.e32_ldrsize$VH;
    }
    public static int e32_ldrsize$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_ldrsize$VH.get(seg);
    }
    public static void e32_ldrsize$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_ldrsize$VH.set(seg, x);
    }
    public static int e32_ldrsize$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_ldrsize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_ldrsize$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_ldrsize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_ldrsum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_ldrsum"));
    public static VarHandle e32_ldrsum$VH() {
        return _IMAGE_VXD_HEADER.e32_ldrsum$VH;
    }
    public static int e32_ldrsum$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_ldrsum$VH.get(seg);
    }
    public static void e32_ldrsum$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_ldrsum$VH.set(seg, x);
    }
    public static int e32_ldrsum$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_ldrsum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_ldrsum$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_ldrsum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_objtab$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_objtab"));
    public static VarHandle e32_objtab$VH() {
        return _IMAGE_VXD_HEADER.e32_objtab$VH;
    }
    public static int e32_objtab$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_objtab$VH.get(seg);
    }
    public static void e32_objtab$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_objtab$VH.set(seg, x);
    }
    public static int e32_objtab$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_objtab$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_objtab$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_objtab$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_objcnt$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_objcnt"));
    public static VarHandle e32_objcnt$VH() {
        return _IMAGE_VXD_HEADER.e32_objcnt$VH;
    }
    public static int e32_objcnt$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_objcnt$VH.get(seg);
    }
    public static void e32_objcnt$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_objcnt$VH.set(seg, x);
    }
    public static int e32_objcnt$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_objcnt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_objcnt$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_objcnt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_objmap$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_objmap"));
    public static VarHandle e32_objmap$VH() {
        return _IMAGE_VXD_HEADER.e32_objmap$VH;
    }
    public static int e32_objmap$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_objmap$VH.get(seg);
    }
    public static void e32_objmap$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_objmap$VH.set(seg, x);
    }
    public static int e32_objmap$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_objmap$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_objmap$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_objmap$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_itermap$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_itermap"));
    public static VarHandle e32_itermap$VH() {
        return _IMAGE_VXD_HEADER.e32_itermap$VH;
    }
    public static int e32_itermap$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_itermap$VH.get(seg);
    }
    public static void e32_itermap$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_itermap$VH.set(seg, x);
    }
    public static int e32_itermap$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_itermap$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_itermap$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_itermap$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_rsrctab$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_rsrctab"));
    public static VarHandle e32_rsrctab$VH() {
        return _IMAGE_VXD_HEADER.e32_rsrctab$VH;
    }
    public static int e32_rsrctab$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_rsrctab$VH.get(seg);
    }
    public static void e32_rsrctab$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_rsrctab$VH.set(seg, x);
    }
    public static int e32_rsrctab$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_rsrctab$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_rsrctab$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_rsrctab$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_rsrccnt$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_rsrccnt"));
    public static VarHandle e32_rsrccnt$VH() {
        return _IMAGE_VXD_HEADER.e32_rsrccnt$VH;
    }
    public static int e32_rsrccnt$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_rsrccnt$VH.get(seg);
    }
    public static void e32_rsrccnt$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_rsrccnt$VH.set(seg, x);
    }
    public static int e32_rsrccnt$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_rsrccnt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_rsrccnt$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_rsrccnt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_restab$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_restab"));
    public static VarHandle e32_restab$VH() {
        return _IMAGE_VXD_HEADER.e32_restab$VH;
    }
    public static int e32_restab$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_restab$VH.get(seg);
    }
    public static void e32_restab$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_restab$VH.set(seg, x);
    }
    public static int e32_restab$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_restab$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_restab$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_restab$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_enttab$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_enttab"));
    public static VarHandle e32_enttab$VH() {
        return _IMAGE_VXD_HEADER.e32_enttab$VH;
    }
    public static int e32_enttab$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_enttab$VH.get(seg);
    }
    public static void e32_enttab$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_enttab$VH.set(seg, x);
    }
    public static int e32_enttab$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_enttab$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_enttab$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_enttab$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_dirtab$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_dirtab"));
    public static VarHandle e32_dirtab$VH() {
        return _IMAGE_VXD_HEADER.e32_dirtab$VH;
    }
    public static int e32_dirtab$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_dirtab$VH.get(seg);
    }
    public static void e32_dirtab$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_dirtab$VH.set(seg, x);
    }
    public static int e32_dirtab$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_dirtab$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_dirtab$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_dirtab$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_dircnt$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_dircnt"));
    public static VarHandle e32_dircnt$VH() {
        return _IMAGE_VXD_HEADER.e32_dircnt$VH;
    }
    public static int e32_dircnt$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_dircnt$VH.get(seg);
    }
    public static void e32_dircnt$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_dircnt$VH.set(seg, x);
    }
    public static int e32_dircnt$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_dircnt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_dircnt$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_dircnt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_fpagetab$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_fpagetab"));
    public static VarHandle e32_fpagetab$VH() {
        return _IMAGE_VXD_HEADER.e32_fpagetab$VH;
    }
    public static int e32_fpagetab$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_fpagetab$VH.get(seg);
    }
    public static void e32_fpagetab$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_fpagetab$VH.set(seg, x);
    }
    public static int e32_fpagetab$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_fpagetab$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_fpagetab$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_fpagetab$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_frectab$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_frectab"));
    public static VarHandle e32_frectab$VH() {
        return _IMAGE_VXD_HEADER.e32_frectab$VH;
    }
    public static int e32_frectab$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_frectab$VH.get(seg);
    }
    public static void e32_frectab$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_frectab$VH.set(seg, x);
    }
    public static int e32_frectab$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_frectab$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_frectab$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_frectab$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_impmod$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_impmod"));
    public static VarHandle e32_impmod$VH() {
        return _IMAGE_VXD_HEADER.e32_impmod$VH;
    }
    public static int e32_impmod$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_impmod$VH.get(seg);
    }
    public static void e32_impmod$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_impmod$VH.set(seg, x);
    }
    public static int e32_impmod$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_impmod$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_impmod$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_impmod$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_impmodcnt$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_impmodcnt"));
    public static VarHandle e32_impmodcnt$VH() {
        return _IMAGE_VXD_HEADER.e32_impmodcnt$VH;
    }
    public static int e32_impmodcnt$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_impmodcnt$VH.get(seg);
    }
    public static void e32_impmodcnt$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_impmodcnt$VH.set(seg, x);
    }
    public static int e32_impmodcnt$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_impmodcnt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_impmodcnt$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_impmodcnt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_impproc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_impproc"));
    public static VarHandle e32_impproc$VH() {
        return _IMAGE_VXD_HEADER.e32_impproc$VH;
    }
    public static int e32_impproc$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_impproc$VH.get(seg);
    }
    public static void e32_impproc$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_impproc$VH.set(seg, x);
    }
    public static int e32_impproc$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_impproc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_impproc$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_impproc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_pagesum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_pagesum"));
    public static VarHandle e32_pagesum$VH() {
        return _IMAGE_VXD_HEADER.e32_pagesum$VH;
    }
    public static int e32_pagesum$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_pagesum$VH.get(seg);
    }
    public static void e32_pagesum$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_pagesum$VH.set(seg, x);
    }
    public static int e32_pagesum$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_pagesum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_pagesum$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_pagesum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_datapage$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_datapage"));
    public static VarHandle e32_datapage$VH() {
        return _IMAGE_VXD_HEADER.e32_datapage$VH;
    }
    public static int e32_datapage$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_datapage$VH.get(seg);
    }
    public static void e32_datapage$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_datapage$VH.set(seg, x);
    }
    public static int e32_datapage$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_datapage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_datapage$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_datapage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_preload$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_preload"));
    public static VarHandle e32_preload$VH() {
        return _IMAGE_VXD_HEADER.e32_preload$VH;
    }
    public static int e32_preload$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_preload$VH.get(seg);
    }
    public static void e32_preload$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_preload$VH.set(seg, x);
    }
    public static int e32_preload$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_preload$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_preload$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_preload$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_nrestab$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_nrestab"));
    public static VarHandle e32_nrestab$VH() {
        return _IMAGE_VXD_HEADER.e32_nrestab$VH;
    }
    public static int e32_nrestab$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_nrestab$VH.get(seg);
    }
    public static void e32_nrestab$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_nrestab$VH.set(seg, x);
    }
    public static int e32_nrestab$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_nrestab$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_nrestab$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_nrestab$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_cbnrestab$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_cbnrestab"));
    public static VarHandle e32_cbnrestab$VH() {
        return _IMAGE_VXD_HEADER.e32_cbnrestab$VH;
    }
    public static int e32_cbnrestab$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_cbnrestab$VH.get(seg);
    }
    public static void e32_cbnrestab$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_cbnrestab$VH.set(seg, x);
    }
    public static int e32_cbnrestab$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_cbnrestab$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_cbnrestab$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_cbnrestab$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_nressum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_nressum"));
    public static VarHandle e32_nressum$VH() {
        return _IMAGE_VXD_HEADER.e32_nressum$VH;
    }
    public static int e32_nressum$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_nressum$VH.get(seg);
    }
    public static void e32_nressum$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_nressum$VH.set(seg, x);
    }
    public static int e32_nressum$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_nressum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_nressum$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_nressum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_autodata$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_autodata"));
    public static VarHandle e32_autodata$VH() {
        return _IMAGE_VXD_HEADER.e32_autodata$VH;
    }
    public static int e32_autodata$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_autodata$VH.get(seg);
    }
    public static void e32_autodata$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_autodata$VH.set(seg, x);
    }
    public static int e32_autodata$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_autodata$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_autodata$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_autodata$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_debuginfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_debuginfo"));
    public static VarHandle e32_debuginfo$VH() {
        return _IMAGE_VXD_HEADER.e32_debuginfo$VH;
    }
    public static int e32_debuginfo$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_debuginfo$VH.get(seg);
    }
    public static void e32_debuginfo$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_debuginfo$VH.set(seg, x);
    }
    public static int e32_debuginfo$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_debuginfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_debuginfo$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_debuginfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_debuglen$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_debuglen"));
    public static VarHandle e32_debuglen$VH() {
        return _IMAGE_VXD_HEADER.e32_debuglen$VH;
    }
    public static int e32_debuglen$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_debuglen$VH.get(seg);
    }
    public static void e32_debuglen$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_debuglen$VH.set(seg, x);
    }
    public static int e32_debuglen$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_debuglen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_debuglen$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_debuglen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_instpreload$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_instpreload"));
    public static VarHandle e32_instpreload$VH() {
        return _IMAGE_VXD_HEADER.e32_instpreload$VH;
    }
    public static int e32_instpreload$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_instpreload$VH.get(seg);
    }
    public static void e32_instpreload$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_instpreload$VH.set(seg, x);
    }
    public static int e32_instpreload$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_instpreload$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_instpreload$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_instpreload$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_instdemand$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_instdemand"));
    public static VarHandle e32_instdemand$VH() {
        return _IMAGE_VXD_HEADER.e32_instdemand$VH;
    }
    public static int e32_instdemand$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_instdemand$VH.get(seg);
    }
    public static void e32_instdemand$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_instdemand$VH.set(seg, x);
    }
    public static int e32_instdemand$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_instdemand$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_instdemand$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_instdemand$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_heapsize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_heapsize"));
    public static VarHandle e32_heapsize$VH() {
        return _IMAGE_VXD_HEADER.e32_heapsize$VH;
    }
    public static int e32_heapsize$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_heapsize$VH.get(seg);
    }
    public static void e32_heapsize$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_heapsize$VH.set(seg, x);
    }
    public static int e32_heapsize$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_heapsize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_heapsize$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_heapsize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment e32_res3$slice(MemorySegment seg) {
        return seg.asSlice(172, 12);
    }
    static final VarHandle e32_winresoff$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_winresoff"));
    public static VarHandle e32_winresoff$VH() {
        return _IMAGE_VXD_HEADER.e32_winresoff$VH;
    }
    public static int e32_winresoff$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_winresoff$VH.get(seg);
    }
    public static void e32_winresoff$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_winresoff$VH.set(seg, x);
    }
    public static int e32_winresoff$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_winresoff$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_winresoff$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_winresoff$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_winreslen$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_winreslen"));
    public static VarHandle e32_winreslen$VH() {
        return _IMAGE_VXD_HEADER.e32_winreslen$VH;
    }
    public static int e32_winreslen$get(MemorySegment seg) {
        return (int)_IMAGE_VXD_HEADER.e32_winreslen$VH.get(seg);
    }
    public static void e32_winreslen$set( MemorySegment seg, int x) {
        _IMAGE_VXD_HEADER.e32_winreslen$VH.set(seg, x);
    }
    public static int e32_winreslen$get(MemorySegment seg, long index) {
        return (int)_IMAGE_VXD_HEADER.e32_winreslen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_winreslen$set(MemorySegment seg, long index, int x) {
        _IMAGE_VXD_HEADER.e32_winreslen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_devid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_devid"));
    public static VarHandle e32_devid$VH() {
        return _IMAGE_VXD_HEADER.e32_devid$VH;
    }
    public static short e32_devid$get(MemorySegment seg) {
        return (short)_IMAGE_VXD_HEADER.e32_devid$VH.get(seg);
    }
    public static void e32_devid$set( MemorySegment seg, short x) {
        _IMAGE_VXD_HEADER.e32_devid$VH.set(seg, x);
    }
    public static short e32_devid$get(MemorySegment seg, long index) {
        return (short)_IMAGE_VXD_HEADER.e32_devid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_devid$set(MemorySegment seg, long index, short x) {
        _IMAGE_VXD_HEADER.e32_devid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e32_ddkver$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e32_ddkver"));
    public static VarHandle e32_ddkver$VH() {
        return _IMAGE_VXD_HEADER.e32_ddkver$VH;
    }
    public static short e32_ddkver$get(MemorySegment seg) {
        return (short)_IMAGE_VXD_HEADER.e32_ddkver$VH.get(seg);
    }
    public static void e32_ddkver$set( MemorySegment seg, short x) {
        _IMAGE_VXD_HEADER.e32_ddkver$VH.set(seg, x);
    }
    public static short e32_ddkver$get(MemorySegment seg, long index) {
        return (short)_IMAGE_VXD_HEADER.e32_ddkver$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e32_ddkver$set(MemorySegment seg, long index, short x) {
        _IMAGE_VXD_HEADER.e32_ddkver$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


