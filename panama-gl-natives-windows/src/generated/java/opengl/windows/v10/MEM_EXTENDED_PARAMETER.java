// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class MEM_EXTENDED_PARAMETER {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.paddingLayout(8).withName("Type"),
                MemoryLayout.paddingLayout(56).withName("Reserved")
            )
        ).withName("$anon$0"),
        MemoryLayout.unionLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("ULong64"),
            Constants$root.C_POINTER$LAYOUT.withName("Pointer"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("Size"),
            Constants$root.C_POINTER$LAYOUT.withName("Handle"),
            Constants$root.C_LONG$LAYOUT.withName("ULong")
        ).withName("$anon$1")
    ).withName("MEM_EXTENDED_PARAMETER");
    public static MemoryLayout $LAYOUT() {
        return MEM_EXTENDED_PARAMETER.$struct$LAYOUT;
    }
    static final VarHandle ULong64$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$1"), MemoryLayout.PathElement.groupElement("ULong64"));
    public static VarHandle ULong64$VH() {
        return MEM_EXTENDED_PARAMETER.ULong64$VH;
    }
    public static long ULong64$get(MemorySegment seg) {
        return (long)MEM_EXTENDED_PARAMETER.ULong64$VH.get(seg);
    }
    public static void ULong64$set( MemorySegment seg, long x) {
        MEM_EXTENDED_PARAMETER.ULong64$VH.set(seg, x);
    }
    public static long ULong64$get(MemorySegment seg, long index) {
        return (long)MEM_EXTENDED_PARAMETER.ULong64$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ULong64$set(MemorySegment seg, long index, long x) {
        MEM_EXTENDED_PARAMETER.ULong64$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Pointer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$1"), MemoryLayout.PathElement.groupElement("Pointer"));
    public static VarHandle Pointer$VH() {
        return MEM_EXTENDED_PARAMETER.Pointer$VH;
    }
    public static MemoryAddress Pointer$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)MEM_EXTENDED_PARAMETER.Pointer$VH.get(seg);
    }
    public static void Pointer$set( MemorySegment seg, MemoryAddress x) {
        MEM_EXTENDED_PARAMETER.Pointer$VH.set(seg, x);
    }
    public static MemoryAddress Pointer$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)MEM_EXTENDED_PARAMETER.Pointer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Pointer$set(MemorySegment seg, long index, MemoryAddress x) {
        MEM_EXTENDED_PARAMETER.Pointer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$1"), MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return MEM_EXTENDED_PARAMETER.Size$VH;
    }
    public static long Size$get(MemorySegment seg) {
        return (long)MEM_EXTENDED_PARAMETER.Size$VH.get(seg);
    }
    public static void Size$set( MemorySegment seg, long x) {
        MEM_EXTENDED_PARAMETER.Size$VH.set(seg, x);
    }
    public static long Size$get(MemorySegment seg, long index) {
        return (long)MEM_EXTENDED_PARAMETER.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, long x) {
        MEM_EXTENDED_PARAMETER.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Handle$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$1"), MemoryLayout.PathElement.groupElement("Handle"));
    public static VarHandle Handle$VH() {
        return MEM_EXTENDED_PARAMETER.Handle$VH;
    }
    public static MemoryAddress Handle$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)MEM_EXTENDED_PARAMETER.Handle$VH.get(seg);
    }
    public static void Handle$set( MemorySegment seg, MemoryAddress x) {
        MEM_EXTENDED_PARAMETER.Handle$VH.set(seg, x);
    }
    public static MemoryAddress Handle$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)MEM_EXTENDED_PARAMETER.Handle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Handle$set(MemorySegment seg, long index, MemoryAddress x) {
        MEM_EXTENDED_PARAMETER.Handle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ULong$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$1"), MemoryLayout.PathElement.groupElement("ULong"));
    public static VarHandle ULong$VH() {
        return MEM_EXTENDED_PARAMETER.ULong$VH;
    }
    public static int ULong$get(MemorySegment seg) {
        return (int)MEM_EXTENDED_PARAMETER.ULong$VH.get(seg);
    }
    public static void ULong$set( MemorySegment seg, int x) {
        MEM_EXTENDED_PARAMETER.ULong$VH.set(seg, x);
    }
    public static int ULong$get(MemorySegment seg, long index) {
        return (int)MEM_EXTENDED_PARAMETER.ULong$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ULong$set(MemorySegment seg, long index, int x) {
        MEM_EXTENDED_PARAMETER.ULong$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


