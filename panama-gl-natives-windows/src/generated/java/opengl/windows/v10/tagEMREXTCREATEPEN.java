// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class tagEMREXTCREATEPEN {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("iType"),
            Constants$root.C_LONG$LAYOUT.withName("nSize")
        ).withName("emr"),
        Constants$root.C_LONG$LAYOUT.withName("ihPen"),
        Constants$root.C_LONG$LAYOUT.withName("offBmi"),
        Constants$root.C_LONG$LAYOUT.withName("cbBmi"),
        Constants$root.C_LONG$LAYOUT.withName("offBits"),
        Constants$root.C_LONG$LAYOUT.withName("cbBits"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("elpPenStyle"),
            Constants$root.C_LONG$LAYOUT.withName("elpWidth"),
            Constants$root.C_LONG$LAYOUT.withName("elpBrushStyle"),
            Constants$root.C_LONG$LAYOUT.withName("elpColor"),
            Constants$root.C_LONG$LAYOUT.withName("elpHatch"),
            Constants$root.C_LONG$LAYOUT.withName("elpNumEntries"),
            MemoryLayout.sequenceLayout(1, Constants$root.C_LONG$LAYOUT).withName("elpStyleEntry")
        ).withName("elp")
    ).withName("tagEMREXTCREATEPEN");
    public static MemoryLayout $LAYOUT() {
        return tagEMREXTCREATEPEN.$struct$LAYOUT;
    }
    public static MemorySegment emr$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    static final VarHandle ihPen$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ihPen"));
    public static VarHandle ihPen$VH() {
        return tagEMREXTCREATEPEN.ihPen$VH;
    }
    public static int ihPen$get(MemorySegment seg) {
        return (int)tagEMREXTCREATEPEN.ihPen$VH.get(seg);
    }
    public static void ihPen$set( MemorySegment seg, int x) {
        tagEMREXTCREATEPEN.ihPen$VH.set(seg, x);
    }
    public static int ihPen$get(MemorySegment seg, long index) {
        return (int)tagEMREXTCREATEPEN.ihPen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ihPen$set(MemorySegment seg, long index, int x) {
        tagEMREXTCREATEPEN.ihPen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle offBmi$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("offBmi"));
    public static VarHandle offBmi$VH() {
        return tagEMREXTCREATEPEN.offBmi$VH;
    }
    public static int offBmi$get(MemorySegment seg) {
        return (int)tagEMREXTCREATEPEN.offBmi$VH.get(seg);
    }
    public static void offBmi$set( MemorySegment seg, int x) {
        tagEMREXTCREATEPEN.offBmi$VH.set(seg, x);
    }
    public static int offBmi$get(MemorySegment seg, long index) {
        return (int)tagEMREXTCREATEPEN.offBmi$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void offBmi$set(MemorySegment seg, long index, int x) {
        tagEMREXTCREATEPEN.offBmi$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbBmi$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbBmi"));
    public static VarHandle cbBmi$VH() {
        return tagEMREXTCREATEPEN.cbBmi$VH;
    }
    public static int cbBmi$get(MemorySegment seg) {
        return (int)tagEMREXTCREATEPEN.cbBmi$VH.get(seg);
    }
    public static void cbBmi$set( MemorySegment seg, int x) {
        tagEMREXTCREATEPEN.cbBmi$VH.set(seg, x);
    }
    public static int cbBmi$get(MemorySegment seg, long index) {
        return (int)tagEMREXTCREATEPEN.cbBmi$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbBmi$set(MemorySegment seg, long index, int x) {
        tagEMREXTCREATEPEN.cbBmi$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle offBits$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("offBits"));
    public static VarHandle offBits$VH() {
        return tagEMREXTCREATEPEN.offBits$VH;
    }
    public static int offBits$get(MemorySegment seg) {
        return (int)tagEMREXTCREATEPEN.offBits$VH.get(seg);
    }
    public static void offBits$set( MemorySegment seg, int x) {
        tagEMREXTCREATEPEN.offBits$VH.set(seg, x);
    }
    public static int offBits$get(MemorySegment seg, long index) {
        return (int)tagEMREXTCREATEPEN.offBits$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void offBits$set(MemorySegment seg, long index, int x) {
        tagEMREXTCREATEPEN.offBits$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbBits$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbBits"));
    public static VarHandle cbBits$VH() {
        return tagEMREXTCREATEPEN.cbBits$VH;
    }
    public static int cbBits$get(MemorySegment seg) {
        return (int)tagEMREXTCREATEPEN.cbBits$VH.get(seg);
    }
    public static void cbBits$set( MemorySegment seg, int x) {
        tagEMREXTCREATEPEN.cbBits$VH.set(seg, x);
    }
    public static int cbBits$get(MemorySegment seg, long index) {
        return (int)tagEMREXTCREATEPEN.cbBits$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbBits$set(MemorySegment seg, long index, int x) {
        tagEMREXTCREATEPEN.cbBits$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment elp$slice(MemorySegment seg) {
        return seg.asSlice(28, 28);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


