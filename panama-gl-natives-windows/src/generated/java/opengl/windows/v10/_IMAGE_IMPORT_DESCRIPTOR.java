// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _IMAGE_IMPORT_DESCRIPTOR {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.unionLayout(
            Constants$root.C_LONG$LAYOUT.withName("Characteristics"),
            Constants$root.C_LONG$LAYOUT.withName("OriginalFirstThunk")
        ).withName("$anon$0"),
        Constants$root.C_LONG$LAYOUT.withName("TimeDateStamp"),
        Constants$root.C_LONG$LAYOUT.withName("ForwarderChain"),
        Constants$root.C_LONG$LAYOUT.withName("Name"),
        Constants$root.C_LONG$LAYOUT.withName("FirstThunk")
    ).withName("_IMAGE_IMPORT_DESCRIPTOR");
    public static MemoryLayout $LAYOUT() {
        return _IMAGE_IMPORT_DESCRIPTOR.$struct$LAYOUT;
    }
    static final VarHandle Characteristics$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("Characteristics"));
    public static VarHandle Characteristics$VH() {
        return _IMAGE_IMPORT_DESCRIPTOR.Characteristics$VH;
    }
    public static int Characteristics$get(MemorySegment seg) {
        return (int)_IMAGE_IMPORT_DESCRIPTOR.Characteristics$VH.get(seg);
    }
    public static void Characteristics$set( MemorySegment seg, int x) {
        _IMAGE_IMPORT_DESCRIPTOR.Characteristics$VH.set(seg, x);
    }
    public static int Characteristics$get(MemorySegment seg, long index) {
        return (int)_IMAGE_IMPORT_DESCRIPTOR.Characteristics$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Characteristics$set(MemorySegment seg, long index, int x) {
        _IMAGE_IMPORT_DESCRIPTOR.Characteristics$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle OriginalFirstThunk$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("OriginalFirstThunk"));
    public static VarHandle OriginalFirstThunk$VH() {
        return _IMAGE_IMPORT_DESCRIPTOR.OriginalFirstThunk$VH;
    }
    public static int OriginalFirstThunk$get(MemorySegment seg) {
        return (int)_IMAGE_IMPORT_DESCRIPTOR.OriginalFirstThunk$VH.get(seg);
    }
    public static void OriginalFirstThunk$set( MemorySegment seg, int x) {
        _IMAGE_IMPORT_DESCRIPTOR.OriginalFirstThunk$VH.set(seg, x);
    }
    public static int OriginalFirstThunk$get(MemorySegment seg, long index) {
        return (int)_IMAGE_IMPORT_DESCRIPTOR.OriginalFirstThunk$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OriginalFirstThunk$set(MemorySegment seg, long index, int x) {
        _IMAGE_IMPORT_DESCRIPTOR.OriginalFirstThunk$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle TimeDateStamp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    public static VarHandle TimeDateStamp$VH() {
        return _IMAGE_IMPORT_DESCRIPTOR.TimeDateStamp$VH;
    }
    public static int TimeDateStamp$get(MemorySegment seg) {
        return (int)_IMAGE_IMPORT_DESCRIPTOR.TimeDateStamp$VH.get(seg);
    }
    public static void TimeDateStamp$set( MemorySegment seg, int x) {
        _IMAGE_IMPORT_DESCRIPTOR.TimeDateStamp$VH.set(seg, x);
    }
    public static int TimeDateStamp$get(MemorySegment seg, long index) {
        return (int)_IMAGE_IMPORT_DESCRIPTOR.TimeDateStamp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TimeDateStamp$set(MemorySegment seg, long index, int x) {
        _IMAGE_IMPORT_DESCRIPTOR.TimeDateStamp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ForwarderChain$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ForwarderChain"));
    public static VarHandle ForwarderChain$VH() {
        return _IMAGE_IMPORT_DESCRIPTOR.ForwarderChain$VH;
    }
    public static int ForwarderChain$get(MemorySegment seg) {
        return (int)_IMAGE_IMPORT_DESCRIPTOR.ForwarderChain$VH.get(seg);
    }
    public static void ForwarderChain$set( MemorySegment seg, int x) {
        _IMAGE_IMPORT_DESCRIPTOR.ForwarderChain$VH.set(seg, x);
    }
    public static int ForwarderChain$get(MemorySegment seg, long index) {
        return (int)_IMAGE_IMPORT_DESCRIPTOR.ForwarderChain$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ForwarderChain$set(MemorySegment seg, long index, int x) {
        _IMAGE_IMPORT_DESCRIPTOR.ForwarderChain$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Name"));
    public static VarHandle Name$VH() {
        return _IMAGE_IMPORT_DESCRIPTOR.Name$VH;
    }
    public static int Name$get(MemorySegment seg) {
        return (int)_IMAGE_IMPORT_DESCRIPTOR.Name$VH.get(seg);
    }
    public static void Name$set( MemorySegment seg, int x) {
        _IMAGE_IMPORT_DESCRIPTOR.Name$VH.set(seg, x);
    }
    public static int Name$get(MemorySegment seg, long index) {
        return (int)_IMAGE_IMPORT_DESCRIPTOR.Name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Name$set(MemorySegment seg, long index, int x) {
        _IMAGE_IMPORT_DESCRIPTOR.Name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FirstThunk$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FirstThunk"));
    public static VarHandle FirstThunk$VH() {
        return _IMAGE_IMPORT_DESCRIPTOR.FirstThunk$VH;
    }
    public static int FirstThunk$get(MemorySegment seg) {
        return (int)_IMAGE_IMPORT_DESCRIPTOR.FirstThunk$VH.get(seg);
    }
    public static void FirstThunk$set( MemorySegment seg, int x) {
        _IMAGE_IMPORT_DESCRIPTOR.FirstThunk$VH.set(seg, x);
    }
    public static int FirstThunk$get(MemorySegment seg, long index) {
        return (int)_IMAGE_IMPORT_DESCRIPTOR.FirstThunk$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FirstThunk$set(MemorySegment seg, long index, int x) {
        _IMAGE_IMPORT_DESCRIPTOR.FirstThunk$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


