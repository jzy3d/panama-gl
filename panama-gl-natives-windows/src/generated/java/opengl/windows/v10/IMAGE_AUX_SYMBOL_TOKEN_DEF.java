// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class IMAGE_AUX_SYMBOL_TOKEN_DEF {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_CHAR$LAYOUT.withName("bAuxType"),
        Constants$root.C_CHAR$LAYOUT.withName("bReserved"),
        Constants$root.C_LONG$LAYOUT.withName("SymbolTableIndex"),
        MemoryLayout.sequenceLayout(12, Constants$root.C_CHAR$LAYOUT).withName("rgbReserved")
    ).withName("IMAGE_AUX_SYMBOL_TOKEN_DEF");
    public static MemoryLayout $LAYOUT() {
        return IMAGE_AUX_SYMBOL_TOKEN_DEF.$struct$LAYOUT;
    }
    static final VarHandle bAuxType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bAuxType"));
    public static VarHandle bAuxType$VH() {
        return IMAGE_AUX_SYMBOL_TOKEN_DEF.bAuxType$VH;
    }
    public static byte bAuxType$get(MemorySegment seg) {
        return (byte)IMAGE_AUX_SYMBOL_TOKEN_DEF.bAuxType$VH.get(seg);
    }
    public static void bAuxType$set( MemorySegment seg, byte x) {
        IMAGE_AUX_SYMBOL_TOKEN_DEF.bAuxType$VH.set(seg, x);
    }
    public static byte bAuxType$get(MemorySegment seg, long index) {
        return (byte)IMAGE_AUX_SYMBOL_TOKEN_DEF.bAuxType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bAuxType$set(MemorySegment seg, long index, byte x) {
        IMAGE_AUX_SYMBOL_TOKEN_DEF.bAuxType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bReserved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bReserved"));
    public static VarHandle bReserved$VH() {
        return IMAGE_AUX_SYMBOL_TOKEN_DEF.bReserved$VH;
    }
    public static byte bReserved$get(MemorySegment seg) {
        return (byte)IMAGE_AUX_SYMBOL_TOKEN_DEF.bReserved$VH.get(seg);
    }
    public static void bReserved$set( MemorySegment seg, byte x) {
        IMAGE_AUX_SYMBOL_TOKEN_DEF.bReserved$VH.set(seg, x);
    }
    public static byte bReserved$get(MemorySegment seg, long index) {
        return (byte)IMAGE_AUX_SYMBOL_TOKEN_DEF.bReserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bReserved$set(MemorySegment seg, long index, byte x) {
        IMAGE_AUX_SYMBOL_TOKEN_DEF.bReserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SymbolTableIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SymbolTableIndex"));
    public static VarHandle SymbolTableIndex$VH() {
        return IMAGE_AUX_SYMBOL_TOKEN_DEF.SymbolTableIndex$VH;
    }
    public static int SymbolTableIndex$get(MemorySegment seg) {
        return (int)IMAGE_AUX_SYMBOL_TOKEN_DEF.SymbolTableIndex$VH.get(seg);
    }
    public static void SymbolTableIndex$set( MemorySegment seg, int x) {
        IMAGE_AUX_SYMBOL_TOKEN_DEF.SymbolTableIndex$VH.set(seg, x);
    }
    public static int SymbolTableIndex$get(MemorySegment seg, long index) {
        return (int)IMAGE_AUX_SYMBOL_TOKEN_DEF.SymbolTableIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SymbolTableIndex$set(MemorySegment seg, long index, int x) {
        IMAGE_AUX_SYMBOL_TOKEN_DEF.SymbolTableIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment rgbReserved$slice(MemorySegment seg) {
        return seg.asSlice(6, 12);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


