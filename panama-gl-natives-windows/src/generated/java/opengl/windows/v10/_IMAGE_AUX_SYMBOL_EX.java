// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _IMAGE_AUX_SYMBOL_EX {

    static final  GroupLayout $union$LAYOUT = MemoryLayout.unionLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("WeakDefaultSymIndex"),
            Constants$root.C_LONG$LAYOUT.withName("WeakSearchType"),
            MemoryLayout.sequenceLayout(12, Constants$root.C_CHAR$LAYOUT).withName("rgbReserved")
        ).withName("Sym"),
        MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(20, Constants$root.C_CHAR$LAYOUT).withName("Name")
        ).withName("File"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("Length"),
            Constants$root.C_SHORT$LAYOUT.withName("NumberOfRelocations"),
            Constants$root.C_SHORT$LAYOUT.withName("NumberOfLinenumbers"),
            Constants$root.C_LONG$LAYOUT.withName("CheckSum"),
            Constants$root.C_SHORT$LAYOUT.withName("Number"),
            Constants$root.C_CHAR$LAYOUT.withName("Selection"),
            Constants$root.C_CHAR$LAYOUT.withName("bReserved"),
            Constants$root.C_SHORT$LAYOUT.withName("HighNumber"),
            MemoryLayout.sequenceLayout(2, Constants$root.C_CHAR$LAYOUT).withName("rgbReserved")
        ).withName("Section"),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("bAuxType"),
                Constants$root.C_CHAR$LAYOUT.withName("bReserved"),
                Constants$root.C_LONG$LAYOUT.withName("SymbolTableIndex"),
                MemoryLayout.sequenceLayout(12, Constants$root.C_CHAR$LAYOUT).withName("rgbReserved")
            ).withName("TokenDef"),
            MemoryLayout.sequenceLayout(2, Constants$root.C_CHAR$LAYOUT).withName("rgbReserved")
        ).withName("$anon$0"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("crc"),
            MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("rgbReserved")
        ).withName("CRC")
    ).withName("_IMAGE_AUX_SYMBOL_EX");
    public static MemoryLayout $LAYOUT() {
        return _IMAGE_AUX_SYMBOL_EX.$union$LAYOUT;
    }
    public static class Sym {

        static final  GroupLayout Sym$struct$LAYOUT = MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("WeakDefaultSymIndex"),
            Constants$root.C_LONG$LAYOUT.withName("WeakSearchType"),
            MemoryLayout.sequenceLayout(12, Constants$root.C_CHAR$LAYOUT).withName("rgbReserved")
        );
        public static MemoryLayout $LAYOUT() {
            return Sym.Sym$struct$LAYOUT;
        }
        static final VarHandle WeakDefaultSymIndex$VH = Sym$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("WeakDefaultSymIndex"));
        public static VarHandle WeakDefaultSymIndex$VH() {
            return Sym.WeakDefaultSymIndex$VH;
        }
        public static int WeakDefaultSymIndex$get(MemorySegment seg) {
            return (int)Sym.WeakDefaultSymIndex$VH.get(seg);
        }
        public static void WeakDefaultSymIndex$set( MemorySegment seg, int x) {
            Sym.WeakDefaultSymIndex$VH.set(seg, x);
        }
        public static int WeakDefaultSymIndex$get(MemorySegment seg, long index) {
            return (int)Sym.WeakDefaultSymIndex$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void WeakDefaultSymIndex$set(MemorySegment seg, long index, int x) {
            Sym.WeakDefaultSymIndex$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle WeakSearchType$VH = Sym$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("WeakSearchType"));
        public static VarHandle WeakSearchType$VH() {
            return Sym.WeakSearchType$VH;
        }
        public static int WeakSearchType$get(MemorySegment seg) {
            return (int)Sym.WeakSearchType$VH.get(seg);
        }
        public static void WeakSearchType$set( MemorySegment seg, int x) {
            Sym.WeakSearchType$VH.set(seg, x);
        }
        public static int WeakSearchType$get(MemorySegment seg, long index) {
            return (int)Sym.WeakSearchType$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void WeakSearchType$set(MemorySegment seg, long index, int x) {
            Sym.WeakSearchType$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment rgbReserved$slice(MemorySegment seg) {
            return seg.asSlice(8, 12);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment Sym$slice(MemorySegment seg) {
        return seg.asSlice(0, 20);
    }
    public static class File {

        static final  GroupLayout File$struct$LAYOUT = MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(20, Constants$root.C_CHAR$LAYOUT).withName("Name")
        );
        public static MemoryLayout $LAYOUT() {
            return File.File$struct$LAYOUT;
        }
        public static MemorySegment Name$slice(MemorySegment seg) {
            return seg.asSlice(0, 20);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment File$slice(MemorySegment seg) {
        return seg.asSlice(0, 20);
    }
    public static class Section {

        static final  GroupLayout Section$struct$LAYOUT = MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("Length"),
            Constants$root.C_SHORT$LAYOUT.withName("NumberOfRelocations"),
            Constants$root.C_SHORT$LAYOUT.withName("NumberOfLinenumbers"),
            Constants$root.C_LONG$LAYOUT.withName("CheckSum"),
            Constants$root.C_SHORT$LAYOUT.withName("Number"),
            Constants$root.C_CHAR$LAYOUT.withName("Selection"),
            Constants$root.C_CHAR$LAYOUT.withName("bReserved"),
            Constants$root.C_SHORT$LAYOUT.withName("HighNumber"),
            MemoryLayout.sequenceLayout(2, Constants$root.C_CHAR$LAYOUT).withName("rgbReserved")
        );
        public static MemoryLayout $LAYOUT() {
            return Section.Section$struct$LAYOUT;
        }
        static final VarHandle Length$VH = Section$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Length"));
        public static VarHandle Length$VH() {
            return Section.Length$VH;
        }
        public static int Length$get(MemorySegment seg) {
            return (int)Section.Length$VH.get(seg);
        }
        public static void Length$set( MemorySegment seg, int x) {
            Section.Length$VH.set(seg, x);
        }
        public static int Length$get(MemorySegment seg, long index) {
            return (int)Section.Length$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Length$set(MemorySegment seg, long index, int x) {
            Section.Length$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle NumberOfRelocations$VH = Section$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumberOfRelocations"));
        public static VarHandle NumberOfRelocations$VH() {
            return Section.NumberOfRelocations$VH;
        }
        public static short NumberOfRelocations$get(MemorySegment seg) {
            return (short)Section.NumberOfRelocations$VH.get(seg);
        }
        public static void NumberOfRelocations$set( MemorySegment seg, short x) {
            Section.NumberOfRelocations$VH.set(seg, x);
        }
        public static short NumberOfRelocations$get(MemorySegment seg, long index) {
            return (short)Section.NumberOfRelocations$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfRelocations$set(MemorySegment seg, long index, short x) {
            Section.NumberOfRelocations$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle NumberOfLinenumbers$VH = Section$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumberOfLinenumbers"));
        public static VarHandle NumberOfLinenumbers$VH() {
            return Section.NumberOfLinenumbers$VH;
        }
        public static short NumberOfLinenumbers$get(MemorySegment seg) {
            return (short)Section.NumberOfLinenumbers$VH.get(seg);
        }
        public static void NumberOfLinenumbers$set( MemorySegment seg, short x) {
            Section.NumberOfLinenumbers$VH.set(seg, x);
        }
        public static short NumberOfLinenumbers$get(MemorySegment seg, long index) {
            return (short)Section.NumberOfLinenumbers$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void NumberOfLinenumbers$set(MemorySegment seg, long index, short x) {
            Section.NumberOfLinenumbers$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle CheckSum$VH = Section$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CheckSum"));
        public static VarHandle CheckSum$VH() {
            return Section.CheckSum$VH;
        }
        public static int CheckSum$get(MemorySegment seg) {
            return (int)Section.CheckSum$VH.get(seg);
        }
        public static void CheckSum$set( MemorySegment seg, int x) {
            Section.CheckSum$VH.set(seg, x);
        }
        public static int CheckSum$get(MemorySegment seg, long index) {
            return (int)Section.CheckSum$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void CheckSum$set(MemorySegment seg, long index, int x) {
            Section.CheckSum$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle Number$VH = Section$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Number"));
        public static VarHandle Number$VH() {
            return Section.Number$VH;
        }
        public static short Number$get(MemorySegment seg) {
            return (short)Section.Number$VH.get(seg);
        }
        public static void Number$set( MemorySegment seg, short x) {
            Section.Number$VH.set(seg, x);
        }
        public static short Number$get(MemorySegment seg, long index) {
            return (short)Section.Number$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Number$set(MemorySegment seg, long index, short x) {
            Section.Number$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle Selection$VH = Section$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Selection"));
        public static VarHandle Selection$VH() {
            return Section.Selection$VH;
        }
        public static byte Selection$get(MemorySegment seg) {
            return (byte)Section.Selection$VH.get(seg);
        }
        public static void Selection$set( MemorySegment seg, byte x) {
            Section.Selection$VH.set(seg, x);
        }
        public static byte Selection$get(MemorySegment seg, long index) {
            return (byte)Section.Selection$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Selection$set(MemorySegment seg, long index, byte x) {
            Section.Selection$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle bReserved$VH = Section$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bReserved"));
        public static VarHandle bReserved$VH() {
            return Section.bReserved$VH;
        }
        public static byte bReserved$get(MemorySegment seg) {
            return (byte)Section.bReserved$VH.get(seg);
        }
        public static void bReserved$set( MemorySegment seg, byte x) {
            Section.bReserved$VH.set(seg, x);
        }
        public static byte bReserved$get(MemorySegment seg, long index) {
            return (byte)Section.bReserved$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void bReserved$set(MemorySegment seg, long index, byte x) {
            Section.bReserved$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle HighNumber$VH = Section$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("HighNumber"));
        public static VarHandle HighNumber$VH() {
            return Section.HighNumber$VH;
        }
        public static short HighNumber$get(MemorySegment seg) {
            return (short)Section.HighNumber$VH.get(seg);
        }
        public static void HighNumber$set( MemorySegment seg, short x) {
            Section.HighNumber$VH.set(seg, x);
        }
        public static short HighNumber$get(MemorySegment seg, long index) {
            return (short)Section.HighNumber$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void HighNumber$set(MemorySegment seg, long index, short x) {
            Section.HighNumber$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment rgbReserved$slice(MemorySegment seg) {
            return seg.asSlice(18, 2);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment Section$slice(MemorySegment seg) {
        return seg.asSlice(0, 20);
    }
    public static MemorySegment TokenDef$slice(MemorySegment seg) {
        return seg.asSlice(0, 18);
    }
    public static MemorySegment rgbReserved$slice(MemorySegment seg) {
        return seg.asSlice(18, 2);
    }
    public static class CRC {

        static final  GroupLayout CRC$struct$LAYOUT = MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("crc"),
            MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("rgbReserved")
        );
        public static MemoryLayout $LAYOUT() {
            return CRC.CRC$struct$LAYOUT;
        }
        static final VarHandle crc$VH = CRC$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("crc"));
        public static VarHandle crc$VH() {
            return CRC.crc$VH;
        }
        public static int crc$get(MemorySegment seg) {
            return (int)CRC.crc$VH.get(seg);
        }
        public static void crc$set( MemorySegment seg, int x) {
            CRC.crc$VH.set(seg, x);
        }
        public static int crc$get(MemorySegment seg, long index) {
            return (int)CRC.crc$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void crc$set(MemorySegment seg, long index, int x) {
            CRC.crc$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static MemorySegment rgbReserved$slice(MemorySegment seg) {
            return seg.asSlice(4, 16);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment CRC$slice(MemorySegment seg) {
        return seg.asSlice(0, 20);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


