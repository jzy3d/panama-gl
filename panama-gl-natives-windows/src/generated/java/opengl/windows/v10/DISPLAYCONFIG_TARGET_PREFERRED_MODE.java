// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class DISPLAYCONFIG_TARGET_PREFERRED_MODE {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("type"),
            Constants$root.C_LONG$LAYOUT.withName("size"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("adapterId"),
            Constants$root.C_LONG$LAYOUT.withName("id")
        ).withName("header"),
        Constants$root.C_LONG$LAYOUT.withName("width"),
        Constants$root.C_LONG$LAYOUT.withName("height"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("pixelRate"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG$LAYOUT.withName("Numerator"),
                    Constants$root.C_LONG$LAYOUT.withName("Denominator")
                ).withName("hSyncFreq"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG$LAYOUT.withName("Numerator"),
                    Constants$root.C_LONG$LAYOUT.withName("Denominator")
                ).withName("vSyncFreq"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG$LAYOUT.withName("cx"),
                    Constants$root.C_LONG$LAYOUT.withName("cy")
                ).withName("activeSize"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG$LAYOUT.withName("cx"),
                    Constants$root.C_LONG$LAYOUT.withName("cy")
                ).withName("totalSize"),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        MemoryLayout.structLayout(
                            MemoryLayout.paddingLayout(16).withName("videoStandard"),
                            MemoryLayout.paddingLayout(6).withName("vSyncFreqDivider"),
                            MemoryLayout.paddingLayout(10).withName("reserved")
                        )
                    ).withName("AdditionalSignalInfo"),
                    Constants$root.C_LONG$LAYOUT.withName("videoStandard")
                ).withName("$anon$0"),
                Constants$root.C_LONG$LAYOUT.withName("scanLineOrdering")
            ).withName("targetVideoSignalInfo")
        ).withName("targetMode")
    ).withName("DISPLAYCONFIG_TARGET_PREFERRED_MODE");
    public static MemoryLayout $LAYOUT() {
        return DISPLAYCONFIG_TARGET_PREFERRED_MODE.$struct$LAYOUT;
    }
    public static MemorySegment header$slice(MemorySegment seg) {
        return seg.asSlice(0, 20);
    }
    static final VarHandle width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("width"));
    public static VarHandle width$VH() {
        return DISPLAYCONFIG_TARGET_PREFERRED_MODE.width$VH;
    }
    public static int width$get(MemorySegment seg) {
        return (int)DISPLAYCONFIG_TARGET_PREFERRED_MODE.width$VH.get(seg);
    }
    public static void width$set( MemorySegment seg, int x) {
        DISPLAYCONFIG_TARGET_PREFERRED_MODE.width$VH.set(seg, x);
    }
    public static int width$get(MemorySegment seg, long index) {
        return (int)DISPLAYCONFIG_TARGET_PREFERRED_MODE.width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void width$set(MemorySegment seg, long index, int x) {
        DISPLAYCONFIG_TARGET_PREFERRED_MODE.width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("height"));
    public static VarHandle height$VH() {
        return DISPLAYCONFIG_TARGET_PREFERRED_MODE.height$VH;
    }
    public static int height$get(MemorySegment seg) {
        return (int)DISPLAYCONFIG_TARGET_PREFERRED_MODE.height$VH.get(seg);
    }
    public static void height$set( MemorySegment seg, int x) {
        DISPLAYCONFIG_TARGET_PREFERRED_MODE.height$VH.set(seg, x);
    }
    public static int height$get(MemorySegment seg, long index) {
        return (int)DISPLAYCONFIG_TARGET_PREFERRED_MODE.height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, int x) {
        DISPLAYCONFIG_TARGET_PREFERRED_MODE.height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment targetMode$slice(MemorySegment seg) {
        return seg.asSlice(32, 48);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


