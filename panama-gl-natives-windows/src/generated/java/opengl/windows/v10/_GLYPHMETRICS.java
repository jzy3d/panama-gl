// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GLYPHMETRICS {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("gmBlackBoxX"),
        Constants$root.C_LONG$LAYOUT.withName("gmBlackBoxY"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("x"),
            Constants$root.C_LONG$LAYOUT.withName("y")
        ).withName("gmptGlyphOrigin"),
        Constants$root.C_SHORT$LAYOUT.withName("gmCellIncX"),
        Constants$root.C_SHORT$LAYOUT.withName("gmCellIncY")
    ).withName("_GLYPHMETRICS");
    public static MemoryLayout $LAYOUT() {
        return _GLYPHMETRICS.$struct$LAYOUT;
    }
    static final VarHandle gmBlackBoxX$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("gmBlackBoxX"));
    public static VarHandle gmBlackBoxX$VH() {
        return _GLYPHMETRICS.gmBlackBoxX$VH;
    }
    public static int gmBlackBoxX$get(MemorySegment seg) {
        return (int)_GLYPHMETRICS.gmBlackBoxX$VH.get(seg);
    }
    public static void gmBlackBoxX$set( MemorySegment seg, int x) {
        _GLYPHMETRICS.gmBlackBoxX$VH.set(seg, x);
    }
    public static int gmBlackBoxX$get(MemorySegment seg, long index) {
        return (int)_GLYPHMETRICS.gmBlackBoxX$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void gmBlackBoxX$set(MemorySegment seg, long index, int x) {
        _GLYPHMETRICS.gmBlackBoxX$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle gmBlackBoxY$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("gmBlackBoxY"));
    public static VarHandle gmBlackBoxY$VH() {
        return _GLYPHMETRICS.gmBlackBoxY$VH;
    }
    public static int gmBlackBoxY$get(MemorySegment seg) {
        return (int)_GLYPHMETRICS.gmBlackBoxY$VH.get(seg);
    }
    public static void gmBlackBoxY$set( MemorySegment seg, int x) {
        _GLYPHMETRICS.gmBlackBoxY$VH.set(seg, x);
    }
    public static int gmBlackBoxY$get(MemorySegment seg, long index) {
        return (int)_GLYPHMETRICS.gmBlackBoxY$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void gmBlackBoxY$set(MemorySegment seg, long index, int x) {
        _GLYPHMETRICS.gmBlackBoxY$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment gmptGlyphOrigin$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    static final VarHandle gmCellIncX$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("gmCellIncX"));
    public static VarHandle gmCellIncX$VH() {
        return _GLYPHMETRICS.gmCellIncX$VH;
    }
    public static short gmCellIncX$get(MemorySegment seg) {
        return (short)_GLYPHMETRICS.gmCellIncX$VH.get(seg);
    }
    public static void gmCellIncX$set( MemorySegment seg, short x) {
        _GLYPHMETRICS.gmCellIncX$VH.set(seg, x);
    }
    public static short gmCellIncX$get(MemorySegment seg, long index) {
        return (short)_GLYPHMETRICS.gmCellIncX$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void gmCellIncX$set(MemorySegment seg, long index, short x) {
        _GLYPHMETRICS.gmCellIncX$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle gmCellIncY$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("gmCellIncY"));
    public static VarHandle gmCellIncY$VH() {
        return _GLYPHMETRICS.gmCellIncY$VH;
    }
    public static short gmCellIncY$get(MemorySegment seg) {
        return (short)_GLYPHMETRICS.gmCellIncY$VH.get(seg);
    }
    public static void gmCellIncY$set( MemorySegment seg, short x) {
        _GLYPHMETRICS.gmCellIncY$VH.set(seg, x);
    }
    public static short gmCellIncY$get(MemorySegment seg, long index) {
        return (short)_GLYPHMETRICS.gmCellIncY$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void gmCellIncY$set(MemorySegment seg, long index, short x) {
        _GLYPHMETRICS.gmCellIncY$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


