// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _ABCFLOAT {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_FLOAT$LAYOUT.withName("abcfA"),
        Constants$root.C_FLOAT$LAYOUT.withName("abcfB"),
        Constants$root.C_FLOAT$LAYOUT.withName("abcfC")
    ).withName("_ABCFLOAT");
    public static MemoryLayout $LAYOUT() {
        return _ABCFLOAT.$struct$LAYOUT;
    }
    static final VarHandle abcfA$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("abcfA"));
    public static VarHandle abcfA$VH() {
        return _ABCFLOAT.abcfA$VH;
    }
    public static float abcfA$get(MemorySegment seg) {
        return (float)_ABCFLOAT.abcfA$VH.get(seg);
    }
    public static void abcfA$set( MemorySegment seg, float x) {
        _ABCFLOAT.abcfA$VH.set(seg, x);
    }
    public static float abcfA$get(MemorySegment seg, long index) {
        return (float)_ABCFLOAT.abcfA$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void abcfA$set(MemorySegment seg, long index, float x) {
        _ABCFLOAT.abcfA$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle abcfB$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("abcfB"));
    public static VarHandle abcfB$VH() {
        return _ABCFLOAT.abcfB$VH;
    }
    public static float abcfB$get(MemorySegment seg) {
        return (float)_ABCFLOAT.abcfB$VH.get(seg);
    }
    public static void abcfB$set( MemorySegment seg, float x) {
        _ABCFLOAT.abcfB$VH.set(seg, x);
    }
    public static float abcfB$get(MemorySegment seg, long index) {
        return (float)_ABCFLOAT.abcfB$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void abcfB$set(MemorySegment seg, long index, float x) {
        _ABCFLOAT.abcfB$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle abcfC$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("abcfC"));
    public static VarHandle abcfC$VH() {
        return _ABCFLOAT.abcfC$VH;
    }
    public static float abcfC$get(MemorySegment seg) {
        return (float)_ABCFLOAT.abcfC$VH.get(seg);
    }
    public static void abcfC$set( MemorySegment seg, float x) {
        _ABCFLOAT.abcfC$VH.set(seg, x);
    }
    public static float abcfC$get(MemorySegment seg, long index) {
        return (float)_ABCFLOAT.abcfC$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void abcfC$set(MemorySegment seg, long index, float x) {
        _ABCFLOAT.abcfC$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


