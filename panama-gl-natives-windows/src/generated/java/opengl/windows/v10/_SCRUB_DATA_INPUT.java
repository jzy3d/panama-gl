// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _SCRUB_DATA_INPUT {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Size"),
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        Constants$root.C_LONG$LAYOUT.withName("MaximumIos"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_LONG$LAYOUT).withName("ObjectId"),
        MemoryLayout.sequenceLayout(25, Constants$root.C_LONG$LAYOUT).withName("Reserved"),
        MemoryLayout.sequenceLayout(816, Constants$root.C_CHAR$LAYOUT).withName("ResumeContext")
    ).withName("_SCRUB_DATA_INPUT");
    public static MemoryLayout $LAYOUT() {
        return _SCRUB_DATA_INPUT.$struct$LAYOUT;
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _SCRUB_DATA_INPUT.Size$VH;
    }
    public static int Size$get(MemorySegment seg) {
        return (int)_SCRUB_DATA_INPUT.Size$VH.get(seg);
    }
    public static void Size$set( MemorySegment seg, int x) {
        _SCRUB_DATA_INPUT.Size$VH.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)_SCRUB_DATA_INPUT.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        _SCRUB_DATA_INPUT.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _SCRUB_DATA_INPUT.Flags$VH;
    }
    public static int Flags$get(MemorySegment seg) {
        return (int)_SCRUB_DATA_INPUT.Flags$VH.get(seg);
    }
    public static void Flags$set( MemorySegment seg, int x) {
        _SCRUB_DATA_INPUT.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)_SCRUB_DATA_INPUT.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        _SCRUB_DATA_INPUT.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaximumIos$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MaximumIos"));
    public static VarHandle MaximumIos$VH() {
        return _SCRUB_DATA_INPUT.MaximumIos$VH;
    }
    public static int MaximumIos$get(MemorySegment seg) {
        return (int)_SCRUB_DATA_INPUT.MaximumIos$VH.get(seg);
    }
    public static void MaximumIos$set( MemorySegment seg, int x) {
        _SCRUB_DATA_INPUT.MaximumIos$VH.set(seg, x);
    }
    public static int MaximumIos$get(MemorySegment seg, long index) {
        return (int)_SCRUB_DATA_INPUT.MaximumIos$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaximumIos$set(MemorySegment seg, long index, int x) {
        _SCRUB_DATA_INPUT.MaximumIos$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ObjectId$slice(MemorySegment seg) {
        return seg.asSlice(12, 16);
    }
    public static MemorySegment Reserved$slice(MemorySegment seg) {
        return seg.asSlice(28, 100);
    }
    public static MemorySegment ResumeContext$slice(MemorySegment seg) {
        return seg.asSlice(128, 816);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


