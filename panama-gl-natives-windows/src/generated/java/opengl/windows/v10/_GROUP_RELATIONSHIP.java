// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _GROUP_RELATIONSHIP {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("MaximumGroupCount"),
        Constants$root.C_SHORT$LAYOUT.withName("ActiveGroupCount"),
        MemoryLayout.sequenceLayout(20, Constants$root.C_CHAR$LAYOUT).withName("Reserved"),
        MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
            Constants$root.C_CHAR$LAYOUT.withName("MaximumProcessorCount"),
            Constants$root.C_CHAR$LAYOUT.withName("ActiveProcessorCount"),
            MemoryLayout.sequenceLayout(38, Constants$root.C_CHAR$LAYOUT).withName("Reserved"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("ActiveProcessorMask")
        ).withName("_PROCESSOR_GROUP_INFO")).withName("GroupInfo")
    ).withName("_GROUP_RELATIONSHIP");
    public static MemoryLayout $LAYOUT() {
        return _GROUP_RELATIONSHIP.$struct$LAYOUT;
    }
    static final VarHandle MaximumGroupCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MaximumGroupCount"));
    public static VarHandle MaximumGroupCount$VH() {
        return _GROUP_RELATIONSHIP.MaximumGroupCount$VH;
    }
    public static short MaximumGroupCount$get(MemorySegment seg) {
        return (short)_GROUP_RELATIONSHIP.MaximumGroupCount$VH.get(seg);
    }
    public static void MaximumGroupCount$set( MemorySegment seg, short x) {
        _GROUP_RELATIONSHIP.MaximumGroupCount$VH.set(seg, x);
    }
    public static short MaximumGroupCount$get(MemorySegment seg, long index) {
        return (short)_GROUP_RELATIONSHIP.MaximumGroupCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaximumGroupCount$set(MemorySegment seg, long index, short x) {
        _GROUP_RELATIONSHIP.MaximumGroupCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ActiveGroupCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ActiveGroupCount"));
    public static VarHandle ActiveGroupCount$VH() {
        return _GROUP_RELATIONSHIP.ActiveGroupCount$VH;
    }
    public static short ActiveGroupCount$get(MemorySegment seg) {
        return (short)_GROUP_RELATIONSHIP.ActiveGroupCount$VH.get(seg);
    }
    public static void ActiveGroupCount$set( MemorySegment seg, short x) {
        _GROUP_RELATIONSHIP.ActiveGroupCount$VH.set(seg, x);
    }
    public static short ActiveGroupCount$get(MemorySegment seg, long index) {
        return (short)_GROUP_RELATIONSHIP.ActiveGroupCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ActiveGroupCount$set(MemorySegment seg, long index, short x) {
        _GROUP_RELATIONSHIP.ActiveGroupCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Reserved$slice(MemorySegment seg) {
        return seg.asSlice(4, 20);
    }
    public static MemorySegment GroupInfo$slice(MemorySegment seg) {
        return seg.asSlice(24, 48);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


