// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class tagRGBQUAD {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_CHAR$LAYOUT.withName("rgbBlue"),
        Constants$root.C_CHAR$LAYOUT.withName("rgbGreen"),
        Constants$root.C_CHAR$LAYOUT.withName("rgbRed"),
        Constants$root.C_CHAR$LAYOUT.withName("rgbReserved")
    ).withName("tagRGBQUAD");
    public static MemoryLayout $LAYOUT() {
        return tagRGBQUAD.$struct$LAYOUT;
    }
    static final VarHandle rgbBlue$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rgbBlue"));
    public static VarHandle rgbBlue$VH() {
        return tagRGBQUAD.rgbBlue$VH;
    }
    public static byte rgbBlue$get(MemorySegment seg) {
        return (byte)tagRGBQUAD.rgbBlue$VH.get(seg);
    }
    public static void rgbBlue$set( MemorySegment seg, byte x) {
        tagRGBQUAD.rgbBlue$VH.set(seg, x);
    }
    public static byte rgbBlue$get(MemorySegment seg, long index) {
        return (byte)tagRGBQUAD.rgbBlue$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rgbBlue$set(MemorySegment seg, long index, byte x) {
        tagRGBQUAD.rgbBlue$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rgbGreen$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rgbGreen"));
    public static VarHandle rgbGreen$VH() {
        return tagRGBQUAD.rgbGreen$VH;
    }
    public static byte rgbGreen$get(MemorySegment seg) {
        return (byte)tagRGBQUAD.rgbGreen$VH.get(seg);
    }
    public static void rgbGreen$set( MemorySegment seg, byte x) {
        tagRGBQUAD.rgbGreen$VH.set(seg, x);
    }
    public static byte rgbGreen$get(MemorySegment seg, long index) {
        return (byte)tagRGBQUAD.rgbGreen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rgbGreen$set(MemorySegment seg, long index, byte x) {
        tagRGBQUAD.rgbGreen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rgbRed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rgbRed"));
    public static VarHandle rgbRed$VH() {
        return tagRGBQUAD.rgbRed$VH;
    }
    public static byte rgbRed$get(MemorySegment seg) {
        return (byte)tagRGBQUAD.rgbRed$VH.get(seg);
    }
    public static void rgbRed$set( MemorySegment seg, byte x) {
        tagRGBQUAD.rgbRed$VH.set(seg, x);
    }
    public static byte rgbRed$get(MemorySegment seg, long index) {
        return (byte)tagRGBQUAD.rgbRed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rgbRed$set(MemorySegment seg, long index, byte x) {
        tagRGBQUAD.rgbRed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rgbReserved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rgbReserved"));
    public static VarHandle rgbReserved$VH() {
        return tagRGBQUAD.rgbReserved$VH;
    }
    public static byte rgbReserved$get(MemorySegment seg) {
        return (byte)tagRGBQUAD.rgbReserved$VH.get(seg);
    }
    public static void rgbReserved$set( MemorySegment seg, byte x) {
        tagRGBQUAD.rgbReserved$VH.set(seg, x);
    }
    public static byte rgbReserved$get(MemorySegment seg, long index) {
        return (byte)tagRGBQUAD.rgbReserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rgbReserved$set(MemorySegment seg, long index, byte x) {
        tagRGBQUAD.rgbReserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


