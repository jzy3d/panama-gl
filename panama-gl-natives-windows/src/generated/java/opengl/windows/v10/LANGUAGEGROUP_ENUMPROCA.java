// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface LANGUAGEGROUP_ENUMPROCA {

    int apply(int x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, long x4);
    static NativeSymbol allocate(LANGUAGEGROUP_ENUMPROCA fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(LANGUAGEGROUP_ENUMPROCA.class, fi, constants$534.LANGUAGEGROUP_ENUMPROCA$FUNC, "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IJ)I", scope);
    }
    static LANGUAGEGROUP_ENUMPROCA ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("LANGUAGEGROUP_ENUMPROCA::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (int x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, long x4) -> {
            try {
                return (int)constants$534.LANGUAGEGROUP_ENUMPROCA$MH.invokeExact(symbol, x0, (jdk.incubator.foreign.Addressable)x1, (jdk.incubator.foreign.Addressable)x2, x3, x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


