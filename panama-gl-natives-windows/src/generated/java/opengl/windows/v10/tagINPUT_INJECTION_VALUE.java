// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class tagINPUT_INJECTION_VALUE {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("page"),
        Constants$root.C_SHORT$LAYOUT.withName("usage"),
        Constants$root.C_LONG$LAYOUT.withName("value"),
        Constants$root.C_SHORT$LAYOUT.withName("index"),
        MemoryLayout.paddingLayout(16)
    ).withName("tagINPUT_INJECTION_VALUE");
    public static MemoryLayout $LAYOUT() {
        return tagINPUT_INJECTION_VALUE.$struct$LAYOUT;
    }
    static final VarHandle page$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("page"));
    public static VarHandle page$VH() {
        return tagINPUT_INJECTION_VALUE.page$VH;
    }
    public static short page$get(MemorySegment seg) {
        return (short)tagINPUT_INJECTION_VALUE.page$VH.get(seg);
    }
    public static void page$set( MemorySegment seg, short x) {
        tagINPUT_INJECTION_VALUE.page$VH.set(seg, x);
    }
    public static short page$get(MemorySegment seg, long index) {
        return (short)tagINPUT_INJECTION_VALUE.page$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void page$set(MemorySegment seg, long index, short x) {
        tagINPUT_INJECTION_VALUE.page$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle usage$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("usage"));
    public static VarHandle usage$VH() {
        return tagINPUT_INJECTION_VALUE.usage$VH;
    }
    public static short usage$get(MemorySegment seg) {
        return (short)tagINPUT_INJECTION_VALUE.usage$VH.get(seg);
    }
    public static void usage$set( MemorySegment seg, short x) {
        tagINPUT_INJECTION_VALUE.usage$VH.set(seg, x);
    }
    public static short usage$get(MemorySegment seg, long index) {
        return (short)tagINPUT_INJECTION_VALUE.usage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void usage$set(MemorySegment seg, long index, short x) {
        tagINPUT_INJECTION_VALUE.usage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle value$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("value"));
    public static VarHandle value$VH() {
        return tagINPUT_INJECTION_VALUE.value$VH;
    }
    public static int value$get(MemorySegment seg) {
        return (int)tagINPUT_INJECTION_VALUE.value$VH.get(seg);
    }
    public static void value$set( MemorySegment seg, int x) {
        tagINPUT_INJECTION_VALUE.value$VH.set(seg, x);
    }
    public static int value$get(MemorySegment seg, long index) {
        return (int)tagINPUT_INJECTION_VALUE.value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void value$set(MemorySegment seg, long index, int x) {
        tagINPUT_INJECTION_VALUE.value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle index$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("index"));
    public static VarHandle index$VH() {
        return tagINPUT_INJECTION_VALUE.index$VH;
    }
    public static short index$get(MemorySegment seg) {
        return (short)tagINPUT_INJECTION_VALUE.index$VH.get(seg);
    }
    public static void index$set( MemorySegment seg, short x) {
        tagINPUT_INJECTION_VALUE.index$VH.set(seg, x);
    }
    public static short index$get(MemorySegment seg, long index) {
        return (short)tagINPUT_INJECTION_VALUE.index$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void index$set(MemorySegment seg, long index, short x) {
        tagINPUT_INJECTION_VALUE.index$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


