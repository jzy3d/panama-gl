// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class tagDRAWTEXTPARAMS {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cbSize"),
        Constants$root.C_LONG$LAYOUT.withName("iTabLength"),
        Constants$root.C_LONG$LAYOUT.withName("iLeftMargin"),
        Constants$root.C_LONG$LAYOUT.withName("iRightMargin"),
        Constants$root.C_LONG$LAYOUT.withName("uiLengthDrawn")
    ).withName("tagDRAWTEXTPARAMS");
    public static MemoryLayout $LAYOUT() {
        return tagDRAWTEXTPARAMS.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return tagDRAWTEXTPARAMS.cbSize$VH;
    }
    public static int cbSize$get(MemorySegment seg) {
        return (int)tagDRAWTEXTPARAMS.cbSize$VH.get(seg);
    }
    public static void cbSize$set( MemorySegment seg, int x) {
        tagDRAWTEXTPARAMS.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)tagDRAWTEXTPARAMS.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        tagDRAWTEXTPARAMS.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iTabLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("iTabLength"));
    public static VarHandle iTabLength$VH() {
        return tagDRAWTEXTPARAMS.iTabLength$VH;
    }
    public static int iTabLength$get(MemorySegment seg) {
        return (int)tagDRAWTEXTPARAMS.iTabLength$VH.get(seg);
    }
    public static void iTabLength$set( MemorySegment seg, int x) {
        tagDRAWTEXTPARAMS.iTabLength$VH.set(seg, x);
    }
    public static int iTabLength$get(MemorySegment seg, long index) {
        return (int)tagDRAWTEXTPARAMS.iTabLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iTabLength$set(MemorySegment seg, long index, int x) {
        tagDRAWTEXTPARAMS.iTabLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iLeftMargin$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("iLeftMargin"));
    public static VarHandle iLeftMargin$VH() {
        return tagDRAWTEXTPARAMS.iLeftMargin$VH;
    }
    public static int iLeftMargin$get(MemorySegment seg) {
        return (int)tagDRAWTEXTPARAMS.iLeftMargin$VH.get(seg);
    }
    public static void iLeftMargin$set( MemorySegment seg, int x) {
        tagDRAWTEXTPARAMS.iLeftMargin$VH.set(seg, x);
    }
    public static int iLeftMargin$get(MemorySegment seg, long index) {
        return (int)tagDRAWTEXTPARAMS.iLeftMargin$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iLeftMargin$set(MemorySegment seg, long index, int x) {
        tagDRAWTEXTPARAMS.iLeftMargin$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iRightMargin$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("iRightMargin"));
    public static VarHandle iRightMargin$VH() {
        return tagDRAWTEXTPARAMS.iRightMargin$VH;
    }
    public static int iRightMargin$get(MemorySegment seg) {
        return (int)tagDRAWTEXTPARAMS.iRightMargin$VH.get(seg);
    }
    public static void iRightMargin$set( MemorySegment seg, int x) {
        tagDRAWTEXTPARAMS.iRightMargin$VH.set(seg, x);
    }
    public static int iRightMargin$get(MemorySegment seg, long index) {
        return (int)tagDRAWTEXTPARAMS.iRightMargin$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iRightMargin$set(MemorySegment seg, long index, int x) {
        tagDRAWTEXTPARAMS.iRightMargin$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle uiLengthDrawn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("uiLengthDrawn"));
    public static VarHandle uiLengthDrawn$VH() {
        return tagDRAWTEXTPARAMS.uiLengthDrawn$VH;
    }
    public static int uiLengthDrawn$get(MemorySegment seg) {
        return (int)tagDRAWTEXTPARAMS.uiLengthDrawn$VH.get(seg);
    }
    public static void uiLengthDrawn$set( MemorySegment seg, int x) {
        tagDRAWTEXTPARAMS.uiLengthDrawn$VH.set(seg, x);
    }
    public static int uiLengthDrawn$get(MemorySegment seg, long index) {
        return (int)tagDRAWTEXTPARAMS.uiLengthDrawn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void uiLengthDrawn$set(MemorySegment seg, long index, int x) {
        tagDRAWTEXTPARAMS.uiLengthDrawn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


