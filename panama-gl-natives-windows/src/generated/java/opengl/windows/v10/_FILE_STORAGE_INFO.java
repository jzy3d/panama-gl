// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _FILE_STORAGE_INFO {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("LogicalBytesPerSector"),
        Constants$root.C_LONG$LAYOUT.withName("PhysicalBytesPerSectorForAtomicity"),
        Constants$root.C_LONG$LAYOUT.withName("PhysicalBytesPerSectorForPerformance"),
        Constants$root.C_LONG$LAYOUT.withName("FileSystemEffectivePhysicalBytesPerSectorForAtomicity"),
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        Constants$root.C_LONG$LAYOUT.withName("ByteOffsetForSectorAlignment"),
        Constants$root.C_LONG$LAYOUT.withName("ByteOffsetForPartitionAlignment")
    ).withName("_FILE_STORAGE_INFO");
    public static MemoryLayout $LAYOUT() {
        return _FILE_STORAGE_INFO.$struct$LAYOUT;
    }
    static final VarHandle LogicalBytesPerSector$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LogicalBytesPerSector"));
    public static VarHandle LogicalBytesPerSector$VH() {
        return _FILE_STORAGE_INFO.LogicalBytesPerSector$VH;
    }
    public static int LogicalBytesPerSector$get(MemorySegment seg) {
        return (int)_FILE_STORAGE_INFO.LogicalBytesPerSector$VH.get(seg);
    }
    public static void LogicalBytesPerSector$set( MemorySegment seg, int x) {
        _FILE_STORAGE_INFO.LogicalBytesPerSector$VH.set(seg, x);
    }
    public static int LogicalBytesPerSector$get(MemorySegment seg, long index) {
        return (int)_FILE_STORAGE_INFO.LogicalBytesPerSector$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LogicalBytesPerSector$set(MemorySegment seg, long index, int x) {
        _FILE_STORAGE_INFO.LogicalBytesPerSector$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle PhysicalBytesPerSectorForAtomicity$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PhysicalBytesPerSectorForAtomicity"));
    public static VarHandle PhysicalBytesPerSectorForAtomicity$VH() {
        return _FILE_STORAGE_INFO.PhysicalBytesPerSectorForAtomicity$VH;
    }
    public static int PhysicalBytesPerSectorForAtomicity$get(MemorySegment seg) {
        return (int)_FILE_STORAGE_INFO.PhysicalBytesPerSectorForAtomicity$VH.get(seg);
    }
    public static void PhysicalBytesPerSectorForAtomicity$set( MemorySegment seg, int x) {
        _FILE_STORAGE_INFO.PhysicalBytesPerSectorForAtomicity$VH.set(seg, x);
    }
    public static int PhysicalBytesPerSectorForAtomicity$get(MemorySegment seg, long index) {
        return (int)_FILE_STORAGE_INFO.PhysicalBytesPerSectorForAtomicity$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PhysicalBytesPerSectorForAtomicity$set(MemorySegment seg, long index, int x) {
        _FILE_STORAGE_INFO.PhysicalBytesPerSectorForAtomicity$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle PhysicalBytesPerSectorForPerformance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PhysicalBytesPerSectorForPerformance"));
    public static VarHandle PhysicalBytesPerSectorForPerformance$VH() {
        return _FILE_STORAGE_INFO.PhysicalBytesPerSectorForPerformance$VH;
    }
    public static int PhysicalBytesPerSectorForPerformance$get(MemorySegment seg) {
        return (int)_FILE_STORAGE_INFO.PhysicalBytesPerSectorForPerformance$VH.get(seg);
    }
    public static void PhysicalBytesPerSectorForPerformance$set( MemorySegment seg, int x) {
        _FILE_STORAGE_INFO.PhysicalBytesPerSectorForPerformance$VH.set(seg, x);
    }
    public static int PhysicalBytesPerSectorForPerformance$get(MemorySegment seg, long index) {
        return (int)_FILE_STORAGE_INFO.PhysicalBytesPerSectorForPerformance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PhysicalBytesPerSectorForPerformance$set(MemorySegment seg, long index, int x) {
        _FILE_STORAGE_INFO.PhysicalBytesPerSectorForPerformance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle FileSystemEffectivePhysicalBytesPerSectorForAtomicity$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("FileSystemEffectivePhysicalBytesPerSectorForAtomicity"));
    public static VarHandle FileSystemEffectivePhysicalBytesPerSectorForAtomicity$VH() {
        return _FILE_STORAGE_INFO.FileSystemEffectivePhysicalBytesPerSectorForAtomicity$VH;
    }
    public static int FileSystemEffectivePhysicalBytesPerSectorForAtomicity$get(MemorySegment seg) {
        return (int)_FILE_STORAGE_INFO.FileSystemEffectivePhysicalBytesPerSectorForAtomicity$VH.get(seg);
    }
    public static void FileSystemEffectivePhysicalBytesPerSectorForAtomicity$set( MemorySegment seg, int x) {
        _FILE_STORAGE_INFO.FileSystemEffectivePhysicalBytesPerSectorForAtomicity$VH.set(seg, x);
    }
    public static int FileSystemEffectivePhysicalBytesPerSectorForAtomicity$get(MemorySegment seg, long index) {
        return (int)_FILE_STORAGE_INFO.FileSystemEffectivePhysicalBytesPerSectorForAtomicity$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void FileSystemEffectivePhysicalBytesPerSectorForAtomicity$set(MemorySegment seg, long index, int x) {
        _FILE_STORAGE_INFO.FileSystemEffectivePhysicalBytesPerSectorForAtomicity$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _FILE_STORAGE_INFO.Flags$VH;
    }
    public static int Flags$get(MemorySegment seg) {
        return (int)_FILE_STORAGE_INFO.Flags$VH.get(seg);
    }
    public static void Flags$set( MemorySegment seg, int x) {
        _FILE_STORAGE_INFO.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)_FILE_STORAGE_INFO.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        _FILE_STORAGE_INFO.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ByteOffsetForSectorAlignment$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ByteOffsetForSectorAlignment"));
    public static VarHandle ByteOffsetForSectorAlignment$VH() {
        return _FILE_STORAGE_INFO.ByteOffsetForSectorAlignment$VH;
    }
    public static int ByteOffsetForSectorAlignment$get(MemorySegment seg) {
        return (int)_FILE_STORAGE_INFO.ByteOffsetForSectorAlignment$VH.get(seg);
    }
    public static void ByteOffsetForSectorAlignment$set( MemorySegment seg, int x) {
        _FILE_STORAGE_INFO.ByteOffsetForSectorAlignment$VH.set(seg, x);
    }
    public static int ByteOffsetForSectorAlignment$get(MemorySegment seg, long index) {
        return (int)_FILE_STORAGE_INFO.ByteOffsetForSectorAlignment$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ByteOffsetForSectorAlignment$set(MemorySegment seg, long index, int x) {
        _FILE_STORAGE_INFO.ByteOffsetForSectorAlignment$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ByteOffsetForPartitionAlignment$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ByteOffsetForPartitionAlignment"));
    public static VarHandle ByteOffsetForPartitionAlignment$VH() {
        return _FILE_STORAGE_INFO.ByteOffsetForPartitionAlignment$VH;
    }
    public static int ByteOffsetForPartitionAlignment$get(MemorySegment seg) {
        return (int)_FILE_STORAGE_INFO.ByteOffsetForPartitionAlignment$VH.get(seg);
    }
    public static void ByteOffsetForPartitionAlignment$set( MemorySegment seg, int x) {
        _FILE_STORAGE_INFO.ByteOffsetForPartitionAlignment$VH.set(seg, x);
    }
    public static int ByteOffsetForPartitionAlignment$get(MemorySegment seg, long index) {
        return (int)_FILE_STORAGE_INFO.ByteOffsetForPartitionAlignment$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ByteOffsetForPartitionAlignment$set(MemorySegment seg, long index, int x) {
        _FILE_STORAGE_INFO.ByteOffsetForPartitionAlignment$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


