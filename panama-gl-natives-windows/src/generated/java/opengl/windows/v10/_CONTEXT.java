// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _CONTEXT {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("P1Home"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("P2Home"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("P3Home"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("P4Home"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("P5Home"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("P6Home"),
        Constants$root.C_LONG$LAYOUT.withName("ContextFlags"),
        Constants$root.C_LONG$LAYOUT.withName("MxCsr"),
        Constants$root.C_SHORT$LAYOUT.withName("SegCs"),
        Constants$root.C_SHORT$LAYOUT.withName("SegDs"),
        Constants$root.C_SHORT$LAYOUT.withName("SegEs"),
        Constants$root.C_SHORT$LAYOUT.withName("SegFs"),
        Constants$root.C_SHORT$LAYOUT.withName("SegGs"),
        Constants$root.C_SHORT$LAYOUT.withName("SegSs"),
        Constants$root.C_LONG$LAYOUT.withName("EFlags"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("Dr0"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("Dr1"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("Dr2"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("Dr3"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("Dr6"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("Dr7"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("Rax"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("Rcx"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("Rdx"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("Rbx"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("Rsp"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("Rbp"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("Rsi"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("Rdi"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("R8"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("R9"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("R10"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("R11"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("R12"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("R13"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("R14"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("R15"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("Rip"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("ControlWord"),
                Constants$root.C_SHORT$LAYOUT.withName("StatusWord"),
                Constants$root.C_CHAR$LAYOUT.withName("TagWord"),
                Constants$root.C_CHAR$LAYOUT.withName("Reserved1"),
                Constants$root.C_SHORT$LAYOUT.withName("ErrorOpcode"),
                Constants$root.C_LONG$LAYOUT.withName("ErrorOffset"),
                Constants$root.C_SHORT$LAYOUT.withName("ErrorSelector"),
                Constants$root.C_SHORT$LAYOUT.withName("Reserved2"),
                Constants$root.C_LONG$LAYOUT.withName("DataOffset"),
                Constants$root.C_SHORT$LAYOUT.withName("DataSelector"),
                Constants$root.C_SHORT$LAYOUT.withName("Reserved3"),
                Constants$root.C_LONG$LAYOUT.withName("MxCsr"),
                Constants$root.C_LONG$LAYOUT.withName("MxCsr_Mask"),
                MemoryLayout.sequenceLayout(8, MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("Low"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("High")
                ).withName("_M128A")).withName("FloatRegisters"),
                MemoryLayout.sequenceLayout(16, MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("Low"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("High")
                ).withName("_M128A")).withName("XmmRegisters"),
                MemoryLayout.sequenceLayout(96, Constants$root.C_CHAR$LAYOUT).withName("Reserved4")
            ).withName("FltSave"),
            MemoryLayout.structLayout(
                MemoryLayout.sequenceLayout(2, MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("Low"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("High")
                ).withName("_M128A")).withName("Header"),
                MemoryLayout.sequenceLayout(8, MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("Low"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("High")
                ).withName("_M128A")).withName("Legacy"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("Low"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("High")
                ).withName("Xmm0"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("Low"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("High")
                ).withName("Xmm1"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("Low"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("High")
                ).withName("Xmm2"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("Low"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("High")
                ).withName("Xmm3"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("Low"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("High")
                ).withName("Xmm4"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("Low"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("High")
                ).withName("Xmm5"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("Low"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("High")
                ).withName("Xmm6"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("Low"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("High")
                ).withName("Xmm7"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("Low"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("High")
                ).withName("Xmm8"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("Low"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("High")
                ).withName("Xmm9"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("Low"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("High")
                ).withName("Xmm10"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("Low"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("High")
                ).withName("Xmm11"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("Low"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("High")
                ).withName("Xmm12"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("Low"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("High")
                ).withName("Xmm13"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("Low"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("High")
                ).withName("Xmm14"),
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("Low"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("High")
                ).withName("Xmm15")
            ).withName("$anon$0")
        ).withName("$anon$0"),
        MemoryLayout.sequenceLayout(26, MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("Low"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("High")
        ).withName("_M128A")).withName("VectorRegister"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("VectorControl"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("DebugControl"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("LastBranchToRip"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("LastBranchFromRip"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("LastExceptionToRip"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("LastExceptionFromRip")
    ).withName("_CONTEXT");
    public static MemoryLayout $LAYOUT() {
        return _CONTEXT.$struct$LAYOUT;
    }
    static final VarHandle P1Home$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("P1Home"));
    public static VarHandle P1Home$VH() {
        return _CONTEXT.P1Home$VH;
    }
    public static long P1Home$get(MemorySegment seg) {
        return (long)_CONTEXT.P1Home$VH.get(seg);
    }
    public static void P1Home$set( MemorySegment seg, long x) {
        _CONTEXT.P1Home$VH.set(seg, x);
    }
    public static long P1Home$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.P1Home$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void P1Home$set(MemorySegment seg, long index, long x) {
        _CONTEXT.P1Home$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle P2Home$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("P2Home"));
    public static VarHandle P2Home$VH() {
        return _CONTEXT.P2Home$VH;
    }
    public static long P2Home$get(MemorySegment seg) {
        return (long)_CONTEXT.P2Home$VH.get(seg);
    }
    public static void P2Home$set( MemorySegment seg, long x) {
        _CONTEXT.P2Home$VH.set(seg, x);
    }
    public static long P2Home$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.P2Home$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void P2Home$set(MemorySegment seg, long index, long x) {
        _CONTEXT.P2Home$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle P3Home$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("P3Home"));
    public static VarHandle P3Home$VH() {
        return _CONTEXT.P3Home$VH;
    }
    public static long P3Home$get(MemorySegment seg) {
        return (long)_CONTEXT.P3Home$VH.get(seg);
    }
    public static void P3Home$set( MemorySegment seg, long x) {
        _CONTEXT.P3Home$VH.set(seg, x);
    }
    public static long P3Home$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.P3Home$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void P3Home$set(MemorySegment seg, long index, long x) {
        _CONTEXT.P3Home$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle P4Home$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("P4Home"));
    public static VarHandle P4Home$VH() {
        return _CONTEXT.P4Home$VH;
    }
    public static long P4Home$get(MemorySegment seg) {
        return (long)_CONTEXT.P4Home$VH.get(seg);
    }
    public static void P4Home$set( MemorySegment seg, long x) {
        _CONTEXT.P4Home$VH.set(seg, x);
    }
    public static long P4Home$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.P4Home$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void P4Home$set(MemorySegment seg, long index, long x) {
        _CONTEXT.P4Home$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle P5Home$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("P5Home"));
    public static VarHandle P5Home$VH() {
        return _CONTEXT.P5Home$VH;
    }
    public static long P5Home$get(MemorySegment seg) {
        return (long)_CONTEXT.P5Home$VH.get(seg);
    }
    public static void P5Home$set( MemorySegment seg, long x) {
        _CONTEXT.P5Home$VH.set(seg, x);
    }
    public static long P5Home$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.P5Home$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void P5Home$set(MemorySegment seg, long index, long x) {
        _CONTEXT.P5Home$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle P6Home$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("P6Home"));
    public static VarHandle P6Home$VH() {
        return _CONTEXT.P6Home$VH;
    }
    public static long P6Home$get(MemorySegment seg) {
        return (long)_CONTEXT.P6Home$VH.get(seg);
    }
    public static void P6Home$set( MemorySegment seg, long x) {
        _CONTEXT.P6Home$VH.set(seg, x);
    }
    public static long P6Home$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.P6Home$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void P6Home$set(MemorySegment seg, long index, long x) {
        _CONTEXT.P6Home$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ContextFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ContextFlags"));
    public static VarHandle ContextFlags$VH() {
        return _CONTEXT.ContextFlags$VH;
    }
    public static int ContextFlags$get(MemorySegment seg) {
        return (int)_CONTEXT.ContextFlags$VH.get(seg);
    }
    public static void ContextFlags$set( MemorySegment seg, int x) {
        _CONTEXT.ContextFlags$VH.set(seg, x);
    }
    public static int ContextFlags$get(MemorySegment seg, long index) {
        return (int)_CONTEXT.ContextFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ContextFlags$set(MemorySegment seg, long index, int x) {
        _CONTEXT.ContextFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MxCsr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MxCsr"));
    public static VarHandle MxCsr$VH() {
        return _CONTEXT.MxCsr$VH;
    }
    public static int MxCsr$get(MemorySegment seg) {
        return (int)_CONTEXT.MxCsr$VH.get(seg);
    }
    public static void MxCsr$set( MemorySegment seg, int x) {
        _CONTEXT.MxCsr$VH.set(seg, x);
    }
    public static int MxCsr$get(MemorySegment seg, long index) {
        return (int)_CONTEXT.MxCsr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MxCsr$set(MemorySegment seg, long index, int x) {
        _CONTEXT.MxCsr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SegCs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SegCs"));
    public static VarHandle SegCs$VH() {
        return _CONTEXT.SegCs$VH;
    }
    public static short SegCs$get(MemorySegment seg) {
        return (short)_CONTEXT.SegCs$VH.get(seg);
    }
    public static void SegCs$set( MemorySegment seg, short x) {
        _CONTEXT.SegCs$VH.set(seg, x);
    }
    public static short SegCs$get(MemorySegment seg, long index) {
        return (short)_CONTEXT.SegCs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SegCs$set(MemorySegment seg, long index, short x) {
        _CONTEXT.SegCs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SegDs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SegDs"));
    public static VarHandle SegDs$VH() {
        return _CONTEXT.SegDs$VH;
    }
    public static short SegDs$get(MemorySegment seg) {
        return (short)_CONTEXT.SegDs$VH.get(seg);
    }
    public static void SegDs$set( MemorySegment seg, short x) {
        _CONTEXT.SegDs$VH.set(seg, x);
    }
    public static short SegDs$get(MemorySegment seg, long index) {
        return (short)_CONTEXT.SegDs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SegDs$set(MemorySegment seg, long index, short x) {
        _CONTEXT.SegDs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SegEs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SegEs"));
    public static VarHandle SegEs$VH() {
        return _CONTEXT.SegEs$VH;
    }
    public static short SegEs$get(MemorySegment seg) {
        return (short)_CONTEXT.SegEs$VH.get(seg);
    }
    public static void SegEs$set( MemorySegment seg, short x) {
        _CONTEXT.SegEs$VH.set(seg, x);
    }
    public static short SegEs$get(MemorySegment seg, long index) {
        return (short)_CONTEXT.SegEs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SegEs$set(MemorySegment seg, long index, short x) {
        _CONTEXT.SegEs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SegFs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SegFs"));
    public static VarHandle SegFs$VH() {
        return _CONTEXT.SegFs$VH;
    }
    public static short SegFs$get(MemorySegment seg) {
        return (short)_CONTEXT.SegFs$VH.get(seg);
    }
    public static void SegFs$set( MemorySegment seg, short x) {
        _CONTEXT.SegFs$VH.set(seg, x);
    }
    public static short SegFs$get(MemorySegment seg, long index) {
        return (short)_CONTEXT.SegFs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SegFs$set(MemorySegment seg, long index, short x) {
        _CONTEXT.SegFs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SegGs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SegGs"));
    public static VarHandle SegGs$VH() {
        return _CONTEXT.SegGs$VH;
    }
    public static short SegGs$get(MemorySegment seg) {
        return (short)_CONTEXT.SegGs$VH.get(seg);
    }
    public static void SegGs$set( MemorySegment seg, short x) {
        _CONTEXT.SegGs$VH.set(seg, x);
    }
    public static short SegGs$get(MemorySegment seg, long index) {
        return (short)_CONTEXT.SegGs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SegGs$set(MemorySegment seg, long index, short x) {
        _CONTEXT.SegGs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SegSs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SegSs"));
    public static VarHandle SegSs$VH() {
        return _CONTEXT.SegSs$VH;
    }
    public static short SegSs$get(MemorySegment seg) {
        return (short)_CONTEXT.SegSs$VH.get(seg);
    }
    public static void SegSs$set( MemorySegment seg, short x) {
        _CONTEXT.SegSs$VH.set(seg, x);
    }
    public static short SegSs$get(MemorySegment seg, long index) {
        return (short)_CONTEXT.SegSs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SegSs$set(MemorySegment seg, long index, short x) {
        _CONTEXT.SegSs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle EFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EFlags"));
    public static VarHandle EFlags$VH() {
        return _CONTEXT.EFlags$VH;
    }
    public static int EFlags$get(MemorySegment seg) {
        return (int)_CONTEXT.EFlags$VH.get(seg);
    }
    public static void EFlags$set( MemorySegment seg, int x) {
        _CONTEXT.EFlags$VH.set(seg, x);
    }
    public static int EFlags$get(MemorySegment seg, long index) {
        return (int)_CONTEXT.EFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EFlags$set(MemorySegment seg, long index, int x) {
        _CONTEXT.EFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Dr0$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Dr0"));
    public static VarHandle Dr0$VH() {
        return _CONTEXT.Dr0$VH;
    }
    public static long Dr0$get(MemorySegment seg) {
        return (long)_CONTEXT.Dr0$VH.get(seg);
    }
    public static void Dr0$set( MemorySegment seg, long x) {
        _CONTEXT.Dr0$VH.set(seg, x);
    }
    public static long Dr0$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.Dr0$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Dr0$set(MemorySegment seg, long index, long x) {
        _CONTEXT.Dr0$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Dr1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Dr1"));
    public static VarHandle Dr1$VH() {
        return _CONTEXT.Dr1$VH;
    }
    public static long Dr1$get(MemorySegment seg) {
        return (long)_CONTEXT.Dr1$VH.get(seg);
    }
    public static void Dr1$set( MemorySegment seg, long x) {
        _CONTEXT.Dr1$VH.set(seg, x);
    }
    public static long Dr1$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.Dr1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Dr1$set(MemorySegment seg, long index, long x) {
        _CONTEXT.Dr1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Dr2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Dr2"));
    public static VarHandle Dr2$VH() {
        return _CONTEXT.Dr2$VH;
    }
    public static long Dr2$get(MemorySegment seg) {
        return (long)_CONTEXT.Dr2$VH.get(seg);
    }
    public static void Dr2$set( MemorySegment seg, long x) {
        _CONTEXT.Dr2$VH.set(seg, x);
    }
    public static long Dr2$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.Dr2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Dr2$set(MemorySegment seg, long index, long x) {
        _CONTEXT.Dr2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Dr3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Dr3"));
    public static VarHandle Dr3$VH() {
        return _CONTEXT.Dr3$VH;
    }
    public static long Dr3$get(MemorySegment seg) {
        return (long)_CONTEXT.Dr3$VH.get(seg);
    }
    public static void Dr3$set( MemorySegment seg, long x) {
        _CONTEXT.Dr3$VH.set(seg, x);
    }
    public static long Dr3$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.Dr3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Dr3$set(MemorySegment seg, long index, long x) {
        _CONTEXT.Dr3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Dr6$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Dr6"));
    public static VarHandle Dr6$VH() {
        return _CONTEXT.Dr6$VH;
    }
    public static long Dr6$get(MemorySegment seg) {
        return (long)_CONTEXT.Dr6$VH.get(seg);
    }
    public static void Dr6$set( MemorySegment seg, long x) {
        _CONTEXT.Dr6$VH.set(seg, x);
    }
    public static long Dr6$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.Dr6$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Dr6$set(MemorySegment seg, long index, long x) {
        _CONTEXT.Dr6$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Dr7$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Dr7"));
    public static VarHandle Dr7$VH() {
        return _CONTEXT.Dr7$VH;
    }
    public static long Dr7$get(MemorySegment seg) {
        return (long)_CONTEXT.Dr7$VH.get(seg);
    }
    public static void Dr7$set( MemorySegment seg, long x) {
        _CONTEXT.Dr7$VH.set(seg, x);
    }
    public static long Dr7$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.Dr7$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Dr7$set(MemorySegment seg, long index, long x) {
        _CONTEXT.Dr7$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Rax$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Rax"));
    public static VarHandle Rax$VH() {
        return _CONTEXT.Rax$VH;
    }
    public static long Rax$get(MemorySegment seg) {
        return (long)_CONTEXT.Rax$VH.get(seg);
    }
    public static void Rax$set( MemorySegment seg, long x) {
        _CONTEXT.Rax$VH.set(seg, x);
    }
    public static long Rax$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.Rax$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Rax$set(MemorySegment seg, long index, long x) {
        _CONTEXT.Rax$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Rcx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Rcx"));
    public static VarHandle Rcx$VH() {
        return _CONTEXT.Rcx$VH;
    }
    public static long Rcx$get(MemorySegment seg) {
        return (long)_CONTEXT.Rcx$VH.get(seg);
    }
    public static void Rcx$set( MemorySegment seg, long x) {
        _CONTEXT.Rcx$VH.set(seg, x);
    }
    public static long Rcx$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.Rcx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Rcx$set(MemorySegment seg, long index, long x) {
        _CONTEXT.Rcx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Rdx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Rdx"));
    public static VarHandle Rdx$VH() {
        return _CONTEXT.Rdx$VH;
    }
    public static long Rdx$get(MemorySegment seg) {
        return (long)_CONTEXT.Rdx$VH.get(seg);
    }
    public static void Rdx$set( MemorySegment seg, long x) {
        _CONTEXT.Rdx$VH.set(seg, x);
    }
    public static long Rdx$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.Rdx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Rdx$set(MemorySegment seg, long index, long x) {
        _CONTEXT.Rdx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Rbx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Rbx"));
    public static VarHandle Rbx$VH() {
        return _CONTEXT.Rbx$VH;
    }
    public static long Rbx$get(MemorySegment seg) {
        return (long)_CONTEXT.Rbx$VH.get(seg);
    }
    public static void Rbx$set( MemorySegment seg, long x) {
        _CONTEXT.Rbx$VH.set(seg, x);
    }
    public static long Rbx$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.Rbx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Rbx$set(MemorySegment seg, long index, long x) {
        _CONTEXT.Rbx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Rsp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Rsp"));
    public static VarHandle Rsp$VH() {
        return _CONTEXT.Rsp$VH;
    }
    public static long Rsp$get(MemorySegment seg) {
        return (long)_CONTEXT.Rsp$VH.get(seg);
    }
    public static void Rsp$set( MemorySegment seg, long x) {
        _CONTEXT.Rsp$VH.set(seg, x);
    }
    public static long Rsp$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.Rsp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Rsp$set(MemorySegment seg, long index, long x) {
        _CONTEXT.Rsp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Rbp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Rbp"));
    public static VarHandle Rbp$VH() {
        return _CONTEXT.Rbp$VH;
    }
    public static long Rbp$get(MemorySegment seg) {
        return (long)_CONTEXT.Rbp$VH.get(seg);
    }
    public static void Rbp$set( MemorySegment seg, long x) {
        _CONTEXT.Rbp$VH.set(seg, x);
    }
    public static long Rbp$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.Rbp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Rbp$set(MemorySegment seg, long index, long x) {
        _CONTEXT.Rbp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Rsi$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Rsi"));
    public static VarHandle Rsi$VH() {
        return _CONTEXT.Rsi$VH;
    }
    public static long Rsi$get(MemorySegment seg) {
        return (long)_CONTEXT.Rsi$VH.get(seg);
    }
    public static void Rsi$set( MemorySegment seg, long x) {
        _CONTEXT.Rsi$VH.set(seg, x);
    }
    public static long Rsi$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.Rsi$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Rsi$set(MemorySegment seg, long index, long x) {
        _CONTEXT.Rsi$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Rdi$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Rdi"));
    public static VarHandle Rdi$VH() {
        return _CONTEXT.Rdi$VH;
    }
    public static long Rdi$get(MemorySegment seg) {
        return (long)_CONTEXT.Rdi$VH.get(seg);
    }
    public static void Rdi$set( MemorySegment seg, long x) {
        _CONTEXT.Rdi$VH.set(seg, x);
    }
    public static long Rdi$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.Rdi$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Rdi$set(MemorySegment seg, long index, long x) {
        _CONTEXT.Rdi$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle R8$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("R8"));
    public static VarHandle R8$VH() {
        return _CONTEXT.R8$VH;
    }
    public static long R8$get(MemorySegment seg) {
        return (long)_CONTEXT.R8$VH.get(seg);
    }
    public static void R8$set( MemorySegment seg, long x) {
        _CONTEXT.R8$VH.set(seg, x);
    }
    public static long R8$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.R8$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void R8$set(MemorySegment seg, long index, long x) {
        _CONTEXT.R8$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle R9$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("R9"));
    public static VarHandle R9$VH() {
        return _CONTEXT.R9$VH;
    }
    public static long R9$get(MemorySegment seg) {
        return (long)_CONTEXT.R9$VH.get(seg);
    }
    public static void R9$set( MemorySegment seg, long x) {
        _CONTEXT.R9$VH.set(seg, x);
    }
    public static long R9$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.R9$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void R9$set(MemorySegment seg, long index, long x) {
        _CONTEXT.R9$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle R10$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("R10"));
    public static VarHandle R10$VH() {
        return _CONTEXT.R10$VH;
    }
    public static long R10$get(MemorySegment seg) {
        return (long)_CONTEXT.R10$VH.get(seg);
    }
    public static void R10$set( MemorySegment seg, long x) {
        _CONTEXT.R10$VH.set(seg, x);
    }
    public static long R10$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.R10$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void R10$set(MemorySegment seg, long index, long x) {
        _CONTEXT.R10$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle R11$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("R11"));
    public static VarHandle R11$VH() {
        return _CONTEXT.R11$VH;
    }
    public static long R11$get(MemorySegment seg) {
        return (long)_CONTEXT.R11$VH.get(seg);
    }
    public static void R11$set( MemorySegment seg, long x) {
        _CONTEXT.R11$VH.set(seg, x);
    }
    public static long R11$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.R11$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void R11$set(MemorySegment seg, long index, long x) {
        _CONTEXT.R11$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle R12$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("R12"));
    public static VarHandle R12$VH() {
        return _CONTEXT.R12$VH;
    }
    public static long R12$get(MemorySegment seg) {
        return (long)_CONTEXT.R12$VH.get(seg);
    }
    public static void R12$set( MemorySegment seg, long x) {
        _CONTEXT.R12$VH.set(seg, x);
    }
    public static long R12$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.R12$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void R12$set(MemorySegment seg, long index, long x) {
        _CONTEXT.R12$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle R13$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("R13"));
    public static VarHandle R13$VH() {
        return _CONTEXT.R13$VH;
    }
    public static long R13$get(MemorySegment seg) {
        return (long)_CONTEXT.R13$VH.get(seg);
    }
    public static void R13$set( MemorySegment seg, long x) {
        _CONTEXT.R13$VH.set(seg, x);
    }
    public static long R13$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.R13$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void R13$set(MemorySegment seg, long index, long x) {
        _CONTEXT.R13$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle R14$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("R14"));
    public static VarHandle R14$VH() {
        return _CONTEXT.R14$VH;
    }
    public static long R14$get(MemorySegment seg) {
        return (long)_CONTEXT.R14$VH.get(seg);
    }
    public static void R14$set( MemorySegment seg, long x) {
        _CONTEXT.R14$VH.set(seg, x);
    }
    public static long R14$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.R14$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void R14$set(MemorySegment seg, long index, long x) {
        _CONTEXT.R14$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle R15$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("R15"));
    public static VarHandle R15$VH() {
        return _CONTEXT.R15$VH;
    }
    public static long R15$get(MemorySegment seg) {
        return (long)_CONTEXT.R15$VH.get(seg);
    }
    public static void R15$set( MemorySegment seg, long x) {
        _CONTEXT.R15$VH.set(seg, x);
    }
    public static long R15$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.R15$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void R15$set(MemorySegment seg, long index, long x) {
        _CONTEXT.R15$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Rip$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Rip"));
    public static VarHandle Rip$VH() {
        return _CONTEXT.Rip$VH;
    }
    public static long Rip$get(MemorySegment seg) {
        return (long)_CONTEXT.Rip$VH.get(seg);
    }
    public static void Rip$set( MemorySegment seg, long x) {
        _CONTEXT.Rip$VH.set(seg, x);
    }
    public static long Rip$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.Rip$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Rip$set(MemorySegment seg, long index, long x) {
        _CONTEXT.Rip$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment FltSave$slice(MemorySegment seg) {
        return seg.asSlice(256, 512);
    }
    public static MemorySegment Header$slice(MemorySegment seg) {
        return seg.asSlice(256, 32);
    }
    public static MemorySegment Legacy$slice(MemorySegment seg) {
        return seg.asSlice(288, 128);
    }
    public static MemorySegment Xmm0$slice(MemorySegment seg) {
        return seg.asSlice(416, 16);
    }
    public static MemorySegment Xmm1$slice(MemorySegment seg) {
        return seg.asSlice(432, 16);
    }
    public static MemorySegment Xmm2$slice(MemorySegment seg) {
        return seg.asSlice(448, 16);
    }
    public static MemorySegment Xmm3$slice(MemorySegment seg) {
        return seg.asSlice(464, 16);
    }
    public static MemorySegment Xmm4$slice(MemorySegment seg) {
        return seg.asSlice(480, 16);
    }
    public static MemorySegment Xmm5$slice(MemorySegment seg) {
        return seg.asSlice(496, 16);
    }
    public static MemorySegment Xmm6$slice(MemorySegment seg) {
        return seg.asSlice(512, 16);
    }
    public static MemorySegment Xmm7$slice(MemorySegment seg) {
        return seg.asSlice(528, 16);
    }
    public static MemorySegment Xmm8$slice(MemorySegment seg) {
        return seg.asSlice(544, 16);
    }
    public static MemorySegment Xmm9$slice(MemorySegment seg) {
        return seg.asSlice(560, 16);
    }
    public static MemorySegment Xmm10$slice(MemorySegment seg) {
        return seg.asSlice(576, 16);
    }
    public static MemorySegment Xmm11$slice(MemorySegment seg) {
        return seg.asSlice(592, 16);
    }
    public static MemorySegment Xmm12$slice(MemorySegment seg) {
        return seg.asSlice(608, 16);
    }
    public static MemorySegment Xmm13$slice(MemorySegment seg) {
        return seg.asSlice(624, 16);
    }
    public static MemorySegment Xmm14$slice(MemorySegment seg) {
        return seg.asSlice(640, 16);
    }
    public static MemorySegment Xmm15$slice(MemorySegment seg) {
        return seg.asSlice(656, 16);
    }
    public static MemorySegment VectorRegister$slice(MemorySegment seg) {
        return seg.asSlice(768, 416);
    }
    static final VarHandle VectorControl$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("VectorControl"));
    public static VarHandle VectorControl$VH() {
        return _CONTEXT.VectorControl$VH;
    }
    public static long VectorControl$get(MemorySegment seg) {
        return (long)_CONTEXT.VectorControl$VH.get(seg);
    }
    public static void VectorControl$set( MemorySegment seg, long x) {
        _CONTEXT.VectorControl$VH.set(seg, x);
    }
    public static long VectorControl$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.VectorControl$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void VectorControl$set(MemorySegment seg, long index, long x) {
        _CONTEXT.VectorControl$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DebugControl$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DebugControl"));
    public static VarHandle DebugControl$VH() {
        return _CONTEXT.DebugControl$VH;
    }
    public static long DebugControl$get(MemorySegment seg) {
        return (long)_CONTEXT.DebugControl$VH.get(seg);
    }
    public static void DebugControl$set( MemorySegment seg, long x) {
        _CONTEXT.DebugControl$VH.set(seg, x);
    }
    public static long DebugControl$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.DebugControl$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DebugControl$set(MemorySegment seg, long index, long x) {
        _CONTEXT.DebugControl$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LastBranchToRip$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LastBranchToRip"));
    public static VarHandle LastBranchToRip$VH() {
        return _CONTEXT.LastBranchToRip$VH;
    }
    public static long LastBranchToRip$get(MemorySegment seg) {
        return (long)_CONTEXT.LastBranchToRip$VH.get(seg);
    }
    public static void LastBranchToRip$set( MemorySegment seg, long x) {
        _CONTEXT.LastBranchToRip$VH.set(seg, x);
    }
    public static long LastBranchToRip$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.LastBranchToRip$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LastBranchToRip$set(MemorySegment seg, long index, long x) {
        _CONTEXT.LastBranchToRip$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LastBranchFromRip$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LastBranchFromRip"));
    public static VarHandle LastBranchFromRip$VH() {
        return _CONTEXT.LastBranchFromRip$VH;
    }
    public static long LastBranchFromRip$get(MemorySegment seg) {
        return (long)_CONTEXT.LastBranchFromRip$VH.get(seg);
    }
    public static void LastBranchFromRip$set( MemorySegment seg, long x) {
        _CONTEXT.LastBranchFromRip$VH.set(seg, x);
    }
    public static long LastBranchFromRip$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.LastBranchFromRip$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LastBranchFromRip$set(MemorySegment seg, long index, long x) {
        _CONTEXT.LastBranchFromRip$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LastExceptionToRip$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LastExceptionToRip"));
    public static VarHandle LastExceptionToRip$VH() {
        return _CONTEXT.LastExceptionToRip$VH;
    }
    public static long LastExceptionToRip$get(MemorySegment seg) {
        return (long)_CONTEXT.LastExceptionToRip$VH.get(seg);
    }
    public static void LastExceptionToRip$set( MemorySegment seg, long x) {
        _CONTEXT.LastExceptionToRip$VH.set(seg, x);
    }
    public static long LastExceptionToRip$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.LastExceptionToRip$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LastExceptionToRip$set(MemorySegment seg, long index, long x) {
        _CONTEXT.LastExceptionToRip$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LastExceptionFromRip$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LastExceptionFromRip"));
    public static VarHandle LastExceptionFromRip$VH() {
        return _CONTEXT.LastExceptionFromRip$VH;
    }
    public static long LastExceptionFromRip$get(MemorySegment seg) {
        return (long)_CONTEXT.LastExceptionFromRip$VH.get(seg);
    }
    public static void LastExceptionFromRip$set( MemorySegment seg, long x) {
        _CONTEXT.LastExceptionFromRip$VH.set(seg, x);
    }
    public static long LastExceptionFromRip$get(MemorySegment seg, long index) {
        return (long)_CONTEXT.LastExceptionFromRip$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LastExceptionFromRip$set(MemorySegment seg, long index, long x) {
        _CONTEXT.LastExceptionFromRip$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


