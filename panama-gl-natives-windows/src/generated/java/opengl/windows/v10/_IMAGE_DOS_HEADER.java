// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _IMAGE_DOS_HEADER {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("e_magic"),
        Constants$root.C_SHORT$LAYOUT.withName("e_cblp"),
        Constants$root.C_SHORT$LAYOUT.withName("e_cp"),
        Constants$root.C_SHORT$LAYOUT.withName("e_crlc"),
        Constants$root.C_SHORT$LAYOUT.withName("e_cparhdr"),
        Constants$root.C_SHORT$LAYOUT.withName("e_minalloc"),
        Constants$root.C_SHORT$LAYOUT.withName("e_maxalloc"),
        Constants$root.C_SHORT$LAYOUT.withName("e_ss"),
        Constants$root.C_SHORT$LAYOUT.withName("e_sp"),
        Constants$root.C_SHORT$LAYOUT.withName("e_csum"),
        Constants$root.C_SHORT$LAYOUT.withName("e_ip"),
        Constants$root.C_SHORT$LAYOUT.withName("e_cs"),
        Constants$root.C_SHORT$LAYOUT.withName("e_lfarlc"),
        Constants$root.C_SHORT$LAYOUT.withName("e_ovno"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_SHORT$LAYOUT).withName("e_res"),
        Constants$root.C_SHORT$LAYOUT.withName("e_oemid"),
        Constants$root.C_SHORT$LAYOUT.withName("e_oeminfo"),
        MemoryLayout.sequenceLayout(10, Constants$root.C_SHORT$LAYOUT).withName("e_res2"),
        Constants$root.C_LONG$LAYOUT.withName("e_lfanew")
    ).withName("_IMAGE_DOS_HEADER");
    public static MemoryLayout $LAYOUT() {
        return _IMAGE_DOS_HEADER.$struct$LAYOUT;
    }
    static final VarHandle e_magic$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e_magic"));
    public static VarHandle e_magic$VH() {
        return _IMAGE_DOS_HEADER.e_magic$VH;
    }
    public static short e_magic$get(MemorySegment seg) {
        return (short)_IMAGE_DOS_HEADER.e_magic$VH.get(seg);
    }
    public static void e_magic$set( MemorySegment seg, short x) {
        _IMAGE_DOS_HEADER.e_magic$VH.set(seg, x);
    }
    public static short e_magic$get(MemorySegment seg, long index) {
        return (short)_IMAGE_DOS_HEADER.e_magic$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e_magic$set(MemorySegment seg, long index, short x) {
        _IMAGE_DOS_HEADER.e_magic$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e_cblp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e_cblp"));
    public static VarHandle e_cblp$VH() {
        return _IMAGE_DOS_HEADER.e_cblp$VH;
    }
    public static short e_cblp$get(MemorySegment seg) {
        return (short)_IMAGE_DOS_HEADER.e_cblp$VH.get(seg);
    }
    public static void e_cblp$set( MemorySegment seg, short x) {
        _IMAGE_DOS_HEADER.e_cblp$VH.set(seg, x);
    }
    public static short e_cblp$get(MemorySegment seg, long index) {
        return (short)_IMAGE_DOS_HEADER.e_cblp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e_cblp$set(MemorySegment seg, long index, short x) {
        _IMAGE_DOS_HEADER.e_cblp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e_cp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e_cp"));
    public static VarHandle e_cp$VH() {
        return _IMAGE_DOS_HEADER.e_cp$VH;
    }
    public static short e_cp$get(MemorySegment seg) {
        return (short)_IMAGE_DOS_HEADER.e_cp$VH.get(seg);
    }
    public static void e_cp$set( MemorySegment seg, short x) {
        _IMAGE_DOS_HEADER.e_cp$VH.set(seg, x);
    }
    public static short e_cp$get(MemorySegment seg, long index) {
        return (short)_IMAGE_DOS_HEADER.e_cp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e_cp$set(MemorySegment seg, long index, short x) {
        _IMAGE_DOS_HEADER.e_cp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e_crlc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e_crlc"));
    public static VarHandle e_crlc$VH() {
        return _IMAGE_DOS_HEADER.e_crlc$VH;
    }
    public static short e_crlc$get(MemorySegment seg) {
        return (short)_IMAGE_DOS_HEADER.e_crlc$VH.get(seg);
    }
    public static void e_crlc$set( MemorySegment seg, short x) {
        _IMAGE_DOS_HEADER.e_crlc$VH.set(seg, x);
    }
    public static short e_crlc$get(MemorySegment seg, long index) {
        return (short)_IMAGE_DOS_HEADER.e_crlc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e_crlc$set(MemorySegment seg, long index, short x) {
        _IMAGE_DOS_HEADER.e_crlc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e_cparhdr$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e_cparhdr"));
    public static VarHandle e_cparhdr$VH() {
        return _IMAGE_DOS_HEADER.e_cparhdr$VH;
    }
    public static short e_cparhdr$get(MemorySegment seg) {
        return (short)_IMAGE_DOS_HEADER.e_cparhdr$VH.get(seg);
    }
    public static void e_cparhdr$set( MemorySegment seg, short x) {
        _IMAGE_DOS_HEADER.e_cparhdr$VH.set(seg, x);
    }
    public static short e_cparhdr$get(MemorySegment seg, long index) {
        return (short)_IMAGE_DOS_HEADER.e_cparhdr$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e_cparhdr$set(MemorySegment seg, long index, short x) {
        _IMAGE_DOS_HEADER.e_cparhdr$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e_minalloc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e_minalloc"));
    public static VarHandle e_minalloc$VH() {
        return _IMAGE_DOS_HEADER.e_minalloc$VH;
    }
    public static short e_minalloc$get(MemorySegment seg) {
        return (short)_IMAGE_DOS_HEADER.e_minalloc$VH.get(seg);
    }
    public static void e_minalloc$set( MemorySegment seg, short x) {
        _IMAGE_DOS_HEADER.e_minalloc$VH.set(seg, x);
    }
    public static short e_minalloc$get(MemorySegment seg, long index) {
        return (short)_IMAGE_DOS_HEADER.e_minalloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e_minalloc$set(MemorySegment seg, long index, short x) {
        _IMAGE_DOS_HEADER.e_minalloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e_maxalloc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e_maxalloc"));
    public static VarHandle e_maxalloc$VH() {
        return _IMAGE_DOS_HEADER.e_maxalloc$VH;
    }
    public static short e_maxalloc$get(MemorySegment seg) {
        return (short)_IMAGE_DOS_HEADER.e_maxalloc$VH.get(seg);
    }
    public static void e_maxalloc$set( MemorySegment seg, short x) {
        _IMAGE_DOS_HEADER.e_maxalloc$VH.set(seg, x);
    }
    public static short e_maxalloc$get(MemorySegment seg, long index) {
        return (short)_IMAGE_DOS_HEADER.e_maxalloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e_maxalloc$set(MemorySegment seg, long index, short x) {
        _IMAGE_DOS_HEADER.e_maxalloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e_ss$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e_ss"));
    public static VarHandle e_ss$VH() {
        return _IMAGE_DOS_HEADER.e_ss$VH;
    }
    public static short e_ss$get(MemorySegment seg) {
        return (short)_IMAGE_DOS_HEADER.e_ss$VH.get(seg);
    }
    public static void e_ss$set( MemorySegment seg, short x) {
        _IMAGE_DOS_HEADER.e_ss$VH.set(seg, x);
    }
    public static short e_ss$get(MemorySegment seg, long index) {
        return (short)_IMAGE_DOS_HEADER.e_ss$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e_ss$set(MemorySegment seg, long index, short x) {
        _IMAGE_DOS_HEADER.e_ss$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e_sp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e_sp"));
    public static VarHandle e_sp$VH() {
        return _IMAGE_DOS_HEADER.e_sp$VH;
    }
    public static short e_sp$get(MemorySegment seg) {
        return (short)_IMAGE_DOS_HEADER.e_sp$VH.get(seg);
    }
    public static void e_sp$set( MemorySegment seg, short x) {
        _IMAGE_DOS_HEADER.e_sp$VH.set(seg, x);
    }
    public static short e_sp$get(MemorySegment seg, long index) {
        return (short)_IMAGE_DOS_HEADER.e_sp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e_sp$set(MemorySegment seg, long index, short x) {
        _IMAGE_DOS_HEADER.e_sp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e_csum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e_csum"));
    public static VarHandle e_csum$VH() {
        return _IMAGE_DOS_HEADER.e_csum$VH;
    }
    public static short e_csum$get(MemorySegment seg) {
        return (short)_IMAGE_DOS_HEADER.e_csum$VH.get(seg);
    }
    public static void e_csum$set( MemorySegment seg, short x) {
        _IMAGE_DOS_HEADER.e_csum$VH.set(seg, x);
    }
    public static short e_csum$get(MemorySegment seg, long index) {
        return (short)_IMAGE_DOS_HEADER.e_csum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e_csum$set(MemorySegment seg, long index, short x) {
        _IMAGE_DOS_HEADER.e_csum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e_ip$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e_ip"));
    public static VarHandle e_ip$VH() {
        return _IMAGE_DOS_HEADER.e_ip$VH;
    }
    public static short e_ip$get(MemorySegment seg) {
        return (short)_IMAGE_DOS_HEADER.e_ip$VH.get(seg);
    }
    public static void e_ip$set( MemorySegment seg, short x) {
        _IMAGE_DOS_HEADER.e_ip$VH.set(seg, x);
    }
    public static short e_ip$get(MemorySegment seg, long index) {
        return (short)_IMAGE_DOS_HEADER.e_ip$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e_ip$set(MemorySegment seg, long index, short x) {
        _IMAGE_DOS_HEADER.e_ip$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e_cs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e_cs"));
    public static VarHandle e_cs$VH() {
        return _IMAGE_DOS_HEADER.e_cs$VH;
    }
    public static short e_cs$get(MemorySegment seg) {
        return (short)_IMAGE_DOS_HEADER.e_cs$VH.get(seg);
    }
    public static void e_cs$set( MemorySegment seg, short x) {
        _IMAGE_DOS_HEADER.e_cs$VH.set(seg, x);
    }
    public static short e_cs$get(MemorySegment seg, long index) {
        return (short)_IMAGE_DOS_HEADER.e_cs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e_cs$set(MemorySegment seg, long index, short x) {
        _IMAGE_DOS_HEADER.e_cs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e_lfarlc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e_lfarlc"));
    public static VarHandle e_lfarlc$VH() {
        return _IMAGE_DOS_HEADER.e_lfarlc$VH;
    }
    public static short e_lfarlc$get(MemorySegment seg) {
        return (short)_IMAGE_DOS_HEADER.e_lfarlc$VH.get(seg);
    }
    public static void e_lfarlc$set( MemorySegment seg, short x) {
        _IMAGE_DOS_HEADER.e_lfarlc$VH.set(seg, x);
    }
    public static short e_lfarlc$get(MemorySegment seg, long index) {
        return (short)_IMAGE_DOS_HEADER.e_lfarlc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e_lfarlc$set(MemorySegment seg, long index, short x) {
        _IMAGE_DOS_HEADER.e_lfarlc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e_ovno$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e_ovno"));
    public static VarHandle e_ovno$VH() {
        return _IMAGE_DOS_HEADER.e_ovno$VH;
    }
    public static short e_ovno$get(MemorySegment seg) {
        return (short)_IMAGE_DOS_HEADER.e_ovno$VH.get(seg);
    }
    public static void e_ovno$set( MemorySegment seg, short x) {
        _IMAGE_DOS_HEADER.e_ovno$VH.set(seg, x);
    }
    public static short e_ovno$get(MemorySegment seg, long index) {
        return (short)_IMAGE_DOS_HEADER.e_ovno$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e_ovno$set(MemorySegment seg, long index, short x) {
        _IMAGE_DOS_HEADER.e_ovno$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment e_res$slice(MemorySegment seg) {
        return seg.asSlice(28, 8);
    }
    static final VarHandle e_oemid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e_oemid"));
    public static VarHandle e_oemid$VH() {
        return _IMAGE_DOS_HEADER.e_oemid$VH;
    }
    public static short e_oemid$get(MemorySegment seg) {
        return (short)_IMAGE_DOS_HEADER.e_oemid$VH.get(seg);
    }
    public static void e_oemid$set( MemorySegment seg, short x) {
        _IMAGE_DOS_HEADER.e_oemid$VH.set(seg, x);
    }
    public static short e_oemid$get(MemorySegment seg, long index) {
        return (short)_IMAGE_DOS_HEADER.e_oemid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e_oemid$set(MemorySegment seg, long index, short x) {
        _IMAGE_DOS_HEADER.e_oemid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle e_oeminfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e_oeminfo"));
    public static VarHandle e_oeminfo$VH() {
        return _IMAGE_DOS_HEADER.e_oeminfo$VH;
    }
    public static short e_oeminfo$get(MemorySegment seg) {
        return (short)_IMAGE_DOS_HEADER.e_oeminfo$VH.get(seg);
    }
    public static void e_oeminfo$set( MemorySegment seg, short x) {
        _IMAGE_DOS_HEADER.e_oeminfo$VH.set(seg, x);
    }
    public static short e_oeminfo$get(MemorySegment seg, long index) {
        return (short)_IMAGE_DOS_HEADER.e_oeminfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e_oeminfo$set(MemorySegment seg, long index, short x) {
        _IMAGE_DOS_HEADER.e_oeminfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment e_res2$slice(MemorySegment seg) {
        return seg.asSlice(40, 20);
    }
    static final VarHandle e_lfanew$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("e_lfanew"));
    public static VarHandle e_lfanew$VH() {
        return _IMAGE_DOS_HEADER.e_lfanew$VH;
    }
    public static int e_lfanew$get(MemorySegment seg) {
        return (int)_IMAGE_DOS_HEADER.e_lfanew$VH.get(seg);
    }
    public static void e_lfanew$set( MemorySegment seg, int x) {
        _IMAGE_DOS_HEADER.e_lfanew$VH.set(seg, x);
    }
    public static int e_lfanew$get(MemorySegment seg, long index) {
        return (int)_IMAGE_DOS_HEADER.e_lfanew$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void e_lfanew$set(MemorySegment seg, long index, int x) {
        _IMAGE_DOS_HEADER.e_lfanew$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


