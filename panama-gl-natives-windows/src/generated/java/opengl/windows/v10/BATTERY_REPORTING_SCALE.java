// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class BATTERY_REPORTING_SCALE {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Granularity"),
        Constants$root.C_LONG$LAYOUT.withName("Capacity")
    );
    public static MemoryLayout $LAYOUT() {
        return BATTERY_REPORTING_SCALE.$struct$LAYOUT;
    }
    static final VarHandle Granularity$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Granularity"));
    public static VarHandle Granularity$VH() {
        return BATTERY_REPORTING_SCALE.Granularity$VH;
    }
    public static int Granularity$get(MemorySegment seg) {
        return (int)BATTERY_REPORTING_SCALE.Granularity$VH.get(seg);
    }
    public static void Granularity$set( MemorySegment seg, int x) {
        BATTERY_REPORTING_SCALE.Granularity$VH.set(seg, x);
    }
    public static int Granularity$get(MemorySegment seg, long index) {
        return (int)BATTERY_REPORTING_SCALE.Granularity$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Granularity$set(MemorySegment seg, long index, int x) {
        BATTERY_REPORTING_SCALE.Granularity$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Capacity$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Capacity"));
    public static VarHandle Capacity$VH() {
        return BATTERY_REPORTING_SCALE.Capacity$VH;
    }
    public static int Capacity$get(MemorySegment seg) {
        return (int)BATTERY_REPORTING_SCALE.Capacity$VH.get(seg);
    }
    public static void Capacity$set( MemorySegment seg, int x) {
        BATTERY_REPORTING_SCALE.Capacity$VH.set(seg, x);
    }
    public static int Capacity$get(MemorySegment seg, long index) {
        return (int)BATTERY_REPORTING_SCALE.Capacity$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Capacity$set(MemorySegment seg, long index, int x) {
        BATTERY_REPORTING_SCALE.Capacity$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


