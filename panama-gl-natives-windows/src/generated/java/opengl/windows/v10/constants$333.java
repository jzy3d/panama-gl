// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$333 {

    static final FunctionDescriptor GetMaximumProcessorCount$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_SHORT$LAYOUT
    );
    static final MethodHandle GetMaximumProcessorCount$MH = RuntimeHelper.downcallHandle(
        "GetMaximumProcessorCount",
        constants$333.GetMaximumProcessorCount$FUNC, false
    );
    static final FunctionDescriptor GetNumaProcessorNode$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_CHAR$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetNumaProcessorNode$MH = RuntimeHelper.downcallHandle(
        "GetNumaProcessorNode",
        constants$333.GetNumaProcessorNode$FUNC, false
    );
    static final FunctionDescriptor GetNumaNodeNumberFromHandle$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetNumaNodeNumberFromHandle$MH = RuntimeHelper.downcallHandle(
        "GetNumaNodeNumberFromHandle",
        constants$333.GetNumaNodeNumberFromHandle$FUNC, false
    );
    static final FunctionDescriptor GetNumaProcessorNodeEx$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetNumaProcessorNodeEx$MH = RuntimeHelper.downcallHandle(
        "GetNumaProcessorNodeEx",
        constants$333.GetNumaProcessorNodeEx$FUNC, false
    );
    static final FunctionDescriptor GetNumaNodeProcessorMask$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_CHAR$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetNumaNodeProcessorMask$MH = RuntimeHelper.downcallHandle(
        "GetNumaNodeProcessorMask",
        constants$333.GetNumaNodeProcessorMask$FUNC, false
    );
    static final FunctionDescriptor GetNumaAvailableMemoryNode$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_CHAR$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GetNumaAvailableMemoryNode$MH = RuntimeHelper.downcallHandle(
        "GetNumaAvailableMemoryNode",
        constants$333.GetNumaAvailableMemoryNode$FUNC, false
    );
}


