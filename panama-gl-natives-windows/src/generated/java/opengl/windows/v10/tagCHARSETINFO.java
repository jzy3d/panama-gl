// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class tagCHARSETINFO {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("ciCharset"),
        Constants$root.C_LONG$LAYOUT.withName("ciACP"),
        MemoryLayout.structLayout(
            MemoryLayout.sequenceLayout(4, Constants$root.C_LONG$LAYOUT).withName("fsUsb"),
            MemoryLayout.sequenceLayout(2, Constants$root.C_LONG$LAYOUT).withName("fsCsb")
        ).withName("fs")
    ).withName("tagCHARSETINFO");
    public static MemoryLayout $LAYOUT() {
        return tagCHARSETINFO.$struct$LAYOUT;
    }
    static final VarHandle ciCharset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ciCharset"));
    public static VarHandle ciCharset$VH() {
        return tagCHARSETINFO.ciCharset$VH;
    }
    public static int ciCharset$get(MemorySegment seg) {
        return (int)tagCHARSETINFO.ciCharset$VH.get(seg);
    }
    public static void ciCharset$set( MemorySegment seg, int x) {
        tagCHARSETINFO.ciCharset$VH.set(seg, x);
    }
    public static int ciCharset$get(MemorySegment seg, long index) {
        return (int)tagCHARSETINFO.ciCharset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ciCharset$set(MemorySegment seg, long index, int x) {
        tagCHARSETINFO.ciCharset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ciACP$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ciACP"));
    public static VarHandle ciACP$VH() {
        return tagCHARSETINFO.ciACP$VH;
    }
    public static int ciACP$get(MemorySegment seg) {
        return (int)tagCHARSETINFO.ciACP$VH.get(seg);
    }
    public static void ciACP$set( MemorySegment seg, int x) {
        tagCHARSETINFO.ciACP$VH.set(seg, x);
    }
    public static int ciACP$get(MemorySegment seg, long index) {
        return (int)tagCHARSETINFO.ciACP$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ciACP$set(MemorySegment seg, long index, int x) {
        tagCHARSETINFO.ciACP$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment fs$slice(MemorySegment seg) {
        return seg.asSlice(8, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


