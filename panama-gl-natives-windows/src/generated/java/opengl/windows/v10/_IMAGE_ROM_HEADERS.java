// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _IMAGE_ROM_HEADERS {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("Machine"),
            Constants$root.C_SHORT$LAYOUT.withName("NumberOfSections"),
            Constants$root.C_LONG$LAYOUT.withName("TimeDateStamp"),
            Constants$root.C_LONG$LAYOUT.withName("PointerToSymbolTable"),
            Constants$root.C_LONG$LAYOUT.withName("NumberOfSymbols"),
            Constants$root.C_SHORT$LAYOUT.withName("SizeOfOptionalHeader"),
            Constants$root.C_SHORT$LAYOUT.withName("Characteristics")
        ).withName("FileHeader"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("Magic"),
            Constants$root.C_CHAR$LAYOUT.withName("MajorLinkerVersion"),
            Constants$root.C_CHAR$LAYOUT.withName("MinorLinkerVersion"),
            Constants$root.C_LONG$LAYOUT.withName("SizeOfCode"),
            Constants$root.C_LONG$LAYOUT.withName("SizeOfInitializedData"),
            Constants$root.C_LONG$LAYOUT.withName("SizeOfUninitializedData"),
            Constants$root.C_LONG$LAYOUT.withName("AddressOfEntryPoint"),
            Constants$root.C_LONG$LAYOUT.withName("BaseOfCode"),
            Constants$root.C_LONG$LAYOUT.withName("BaseOfData"),
            Constants$root.C_LONG$LAYOUT.withName("BaseOfBss"),
            Constants$root.C_LONG$LAYOUT.withName("GprMask"),
            MemoryLayout.sequenceLayout(4, Constants$root.C_LONG$LAYOUT).withName("CprMask"),
            Constants$root.C_LONG$LAYOUT.withName("GpValue")
        ).withName("OptionalHeader")
    ).withName("_IMAGE_ROM_HEADERS");
    public static MemoryLayout $LAYOUT() {
        return _IMAGE_ROM_HEADERS.$struct$LAYOUT;
    }
    public static MemorySegment FileHeader$slice(MemorySegment seg) {
        return seg.asSlice(0, 20);
    }
    public static MemorySegment OptionalHeader$slice(MemorySegment seg) {
        return seg.asSlice(20, 56);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


