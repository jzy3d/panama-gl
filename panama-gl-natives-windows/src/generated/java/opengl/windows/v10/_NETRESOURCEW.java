// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _NETRESOURCEW {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("dwScope"),
        Constants$root.C_LONG$LAYOUT.withName("dwType"),
        Constants$root.C_LONG$LAYOUT.withName("dwDisplayType"),
        Constants$root.C_LONG$LAYOUT.withName("dwUsage"),
        Constants$root.C_POINTER$LAYOUT.withName("lpLocalName"),
        Constants$root.C_POINTER$LAYOUT.withName("lpRemoteName"),
        Constants$root.C_POINTER$LAYOUT.withName("lpComment"),
        Constants$root.C_POINTER$LAYOUT.withName("lpProvider")
    ).withName("_NETRESOURCEW");
    public static MemoryLayout $LAYOUT() {
        return _NETRESOURCEW.$struct$LAYOUT;
    }
    static final VarHandle dwScope$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwScope"));
    public static VarHandle dwScope$VH() {
        return _NETRESOURCEW.dwScope$VH;
    }
    public static int dwScope$get(MemorySegment seg) {
        return (int)_NETRESOURCEW.dwScope$VH.get(seg);
    }
    public static void dwScope$set( MemorySegment seg, int x) {
        _NETRESOURCEW.dwScope$VH.set(seg, x);
    }
    public static int dwScope$get(MemorySegment seg, long index) {
        return (int)_NETRESOURCEW.dwScope$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwScope$set(MemorySegment seg, long index, int x) {
        _NETRESOURCEW.dwScope$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwType"));
    public static VarHandle dwType$VH() {
        return _NETRESOURCEW.dwType$VH;
    }
    public static int dwType$get(MemorySegment seg) {
        return (int)_NETRESOURCEW.dwType$VH.get(seg);
    }
    public static void dwType$set( MemorySegment seg, int x) {
        _NETRESOURCEW.dwType$VH.set(seg, x);
    }
    public static int dwType$get(MemorySegment seg, long index) {
        return (int)_NETRESOURCEW.dwType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwType$set(MemorySegment seg, long index, int x) {
        _NETRESOURCEW.dwType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwDisplayType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwDisplayType"));
    public static VarHandle dwDisplayType$VH() {
        return _NETRESOURCEW.dwDisplayType$VH;
    }
    public static int dwDisplayType$get(MemorySegment seg) {
        return (int)_NETRESOURCEW.dwDisplayType$VH.get(seg);
    }
    public static void dwDisplayType$set( MemorySegment seg, int x) {
        _NETRESOURCEW.dwDisplayType$VH.set(seg, x);
    }
    public static int dwDisplayType$get(MemorySegment seg, long index) {
        return (int)_NETRESOURCEW.dwDisplayType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwDisplayType$set(MemorySegment seg, long index, int x) {
        _NETRESOURCEW.dwDisplayType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwUsage$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwUsage"));
    public static VarHandle dwUsage$VH() {
        return _NETRESOURCEW.dwUsage$VH;
    }
    public static int dwUsage$get(MemorySegment seg) {
        return (int)_NETRESOURCEW.dwUsage$VH.get(seg);
    }
    public static void dwUsage$set( MemorySegment seg, int x) {
        _NETRESOURCEW.dwUsage$VH.set(seg, x);
    }
    public static int dwUsage$get(MemorySegment seg, long index) {
        return (int)_NETRESOURCEW.dwUsage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwUsage$set(MemorySegment seg, long index, int x) {
        _NETRESOURCEW.dwUsage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpLocalName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpLocalName"));
    public static VarHandle lpLocalName$VH() {
        return _NETRESOURCEW.lpLocalName$VH;
    }
    public static MemoryAddress lpLocalName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_NETRESOURCEW.lpLocalName$VH.get(seg);
    }
    public static void lpLocalName$set( MemorySegment seg, MemoryAddress x) {
        _NETRESOURCEW.lpLocalName$VH.set(seg, x);
    }
    public static MemoryAddress lpLocalName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_NETRESOURCEW.lpLocalName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpLocalName$set(MemorySegment seg, long index, MemoryAddress x) {
        _NETRESOURCEW.lpLocalName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpRemoteName$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpRemoteName"));
    public static VarHandle lpRemoteName$VH() {
        return _NETRESOURCEW.lpRemoteName$VH;
    }
    public static MemoryAddress lpRemoteName$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_NETRESOURCEW.lpRemoteName$VH.get(seg);
    }
    public static void lpRemoteName$set( MemorySegment seg, MemoryAddress x) {
        _NETRESOURCEW.lpRemoteName$VH.set(seg, x);
    }
    public static MemoryAddress lpRemoteName$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_NETRESOURCEW.lpRemoteName$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpRemoteName$set(MemorySegment seg, long index, MemoryAddress x) {
        _NETRESOURCEW.lpRemoteName$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpComment$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpComment"));
    public static VarHandle lpComment$VH() {
        return _NETRESOURCEW.lpComment$VH;
    }
    public static MemoryAddress lpComment$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_NETRESOURCEW.lpComment$VH.get(seg);
    }
    public static void lpComment$set( MemorySegment seg, MemoryAddress x) {
        _NETRESOURCEW.lpComment$VH.set(seg, x);
    }
    public static MemoryAddress lpComment$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_NETRESOURCEW.lpComment$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpComment$set(MemorySegment seg, long index, MemoryAddress x) {
        _NETRESOURCEW.lpComment$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpProvider$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpProvider"));
    public static VarHandle lpProvider$VH() {
        return _NETRESOURCEW.lpProvider$VH;
    }
    public static MemoryAddress lpProvider$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_NETRESOURCEW.lpProvider$VH.get(seg);
    }
    public static void lpProvider$set( MemorySegment seg, MemoryAddress x) {
        _NETRESOURCEW.lpProvider$VH.set(seg, x);
    }
    public static MemoryAddress lpProvider$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_NETRESOURCEW.lpProvider$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpProvider$set(MemorySegment seg, long index, MemoryAddress x) {
        _NETRESOURCEW.lpProvider$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


