// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2 {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("IoReadBytesLimit"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("IoWriteBytesLimit"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("$anon$0"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("LowPart"),
                Constants$root.C_LONG$LAYOUT.withName("HighPart")
            ).withName("u"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("QuadPart")
        ).withName("PerJobUserTimeLimit"),
        MemoryLayout.unionLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("JobHighMemoryLimit"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("JobMemoryLimit")
        ).withName("$anon$0"),
        MemoryLayout.unionLayout(
            Constants$root.C_LONG$LAYOUT.withName("RateControlTolerance"),
            Constants$root.C_LONG$LAYOUT.withName("CpuRateControlTolerance")
        ).withName("$anon$1"),
        MemoryLayout.unionLayout(
            Constants$root.C_LONG$LAYOUT.withName("RateControlToleranceInterval"),
            Constants$root.C_LONG$LAYOUT.withName("CpuRateControlToleranceInterval")
        ).withName("$anon$2"),
        Constants$root.C_LONG$LAYOUT.withName("LimitFlags"),
        Constants$root.C_LONG$LAYOUT.withName("IoRateControlTolerance"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("JobLowMemoryLimit"),
        Constants$root.C_LONG$LAYOUT.withName("IoRateControlToleranceInterval"),
        Constants$root.C_LONG$LAYOUT.withName("NetRateControlTolerance"),
        Constants$root.C_LONG$LAYOUT.withName("NetRateControlToleranceInterval"),
        MemoryLayout.paddingLayout(32)
    ).withName("JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2");
    public static MemoryLayout $LAYOUT() {
        return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.$struct$LAYOUT;
    }
    static final VarHandle IoReadBytesLimit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("IoReadBytesLimit"));
    public static VarHandle IoReadBytesLimit$VH() {
        return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.IoReadBytesLimit$VH;
    }
    public static long IoReadBytesLimit$get(MemorySegment seg) {
        return (long)JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.IoReadBytesLimit$VH.get(seg);
    }
    public static void IoReadBytesLimit$set( MemorySegment seg, long x) {
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.IoReadBytesLimit$VH.set(seg, x);
    }
    public static long IoReadBytesLimit$get(MemorySegment seg, long index) {
        return (long)JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.IoReadBytesLimit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IoReadBytesLimit$set(MemorySegment seg, long index, long x) {
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.IoReadBytesLimit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle IoWriteBytesLimit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("IoWriteBytesLimit"));
    public static VarHandle IoWriteBytesLimit$VH() {
        return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.IoWriteBytesLimit$VH;
    }
    public static long IoWriteBytesLimit$get(MemorySegment seg) {
        return (long)JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.IoWriteBytesLimit$VH.get(seg);
    }
    public static void IoWriteBytesLimit$set( MemorySegment seg, long x) {
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.IoWriteBytesLimit$VH.set(seg, x);
    }
    public static long IoWriteBytesLimit$get(MemorySegment seg, long index) {
        return (long)JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.IoWriteBytesLimit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IoWriteBytesLimit$set(MemorySegment seg, long index, long x) {
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.IoWriteBytesLimit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment PerJobUserTimeLimit$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    static final VarHandle JobHighMemoryLimit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("JobHighMemoryLimit"));
    public static VarHandle JobHighMemoryLimit$VH() {
        return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.JobHighMemoryLimit$VH;
    }
    public static long JobHighMemoryLimit$get(MemorySegment seg) {
        return (long)JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.JobHighMemoryLimit$VH.get(seg);
    }
    public static void JobHighMemoryLimit$set( MemorySegment seg, long x) {
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.JobHighMemoryLimit$VH.set(seg, x);
    }
    public static long JobHighMemoryLimit$get(MemorySegment seg, long index) {
        return (long)JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.JobHighMemoryLimit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void JobHighMemoryLimit$set(MemorySegment seg, long index, long x) {
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.JobHighMemoryLimit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle JobMemoryLimit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("JobMemoryLimit"));
    public static VarHandle JobMemoryLimit$VH() {
        return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.JobMemoryLimit$VH;
    }
    public static long JobMemoryLimit$get(MemorySegment seg) {
        return (long)JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.JobMemoryLimit$VH.get(seg);
    }
    public static void JobMemoryLimit$set( MemorySegment seg, long x) {
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.JobMemoryLimit$VH.set(seg, x);
    }
    public static long JobMemoryLimit$get(MemorySegment seg, long index) {
        return (long)JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.JobMemoryLimit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void JobMemoryLimit$set(MemorySegment seg, long index, long x) {
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.JobMemoryLimit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RateControlTolerance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$1"), MemoryLayout.PathElement.groupElement("RateControlTolerance"));
    public static VarHandle RateControlTolerance$VH() {
        return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.RateControlTolerance$VH;
    }
    public static int RateControlTolerance$get(MemorySegment seg) {
        return (int)JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.RateControlTolerance$VH.get(seg);
    }
    public static void RateControlTolerance$set( MemorySegment seg, int x) {
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.RateControlTolerance$VH.set(seg, x);
    }
    public static int RateControlTolerance$get(MemorySegment seg, long index) {
        return (int)JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.RateControlTolerance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RateControlTolerance$set(MemorySegment seg, long index, int x) {
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.RateControlTolerance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CpuRateControlTolerance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$1"), MemoryLayout.PathElement.groupElement("CpuRateControlTolerance"));
    public static VarHandle CpuRateControlTolerance$VH() {
        return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.CpuRateControlTolerance$VH;
    }
    public static int CpuRateControlTolerance$get(MemorySegment seg) {
        return (int)JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.CpuRateControlTolerance$VH.get(seg);
    }
    public static void CpuRateControlTolerance$set( MemorySegment seg, int x) {
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.CpuRateControlTolerance$VH.set(seg, x);
    }
    public static int CpuRateControlTolerance$get(MemorySegment seg, long index) {
        return (int)JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.CpuRateControlTolerance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CpuRateControlTolerance$set(MemorySegment seg, long index, int x) {
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.CpuRateControlTolerance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RateControlToleranceInterval$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$2"), MemoryLayout.PathElement.groupElement("RateControlToleranceInterval"));
    public static VarHandle RateControlToleranceInterval$VH() {
        return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.RateControlToleranceInterval$VH;
    }
    public static int RateControlToleranceInterval$get(MemorySegment seg) {
        return (int)JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.RateControlToleranceInterval$VH.get(seg);
    }
    public static void RateControlToleranceInterval$set( MemorySegment seg, int x) {
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.RateControlToleranceInterval$VH.set(seg, x);
    }
    public static int RateControlToleranceInterval$get(MemorySegment seg, long index) {
        return (int)JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.RateControlToleranceInterval$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RateControlToleranceInterval$set(MemorySegment seg, long index, int x) {
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.RateControlToleranceInterval$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CpuRateControlToleranceInterval$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$2"), MemoryLayout.PathElement.groupElement("CpuRateControlToleranceInterval"));
    public static VarHandle CpuRateControlToleranceInterval$VH() {
        return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.CpuRateControlToleranceInterval$VH;
    }
    public static int CpuRateControlToleranceInterval$get(MemorySegment seg) {
        return (int)JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.CpuRateControlToleranceInterval$VH.get(seg);
    }
    public static void CpuRateControlToleranceInterval$set( MemorySegment seg, int x) {
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.CpuRateControlToleranceInterval$VH.set(seg, x);
    }
    public static int CpuRateControlToleranceInterval$get(MemorySegment seg, long index) {
        return (int)JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.CpuRateControlToleranceInterval$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CpuRateControlToleranceInterval$set(MemorySegment seg, long index, int x) {
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.CpuRateControlToleranceInterval$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LimitFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LimitFlags"));
    public static VarHandle LimitFlags$VH() {
        return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.LimitFlags$VH;
    }
    public static int LimitFlags$get(MemorySegment seg) {
        return (int)JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.LimitFlags$VH.get(seg);
    }
    public static void LimitFlags$set( MemorySegment seg, int x) {
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.LimitFlags$VH.set(seg, x);
    }
    public static int LimitFlags$get(MemorySegment seg, long index) {
        return (int)JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.LimitFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LimitFlags$set(MemorySegment seg, long index, int x) {
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.LimitFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle IoRateControlTolerance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("IoRateControlTolerance"));
    public static VarHandle IoRateControlTolerance$VH() {
        return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.IoRateControlTolerance$VH;
    }
    public static int IoRateControlTolerance$get(MemorySegment seg) {
        return (int)JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.IoRateControlTolerance$VH.get(seg);
    }
    public static void IoRateControlTolerance$set( MemorySegment seg, int x) {
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.IoRateControlTolerance$VH.set(seg, x);
    }
    public static int IoRateControlTolerance$get(MemorySegment seg, long index) {
        return (int)JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.IoRateControlTolerance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IoRateControlTolerance$set(MemorySegment seg, long index, int x) {
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.IoRateControlTolerance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle JobLowMemoryLimit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("JobLowMemoryLimit"));
    public static VarHandle JobLowMemoryLimit$VH() {
        return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.JobLowMemoryLimit$VH;
    }
    public static long JobLowMemoryLimit$get(MemorySegment seg) {
        return (long)JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.JobLowMemoryLimit$VH.get(seg);
    }
    public static void JobLowMemoryLimit$set( MemorySegment seg, long x) {
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.JobLowMemoryLimit$VH.set(seg, x);
    }
    public static long JobLowMemoryLimit$get(MemorySegment seg, long index) {
        return (long)JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.JobLowMemoryLimit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void JobLowMemoryLimit$set(MemorySegment seg, long index, long x) {
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.JobLowMemoryLimit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle IoRateControlToleranceInterval$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("IoRateControlToleranceInterval"));
    public static VarHandle IoRateControlToleranceInterval$VH() {
        return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.IoRateControlToleranceInterval$VH;
    }
    public static int IoRateControlToleranceInterval$get(MemorySegment seg) {
        return (int)JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.IoRateControlToleranceInterval$VH.get(seg);
    }
    public static void IoRateControlToleranceInterval$set( MemorySegment seg, int x) {
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.IoRateControlToleranceInterval$VH.set(seg, x);
    }
    public static int IoRateControlToleranceInterval$get(MemorySegment seg, long index) {
        return (int)JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.IoRateControlToleranceInterval$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void IoRateControlToleranceInterval$set(MemorySegment seg, long index, int x) {
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.IoRateControlToleranceInterval$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NetRateControlTolerance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NetRateControlTolerance"));
    public static VarHandle NetRateControlTolerance$VH() {
        return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.NetRateControlTolerance$VH;
    }
    public static int NetRateControlTolerance$get(MemorySegment seg) {
        return (int)JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.NetRateControlTolerance$VH.get(seg);
    }
    public static void NetRateControlTolerance$set( MemorySegment seg, int x) {
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.NetRateControlTolerance$VH.set(seg, x);
    }
    public static int NetRateControlTolerance$get(MemorySegment seg, long index) {
        return (int)JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.NetRateControlTolerance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NetRateControlTolerance$set(MemorySegment seg, long index, int x) {
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.NetRateControlTolerance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NetRateControlToleranceInterval$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NetRateControlToleranceInterval"));
    public static VarHandle NetRateControlToleranceInterval$VH() {
        return JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.NetRateControlToleranceInterval$VH;
    }
    public static int NetRateControlToleranceInterval$get(MemorySegment seg) {
        return (int)JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.NetRateControlToleranceInterval$VH.get(seg);
    }
    public static void NetRateControlToleranceInterval$set( MemorySegment seg, int x) {
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.NetRateControlToleranceInterval$VH.set(seg, x);
    }
    public static int NetRateControlToleranceInterval$get(MemorySegment seg, long index) {
        return (int)JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.NetRateControlToleranceInterval$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NetRateControlToleranceInterval$set(MemorySegment seg, long index, int x) {
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2.NetRateControlToleranceInterval$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


