// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
 class freeglut_h_14 extends freeglut_h_13 {

    public static MethodHandle WinHelpW$MH() {
        return RuntimeHelper.requireNonNull(constants$514.WinHelpW$MH,"WinHelpW");
    }
    public static int WinHelpW ( Addressable hWndMain,  Addressable lpszHelp,  int uCommand,  long dwData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$514.WinHelpW$MH, "WinHelpW");
        try {
            return (int)mh$.invokeExact(hWndMain, lpszHelp, uCommand, dwData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGuiResources$MH() {
        return RuntimeHelper.requireNonNull(constants$514.GetGuiResources$MH,"GetGuiResources");
    }
    public static int GetGuiResources ( Addressable hProcess,  int uiFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$514.GetGuiResources$MH, "GetGuiResources");
        try {
            return (int)mh$.invokeExact(hProcess, uiFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PTOUCHPREDICTIONPARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static int HANDEDNESS_LEFT() {
        return (int)0L;
    }
    public static int HANDEDNESS_RIGHT() {
        return (int)1L;
    }
    public static OfAddress PHANDEDNESS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNONCLIENTMETRICSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNONCLIENTMETRICSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNONCLIENTMETRICSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNONCLIENTMETRICSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNONCLIENTMETRICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNONCLIENTMETRICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMINIMIZEDMETRICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMINIMIZEDMETRICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PICONMETRICSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPICONMETRICSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PICONMETRICSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPICONMETRICSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PICONMETRICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPICONMETRICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPANIMATIONINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERIALKEYSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERIALKEYSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERIALKEYS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHIGHCONTRASTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHIGHCONTRASTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHIGHCONTRAST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVIDEOPARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPVIDEOPARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ChangeDisplaySettingsA$MH() {
        return RuntimeHelper.requireNonNull(constants$514.ChangeDisplaySettingsA$MH,"ChangeDisplaySettingsA");
    }
    public static int ChangeDisplaySettingsA ( Addressable lpDevMode,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$514.ChangeDisplaySettingsA$MH, "ChangeDisplaySettingsA");
        try {
            return (int)mh$.invokeExact(lpDevMode, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeDisplaySettingsW$MH() {
        return RuntimeHelper.requireNonNull(constants$515.ChangeDisplaySettingsW$MH,"ChangeDisplaySettingsW");
    }
    public static int ChangeDisplaySettingsW ( Addressable lpDevMode,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$515.ChangeDisplaySettingsW$MH, "ChangeDisplaySettingsW");
        try {
            return (int)mh$.invokeExact(lpDevMode, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeDisplaySettingsExA$MH() {
        return RuntimeHelper.requireNonNull(constants$515.ChangeDisplaySettingsExA$MH,"ChangeDisplaySettingsExA");
    }
    public static int ChangeDisplaySettingsExA ( Addressable lpszDeviceName,  Addressable lpDevMode,  Addressable hwnd,  int dwflags,  Addressable lParam) {
        var mh$ = RuntimeHelper.requireNonNull(constants$515.ChangeDisplaySettingsExA$MH, "ChangeDisplaySettingsExA");
        try {
            return (int)mh$.invokeExact(lpszDeviceName, lpDevMode, hwnd, dwflags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeDisplaySettingsExW$MH() {
        return RuntimeHelper.requireNonNull(constants$515.ChangeDisplaySettingsExW$MH,"ChangeDisplaySettingsExW");
    }
    public static int ChangeDisplaySettingsExW ( Addressable lpszDeviceName,  Addressable lpDevMode,  Addressable hwnd,  int dwflags,  Addressable lParam) {
        var mh$ = RuntimeHelper.requireNonNull(constants$515.ChangeDisplaySettingsExW$MH, "ChangeDisplaySettingsExW");
        try {
            return (int)mh$.invokeExact(lpszDeviceName, lpDevMode, hwnd, dwflags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDisplaySettingsA$MH() {
        return RuntimeHelper.requireNonNull(constants$515.EnumDisplaySettingsA$MH,"EnumDisplaySettingsA");
    }
    public static int EnumDisplaySettingsA ( Addressable lpszDeviceName,  int iModeNum,  Addressable lpDevMode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$515.EnumDisplaySettingsA$MH, "EnumDisplaySettingsA");
        try {
            return (int)mh$.invokeExact(lpszDeviceName, iModeNum, lpDevMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDisplaySettingsW$MH() {
        return RuntimeHelper.requireNonNull(constants$515.EnumDisplaySettingsW$MH,"EnumDisplaySettingsW");
    }
    public static int EnumDisplaySettingsW ( Addressable lpszDeviceName,  int iModeNum,  Addressable lpDevMode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$515.EnumDisplaySettingsW$MH, "EnumDisplaySettingsW");
        try {
            return (int)mh$.invokeExact(lpszDeviceName, iModeNum, lpDevMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDisplaySettingsExA$MH() {
        return RuntimeHelper.requireNonNull(constants$515.EnumDisplaySettingsExA$MH,"EnumDisplaySettingsExA");
    }
    public static int EnumDisplaySettingsExA ( Addressable lpszDeviceName,  int iModeNum,  Addressable lpDevMode,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$515.EnumDisplaySettingsExA$MH, "EnumDisplaySettingsExA");
        try {
            return (int)mh$.invokeExact(lpszDeviceName, iModeNum, lpDevMode, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDisplaySettingsExW$MH() {
        return RuntimeHelper.requireNonNull(constants$516.EnumDisplaySettingsExW$MH,"EnumDisplaySettingsExW");
    }
    public static int EnumDisplaySettingsExW ( Addressable lpszDeviceName,  int iModeNum,  Addressable lpDevMode,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$516.EnumDisplaySettingsExW$MH, "EnumDisplaySettingsExW");
        try {
            return (int)mh$.invokeExact(lpszDeviceName, iModeNum, lpDevMode, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDisplayDevicesA$MH() {
        return RuntimeHelper.requireNonNull(constants$516.EnumDisplayDevicesA$MH,"EnumDisplayDevicesA");
    }
    public static int EnumDisplayDevicesA ( Addressable lpDevice,  int iDevNum,  Addressable lpDisplayDevice,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$516.EnumDisplayDevicesA$MH, "EnumDisplayDevicesA");
        try {
            return (int)mh$.invokeExact(lpDevice, iDevNum, lpDisplayDevice, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDisplayDevicesW$MH() {
        return RuntimeHelper.requireNonNull(constants$516.EnumDisplayDevicesW$MH,"EnumDisplayDevicesW");
    }
    public static int EnumDisplayDevicesW ( Addressable lpDevice,  int iDevNum,  Addressable lpDisplayDevice,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$516.EnumDisplayDevicesW$MH, "EnumDisplayDevicesW");
        try {
            return (int)mh$.invokeExact(lpDevice, iDevNum, lpDisplayDevice, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDisplayConfigBufferSizes$MH() {
        return RuntimeHelper.requireNonNull(constants$516.GetDisplayConfigBufferSizes$MH,"GetDisplayConfigBufferSizes");
    }
    public static int GetDisplayConfigBufferSizes ( int flags,  Addressable numPathArrayElements,  Addressable numModeInfoArrayElements) {
        var mh$ = RuntimeHelper.requireNonNull(constants$516.GetDisplayConfigBufferSizes$MH, "GetDisplayConfigBufferSizes");
        try {
            return (int)mh$.invokeExact(flags, numPathArrayElements, numModeInfoArrayElements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDisplayConfig$MH() {
        return RuntimeHelper.requireNonNull(constants$516.SetDisplayConfig$MH,"SetDisplayConfig");
    }
    public static int SetDisplayConfig ( int numPathArrayElements,  Addressable pathArray,  int numModeInfoArrayElements,  Addressable modeInfoArray,  int flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$516.SetDisplayConfig$MH, "SetDisplayConfig");
        try {
            return (int)mh$.invokeExact(numPathArrayElements, pathArray, numModeInfoArrayElements, modeInfoArray, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryDisplayConfig$MH() {
        return RuntimeHelper.requireNonNull(constants$516.QueryDisplayConfig$MH,"QueryDisplayConfig");
    }
    public static int QueryDisplayConfig ( int flags,  Addressable numPathArrayElements,  Addressable pathArray,  Addressable numModeInfoArrayElements,  Addressable modeInfoArray,  Addressable currentTopologyId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$516.QueryDisplayConfig$MH, "QueryDisplayConfig");
        try {
            return (int)mh$.invokeExact(flags, numPathArrayElements, pathArray, numModeInfoArrayElements, modeInfoArray, currentTopologyId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DisplayConfigGetDeviceInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$517.DisplayConfigGetDeviceInfo$MH,"DisplayConfigGetDeviceInfo");
    }
    public static int DisplayConfigGetDeviceInfo ( Addressable requestPacket) {
        var mh$ = RuntimeHelper.requireNonNull(constants$517.DisplayConfigGetDeviceInfo$MH, "DisplayConfigGetDeviceInfo");
        try {
            return (int)mh$.invokeExact(requestPacket);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DisplayConfigSetDeviceInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$517.DisplayConfigSetDeviceInfo$MH,"DisplayConfigSetDeviceInfo");
    }
    public static int DisplayConfigSetDeviceInfo ( Addressable setPacket) {
        var mh$ = RuntimeHelper.requireNonNull(constants$517.DisplayConfigSetDeviceInfo$MH, "DisplayConfigSetDeviceInfo");
        try {
            return (int)mh$.invokeExact(setPacket);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SystemParametersInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$517.SystemParametersInfoA$MH,"SystemParametersInfoA");
    }
    public static int SystemParametersInfoA ( int uiAction,  int uiParam,  Addressable pvParam,  int fWinIni) {
        var mh$ = RuntimeHelper.requireNonNull(constants$517.SystemParametersInfoA$MH, "SystemParametersInfoA");
        try {
            return (int)mh$.invokeExact(uiAction, uiParam, pvParam, fWinIni);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SystemParametersInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$517.SystemParametersInfoW$MH,"SystemParametersInfoW");
    }
    public static int SystemParametersInfoW ( int uiAction,  int uiParam,  Addressable pvParam,  int fWinIni) {
        var mh$ = RuntimeHelper.requireNonNull(constants$517.SystemParametersInfoW$MH, "SystemParametersInfoW");
        try {
            return (int)mh$.invokeExact(uiAction, uiParam, pvParam, fWinIni);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SystemParametersInfoForDpi$MH() {
        return RuntimeHelper.requireNonNull(constants$517.SystemParametersInfoForDpi$MH,"SystemParametersInfoForDpi");
    }
    public static int SystemParametersInfoForDpi ( int uiAction,  int uiParam,  Addressable pvParam,  int fWinIni,  int dpi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$517.SystemParametersInfoForDpi$MH, "SystemParametersInfoForDpi");
        try {
            return (int)mh$.invokeExact(uiAction, uiParam, pvParam, fWinIni, dpi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPFILTERKEYS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSTICKYKEYS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMOUSEKEYS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPACCESSTIMEOUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSOUNDSENTRYA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSOUNDSENTRYW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSOUNDSENTRY = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SoundSentry$MH() {
        return RuntimeHelper.requireNonNull(constants$517.SoundSentry$MH,"SoundSentry");
    }
    public static int SoundSentry () {
        var mh$ = RuntimeHelper.requireNonNull(constants$517.SoundSentry$MH, "SoundSentry");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPTOGGLEKEYS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPAUDIODESCRIPTION = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SetDebugErrorLevel$MH() {
        return RuntimeHelper.requireNonNull(constants$518.SetDebugErrorLevel$MH,"SetDebugErrorLevel");
    }
    public static void SetDebugErrorLevel ( int dwLevel) {
        var mh$ = RuntimeHelper.requireNonNull(constants$518.SetDebugErrorLevel$MH, "SetDebugErrorLevel");
        try {
            mh$.invokeExact(dwLevel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetLastErrorEx$MH() {
        return RuntimeHelper.requireNonNull(constants$518.SetLastErrorEx$MH,"SetLastErrorEx");
    }
    public static void SetLastErrorEx ( int dwErrCode,  int dwType) {
        var mh$ = RuntimeHelper.requireNonNull(constants$518.SetLastErrorEx$MH, "SetLastErrorEx");
        try {
            mh$.invokeExact(dwErrCode, dwType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InternalGetWindowText$MH() {
        return RuntimeHelper.requireNonNull(constants$518.InternalGetWindowText$MH,"InternalGetWindowText");
    }
    public static int InternalGetWindowText ( Addressable hWnd,  Addressable pString,  int cchMaxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$518.InternalGetWindowText$MH, "InternalGetWindowText");
        try {
            return (int)mh$.invokeExact(hWnd, pString, cchMaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CancelShutdown$MH() {
        return RuntimeHelper.requireNonNull(constants$518.CancelShutdown$MH,"CancelShutdown");
    }
    public static int CancelShutdown () {
        var mh$ = RuntimeHelper.requireNonNull(constants$518.CancelShutdown$MH, "CancelShutdown");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MonitorFromPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$518.MonitorFromPoint$MH,"MonitorFromPoint");
    }
    public static MemoryAddress MonitorFromPoint ( MemorySegment pt,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$518.MonitorFromPoint$MH, "MonitorFromPoint");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(pt, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MonitorFromRect$MH() {
        return RuntimeHelper.requireNonNull(constants$518.MonitorFromRect$MH,"MonitorFromRect");
    }
    public static MemoryAddress MonitorFromRect ( Addressable lprc,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$518.MonitorFromRect$MH, "MonitorFromRect");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lprc, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MonitorFromWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$519.MonitorFromWindow$MH,"MonitorFromWindow");
    }
    public static MemoryAddress MonitorFromWindow ( Addressable hwnd,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$519.MonitorFromWindow$MH, "MonitorFromWindow");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hwnd, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPMONITORINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMONITORINFOEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMONITORINFOEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMONITORINFOEX = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetMonitorInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$519.GetMonitorInfoA$MH,"GetMonitorInfoA");
    }
    public static int GetMonitorInfoA ( Addressable hMonitor,  Addressable lpmi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$519.GetMonitorInfoA$MH, "GetMonitorInfoA");
        try {
            return (int)mh$.invokeExact(hMonitor, lpmi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetMonitorInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$519.GetMonitorInfoW$MH,"GetMonitorInfoW");
    }
    public static int GetMonitorInfoW ( Addressable hMonitor,  Addressable lpmi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$519.GetMonitorInfoW$MH, "GetMonitorInfoW");
        try {
            return (int)mh$.invokeExact(hMonitor, lpmi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDisplayMonitors$MH() {
        return RuntimeHelper.requireNonNull(constants$519.EnumDisplayMonitors$MH,"EnumDisplayMonitors");
    }
    public static int EnumDisplayMonitors ( Addressable hdc,  Addressable lprcClip,  Addressable lpfnEnum,  long dwData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$519.EnumDisplayMonitors$MH, "EnumDisplayMonitors");
        try {
            return (int)mh$.invokeExact(hdc, lprcClip, lpfnEnum, dwData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NotifyWinEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$520.NotifyWinEvent$MH,"NotifyWinEvent");
    }
    public static void NotifyWinEvent ( int event,  Addressable hwnd,  int idObject,  int idChild) {
        var mh$ = RuntimeHelper.requireNonNull(constants$520.NotifyWinEvent$MH, "NotifyWinEvent");
        try {
            mh$.invokeExact(event, hwnd, idObject, idChild);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetWinEventHook$MH() {
        return RuntimeHelper.requireNonNull(constants$520.SetWinEventHook$MH,"SetWinEventHook");
    }
    public static MemoryAddress SetWinEventHook ( int eventMin,  int eventMax,  Addressable hmodWinEventProc,  Addressable pfnWinEventProc,  int idProcess,  int idThread,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$520.SetWinEventHook$MH, "SetWinEventHook");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(eventMin, eventMax, hmodWinEventProc, pfnWinEventProc, idProcess, idThread, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsWinEventHookInstalled$MH() {
        return RuntimeHelper.requireNonNull(constants$520.IsWinEventHookInstalled$MH,"IsWinEventHookInstalled");
    }
    public static int IsWinEventHookInstalled ( int event) {
        var mh$ = RuntimeHelper.requireNonNull(constants$520.IsWinEventHookInstalled$MH, "IsWinEventHookInstalled");
        try {
            return (int)mh$.invokeExact(event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnhookWinEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$520.UnhookWinEvent$MH,"UnhookWinEvent");
    }
    public static int UnhookWinEvent ( Addressable hWinEventHook) {
        var mh$ = RuntimeHelper.requireNonNull(constants$520.UnhookWinEvent$MH, "UnhookWinEvent");
        try {
            return (int)mh$.invokeExact(hWinEventHook);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PGUITHREADINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPGUITHREADINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetGUIThreadInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$521.GetGUIThreadInfo$MH,"GetGUIThreadInfo");
    }
    public static int GetGUIThreadInfo ( int idThread,  Addressable pgui) {
        var mh$ = RuntimeHelper.requireNonNull(constants$521.GetGUIThreadInfo$MH, "GetGUIThreadInfo");
        try {
            return (int)mh$.invokeExact(idThread, pgui);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle BlockInput$MH() {
        return RuntimeHelper.requireNonNull(constants$521.BlockInput$MH,"BlockInput");
    }
    public static int BlockInput ( int fBlockIt) {
        var mh$ = RuntimeHelper.requireNonNull(constants$521.BlockInput$MH, "BlockInput");
        try {
            return (int)mh$.invokeExact(fBlockIt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessDPIAware$MH() {
        return RuntimeHelper.requireNonNull(constants$521.SetProcessDPIAware$MH,"SetProcessDPIAware");
    }
    public static int SetProcessDPIAware () {
        var mh$ = RuntimeHelper.requireNonNull(constants$521.SetProcessDPIAware$MH, "SetProcessDPIAware");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsProcessDPIAware$MH() {
        return RuntimeHelper.requireNonNull(constants$521.IsProcessDPIAware$MH,"IsProcessDPIAware");
    }
    public static int IsProcessDPIAware () {
        var mh$ = RuntimeHelper.requireNonNull(constants$521.IsProcessDPIAware$MH, "IsProcessDPIAware");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadDpiAwarenessContext$MH() {
        return RuntimeHelper.requireNonNull(constants$521.SetThreadDpiAwarenessContext$MH,"SetThreadDpiAwarenessContext");
    }
    public static MemoryAddress SetThreadDpiAwarenessContext ( Addressable dpiContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$521.SetThreadDpiAwarenessContext$MH, "SetThreadDpiAwarenessContext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dpiContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadDpiAwarenessContext$MH() {
        return RuntimeHelper.requireNonNull(constants$521.GetThreadDpiAwarenessContext$MH,"GetThreadDpiAwarenessContext");
    }
    public static MemoryAddress GetThreadDpiAwarenessContext () {
        var mh$ = RuntimeHelper.requireNonNull(constants$521.GetThreadDpiAwarenessContext$MH, "GetThreadDpiAwarenessContext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowDpiAwarenessContext$MH() {
        return RuntimeHelper.requireNonNull(constants$522.GetWindowDpiAwarenessContext$MH,"GetWindowDpiAwarenessContext");
    }
    public static MemoryAddress GetWindowDpiAwarenessContext ( Addressable hwnd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$522.GetWindowDpiAwarenessContext$MH, "GetWindowDpiAwarenessContext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAwarenessFromDpiAwarenessContext$MH() {
        return RuntimeHelper.requireNonNull(constants$522.GetAwarenessFromDpiAwarenessContext$MH,"GetAwarenessFromDpiAwarenessContext");
    }
    public static int GetAwarenessFromDpiAwarenessContext ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$522.GetAwarenessFromDpiAwarenessContext$MH, "GetAwarenessFromDpiAwarenessContext");
        try {
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDpiFromDpiAwarenessContext$MH() {
        return RuntimeHelper.requireNonNull(constants$522.GetDpiFromDpiAwarenessContext$MH,"GetDpiFromDpiAwarenessContext");
    }
    public static int GetDpiFromDpiAwarenessContext ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$522.GetDpiFromDpiAwarenessContext$MH, "GetDpiFromDpiAwarenessContext");
        try {
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AreDpiAwarenessContextsEqual$MH() {
        return RuntimeHelper.requireNonNull(constants$522.AreDpiAwarenessContextsEqual$MH,"AreDpiAwarenessContextsEqual");
    }
    public static int AreDpiAwarenessContextsEqual ( Addressable dpiContextA,  Addressable dpiContextB) {
        var mh$ = RuntimeHelper.requireNonNull(constants$522.AreDpiAwarenessContextsEqual$MH, "AreDpiAwarenessContextsEqual");
        try {
            return (int)mh$.invokeExact(dpiContextA, dpiContextB);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsValidDpiAwarenessContext$MH() {
        return RuntimeHelper.requireNonNull(constants$522.IsValidDpiAwarenessContext$MH,"IsValidDpiAwarenessContext");
    }
    public static int IsValidDpiAwarenessContext ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$522.IsValidDpiAwarenessContext$MH, "IsValidDpiAwarenessContext");
        try {
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDpiForWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$522.GetDpiForWindow$MH,"GetDpiForWindow");
    }
    public static int GetDpiForWindow ( Addressable hwnd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$522.GetDpiForWindow$MH, "GetDpiForWindow");
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDpiForSystem$MH() {
        return RuntimeHelper.requireNonNull(constants$523.GetDpiForSystem$MH,"GetDpiForSystem");
    }
    public static int GetDpiForSystem () {
        var mh$ = RuntimeHelper.requireNonNull(constants$523.GetDpiForSystem$MH, "GetDpiForSystem");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemDpiForProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$523.GetSystemDpiForProcess$MH,"GetSystemDpiForProcess");
    }
    public static int GetSystemDpiForProcess ( Addressable hProcess) {
        var mh$ = RuntimeHelper.requireNonNull(constants$523.GetSystemDpiForProcess$MH, "GetSystemDpiForProcess");
        try {
            return (int)mh$.invokeExact(hProcess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnableNonClientDpiScaling$MH() {
        return RuntimeHelper.requireNonNull(constants$523.EnableNonClientDpiScaling$MH,"EnableNonClientDpiScaling");
    }
    public static int EnableNonClientDpiScaling ( Addressable hwnd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$523.EnableNonClientDpiScaling$MH, "EnableNonClientDpiScaling");
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InheritWindowMonitor$MH() {
        return RuntimeHelper.requireNonNull(constants$523.InheritWindowMonitor$MH,"InheritWindowMonitor");
    }
    public static int InheritWindowMonitor ( Addressable hwnd,  Addressable hwndInherit) {
        var mh$ = RuntimeHelper.requireNonNull(constants$523.InheritWindowMonitor$MH, "InheritWindowMonitor");
        try {
            return (int)mh$.invokeExact(hwnd, hwndInherit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessDpiAwarenessContext$MH() {
        return RuntimeHelper.requireNonNull(constants$523.SetProcessDpiAwarenessContext$MH,"SetProcessDpiAwarenessContext");
    }
    public static int SetProcessDpiAwarenessContext ( Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$523.SetProcessDpiAwarenessContext$MH, "SetProcessDpiAwarenessContext");
        try {
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDpiAwarenessContextForProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$523.GetDpiAwarenessContextForProcess$MH,"GetDpiAwarenessContextForProcess");
    }
    public static MemoryAddress GetDpiAwarenessContextForProcess ( Addressable hProcess) {
        var mh$ = RuntimeHelper.requireNonNull(constants$523.GetDpiAwarenessContextForProcess$MH, "GetDpiAwarenessContextForProcess");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hProcess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadDpiHostingBehavior$MH() {
        return RuntimeHelper.requireNonNull(constants$524.SetThreadDpiHostingBehavior$MH,"SetThreadDpiHostingBehavior");
    }
    public static int SetThreadDpiHostingBehavior ( int value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$524.SetThreadDpiHostingBehavior$MH, "SetThreadDpiHostingBehavior");
        try {
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadDpiHostingBehavior$MH() {
        return RuntimeHelper.requireNonNull(constants$524.GetThreadDpiHostingBehavior$MH,"GetThreadDpiHostingBehavior");
    }
    public static int GetThreadDpiHostingBehavior () {
        var mh$ = RuntimeHelper.requireNonNull(constants$524.GetThreadDpiHostingBehavior$MH, "GetThreadDpiHostingBehavior");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowDpiHostingBehavior$MH() {
        return RuntimeHelper.requireNonNull(constants$524.GetWindowDpiHostingBehavior$MH,"GetWindowDpiHostingBehavior");
    }
    public static int GetWindowDpiHostingBehavior ( Addressable hwnd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$524.GetWindowDpiHostingBehavior$MH, "GetWindowDpiHostingBehavior");
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowModuleFileNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$524.GetWindowModuleFileNameA$MH,"GetWindowModuleFileNameA");
    }
    public static int GetWindowModuleFileNameA ( Addressable hwnd,  Addressable pszFileName,  int cchFileNameMax) {
        var mh$ = RuntimeHelper.requireNonNull(constants$524.GetWindowModuleFileNameA$MH, "GetWindowModuleFileNameA");
        try {
            return (int)mh$.invokeExact(hwnd, pszFileName, cchFileNameMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetWindowModuleFileNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$524.GetWindowModuleFileNameW$MH,"GetWindowModuleFileNameW");
    }
    public static int GetWindowModuleFileNameW ( Addressable hwnd,  Addressable pszFileName,  int cchFileNameMax) {
        var mh$ = RuntimeHelper.requireNonNull(constants$524.GetWindowModuleFileNameW$MH, "GetWindowModuleFileNameW");
        try {
            return (int)mh$.invokeExact(hwnd, pszFileName, cchFileNameMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCURSORINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCURSORINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetCursorInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$524.GetCursorInfo$MH,"GetCursorInfo");
    }
    public static int GetCursorInfo ( Addressable pci) {
        var mh$ = RuntimeHelper.requireNonNull(constants$524.GetCursorInfo$MH, "GetCursorInfo");
        try {
            return (int)mh$.invokeExact(pci);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PWINDOWINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWINDOWINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetWindowInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$525.GetWindowInfo$MH,"GetWindowInfo");
    }
    public static int GetWindowInfo ( Addressable hwnd,  Addressable pwi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$525.GetWindowInfo$MH, "GetWindowInfo");
        try {
            return (int)mh$.invokeExact(hwnd, pwi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PTITLEBARINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTITLEBARINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetTitleBarInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$525.GetTitleBarInfo$MH,"GetTitleBarInfo");
    }
    public static int GetTitleBarInfo ( Addressable hwnd,  Addressable pti) {
        var mh$ = RuntimeHelper.requireNonNull(constants$525.GetTitleBarInfo$MH, "GetTitleBarInfo");
        try {
            return (int)mh$.invokeExact(hwnd, pti);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PTITLEBARINFOEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTITLEBARINFOEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMENUBARINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMENUBARINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetMenuBarInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$525.GetMenuBarInfo$MH,"GetMenuBarInfo");
    }
    public static int GetMenuBarInfo ( Addressable hwnd,  int idObject,  int idItem,  Addressable pmbi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$525.GetMenuBarInfo$MH, "GetMenuBarInfo");
        try {
            return (int)mh$.invokeExact(hwnd, idObject, idItem, pmbi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PSCROLLBARINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSCROLLBARINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetScrollBarInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$525.GetScrollBarInfo$MH,"GetScrollBarInfo");
    }
    public static int GetScrollBarInfo ( Addressable hwnd,  int idObject,  Addressable psbi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$525.GetScrollBarInfo$MH, "GetScrollBarInfo");
        try {
            return (int)mh$.invokeExact(hwnd, idObject, psbi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCOMBOBOXINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCOMBOBOXINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetComboBoxInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$525.GetComboBoxInfo$MH,"GetComboBoxInfo");
    }
    public static int GetComboBoxInfo ( Addressable hwndCombo,  Addressable pcbi) {
        var mh$ = RuntimeHelper.requireNonNull(constants$525.GetComboBoxInfo$MH, "GetComboBoxInfo");
        try {
            return (int)mh$.invokeExact(hwndCombo, pcbi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAncestor$MH() {
        return RuntimeHelper.requireNonNull(constants$525.GetAncestor$MH,"GetAncestor");
    }
    public static MemoryAddress GetAncestor ( Addressable hwnd,  int gaFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$525.GetAncestor$MH, "GetAncestor");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hwnd, gaFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RealChildWindowFromPoint$MH() {
        return RuntimeHelper.requireNonNull(constants$526.RealChildWindowFromPoint$MH,"RealChildWindowFromPoint");
    }
    public static MemoryAddress RealChildWindowFromPoint ( Addressable hwndParent,  MemorySegment ptParentClientCoords) {
        var mh$ = RuntimeHelper.requireNonNull(constants$526.RealChildWindowFromPoint$MH, "RealChildWindowFromPoint");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hwndParent, ptParentClientCoords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RealGetWindowClassA$MH() {
        return RuntimeHelper.requireNonNull(constants$526.RealGetWindowClassA$MH,"RealGetWindowClassA");
    }
    public static int RealGetWindowClassA ( Addressable hwnd,  Addressable ptszClassName,  int cchClassNameMax) {
        var mh$ = RuntimeHelper.requireNonNull(constants$526.RealGetWindowClassA$MH, "RealGetWindowClassA");
        try {
            return (int)mh$.invokeExact(hwnd, ptszClassName, cchClassNameMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RealGetWindowClassW$MH() {
        return RuntimeHelper.requireNonNull(constants$526.RealGetWindowClassW$MH,"RealGetWindowClassW");
    }
    public static int RealGetWindowClassW ( Addressable hwnd,  Addressable ptszClassName,  int cchClassNameMax) {
        var mh$ = RuntimeHelper.requireNonNull(constants$526.RealGetWindowClassW$MH, "RealGetWindowClassW");
        try {
            return (int)mh$.invokeExact(hwnd, ptszClassName, cchClassNameMax);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PALTTABINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPALTTABINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetAltTabInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$526.GetAltTabInfoA$MH,"GetAltTabInfoA");
    }
    public static int GetAltTabInfoA ( Addressable hwnd,  int iItem,  Addressable pati,  Addressable pszItemText,  int cchItemText) {
        var mh$ = RuntimeHelper.requireNonNull(constants$526.GetAltTabInfoA$MH, "GetAltTabInfoA");
        try {
            return (int)mh$.invokeExact(hwnd, iItem, pati, pszItemText, cchItemText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetAltTabInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$526.GetAltTabInfoW$MH,"GetAltTabInfoW");
    }
    public static int GetAltTabInfoW ( Addressable hwnd,  int iItem,  Addressable pati,  Addressable pszItemText,  int cchItemText) {
        var mh$ = RuntimeHelper.requireNonNull(constants$526.GetAltTabInfoW$MH, "GetAltTabInfoW");
        try {
            return (int)mh$.invokeExact(hwnd, iItem, pati, pszItemText, cchItemText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetListBoxInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$526.GetListBoxInfo$MH,"GetListBoxInfo");
    }
    public static int GetListBoxInfo ( Addressable hwnd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$526.GetListBoxInfo$MH, "GetListBoxInfo");
        try {
            return (int)mh$.invokeExact(hwnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LockWorkStation$MH() {
        return RuntimeHelper.requireNonNull(constants$527.LockWorkStation$MH,"LockWorkStation");
    }
    public static int LockWorkStation () {
        var mh$ = RuntimeHelper.requireNonNull(constants$527.LockWorkStation$MH, "LockWorkStation");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UserHandleGrantAccess$MH() {
        return RuntimeHelper.requireNonNull(constants$527.UserHandleGrantAccess$MH,"UserHandleGrantAccess");
    }
    public static int UserHandleGrantAccess ( Addressable hUserHandle,  Addressable hJob,  int bGrant) {
        var mh$ = RuntimeHelper.requireNonNull(constants$527.UserHandleGrantAccess$MH, "UserHandleGrantAccess");
        try {
            return (int)mh$.invokeExact(hUserHandle, hJob, bGrant);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HRAWINPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRAWINPUTHEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRAWINPUTHEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRAWMOUSE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRAWMOUSE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRAWKEYBOARD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRAWKEYBOARD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRAWHID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRAWHID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRAWINPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRAWINPUT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetRawInputData$MH() {
        return RuntimeHelper.requireNonNull(constants$527.GetRawInputData$MH,"GetRawInputData");
    }
    public static int GetRawInputData ( Addressable hRawInput,  int uiCommand,  Addressable pData,  Addressable pcbSize,  int cbSizeHeader) {
        var mh$ = RuntimeHelper.requireNonNull(constants$527.GetRawInputData$MH, "GetRawInputData");
        try {
            return (int)mh$.invokeExact(hRawInput, uiCommand, pData, pcbSize, cbSizeHeader);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PRID_DEVICE_INFO_MOUSE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRID_DEVICE_INFO_KEYBOARD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRID_DEVICE_INFO_HID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRID_DEVICE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRID_DEVICE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetRawInputDeviceInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$527.GetRawInputDeviceInfoA$MH,"GetRawInputDeviceInfoA");
    }
    public static int GetRawInputDeviceInfoA ( Addressable hDevice,  int uiCommand,  Addressable pData,  Addressable pcbSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$527.GetRawInputDeviceInfoA$MH, "GetRawInputDeviceInfoA");
        try {
            return (int)mh$.invokeExact(hDevice, uiCommand, pData, pcbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRawInputDeviceInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$527.GetRawInputDeviceInfoW$MH,"GetRawInputDeviceInfoW");
    }
    public static int GetRawInputDeviceInfoW ( Addressable hDevice,  int uiCommand,  Addressable pData,  Addressable pcbSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$527.GetRawInputDeviceInfoW$MH, "GetRawInputDeviceInfoW");
        try {
            return (int)mh$.invokeExact(hDevice, uiCommand, pData, pcbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRawInputBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$527.GetRawInputBuffer$MH,"GetRawInputBuffer");
    }
    public static int GetRawInputBuffer ( Addressable pData,  Addressable pcbSize,  int cbSizeHeader) {
        var mh$ = RuntimeHelper.requireNonNull(constants$527.GetRawInputBuffer$MH, "GetRawInputBuffer");
        try {
            return (int)mh$.invokeExact(pData, pcbSize, cbSizeHeader);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PRAWINPUTDEVICE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRAWINPUTDEVICE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRAWINPUTDEVICE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RegisterRawInputDevices$MH() {
        return RuntimeHelper.requireNonNull(constants$528.RegisterRawInputDevices$MH,"RegisterRawInputDevices");
    }
    public static int RegisterRawInputDevices ( Addressable pRawInputDevices,  int uiNumDevices,  int cbSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$528.RegisterRawInputDevices$MH, "RegisterRawInputDevices");
        try {
            return (int)mh$.invokeExact(pRawInputDevices, uiNumDevices, cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRegisteredRawInputDevices$MH() {
        return RuntimeHelper.requireNonNull(constants$528.GetRegisteredRawInputDevices$MH,"GetRegisteredRawInputDevices");
    }
    public static int GetRegisteredRawInputDevices ( Addressable pRawInputDevices,  Addressable puiNumDevices,  int cbSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$528.GetRegisteredRawInputDevices$MH, "GetRegisteredRawInputDevices");
        try {
            return (int)mh$.invokeExact(pRawInputDevices, puiNumDevices, cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PRAWINPUTDEVICELIST = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetRawInputDeviceList$MH() {
        return RuntimeHelper.requireNonNull(constants$528.GetRawInputDeviceList$MH,"GetRawInputDeviceList");
    }
    public static int GetRawInputDeviceList ( Addressable pRawInputDeviceList,  Addressable puiNumDevices,  int cbSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$528.GetRawInputDeviceList$MH, "GetRawInputDeviceList");
        try {
            return (int)mh$.invokeExact(pRawInputDeviceList, puiNumDevices, cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DefRawInputProc$MH() {
        return RuntimeHelper.requireNonNull(constants$528.DefRawInputProc$MH,"DefRawInputProc");
    }
    public static long DefRawInputProc ( Addressable paRawInput,  int nInput,  int cbSizeHeader) {
        var mh$ = RuntimeHelper.requireNonNull(constants$528.DefRawInputProc$MH, "DefRawInputProc");
        try {
            return (long)mh$.invokeExact(paRawInput, nInput, cbSizeHeader);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int POINTER_DEVICE_TYPE_INTEGRATED_PEN() {
        return (int)1L;
    }
    public static int POINTER_DEVICE_TYPE_EXTERNAL_PEN() {
        return (int)2L;
    }
    public static int POINTER_DEVICE_TYPE_TOUCH() {
        return (int)3L;
    }
    public static int POINTER_DEVICE_TYPE_TOUCH_PAD() {
        return (int)4L;
    }
    public static int POINTER_DEVICE_TYPE_MAX() {
        return (int)-1L;
    }
    public static int POINTER_DEVICE_CURSOR_TYPE_UNKNOWN() {
        return (int)0L;
    }
    public static int POINTER_DEVICE_CURSOR_TYPE_TIP() {
        return (int)1L;
    }
    public static int POINTER_DEVICE_CURSOR_TYPE_ERASER() {
        return (int)2L;
    }
    public static int POINTER_DEVICE_CURSOR_TYPE_MAX() {
        return (int)-1L;
    }
    public static MethodHandle GetPointerDevices$MH() {
        return RuntimeHelper.requireNonNull(constants$528.GetPointerDevices$MH,"GetPointerDevices");
    }
    public static int GetPointerDevices ( Addressable deviceCount,  Addressable pointerDevices) {
        var mh$ = RuntimeHelper.requireNonNull(constants$528.GetPointerDevices$MH, "GetPointerDevices");
        try {
            return (int)mh$.invokeExact(deviceCount, pointerDevices);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$528.GetPointerDevice$MH,"GetPointerDevice");
    }
    public static int GetPointerDevice ( Addressable device,  Addressable pointerDevice) {
        var mh$ = RuntimeHelper.requireNonNull(constants$528.GetPointerDevice$MH, "GetPointerDevice");
        try {
            return (int)mh$.invokeExact(device, pointerDevice);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerDeviceProperties$MH() {
        return RuntimeHelper.requireNonNull(constants$529.GetPointerDeviceProperties$MH,"GetPointerDeviceProperties");
    }
    public static int GetPointerDeviceProperties ( Addressable device,  Addressable propertyCount,  Addressable pointerProperties) {
        var mh$ = RuntimeHelper.requireNonNull(constants$529.GetPointerDeviceProperties$MH, "GetPointerDeviceProperties");
        try {
            return (int)mh$.invokeExact(device, propertyCount, pointerProperties);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterPointerDeviceNotifications$MH() {
        return RuntimeHelper.requireNonNull(constants$529.RegisterPointerDeviceNotifications$MH,"RegisterPointerDeviceNotifications");
    }
    public static int RegisterPointerDeviceNotifications ( Addressable window,  int notifyRange) {
        var mh$ = RuntimeHelper.requireNonNull(constants$529.RegisterPointerDeviceNotifications$MH, "RegisterPointerDeviceNotifications");
        try {
            return (int)mh$.invokeExact(window, notifyRange);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerDeviceRects$MH() {
        return RuntimeHelper.requireNonNull(constants$529.GetPointerDeviceRects$MH,"GetPointerDeviceRects");
    }
    public static int GetPointerDeviceRects ( Addressable device,  Addressable pointerDeviceRect,  Addressable displayRect) {
        var mh$ = RuntimeHelper.requireNonNull(constants$529.GetPointerDeviceRects$MH, "GetPointerDeviceRects");
        try {
            return (int)mh$.invokeExact(device, pointerDeviceRect, displayRect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetPointerDeviceCursors$MH() {
        return RuntimeHelper.requireNonNull(constants$529.GetPointerDeviceCursors$MH,"GetPointerDeviceCursors");
    }
    public static int GetPointerDeviceCursors ( Addressable device,  Addressable cursorCount,  Addressable deviceCursors) {
        var mh$ = RuntimeHelper.requireNonNull(constants$529.GetPointerDeviceCursors$MH, "GetPointerDeviceCursors");
        try {
            return (int)mh$.invokeExact(device, cursorCount, deviceCursors);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetRawPointerDeviceData$MH() {
        return RuntimeHelper.requireNonNull(constants$529.GetRawPointerDeviceData$MH,"GetRawPointerDeviceData");
    }
    public static int GetRawPointerDeviceData ( int pointerId,  int historyCount,  int propertiesCount,  Addressable pProperties,  Addressable pValues) {
        var mh$ = RuntimeHelper.requireNonNull(constants$529.GetRawPointerDeviceData$MH, "GetRawPointerDeviceData");
        try {
            return (int)mh$.invokeExact(pointerId, historyCount, propertiesCount, pProperties, pValues);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeWindowMessageFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$529.ChangeWindowMessageFilter$MH,"ChangeWindowMessageFilter");
    }
    public static int ChangeWindowMessageFilter ( int message,  int dwFlag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$529.ChangeWindowMessageFilter$MH, "ChangeWindowMessageFilter");
        try {
            return (int)mh$.invokeExact(message, dwFlag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCHANGEFILTERSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ChangeWindowMessageFilterEx$MH() {
        return RuntimeHelper.requireNonNull(constants$530.ChangeWindowMessageFilterEx$MH,"ChangeWindowMessageFilterEx");
    }
    public static int ChangeWindowMessageFilterEx ( Addressable hwnd,  int message,  int action,  Addressable pChangeFilterStruct) {
        var mh$ = RuntimeHelper.requireNonNull(constants$530.ChangeWindowMessageFilterEx$MH, "ChangeWindowMessageFilterEx");
        try {
            return (int)mh$.invokeExact(hwnd, message, action, pChangeFilterStruct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HGESTUREINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGESTUREINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCGESTUREINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGESTURENOTIFYSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetGestureInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$530.GetGestureInfo$MH,"GetGestureInfo");
    }
    public static int GetGestureInfo ( Addressable hGestureInfo,  Addressable pGestureInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$530.GetGestureInfo$MH, "GetGestureInfo");
        try {
            return (int)mh$.invokeExact(hGestureInfo, pGestureInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGestureExtraArgs$MH() {
        return RuntimeHelper.requireNonNull(constants$530.GetGestureExtraArgs$MH,"GetGestureExtraArgs");
    }
    public static int GetGestureExtraArgs ( Addressable hGestureInfo,  int cbExtraArgs,  Addressable pExtraArgs) {
        var mh$ = RuntimeHelper.requireNonNull(constants$530.GetGestureExtraArgs$MH, "GetGestureExtraArgs");
        try {
            return (int)mh$.invokeExact(hGestureInfo, cbExtraArgs, pExtraArgs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseGestureInfoHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$530.CloseGestureInfoHandle$MH,"CloseGestureInfoHandle");
    }
    public static int CloseGestureInfoHandle ( Addressable hGestureInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$530.CloseGestureInfoHandle$MH, "CloseGestureInfoHandle");
        try {
            return (int)mh$.invokeExact(hGestureInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PGESTURECONFIG = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SetGestureConfig$MH() {
        return RuntimeHelper.requireNonNull(constants$530.SetGestureConfig$MH,"SetGestureConfig");
    }
    public static int SetGestureConfig ( Addressable hwnd,  int dwReserved,  int cIDs,  Addressable pGestureConfig,  int cbSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$530.SetGestureConfig$MH, "SetGestureConfig");
        try {
            return (int)mh$.invokeExact(hwnd, dwReserved, cIDs, pGestureConfig, cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGestureConfig$MH() {
        return RuntimeHelper.requireNonNull(constants$530.GetGestureConfig$MH,"GetGestureConfig");
    }
    public static int GetGestureConfig ( Addressable hwnd,  int dwReserved,  int dwFlags,  Addressable pcIDs,  Addressable pGestureConfig,  int cbSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$530.GetGestureConfig$MH, "GetGestureConfig");
        try {
            return (int)mh$.invokeExact(hwnd, dwReserved, dwFlags, pcIDs, pGestureConfig, cbSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShutdownBlockReasonCreate$MH() {
        return RuntimeHelper.requireNonNull(constants$531.ShutdownBlockReasonCreate$MH,"ShutdownBlockReasonCreate");
    }
    public static int ShutdownBlockReasonCreate ( Addressable hWnd,  Addressable pwszReason) {
        var mh$ = RuntimeHelper.requireNonNull(constants$531.ShutdownBlockReasonCreate$MH, "ShutdownBlockReasonCreate");
        try {
            return (int)mh$.invokeExact(hWnd, pwszReason);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShutdownBlockReasonQuery$MH() {
        return RuntimeHelper.requireNonNull(constants$531.ShutdownBlockReasonQuery$MH,"ShutdownBlockReasonQuery");
    }
    public static int ShutdownBlockReasonQuery ( Addressable hWnd,  Addressable pwszBuff,  Addressable pcchBuff) {
        var mh$ = RuntimeHelper.requireNonNull(constants$531.ShutdownBlockReasonQuery$MH, "ShutdownBlockReasonQuery");
        try {
            return (int)mh$.invokeExact(hWnd, pwszBuff, pcchBuff);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ShutdownBlockReasonDestroy$MH() {
        return RuntimeHelper.requireNonNull(constants$531.ShutdownBlockReasonDestroy$MH,"ShutdownBlockReasonDestroy");
    }
    public static int ShutdownBlockReasonDestroy ( Addressable hWnd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$531.ShutdownBlockReasonDestroy$MH, "ShutdownBlockReasonDestroy");
        try {
            return (int)mh$.invokeExact(hWnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int IMDT_UNAVAILABLE() {
        return (int)0L;
    }
    public static int IMDT_KEYBOARD() {
        return (int)1L;
    }
    public static int IMDT_MOUSE() {
        return (int)2L;
    }
    public static int IMDT_TOUCH() {
        return (int)4L;
    }
    public static int IMDT_PEN() {
        return (int)8L;
    }
    public static int IMDT_TOUCHPAD() {
        return (int)16L;
    }
    public static int IMO_UNAVAILABLE() {
        return (int)0L;
    }
    public static int IMO_HARDWARE() {
        return (int)1L;
    }
    public static int IMO_INJECTED() {
        return (int)2L;
    }
    public static int IMO_SYSTEM() {
        return (int)4L;
    }
    public static MethodHandle GetCurrentInputMessageSource$MH() {
        return RuntimeHelper.requireNonNull(constants$531.GetCurrentInputMessageSource$MH,"GetCurrentInputMessageSource");
    }
    public static int GetCurrentInputMessageSource ( Addressable inputMessageSource) {
        var mh$ = RuntimeHelper.requireNonNull(constants$531.GetCurrentInputMessageSource$MH, "GetCurrentInputMessageSource");
        try {
            return (int)mh$.invokeExact(inputMessageSource);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCIMSSM$MH() {
        return RuntimeHelper.requireNonNull(constants$531.GetCIMSSM$MH,"GetCIMSSM");
    }
    public static int GetCIMSSM ( Addressable inputMessageSource) {
        var mh$ = RuntimeHelper.requireNonNull(constants$531.GetCIMSSM$MH, "GetCIMSSM");
        try {
            return (int)mh$.invokeExact(inputMessageSource);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int AR_ENABLED() {
        return (int)0L;
    }
    public static int AR_DISABLED() {
        return (int)1L;
    }
    public static int AR_SUPPRESSED() {
        return (int)2L;
    }
    public static int AR_REMOTESESSION() {
        return (int)4L;
    }
    public static int AR_MULTIMON() {
        return (int)8L;
    }
    public static int AR_NOSENSOR() {
        return (int)16L;
    }
    public static int AR_NOT_SUPPORTED() {
        return (int)32L;
    }
    public static int AR_DOCKED() {
        return (int)64L;
    }
    public static int AR_LAPTOP() {
        return (int)128L;
    }
    public static OfAddress PAR_STATE = Constants$root.C_POINTER$LAYOUT;
    public static int ORIENTATION_PREFERENCE_NONE() {
        return (int)0L;
    }
    public static int ORIENTATION_PREFERENCE_LANDSCAPE() {
        return (int)1L;
    }
    public static int ORIENTATION_PREFERENCE_PORTRAIT() {
        return (int)2L;
    }
    public static int ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED() {
        return (int)4L;
    }
    public static int ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED() {
        return (int)8L;
    }
    public static MethodHandle GetAutoRotationState$MH() {
        return RuntimeHelper.requireNonNull(constants$531.GetAutoRotationState$MH,"GetAutoRotationState");
    }
    public static int GetAutoRotationState ( Addressable pState) {
        var mh$ = RuntimeHelper.requireNonNull(constants$531.GetAutoRotationState$MH, "GetAutoRotationState");
        try {
            return (int)mh$.invokeExact(pState);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDisplayAutoRotationPreferences$MH() {
        return RuntimeHelper.requireNonNull(constants$532.GetDisplayAutoRotationPreferences$MH,"GetDisplayAutoRotationPreferences");
    }
    public static int GetDisplayAutoRotationPreferences ( Addressable pOrientation) {
        var mh$ = RuntimeHelper.requireNonNull(constants$532.GetDisplayAutoRotationPreferences$MH, "GetDisplayAutoRotationPreferences");
        try {
            return (int)mh$.invokeExact(pOrientation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDisplayAutoRotationPreferencesByProcessId$MH() {
        return RuntimeHelper.requireNonNull(constants$532.GetDisplayAutoRotationPreferencesByProcessId$MH,"GetDisplayAutoRotationPreferencesByProcessId");
    }
    public static int GetDisplayAutoRotationPreferencesByProcessId ( int dwProcessId,  Addressable pOrientation,  Addressable fRotateScreen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$532.GetDisplayAutoRotationPreferencesByProcessId$MH, "GetDisplayAutoRotationPreferencesByProcessId");
        try {
            return (int)mh$.invokeExact(dwProcessId, pOrientation, fRotateScreen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetDisplayAutoRotationPreferences$MH() {
        return RuntimeHelper.requireNonNull(constants$532.SetDisplayAutoRotationPreferences$MH,"SetDisplayAutoRotationPreferences");
    }
    public static int SetDisplayAutoRotationPreferences ( int orientation) {
        var mh$ = RuntimeHelper.requireNonNull(constants$532.SetDisplayAutoRotationPreferences$MH, "SetDisplayAutoRotationPreferences");
        try {
            return (int)mh$.invokeExact(orientation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsImmersiveProcess$MH() {
        return RuntimeHelper.requireNonNull(constants$532.IsImmersiveProcess$MH,"IsImmersiveProcess");
    }
    public static int IsImmersiveProcess ( Addressable hProcess) {
        var mh$ = RuntimeHelper.requireNonNull(constants$532.IsImmersiveProcess$MH, "IsImmersiveProcess");
        try {
            return (int)mh$.invokeExact(hProcess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessRestrictionExemption$MH() {
        return RuntimeHelper.requireNonNull(constants$532.SetProcessRestrictionExemption$MH,"SetProcessRestrictionExemption");
    }
    public static int SetProcessRestrictionExemption ( int fEnableExemption) {
        var mh$ = RuntimeHelper.requireNonNull(constants$532.SetProcessRestrictionExemption$MH, "SetProcessRestrictionExemption");
        try {
            return (int)mh$.invokeExact(fEnableExemption);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDateFormatA$MH() {
        return RuntimeHelper.requireNonNull(constants$532.GetDateFormatA$MH,"GetDateFormatA");
    }
    public static int GetDateFormatA ( int Locale,  int dwFlags,  Addressable lpDate,  Addressable lpFormat,  Addressable lpDateStr,  int cchDate) {
        var mh$ = RuntimeHelper.requireNonNull(constants$532.GetDateFormatA$MH, "GetDateFormatA");
        try {
            return (int)mh$.invokeExact(Locale, dwFlags, lpDate, lpFormat, lpDateStr, cchDate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDateFormatW$MH() {
        return RuntimeHelper.requireNonNull(constants$533.GetDateFormatW$MH,"GetDateFormatW");
    }
    public static int GetDateFormatW ( int Locale,  int dwFlags,  Addressable lpDate,  Addressable lpFormat,  Addressable lpDateStr,  int cchDate) {
        var mh$ = RuntimeHelper.requireNonNull(constants$533.GetDateFormatW$MH, "GetDateFormatW");
        try {
            return (int)mh$.invokeExact(Locale, dwFlags, lpDate, lpFormat, lpDateStr, cchDate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTimeFormatA$MH() {
        return RuntimeHelper.requireNonNull(constants$533.GetTimeFormatA$MH,"GetTimeFormatA");
    }
    public static int GetTimeFormatA ( int Locale,  int dwFlags,  Addressable lpTime,  Addressable lpFormat,  Addressable lpTimeStr,  int cchTime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$533.GetTimeFormatA$MH, "GetTimeFormatA");
        try {
            return (int)mh$.invokeExact(Locale, dwFlags, lpTime, lpFormat, lpTimeStr, cchTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTimeFormatW$MH() {
        return RuntimeHelper.requireNonNull(constants$533.GetTimeFormatW$MH,"GetTimeFormatW");
    }
    public static int GetTimeFormatW ( int Locale,  int dwFlags,  Addressable lpTime,  Addressable lpFormat,  Addressable lpTimeStr,  int cchTime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$533.GetTimeFormatW$MH, "GetTimeFormatW");
        try {
            return (int)mh$.invokeExact(Locale, dwFlags, lpTime, lpFormat, lpTimeStr, cchTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetTimeFormatEx$MH() {
        return RuntimeHelper.requireNonNull(constants$533.GetTimeFormatEx$MH,"GetTimeFormatEx");
    }
    public static int GetTimeFormatEx ( Addressable lpLocaleName,  int dwFlags,  Addressable lpTime,  Addressable lpFormat,  Addressable lpTimeStr,  int cchTime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$533.GetTimeFormatEx$MH, "GetTimeFormatEx");
        try {
            return (int)mh$.invokeExact(lpLocaleName, dwFlags, lpTime, lpFormat, lpTimeStr, cchTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDateFormatEx$MH() {
        return RuntimeHelper.requireNonNull(constants$533.GetDateFormatEx$MH,"GetDateFormatEx");
    }
    public static int GetDateFormatEx ( Addressable lpLocaleName,  int dwFlags,  Addressable lpDate,  Addressable lpFormat,  Addressable lpDateStr,  int cchDate,  Addressable lpCalendar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$533.GetDateFormatEx$MH, "GetDateFormatEx");
        try {
            return (int)mh$.invokeExact(lpLocaleName, dwFlags, lpDate, lpFormat, lpDateStr, cchDate, lpCalendar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDurationFormatEx$MH() {
        return RuntimeHelper.requireNonNull(constants$533.GetDurationFormatEx$MH,"GetDurationFormatEx");
    }
    public static int GetDurationFormatEx ( Addressable lpLocaleName,  int dwFlags,  Addressable lpDuration,  long ullDuration,  Addressable lpFormat,  Addressable lpDurationStr,  int cchDuration) {
        var mh$ = RuntimeHelper.requireNonNull(constants$533.GetDurationFormatEx$MH, "GetDurationFormatEx");
        try {
            return (int)mh$.invokeExact(lpLocaleName, dwFlags, lpDuration, ullDuration, lpFormat, lpDurationStr, cchDuration);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPCPINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfInt GEOID = Constants$root.C_LONG$LAYOUT;
    public static OfAddress LPCPINFOEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCPINFOEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCPINFOEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNUMBERFMTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNUMBERFMTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNUMBERFMT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCURRENCYFMTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCURRENCYFMTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCURRENCYFMT = Constants$root.C_POINTER$LAYOUT;
    public static int COMPARE_STRING() {
        return (int)1L;
    }
    public static OfAddress LPNLSVERSIONINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNLSVERSIONINFOEX = Constants$root.C_POINTER$LAYOUT;
    public static int GEO_NATION() {
        return (int)1L;
    }
    public static int GEO_LATITUDE() {
        return (int)2L;
    }
    public static int GEO_LONGITUDE() {
        return (int)3L;
    }
    public static int GEO_ISO2() {
        return (int)4L;
    }
    public static int GEO_ISO3() {
        return (int)5L;
    }
    public static int GEO_RFC1766() {
        return (int)6L;
    }
    public static int GEO_LCID() {
        return (int)7L;
    }
    public static int GEO_FRIENDLYNAME() {
        return (int)8L;
    }
    public static int GEO_OFFICIALNAME() {
        return (int)9L;
    }
    public static int GEO_TIMEZONES() {
        return (int)10L;
    }
    public static int GEO_OFFICIALLANGUAGES() {
        return (int)11L;
    }
    public static int GEO_ISO_UN_NUMBER() {
        return (int)12L;
    }
    public static int GEO_PARENT() {
        return (int)13L;
    }
    public static int GEO_DIALINGCODE() {
        return (int)14L;
    }
    public static int GEO_CURRENCYCODE() {
        return (int)15L;
    }
    public static int GEO_CURRENCYSYMBOL() {
        return (int)16L;
    }
    public static int GEO_NAME() {
        return (int)17L;
    }
    public static int GEO_ID() {
        return (int)18L;
    }
    public static int GEOCLASS_NATION() {
        return (int)16L;
    }
    public static int GEOCLASS_REGION() {
        return (int)14L;
    }
    public static int GEOCLASS_ALL() {
        return (int)0L;
    }
    public static int NormalizationOther() {
        return (int)0L;
    }
    public static int NormalizationC() {
        return (int)1L;
    }
    public static int NormalizationD() {
        return (int)2L;
    }
    public static int NormalizationKC() {
        return (int)5L;
    }
    public static int NormalizationKD() {
        return (int)6L;
    }
    public static OfAddress PFILEMUIINFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CompareStringEx$MH() {
        return RuntimeHelper.requireNonNull(constants$541.CompareStringEx$MH,"CompareStringEx");
    }
    public static int CompareStringEx ( Addressable lpLocaleName,  int dwCmpFlags,  Addressable lpString1,  int cchCount1,  Addressable lpString2,  int cchCount2,  Addressable lpVersionInformation,  Addressable lpReserved,  long lParam) {
        var mh$ = RuntimeHelper.requireNonNull(constants$541.CompareStringEx$MH, "CompareStringEx");
        try {
            return (int)mh$.invokeExact(lpLocaleName, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2, lpVersionInformation, lpReserved, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CompareStringOrdinal$MH() {
        return RuntimeHelper.requireNonNull(constants$541.CompareStringOrdinal$MH,"CompareStringOrdinal");
    }
    public static int CompareStringOrdinal ( Addressable lpString1,  int cchCount1,  Addressable lpString2,  int cchCount2,  int bIgnoreCase) {
        var mh$ = RuntimeHelper.requireNonNull(constants$541.CompareStringOrdinal$MH, "CompareStringOrdinal");
        try {
            return (int)mh$.invokeExact(lpString1, cchCount1, lpString2, cchCount2, bIgnoreCase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CompareStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$541.CompareStringW$MH,"CompareStringW");
    }
    public static int CompareStringW ( int Locale,  int dwCmpFlags,  Addressable lpString1,  int cchCount1,  Addressable lpString2,  int cchCount2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$541.CompareStringW$MH, "CompareStringW");
        try {
            return (int)mh$.invokeExact(Locale, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FoldStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$541.FoldStringW$MH,"FoldStringW");
    }
    public static int FoldStringW ( int dwMapFlags,  Addressable lpSrcStr,  int cchSrc,  Addressable lpDestStr,  int cchDest) {
        var mh$ = RuntimeHelper.requireNonNull(constants$541.FoldStringW$MH, "FoldStringW");
        try {
            return (int)mh$.invokeExact(dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStringTypeExW$MH() {
        return RuntimeHelper.requireNonNull(constants$542.GetStringTypeExW$MH,"GetStringTypeExW");
    }
    public static int GetStringTypeExW ( int Locale,  int dwInfoType,  Addressable lpSrcStr,  int cchSrc,  Addressable lpCharType) {
        var mh$ = RuntimeHelper.requireNonNull(constants$542.GetStringTypeExW$MH, "GetStringTypeExW");
        try {
            return (int)mh$.invokeExact(Locale, dwInfoType, lpSrcStr, cchSrc, lpCharType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStringTypeW$MH() {
        return RuntimeHelper.requireNonNull(constants$542.GetStringTypeW$MH,"GetStringTypeW");
    }
    public static int GetStringTypeW ( int dwInfoType,  Addressable lpSrcStr,  int cchSrc,  Addressable lpCharType) {
        var mh$ = RuntimeHelper.requireNonNull(constants$542.GetStringTypeW$MH, "GetStringTypeW");
        try {
            return (int)mh$.invokeExact(dwInfoType, lpSrcStr, cchSrc, lpCharType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MultiByteToWideChar$MH() {
        return RuntimeHelper.requireNonNull(constants$542.MultiByteToWideChar$MH,"MultiByteToWideChar");
    }
    public static int MultiByteToWideChar ( int CodePage,  int dwFlags,  Addressable lpMultiByteStr,  int cbMultiByte,  Addressable lpWideCharStr,  int cchWideChar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$542.MultiByteToWideChar$MH, "MultiByteToWideChar");
        try {
            return (int)mh$.invokeExact(CodePage, dwFlags, lpMultiByteStr, cbMultiByte, lpWideCharStr, cchWideChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WideCharToMultiByte$MH() {
        return RuntimeHelper.requireNonNull(constants$542.WideCharToMultiByte$MH,"WideCharToMultiByte");
    }
    public static int WideCharToMultiByte ( int CodePage,  int dwFlags,  Addressable lpWideCharStr,  int cchWideChar,  Addressable lpMultiByteStr,  int cbMultiByte,  Addressable lpDefaultChar,  Addressable lpUsedDefaultChar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$542.WideCharToMultiByte$MH, "WideCharToMultiByte");
        try {
            return (int)mh$.invokeExact(CodePage, dwFlags, lpWideCharStr, cchWideChar, lpMultiByteStr, cbMultiByte, lpDefaultChar, lpUsedDefaultChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsValidCodePage$MH() {
        return RuntimeHelper.requireNonNull(constants$542.IsValidCodePage$MH,"IsValidCodePage");
    }
    public static int IsValidCodePage ( int CodePage) {
        var mh$ = RuntimeHelper.requireNonNull(constants$542.IsValidCodePage$MH, "IsValidCodePage");
        try {
            return (int)mh$.invokeExact(CodePage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetACP$MH() {
        return RuntimeHelper.requireNonNull(constants$542.GetACP$MH,"GetACP");
    }
    public static int GetACP () {
        var mh$ = RuntimeHelper.requireNonNull(constants$542.GetACP$MH, "GetACP");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetOEMCP$MH() {
        return RuntimeHelper.requireNonNull(constants$543.GetOEMCP$MH,"GetOEMCP");
    }
    public static int GetOEMCP () {
        var mh$ = RuntimeHelper.requireNonNull(constants$543.GetOEMCP$MH, "GetOEMCP");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCPInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$543.GetCPInfo$MH,"GetCPInfo");
    }
    public static int GetCPInfo ( int CodePage,  Addressable lpCPInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$543.GetCPInfo$MH, "GetCPInfo");
        try {
            return (int)mh$.invokeExact(CodePage, lpCPInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCPInfoExA$MH() {
        return RuntimeHelper.requireNonNull(constants$543.GetCPInfoExA$MH,"GetCPInfoExA");
    }
    public static int GetCPInfoExA ( int CodePage,  int dwFlags,  Addressable lpCPInfoEx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$543.GetCPInfoExA$MH, "GetCPInfoExA");
        try {
            return (int)mh$.invokeExact(CodePage, dwFlags, lpCPInfoEx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCPInfoExW$MH() {
        return RuntimeHelper.requireNonNull(constants$543.GetCPInfoExW$MH,"GetCPInfoExW");
    }
    public static int GetCPInfoExW ( int CodePage,  int dwFlags,  Addressable lpCPInfoEx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$543.GetCPInfoExW$MH, "GetCPInfoExW");
        try {
            return (int)mh$.invokeExact(CodePage, dwFlags, lpCPInfoEx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CompareStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$543.CompareStringA$MH,"CompareStringA");
    }
    public static int CompareStringA ( int Locale,  int dwCmpFlags,  Addressable lpString1,  int cchCount1,  Addressable lpString2,  int cchCount2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$543.CompareStringA$MH, "CompareStringA");
        try {
            return (int)mh$.invokeExact(Locale, dwCmpFlags, lpString1, cchCount1, lpString2, cchCount2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNLSString$MH() {
        return RuntimeHelper.requireNonNull(constants$543.FindNLSString$MH,"FindNLSString");
    }
    public static int FindNLSString ( int Locale,  int dwFindNLSStringFlags,  Addressable lpStringSource,  int cchSource,  Addressable lpStringValue,  int cchValue,  Addressable pcchFound) {
        var mh$ = RuntimeHelper.requireNonNull(constants$543.FindNLSString$MH, "FindNLSString");
        try {
            return (int)mh$.invokeExact(Locale, dwFindNLSStringFlags, lpStringSource, cchSource, lpStringValue, cchValue, pcchFound);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LCMapStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$544.LCMapStringW$MH,"LCMapStringW");
    }
    public static int LCMapStringW ( int Locale,  int dwMapFlags,  Addressable lpSrcStr,  int cchSrc,  Addressable lpDestStr,  int cchDest) {
        var mh$ = RuntimeHelper.requireNonNull(constants$544.LCMapStringW$MH, "LCMapStringW");
        try {
            return (int)mh$.invokeExact(Locale, dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LCMapStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$544.LCMapStringA$MH,"LCMapStringA");
    }
    public static int LCMapStringA ( int Locale,  int dwMapFlags,  Addressable lpSrcStr,  int cchSrc,  Addressable lpDestStr,  int cchDest) {
        var mh$ = RuntimeHelper.requireNonNull(constants$544.LCMapStringA$MH, "LCMapStringA");
        try {
            return (int)mh$.invokeExact(Locale, dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLocaleInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$544.GetLocaleInfoW$MH,"GetLocaleInfoW");
    }
    public static int GetLocaleInfoW ( int Locale,  int LCType,  Addressable lpLCData,  int cchData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$544.GetLocaleInfoW$MH, "GetLocaleInfoW");
        try {
            return (int)mh$.invokeExact(Locale, LCType, lpLCData, cchData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLocaleInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$544.GetLocaleInfoA$MH,"GetLocaleInfoA");
    }
    public static int GetLocaleInfoA ( int Locale,  int LCType,  Addressable lpLCData,  int cchData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$544.GetLocaleInfoA$MH, "GetLocaleInfoA");
        try {
            return (int)mh$.invokeExact(Locale, LCType, lpLCData, cchData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetLocaleInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$544.SetLocaleInfoA$MH,"SetLocaleInfoA");
    }
    public static int SetLocaleInfoA ( int Locale,  int LCType,  Addressable lpLCData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$544.SetLocaleInfoA$MH, "SetLocaleInfoA");
        try {
            return (int)mh$.invokeExact(Locale, LCType, lpLCData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetLocaleInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$544.SetLocaleInfoW$MH,"SetLocaleInfoW");
    }
    public static int SetLocaleInfoW ( int Locale,  int LCType,  Addressable lpLCData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$544.SetLocaleInfoW$MH, "SetLocaleInfoW");
        try {
            return (int)mh$.invokeExact(Locale, LCType, lpLCData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCalendarInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$545.GetCalendarInfoA$MH,"GetCalendarInfoA");
    }
    public static int GetCalendarInfoA ( int Locale,  int Calendar,  int CalType,  Addressable lpCalData,  int cchData,  Addressable lpValue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$545.GetCalendarInfoA$MH, "GetCalendarInfoA");
        try {
            return (int)mh$.invokeExact(Locale, Calendar, CalType, lpCalData, cchData, lpValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCalendarInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$545.GetCalendarInfoW$MH,"GetCalendarInfoW");
    }
    public static int GetCalendarInfoW ( int Locale,  int Calendar,  int CalType,  Addressable lpCalData,  int cchData,  Addressable lpValue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$545.GetCalendarInfoW$MH, "GetCalendarInfoW");
        try {
            return (int)mh$.invokeExact(Locale, Calendar, CalType, lpCalData, cchData, lpValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCalendarInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$545.SetCalendarInfoA$MH,"SetCalendarInfoA");
    }
    public static int SetCalendarInfoA ( int Locale,  int Calendar,  int CalType,  Addressable lpCalData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$545.SetCalendarInfoA$MH, "SetCalendarInfoA");
        try {
            return (int)mh$.invokeExact(Locale, Calendar, CalType, lpCalData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCalendarInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$545.SetCalendarInfoW$MH,"SetCalendarInfoW");
    }
    public static int SetCalendarInfoW ( int Locale,  int Calendar,  int CalType,  Addressable lpCalData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$545.SetCalendarInfoW$MH, "SetCalendarInfoW");
        try {
            return (int)mh$.invokeExact(Locale, Calendar, CalType, lpCalData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LoadStringByReference$MH() {
        return RuntimeHelper.requireNonNull(constants$545.LoadStringByReference$MH,"LoadStringByReference");
    }
    public static int LoadStringByReference ( int Flags,  Addressable Language,  Addressable SourceString,  Addressable Buffer,  int cchBuffer,  Addressable Directory,  Addressable pcchBufferOut) {
        var mh$ = RuntimeHelper.requireNonNull(constants$545.LoadStringByReference$MH, "LoadStringByReference");
        try {
            return (int)mh$.invokeExact(Flags, Language, SourceString, Buffer, cchBuffer, Directory, pcchBufferOut);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsDBCSLeadByte$MH() {
        return RuntimeHelper.requireNonNull(constants$545.IsDBCSLeadByte$MH,"IsDBCSLeadByte");
    }
    public static int IsDBCSLeadByte ( byte TestChar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$545.IsDBCSLeadByte$MH, "IsDBCSLeadByte");
        try {
            return (int)mh$.invokeExact(TestChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsDBCSLeadByteEx$MH() {
        return RuntimeHelper.requireNonNull(constants$546.IsDBCSLeadByteEx$MH,"IsDBCSLeadByteEx");
    }
    public static int IsDBCSLeadByteEx ( int CodePage,  byte TestChar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$546.IsDBCSLeadByteEx$MH, "IsDBCSLeadByteEx");
        try {
            return (int)mh$.invokeExact(CodePage, TestChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LocaleNameToLCID$MH() {
        return RuntimeHelper.requireNonNull(constants$546.LocaleNameToLCID$MH,"LocaleNameToLCID");
    }
    public static int LocaleNameToLCID ( Addressable lpName,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$546.LocaleNameToLCID$MH, "LocaleNameToLCID");
        try {
            return (int)mh$.invokeExact(lpName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LCIDToLocaleName$MH() {
        return RuntimeHelper.requireNonNull(constants$546.LCIDToLocaleName$MH,"LCIDToLocaleName");
    }
    public static int LCIDToLocaleName ( int Locale,  Addressable lpName,  int cchName,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$546.LCIDToLocaleName$MH, "LCIDToLocaleName");
        try {
            return (int)mh$.invokeExact(Locale, lpName, cchName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetDurationFormat$MH() {
        return RuntimeHelper.requireNonNull(constants$546.GetDurationFormat$MH,"GetDurationFormat");
    }
    public static int GetDurationFormat ( int Locale,  int dwFlags,  Addressable lpDuration,  long ullDuration,  Addressable lpFormat,  Addressable lpDurationStr,  int cchDuration) {
        var mh$ = RuntimeHelper.requireNonNull(constants$546.GetDurationFormat$MH, "GetDurationFormat");
        try {
            return (int)mh$.invokeExact(Locale, dwFlags, lpDuration, ullDuration, lpFormat, lpDurationStr, cchDuration);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumberFormatA$MH() {
        return RuntimeHelper.requireNonNull(constants$546.GetNumberFormatA$MH,"GetNumberFormatA");
    }
    public static int GetNumberFormatA ( int Locale,  int dwFlags,  Addressable lpValue,  Addressable lpFormat,  Addressable lpNumberStr,  int cchNumber) {
        var mh$ = RuntimeHelper.requireNonNull(constants$546.GetNumberFormatA$MH, "GetNumberFormatA");
        try {
            return (int)mh$.invokeExact(Locale, dwFlags, lpValue, lpFormat, lpNumberStr, cchNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumberFormatW$MH() {
        return RuntimeHelper.requireNonNull(constants$546.GetNumberFormatW$MH,"GetNumberFormatW");
    }
    public static int GetNumberFormatW ( int Locale,  int dwFlags,  Addressable lpValue,  Addressable lpFormat,  Addressable lpNumberStr,  int cchNumber) {
        var mh$ = RuntimeHelper.requireNonNull(constants$546.GetNumberFormatW$MH, "GetNumberFormatW");
        try {
            return (int)mh$.invokeExact(Locale, dwFlags, lpValue, lpFormat, lpNumberStr, cchNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrencyFormatA$MH() {
        return RuntimeHelper.requireNonNull(constants$547.GetCurrencyFormatA$MH,"GetCurrencyFormatA");
    }
    public static int GetCurrencyFormatA ( int Locale,  int dwFlags,  Addressable lpValue,  Addressable lpFormat,  Addressable lpCurrencyStr,  int cchCurrency) {
        var mh$ = RuntimeHelper.requireNonNull(constants$547.GetCurrencyFormatA$MH, "GetCurrencyFormatA");
        try {
            return (int)mh$.invokeExact(Locale, dwFlags, lpValue, lpFormat, lpCurrencyStr, cchCurrency);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrencyFormatW$MH() {
        return RuntimeHelper.requireNonNull(constants$547.GetCurrencyFormatW$MH,"GetCurrencyFormatW");
    }
    public static int GetCurrencyFormatW ( int Locale,  int dwFlags,  Addressable lpValue,  Addressable lpFormat,  Addressable lpCurrencyStr,  int cchCurrency) {
        var mh$ = RuntimeHelper.requireNonNull(constants$547.GetCurrencyFormatW$MH, "GetCurrencyFormatW");
        try {
            return (int)mh$.invokeExact(Locale, dwFlags, lpValue, lpFormat, lpCurrencyStr, cchCurrency);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumCalendarInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$547.EnumCalendarInfoA$MH,"EnumCalendarInfoA");
    }
    public static int EnumCalendarInfoA ( Addressable lpCalInfoEnumProc,  int Locale,  int Calendar,  int CalType) {
        var mh$ = RuntimeHelper.requireNonNull(constants$547.EnumCalendarInfoA$MH, "EnumCalendarInfoA");
        try {
            return (int)mh$.invokeExact(lpCalInfoEnumProc, Locale, Calendar, CalType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumCalendarInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$547.EnumCalendarInfoW$MH,"EnumCalendarInfoW");
    }
    public static int EnumCalendarInfoW ( Addressable lpCalInfoEnumProc,  int Locale,  int Calendar,  int CalType) {
        var mh$ = RuntimeHelper.requireNonNull(constants$547.EnumCalendarInfoW$MH, "EnumCalendarInfoW");
        try {
            return (int)mh$.invokeExact(lpCalInfoEnumProc, Locale, Calendar, CalType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumCalendarInfoExA$MH() {
        return RuntimeHelper.requireNonNull(constants$547.EnumCalendarInfoExA$MH,"EnumCalendarInfoExA");
    }
    public static int EnumCalendarInfoExA ( Addressable lpCalInfoEnumProcEx,  int Locale,  int Calendar,  int CalType) {
        var mh$ = RuntimeHelper.requireNonNull(constants$547.EnumCalendarInfoExA$MH, "EnumCalendarInfoExA");
        try {
            return (int)mh$.invokeExact(lpCalInfoEnumProcEx, Locale, Calendar, CalType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumCalendarInfoExW$MH() {
        return RuntimeHelper.requireNonNull(constants$547.EnumCalendarInfoExW$MH,"EnumCalendarInfoExW");
    }
    public static int EnumCalendarInfoExW ( Addressable lpCalInfoEnumProcEx,  int Locale,  int Calendar,  int CalType) {
        var mh$ = RuntimeHelper.requireNonNull(constants$547.EnumCalendarInfoExW$MH, "EnumCalendarInfoExW");
        try {
            return (int)mh$.invokeExact(lpCalInfoEnumProcEx, Locale, Calendar, CalType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumTimeFormatsA$MH() {
        return RuntimeHelper.requireNonNull(constants$548.EnumTimeFormatsA$MH,"EnumTimeFormatsA");
    }
    public static int EnumTimeFormatsA ( Addressable lpTimeFmtEnumProc,  int Locale,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$548.EnumTimeFormatsA$MH, "EnumTimeFormatsA");
        try {
            return (int)mh$.invokeExact(lpTimeFmtEnumProc, Locale, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumTimeFormatsW$MH() {
        return RuntimeHelper.requireNonNull(constants$548.EnumTimeFormatsW$MH,"EnumTimeFormatsW");
    }
    public static int EnumTimeFormatsW ( Addressable lpTimeFmtEnumProc,  int Locale,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$548.EnumTimeFormatsW$MH, "EnumTimeFormatsW");
        try {
            return (int)mh$.invokeExact(lpTimeFmtEnumProc, Locale, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDateFormatsA$MH() {
        return RuntimeHelper.requireNonNull(constants$548.EnumDateFormatsA$MH,"EnumDateFormatsA");
    }
    public static int EnumDateFormatsA ( Addressable lpDateFmtEnumProc,  int Locale,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$548.EnumDateFormatsA$MH, "EnumDateFormatsA");
        try {
            return (int)mh$.invokeExact(lpDateFmtEnumProc, Locale, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDateFormatsW$MH() {
        return RuntimeHelper.requireNonNull(constants$548.EnumDateFormatsW$MH,"EnumDateFormatsW");
    }
    public static int EnumDateFormatsW ( Addressable lpDateFmtEnumProc,  int Locale,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$548.EnumDateFormatsW$MH, "EnumDateFormatsW");
        try {
            return (int)mh$.invokeExact(lpDateFmtEnumProc, Locale, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDateFormatsExA$MH() {
        return RuntimeHelper.requireNonNull(constants$548.EnumDateFormatsExA$MH,"EnumDateFormatsExA");
    }
    public static int EnumDateFormatsExA ( Addressable lpDateFmtEnumProcEx,  int Locale,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$548.EnumDateFormatsExA$MH, "EnumDateFormatsExA");
        try {
            return (int)mh$.invokeExact(lpDateFmtEnumProcEx, Locale, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDateFormatsExW$MH() {
        return RuntimeHelper.requireNonNull(constants$548.EnumDateFormatsExW$MH,"EnumDateFormatsExW");
    }
    public static int EnumDateFormatsExW ( Addressable lpDateFmtEnumProcEx,  int Locale,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$548.EnumDateFormatsExW$MH, "EnumDateFormatsExW");
        try {
            return (int)mh$.invokeExact(lpDateFmtEnumProcEx, Locale, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsValidLanguageGroup$MH() {
        return RuntimeHelper.requireNonNull(constants$549.IsValidLanguageGroup$MH,"IsValidLanguageGroup");
    }
    public static int IsValidLanguageGroup ( int LanguageGroup,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$549.IsValidLanguageGroup$MH, "IsValidLanguageGroup");
        try {
            return (int)mh$.invokeExact(LanguageGroup, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNLSVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$549.GetNLSVersion$MH,"GetNLSVersion");
    }
    public static int GetNLSVersion ( int Function,  int Locale,  Addressable lpVersionInformation) {
        var mh$ = RuntimeHelper.requireNonNull(constants$549.GetNLSVersion$MH, "GetNLSVersion");
        try {
            return (int)mh$.invokeExact(Function, Locale, lpVersionInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsValidLocale$MH() {
        return RuntimeHelper.requireNonNull(constants$549.IsValidLocale$MH,"IsValidLocale");
    }
    public static int IsValidLocale ( int Locale,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$549.IsValidLocale$MH, "IsValidLocale");
        try {
            return (int)mh$.invokeExact(Locale, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGeoInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$549.GetGeoInfoA$MH,"GetGeoInfoA");
    }
    public static int GetGeoInfoA ( int Location,  int GeoType,  Addressable lpGeoData,  int cchData,  short LangId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$549.GetGeoInfoA$MH, "GetGeoInfoA");
        try {
            return (int)mh$.invokeExact(Location, GeoType, lpGeoData, cchData, LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGeoInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$549.GetGeoInfoW$MH,"GetGeoInfoW");
    }
    public static int GetGeoInfoW ( int Location,  int GeoType,  Addressable lpGeoData,  int cchData,  short LangId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$549.GetGeoInfoW$MH, "GetGeoInfoW");
        try {
            return (int)mh$.invokeExact(Location, GeoType, lpGeoData, cchData, LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetGeoInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$549.GetGeoInfoEx$MH,"GetGeoInfoEx");
    }
    public static int GetGeoInfoEx ( Addressable location,  int geoType,  Addressable geoData,  int geoDataCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$549.GetGeoInfoEx$MH, "GetGeoInfoEx");
        try {
            return (int)mh$.invokeExact(location, geoType, geoData, geoDataCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemGeoID$MH() {
        return RuntimeHelper.requireNonNull(constants$550.EnumSystemGeoID$MH,"EnumSystemGeoID");
    }
    public static int EnumSystemGeoID ( int GeoClass,  int ParentGeoId,  Addressable lpGeoEnumProc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$550.EnumSystemGeoID$MH, "EnumSystemGeoID");
        try {
            return (int)mh$.invokeExact(GeoClass, ParentGeoId, lpGeoEnumProc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemGeoNames$MH() {
        return RuntimeHelper.requireNonNull(constants$550.EnumSystemGeoNames$MH,"EnumSystemGeoNames");
    }
    public static int EnumSystemGeoNames ( int geoClass,  Addressable geoEnumProc,  long data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$550.EnumSystemGeoNames$MH, "EnumSystemGeoNames");
        try {
            return (int)mh$.invokeExact(geoClass, geoEnumProc, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserGeoID$MH() {
        return RuntimeHelper.requireNonNull(constants$550.GetUserGeoID$MH,"GetUserGeoID");
    }
    public static int GetUserGeoID ( int GeoClass) {
        var mh$ = RuntimeHelper.requireNonNull(constants$550.GetUserGeoID$MH, "GetUserGeoID");
        try {
            return (int)mh$.invokeExact(GeoClass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserDefaultGeoName$MH() {
        return RuntimeHelper.requireNonNull(constants$550.GetUserDefaultGeoName$MH,"GetUserDefaultGeoName");
    }
    public static int GetUserDefaultGeoName ( Addressable geoName,  int geoNameCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$550.GetUserDefaultGeoName$MH, "GetUserDefaultGeoName");
        try {
            return (int)mh$.invokeExact(geoName, geoNameCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUserGeoID$MH() {
        return RuntimeHelper.requireNonNull(constants$550.SetUserGeoID$MH,"SetUserGeoID");
    }
    public static int SetUserGeoID ( int GeoId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$550.SetUserGeoID$MH, "SetUserGeoID");
        try {
            return (int)mh$.invokeExact(GeoId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetUserGeoName$MH() {
        return RuntimeHelper.requireNonNull(constants$550.SetUserGeoName$MH,"SetUserGeoName");
    }
    public static int SetUserGeoName ( Addressable geoName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$550.SetUserGeoName$MH, "SetUserGeoName");
        try {
            return (int)mh$.invokeExact(geoName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ConvertDefaultLocale$MH() {
        return RuntimeHelper.requireNonNull(constants$551.ConvertDefaultLocale$MH,"ConvertDefaultLocale");
    }
    public static int ConvertDefaultLocale ( int Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$551.ConvertDefaultLocale$MH, "ConvertDefaultLocale");
        try {
            return (int)mh$.invokeExact(Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemDefaultUILanguage$MH() {
        return RuntimeHelper.requireNonNull(constants$551.GetSystemDefaultUILanguage$MH,"GetSystemDefaultUILanguage");
    }
    public static short GetSystemDefaultUILanguage () {
        var mh$ = RuntimeHelper.requireNonNull(constants$551.GetSystemDefaultUILanguage$MH, "GetSystemDefaultUILanguage");
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadLocale$MH() {
        return RuntimeHelper.requireNonNull(constants$551.GetThreadLocale$MH,"GetThreadLocale");
    }
    public static int GetThreadLocale () {
        var mh$ = RuntimeHelper.requireNonNull(constants$551.GetThreadLocale$MH, "GetThreadLocale");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadLocale$MH() {
        return RuntimeHelper.requireNonNull(constants$551.SetThreadLocale$MH,"SetThreadLocale");
    }
    public static int SetThreadLocale ( int Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$551.SetThreadLocale$MH, "SetThreadLocale");
        try {
            return (int)mh$.invokeExact(Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserDefaultUILanguage$MH() {
        return RuntimeHelper.requireNonNull(constants$551.GetUserDefaultUILanguage$MH,"GetUserDefaultUILanguage");
    }
    public static short GetUserDefaultUILanguage () {
        var mh$ = RuntimeHelper.requireNonNull(constants$551.GetUserDefaultUILanguage$MH, "GetUserDefaultUILanguage");
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserDefaultLangID$MH() {
        return RuntimeHelper.requireNonNull(constants$551.GetUserDefaultLangID$MH,"GetUserDefaultLangID");
    }
    public static short GetUserDefaultLangID () {
        var mh$ = RuntimeHelper.requireNonNull(constants$551.GetUserDefaultLangID$MH, "GetUserDefaultLangID");
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemDefaultLangID$MH() {
        return RuntimeHelper.requireNonNull(constants$552.GetSystemDefaultLangID$MH,"GetSystemDefaultLangID");
    }
    public static short GetSystemDefaultLangID () {
        var mh$ = RuntimeHelper.requireNonNull(constants$552.GetSystemDefaultLangID$MH, "GetSystemDefaultLangID");
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemDefaultLCID$MH() {
        return RuntimeHelper.requireNonNull(constants$552.GetSystemDefaultLCID$MH,"GetSystemDefaultLCID");
    }
    public static int GetSystemDefaultLCID () {
        var mh$ = RuntimeHelper.requireNonNull(constants$552.GetSystemDefaultLCID$MH, "GetSystemDefaultLCID");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserDefaultLCID$MH() {
        return RuntimeHelper.requireNonNull(constants$552.GetUserDefaultLCID$MH,"GetUserDefaultLCID");
    }
    public static int GetUserDefaultLCID () {
        var mh$ = RuntimeHelper.requireNonNull(constants$552.GetUserDefaultLCID$MH, "GetUserDefaultLCID");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadUILanguage$MH() {
        return RuntimeHelper.requireNonNull(constants$552.SetThreadUILanguage$MH,"SetThreadUILanguage");
    }
    public static short SetThreadUILanguage ( short LangId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$552.SetThreadUILanguage$MH, "SetThreadUILanguage");
        try {
            return (short)mh$.invokeExact(LangId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadUILanguage$MH() {
        return RuntimeHelper.requireNonNull(constants$552.GetThreadUILanguage$MH,"GetThreadUILanguage");
    }
    public static short GetThreadUILanguage () {
        var mh$ = RuntimeHelper.requireNonNull(constants$552.GetThreadUILanguage$MH, "GetThreadUILanguage");
        try {
            return (short)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetProcessPreferredUILanguages$MH() {
        return RuntimeHelper.requireNonNull(constants$552.GetProcessPreferredUILanguages$MH,"GetProcessPreferredUILanguages");
    }
    public static int GetProcessPreferredUILanguages ( int dwFlags,  Addressable pulNumLanguages,  Addressable pwszLanguagesBuffer,  Addressable pcchLanguagesBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$552.GetProcessPreferredUILanguages$MH, "GetProcessPreferredUILanguages");
        try {
            return (int)mh$.invokeExact(dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetProcessPreferredUILanguages$MH() {
        return RuntimeHelper.requireNonNull(constants$553.SetProcessPreferredUILanguages$MH,"SetProcessPreferredUILanguages");
    }
    public static int SetProcessPreferredUILanguages ( int dwFlags,  Addressable pwszLanguagesBuffer,  Addressable pulNumLanguages) {
        var mh$ = RuntimeHelper.requireNonNull(constants$553.SetProcessPreferredUILanguages$MH, "SetProcessPreferredUILanguages");
        try {
            return (int)mh$.invokeExact(dwFlags, pwszLanguagesBuffer, pulNumLanguages);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserPreferredUILanguages$MH() {
        return RuntimeHelper.requireNonNull(constants$553.GetUserPreferredUILanguages$MH,"GetUserPreferredUILanguages");
    }
    public static int GetUserPreferredUILanguages ( int dwFlags,  Addressable pulNumLanguages,  Addressable pwszLanguagesBuffer,  Addressable pcchLanguagesBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$553.GetUserPreferredUILanguages$MH, "GetUserPreferredUILanguages");
        try {
            return (int)mh$.invokeExact(dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemPreferredUILanguages$MH() {
        return RuntimeHelper.requireNonNull(constants$553.GetSystemPreferredUILanguages$MH,"GetSystemPreferredUILanguages");
    }
    public static int GetSystemPreferredUILanguages ( int dwFlags,  Addressable pulNumLanguages,  Addressable pwszLanguagesBuffer,  Addressable pcchLanguagesBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$553.GetSystemPreferredUILanguages$MH, "GetSystemPreferredUILanguages");
        try {
            return (int)mh$.invokeExact(dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetThreadPreferredUILanguages$MH() {
        return RuntimeHelper.requireNonNull(constants$553.GetThreadPreferredUILanguages$MH,"GetThreadPreferredUILanguages");
    }
    public static int GetThreadPreferredUILanguages ( int dwFlags,  Addressable pulNumLanguages,  Addressable pwszLanguagesBuffer,  Addressable pcchLanguagesBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$553.GetThreadPreferredUILanguages$MH, "GetThreadPreferredUILanguages");
        try {
            return (int)mh$.invokeExact(dwFlags, pulNumLanguages, pwszLanguagesBuffer, pcchLanguagesBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetThreadPreferredUILanguages$MH() {
        return RuntimeHelper.requireNonNull(constants$553.SetThreadPreferredUILanguages$MH,"SetThreadPreferredUILanguages");
    }
    public static int SetThreadPreferredUILanguages ( int dwFlags,  Addressable pwszLanguagesBuffer,  Addressable pulNumLanguages) {
        var mh$ = RuntimeHelper.requireNonNull(constants$553.SetThreadPreferredUILanguages$MH, "SetThreadPreferredUILanguages");
        try {
            return (int)mh$.invokeExact(dwFlags, pwszLanguagesBuffer, pulNumLanguages);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileMUIInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$553.GetFileMUIInfo$MH,"GetFileMUIInfo");
    }
    public static int GetFileMUIInfo ( int dwFlags,  Addressable pcwszFilePath,  Addressable pFileMUIInfo,  Addressable pcbFileMUIInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$553.GetFileMUIInfo$MH, "GetFileMUIInfo");
        try {
            return (int)mh$.invokeExact(dwFlags, pcwszFilePath, pFileMUIInfo, pcbFileMUIInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileMUIPath$MH() {
        return RuntimeHelper.requireNonNull(constants$554.GetFileMUIPath$MH,"GetFileMUIPath");
    }
    public static int GetFileMUIPath ( int dwFlags,  Addressable pcwszFilePath,  Addressable pwszLanguage,  Addressable pcchLanguage,  Addressable pwszFileMUIPath,  Addressable pcchFileMUIPath,  Addressable pululEnumerator) {
        var mh$ = RuntimeHelper.requireNonNull(constants$554.GetFileMUIPath$MH, "GetFileMUIPath");
        try {
            return (int)mh$.invokeExact(dwFlags, pcwszFilePath, pwszLanguage, pcchLanguage, pwszFileMUIPath, pcchFileMUIPath, pululEnumerator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUILanguageInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$554.GetUILanguageInfo$MH,"GetUILanguageInfo");
    }
    public static int GetUILanguageInfo ( int dwFlags,  Addressable pwmszLanguage,  Addressable pwszFallbackLanguages,  Addressable pcchFallbackLanguages,  Addressable pAttributes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$554.GetUILanguageInfo$MH, "GetUILanguageInfo");
        try {
            return (int)mh$.invokeExact(dwFlags, pwmszLanguage, pwszFallbackLanguages, pcchFallbackLanguages, pAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress HSAVEDUILANGUAGES = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SetThreadPreferredUILanguages2$MH() {
        return RuntimeHelper.requireNonNull(constants$554.SetThreadPreferredUILanguages2$MH,"SetThreadPreferredUILanguages2");
    }
    public static int SetThreadPreferredUILanguages2 ( int flags,  Addressable languages,  Addressable numLanguagesSet,  Addressable snapshot) {
        var mh$ = RuntimeHelper.requireNonNull(constants$554.SetThreadPreferredUILanguages2$MH, "SetThreadPreferredUILanguages2");
        try {
            return (int)mh$.invokeExact(flags, languages, numLanguagesSet, snapshot);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RestoreThreadPreferredUILanguages$MH() {
        return RuntimeHelper.requireNonNull(constants$554.RestoreThreadPreferredUILanguages$MH,"RestoreThreadPreferredUILanguages");
    }
    public static void RestoreThreadPreferredUILanguages ( Addressable snapshot) {
        var mh$ = RuntimeHelper.requireNonNull(constants$554.RestoreThreadPreferredUILanguages$MH, "RestoreThreadPreferredUILanguages");
        try {
            mh$.invokeExact(snapshot);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NotifyUILanguageChange$MH() {
        return RuntimeHelper.requireNonNull(constants$554.NotifyUILanguageChange$MH,"NotifyUILanguageChange");
    }
    public static int NotifyUILanguageChange ( int dwFlags,  Addressable pcwstrNewLanguage,  Addressable pcwstrPreviousLanguage,  int dwReserved,  Addressable pdwStatusRtrn) {
        var mh$ = RuntimeHelper.requireNonNull(constants$554.NotifyUILanguageChange$MH, "NotifyUILanguageChange");
        try {
            return (int)mh$.invokeExact(dwFlags, pcwstrNewLanguage, pcwstrPreviousLanguage, dwReserved, pdwStatusRtrn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStringTypeExA$MH() {
        return RuntimeHelper.requireNonNull(constants$554.GetStringTypeExA$MH,"GetStringTypeExA");
    }
    public static int GetStringTypeExA ( int Locale,  int dwInfoType,  Addressable lpSrcStr,  int cchSrc,  Addressable lpCharType) {
        var mh$ = RuntimeHelper.requireNonNull(constants$554.GetStringTypeExA$MH, "GetStringTypeExA");
        try {
            return (int)mh$.invokeExact(Locale, dwInfoType, lpSrcStr, cchSrc, lpCharType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStringTypeA$MH() {
        return RuntimeHelper.requireNonNull(constants$555.GetStringTypeA$MH,"GetStringTypeA");
    }
    public static int GetStringTypeA ( int Locale,  int dwInfoType,  Addressable lpSrcStr,  int cchSrc,  Addressable lpCharType) {
        var mh$ = RuntimeHelper.requireNonNull(constants$555.GetStringTypeA$MH, "GetStringTypeA");
        try {
            return (int)mh$.invokeExact(Locale, dwInfoType, lpSrcStr, cchSrc, lpCharType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FoldStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$555.FoldStringA$MH,"FoldStringA");
    }
    public static int FoldStringA ( int dwMapFlags,  Addressable lpSrcStr,  int cchSrc,  Addressable lpDestStr,  int cchDest) {
        var mh$ = RuntimeHelper.requireNonNull(constants$555.FoldStringA$MH, "FoldStringA");
        try {
            return (int)mh$.invokeExact(dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemLocalesA$MH() {
        return RuntimeHelper.requireNonNull(constants$555.EnumSystemLocalesA$MH,"EnumSystemLocalesA");
    }
    public static int EnumSystemLocalesA ( Addressable lpLocaleEnumProc,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$555.EnumSystemLocalesA$MH, "EnumSystemLocalesA");
        try {
            return (int)mh$.invokeExact(lpLocaleEnumProc, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemLocalesW$MH() {
        return RuntimeHelper.requireNonNull(constants$555.EnumSystemLocalesW$MH,"EnumSystemLocalesW");
    }
    public static int EnumSystemLocalesW ( Addressable lpLocaleEnumProc,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$555.EnumSystemLocalesW$MH, "EnumSystemLocalesW");
        try {
            return (int)mh$.invokeExact(lpLocaleEnumProc, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemLanguageGroupsA$MH() {
        return RuntimeHelper.requireNonNull(constants$555.EnumSystemLanguageGroupsA$MH,"EnumSystemLanguageGroupsA");
    }
    public static int EnumSystemLanguageGroupsA ( Addressable lpLanguageGroupEnumProc,  int dwFlags,  long lParam) {
        var mh$ = RuntimeHelper.requireNonNull(constants$555.EnumSystemLanguageGroupsA$MH, "EnumSystemLanguageGroupsA");
        try {
            return (int)mh$.invokeExact(lpLanguageGroupEnumProc, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemLanguageGroupsW$MH() {
        return RuntimeHelper.requireNonNull(constants$555.EnumSystemLanguageGroupsW$MH,"EnumSystemLanguageGroupsW");
    }
    public static int EnumSystemLanguageGroupsW ( Addressable lpLanguageGroupEnumProc,  int dwFlags,  long lParam) {
        var mh$ = RuntimeHelper.requireNonNull(constants$555.EnumSystemLanguageGroupsW$MH, "EnumSystemLanguageGroupsW");
        try {
            return (int)mh$.invokeExact(lpLanguageGroupEnumProc, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumLanguageGroupLocalesA$MH() {
        return RuntimeHelper.requireNonNull(constants$556.EnumLanguageGroupLocalesA$MH,"EnumLanguageGroupLocalesA");
    }
    public static int EnumLanguageGroupLocalesA ( Addressable lpLangGroupLocaleEnumProc,  int LanguageGroup,  int dwFlags,  long lParam) {
        var mh$ = RuntimeHelper.requireNonNull(constants$556.EnumLanguageGroupLocalesA$MH, "EnumLanguageGroupLocalesA");
        try {
            return (int)mh$.invokeExact(lpLangGroupLocaleEnumProc, LanguageGroup, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumLanguageGroupLocalesW$MH() {
        return RuntimeHelper.requireNonNull(constants$556.EnumLanguageGroupLocalesW$MH,"EnumLanguageGroupLocalesW");
    }
    public static int EnumLanguageGroupLocalesW ( Addressable lpLangGroupLocaleEnumProc,  int LanguageGroup,  int dwFlags,  long lParam) {
        var mh$ = RuntimeHelper.requireNonNull(constants$556.EnumLanguageGroupLocalesW$MH, "EnumLanguageGroupLocalesW");
        try {
            return (int)mh$.invokeExact(lpLangGroupLocaleEnumProc, LanguageGroup, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumUILanguagesA$MH() {
        return RuntimeHelper.requireNonNull(constants$556.EnumUILanguagesA$MH,"EnumUILanguagesA");
    }
    public static int EnumUILanguagesA ( Addressable lpUILanguageEnumProc,  int dwFlags,  long lParam) {
        var mh$ = RuntimeHelper.requireNonNull(constants$556.EnumUILanguagesA$MH, "EnumUILanguagesA");
        try {
            return (int)mh$.invokeExact(lpUILanguageEnumProc, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumUILanguagesW$MH() {
        return RuntimeHelper.requireNonNull(constants$556.EnumUILanguagesW$MH,"EnumUILanguagesW");
    }
    public static int EnumUILanguagesW ( Addressable lpUILanguageEnumProc,  int dwFlags,  long lParam) {
        var mh$ = RuntimeHelper.requireNonNull(constants$556.EnumUILanguagesW$MH, "EnumUILanguagesW");
        try {
            return (int)mh$.invokeExact(lpUILanguageEnumProc, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemCodePagesA$MH() {
        return RuntimeHelper.requireNonNull(constants$556.EnumSystemCodePagesA$MH,"EnumSystemCodePagesA");
    }
    public static int EnumSystemCodePagesA ( Addressable lpCodePageEnumProc,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$556.EnumSystemCodePagesA$MH, "EnumSystemCodePagesA");
        try {
            return (int)mh$.invokeExact(lpCodePageEnumProc, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemCodePagesW$MH() {
        return RuntimeHelper.requireNonNull(constants$556.EnumSystemCodePagesW$MH,"EnumSystemCodePagesW");
    }
    public static int EnumSystemCodePagesW ( Addressable lpCodePageEnumProc,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$556.EnumSystemCodePagesW$MH, "EnumSystemCodePagesW");
        try {
            return (int)mh$.invokeExact(lpCodePageEnumProc, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IdnToAscii$MH() {
        return RuntimeHelper.requireNonNull(constants$557.IdnToAscii$MH,"IdnToAscii");
    }
    public static int IdnToAscii ( int dwFlags,  Addressable lpUnicodeCharStr,  int cchUnicodeChar,  Addressable lpASCIICharStr,  int cchASCIIChar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$557.IdnToAscii$MH, "IdnToAscii");
        try {
            return (int)mh$.invokeExact(dwFlags, lpUnicodeCharStr, cchUnicodeChar, lpASCIICharStr, cchASCIIChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IdnToUnicode$MH() {
        return RuntimeHelper.requireNonNull(constants$557.IdnToUnicode$MH,"IdnToUnicode");
    }
    public static int IdnToUnicode ( int dwFlags,  Addressable lpASCIICharStr,  int cchASCIIChar,  Addressable lpUnicodeCharStr,  int cchUnicodeChar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$557.IdnToUnicode$MH, "IdnToUnicode");
        try {
            return (int)mh$.invokeExact(dwFlags, lpASCIICharStr, cchASCIIChar, lpUnicodeCharStr, cchUnicodeChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IdnToNameprepUnicode$MH() {
        return RuntimeHelper.requireNonNull(constants$557.IdnToNameprepUnicode$MH,"IdnToNameprepUnicode");
    }
    public static int IdnToNameprepUnicode ( int dwFlags,  Addressable lpUnicodeCharStr,  int cchUnicodeChar,  Addressable lpNameprepCharStr,  int cchNameprepChar) {
        var mh$ = RuntimeHelper.requireNonNull(constants$557.IdnToNameprepUnicode$MH, "IdnToNameprepUnicode");
        try {
            return (int)mh$.invokeExact(dwFlags, lpUnicodeCharStr, cchUnicodeChar, lpNameprepCharStr, cchNameprepChar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NormalizeString$MH() {
        return RuntimeHelper.requireNonNull(constants$557.NormalizeString$MH,"NormalizeString");
    }
    public static int NormalizeString ( int NormForm,  Addressable lpSrcString,  int cwSrcLength,  Addressable lpDstString,  int cwDstLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$557.NormalizeString$MH, "NormalizeString");
        try {
            return (int)mh$.invokeExact(NormForm, lpSrcString, cwSrcLength, lpDstString, cwDstLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsNormalizedString$MH() {
        return RuntimeHelper.requireNonNull(constants$557.IsNormalizedString$MH,"IsNormalizedString");
    }
    public static int IsNormalizedString ( int NormForm,  Addressable lpString,  int cwLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$557.IsNormalizedString$MH, "IsNormalizedString");
        try {
            return (int)mh$.invokeExact(NormForm, lpString, cwLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerifyScripts$MH() {
        return RuntimeHelper.requireNonNull(constants$557.VerifyScripts$MH,"VerifyScripts");
    }
    public static int VerifyScripts ( int dwFlags,  Addressable lpLocaleScripts,  int cchLocaleScripts,  Addressable lpTestScripts,  int cchTestScripts) {
        var mh$ = RuntimeHelper.requireNonNull(constants$557.VerifyScripts$MH, "VerifyScripts");
        try {
            return (int)mh$.invokeExact(dwFlags, lpLocaleScripts, cchLocaleScripts, lpTestScripts, cchTestScripts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStringScripts$MH() {
        return RuntimeHelper.requireNonNull(constants$558.GetStringScripts$MH,"GetStringScripts");
    }
    public static int GetStringScripts ( int dwFlags,  Addressable lpString,  int cchString,  Addressable lpScripts,  int cchScripts) {
        var mh$ = RuntimeHelper.requireNonNull(constants$558.GetStringScripts$MH, "GetStringScripts");
        try {
            return (int)mh$.invokeExact(dwFlags, lpString, cchString, lpScripts, cchScripts);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLocaleInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$558.GetLocaleInfoEx$MH,"GetLocaleInfoEx");
    }
    public static int GetLocaleInfoEx ( Addressable lpLocaleName,  int LCType,  Addressable lpLCData,  int cchData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$558.GetLocaleInfoEx$MH, "GetLocaleInfoEx");
        try {
            return (int)mh$.invokeExact(lpLocaleName, LCType, lpLCData, cchData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCalendarInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$558.GetCalendarInfoEx$MH,"GetCalendarInfoEx");
    }
    public static int GetCalendarInfoEx ( Addressable lpLocaleName,  int Calendar,  Addressable lpReserved,  int CalType,  Addressable lpCalData,  int cchData,  Addressable lpValue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$558.GetCalendarInfoEx$MH, "GetCalendarInfoEx");
        try {
            return (int)mh$.invokeExact(lpLocaleName, Calendar, lpReserved, CalType, lpCalData, cchData, lpValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumberFormatEx$MH() {
        return RuntimeHelper.requireNonNull(constants$558.GetNumberFormatEx$MH,"GetNumberFormatEx");
    }
    public static int GetNumberFormatEx ( Addressable lpLocaleName,  int dwFlags,  Addressable lpValue,  Addressable lpFormat,  Addressable lpNumberStr,  int cchNumber) {
        var mh$ = RuntimeHelper.requireNonNull(constants$558.GetNumberFormatEx$MH, "GetNumberFormatEx");
        try {
            return (int)mh$.invokeExact(lpLocaleName, dwFlags, lpValue, lpFormat, lpNumberStr, cchNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrencyFormatEx$MH() {
        return RuntimeHelper.requireNonNull(constants$558.GetCurrencyFormatEx$MH,"GetCurrencyFormatEx");
    }
    public static int GetCurrencyFormatEx ( Addressable lpLocaleName,  int dwFlags,  Addressable lpValue,  Addressable lpFormat,  Addressable lpCurrencyStr,  int cchCurrency) {
        var mh$ = RuntimeHelper.requireNonNull(constants$558.GetCurrencyFormatEx$MH, "GetCurrencyFormatEx");
        try {
            return (int)mh$.invokeExact(lpLocaleName, dwFlags, lpValue, lpFormat, lpCurrencyStr, cchCurrency);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetUserDefaultLocaleName$MH() {
        return RuntimeHelper.requireNonNull(constants$558.GetUserDefaultLocaleName$MH,"GetUserDefaultLocaleName");
    }
    public static int GetUserDefaultLocaleName ( Addressable lpLocaleName,  int cchLocaleName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$558.GetUserDefaultLocaleName$MH, "GetUserDefaultLocaleName");
        try {
            return (int)mh$.invokeExact(lpLocaleName, cchLocaleName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetSystemDefaultLocaleName$MH() {
        return RuntimeHelper.requireNonNull(constants$559.GetSystemDefaultLocaleName$MH,"GetSystemDefaultLocaleName");
    }
    public static int GetSystemDefaultLocaleName ( Addressable lpLocaleName,  int cchLocaleName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$559.GetSystemDefaultLocaleName$MH, "GetSystemDefaultLocaleName");
        try {
            return (int)mh$.invokeExact(lpLocaleName, cchLocaleName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsNLSDefinedString$MH() {
        return RuntimeHelper.requireNonNull(constants$559.IsNLSDefinedString$MH,"IsNLSDefinedString");
    }
    public static int IsNLSDefinedString ( int Function,  int dwFlags,  Addressable lpVersionInformation,  Addressable lpString,  int cchStr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$559.IsNLSDefinedString$MH, "IsNLSDefinedString");
        try {
            return (int)mh$.invokeExact(Function, dwFlags, lpVersionInformation, lpString, cchStr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNLSVersionEx$MH() {
        return RuntimeHelper.requireNonNull(constants$559.GetNLSVersionEx$MH,"GetNLSVersionEx");
    }
    public static int GetNLSVersionEx ( int function,  Addressable lpLocaleName,  Addressable lpVersionInformation) {
        var mh$ = RuntimeHelper.requireNonNull(constants$559.GetNLSVersionEx$MH, "GetNLSVersionEx");
        try {
            return (int)mh$.invokeExact(function, lpLocaleName, lpVersionInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsValidNLSVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$559.IsValidNLSVersion$MH,"IsValidNLSVersion");
    }
    public static int IsValidNLSVersion ( int function,  Addressable lpLocaleName,  Addressable lpVersionInformation) {
        var mh$ = RuntimeHelper.requireNonNull(constants$559.IsValidNLSVersion$MH, "IsValidNLSVersion");
        try {
            return (int)mh$.invokeExact(function, lpLocaleName, lpVersionInformation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FindNLSStringEx$MH() {
        return RuntimeHelper.requireNonNull(constants$559.FindNLSStringEx$MH,"FindNLSStringEx");
    }
    public static int FindNLSStringEx ( Addressable lpLocaleName,  int dwFindNLSStringFlags,  Addressable lpStringSource,  int cchSource,  Addressable lpStringValue,  int cchValue,  Addressable pcchFound,  Addressable lpVersionInformation,  Addressable lpReserved,  long sortHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$559.FindNLSStringEx$MH, "FindNLSStringEx");
        try {
            return (int)mh$.invokeExact(lpLocaleName, dwFindNLSStringFlags, lpStringSource, cchSource, lpStringValue, cchValue, pcchFound, lpVersionInformation, lpReserved, sortHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LCMapStringEx$MH() {
        return RuntimeHelper.requireNonNull(constants$559.LCMapStringEx$MH,"LCMapStringEx");
    }
    public static int LCMapStringEx ( Addressable lpLocaleName,  int dwMapFlags,  Addressable lpSrcStr,  int cchSrc,  Addressable lpDestStr,  int cchDest,  Addressable lpVersionInformation,  Addressable lpReserved,  long sortHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$559.LCMapStringEx$MH, "LCMapStringEx");
        try {
            return (int)mh$.invokeExact(lpLocaleName, dwMapFlags, lpSrcStr, cchSrc, lpDestStr, cchDest, lpVersionInformation, lpReserved, sortHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IsValidLocaleName$MH() {
        return RuntimeHelper.requireNonNull(constants$560.IsValidLocaleName$MH,"IsValidLocaleName");
    }
    public static int IsValidLocaleName ( Addressable lpLocaleName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$560.IsValidLocaleName$MH, "IsValidLocaleName");
        try {
            return (int)mh$.invokeExact(lpLocaleName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumCalendarInfoExEx$MH() {
        return RuntimeHelper.requireNonNull(constants$560.EnumCalendarInfoExEx$MH,"EnumCalendarInfoExEx");
    }
    public static int EnumCalendarInfoExEx ( Addressable pCalInfoEnumProcExEx,  Addressable lpLocaleName,  int Calendar,  Addressable lpReserved,  int CalType,  long lParam) {
        var mh$ = RuntimeHelper.requireNonNull(constants$560.EnumCalendarInfoExEx$MH, "EnumCalendarInfoExEx");
        try {
            return (int)mh$.invokeExact(pCalInfoEnumProcExEx, lpLocaleName, Calendar, lpReserved, CalType, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDateFormatsExEx$MH() {
        return RuntimeHelper.requireNonNull(constants$561.EnumDateFormatsExEx$MH,"EnumDateFormatsExEx");
    }
    public static int EnumDateFormatsExEx ( Addressable lpDateFmtEnumProcExEx,  Addressable lpLocaleName,  int dwFlags,  long lParam) {
        var mh$ = RuntimeHelper.requireNonNull(constants$561.EnumDateFormatsExEx$MH, "EnumDateFormatsExEx");
        try {
            return (int)mh$.invokeExact(lpDateFmtEnumProcExEx, lpLocaleName, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumTimeFormatsEx$MH() {
        return RuntimeHelper.requireNonNull(constants$561.EnumTimeFormatsEx$MH,"EnumTimeFormatsEx");
    }
    public static int EnumTimeFormatsEx ( Addressable lpTimeFmtEnumProcEx,  Addressable lpLocaleName,  int dwFlags,  long lParam) {
        var mh$ = RuntimeHelper.requireNonNull(constants$561.EnumTimeFormatsEx$MH, "EnumTimeFormatsEx");
        try {
            return (int)mh$.invokeExact(lpTimeFmtEnumProcEx, lpLocaleName, dwFlags, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumSystemLocalesEx$MH() {
        return RuntimeHelper.requireNonNull(constants$562.EnumSystemLocalesEx$MH,"EnumSystemLocalesEx");
    }
    public static int EnumSystemLocalesEx ( Addressable lpLocaleEnumProcEx,  int dwFlags,  long lParam,  Addressable lpReserved) {
        var mh$ = RuntimeHelper.requireNonNull(constants$562.EnumSystemLocalesEx$MH, "EnumSystemLocalesEx");
        try {
            return (int)mh$.invokeExact(lpLocaleEnumProcEx, dwFlags, lParam, lpReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResolveLocaleName$MH() {
        return RuntimeHelper.requireNonNull(constants$562.ResolveLocaleName$MH,"ResolveLocaleName");
    }
    public static int ResolveLocaleName ( Addressable lpNameToResolve,  Addressable lpLocaleName,  int cchLocaleName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$562.ResolveLocaleName$MH, "ResolveLocaleName");
        try {
            return (int)mh$.invokeExact(lpNameToResolve, lpLocaleName, cchLocaleName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCOORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSMALL_RECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PKEY_EVENT_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMOUSE_EVENT_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWINDOW_BUFFER_SIZE_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMENU_EVENT_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFOCUS_EVENT_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PINPUT_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHAR_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCONSOLE_FONT_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HPCON = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle AllocConsole$MH() {
        return RuntimeHelper.requireNonNull(constants$562.AllocConsole$MH,"AllocConsole");
    }
    public static int AllocConsole () {
        var mh$ = RuntimeHelper.requireNonNull(constants$562.AllocConsole$MH, "AllocConsole");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FreeConsole$MH() {
        return RuntimeHelper.requireNonNull(constants$562.FreeConsole$MH,"FreeConsole");
    }
    public static int FreeConsole () {
        var mh$ = RuntimeHelper.requireNonNull(constants$562.FreeConsole$MH, "FreeConsole");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AttachConsole$MH() {
        return RuntimeHelper.requireNonNull(constants$562.AttachConsole$MH,"AttachConsole");
    }
    public static int AttachConsole ( int dwProcessId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$562.AttachConsole$MH, "AttachConsole");
        try {
            return (int)mh$.invokeExact(dwProcessId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleCP$MH() {
        return RuntimeHelper.requireNonNull(constants$562.GetConsoleCP$MH,"GetConsoleCP");
    }
    public static int GetConsoleCP () {
        var mh$ = RuntimeHelper.requireNonNull(constants$562.GetConsoleCP$MH, "GetConsoleCP");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleOutputCP$MH() {
        return RuntimeHelper.requireNonNull(constants$563.GetConsoleOutputCP$MH,"GetConsoleOutputCP");
    }
    public static int GetConsoleOutputCP () {
        var mh$ = RuntimeHelper.requireNonNull(constants$563.GetConsoleOutputCP$MH, "GetConsoleOutputCP");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleMode$MH() {
        return RuntimeHelper.requireNonNull(constants$563.GetConsoleMode$MH,"GetConsoleMode");
    }
    public static int GetConsoleMode ( Addressable hConsoleHandle,  Addressable lpMode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$563.GetConsoleMode$MH, "GetConsoleMode");
        try {
            return (int)mh$.invokeExact(hConsoleHandle, lpMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleMode$MH() {
        return RuntimeHelper.requireNonNull(constants$563.SetConsoleMode$MH,"SetConsoleMode");
    }
    public static int SetConsoleMode ( Addressable hConsoleHandle,  int dwMode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$563.SetConsoleMode$MH, "SetConsoleMode");
        try {
            return (int)mh$.invokeExact(hConsoleHandle, dwMode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumberOfConsoleInputEvents$MH() {
        return RuntimeHelper.requireNonNull(constants$563.GetNumberOfConsoleInputEvents$MH,"GetNumberOfConsoleInputEvents");
    }
    public static int GetNumberOfConsoleInputEvents ( Addressable hConsoleInput,  Addressable lpNumberOfEvents) {
        var mh$ = RuntimeHelper.requireNonNull(constants$563.GetNumberOfConsoleInputEvents$MH, "GetNumberOfConsoleInputEvents");
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpNumberOfEvents);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleInputA$MH() {
        return RuntimeHelper.requireNonNull(constants$563.ReadConsoleInputA$MH,"ReadConsoleInputA");
    }
    public static int ReadConsoleInputA ( Addressable hConsoleInput,  Addressable lpBuffer,  int nLength,  Addressable lpNumberOfEventsRead) {
        var mh$ = RuntimeHelper.requireNonNull(constants$563.ReadConsoleInputA$MH, "ReadConsoleInputA");
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nLength, lpNumberOfEventsRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleInputW$MH() {
        return RuntimeHelper.requireNonNull(constants$563.ReadConsoleInputW$MH,"ReadConsoleInputW");
    }
    public static int ReadConsoleInputW ( Addressable hConsoleInput,  Addressable lpBuffer,  int nLength,  Addressable lpNumberOfEventsRead) {
        var mh$ = RuntimeHelper.requireNonNull(constants$563.ReadConsoleInputW$MH, "ReadConsoleInputW");
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nLength, lpNumberOfEventsRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PeekConsoleInputA$MH() {
        return RuntimeHelper.requireNonNull(constants$564.PeekConsoleInputA$MH,"PeekConsoleInputA");
    }
    public static int PeekConsoleInputA ( Addressable hConsoleInput,  Addressable lpBuffer,  int nLength,  Addressable lpNumberOfEventsRead) {
        var mh$ = RuntimeHelper.requireNonNull(constants$564.PeekConsoleInputA$MH, "PeekConsoleInputA");
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nLength, lpNumberOfEventsRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PeekConsoleInputW$MH() {
        return RuntimeHelper.requireNonNull(constants$564.PeekConsoleInputW$MH,"PeekConsoleInputW");
    }
    public static int PeekConsoleInputW ( Addressable hConsoleInput,  Addressable lpBuffer,  int nLength,  Addressable lpNumberOfEventsRead) {
        var mh$ = RuntimeHelper.requireNonNull(constants$564.PeekConsoleInputW$MH, "PeekConsoleInputW");
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nLength, lpNumberOfEventsRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCONSOLE_READCONSOLE_CONTROL = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ReadConsoleA$MH() {
        return RuntimeHelper.requireNonNull(constants$564.ReadConsoleA$MH,"ReadConsoleA");
    }
    public static int ReadConsoleA ( Addressable hConsoleInput,  Addressable lpBuffer,  int nNumberOfCharsToRead,  Addressable lpNumberOfCharsRead,  Addressable pInputControl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$564.ReadConsoleA$MH, "ReadConsoleA");
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nNumberOfCharsToRead, lpNumberOfCharsRead, pInputControl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleW$MH() {
        return RuntimeHelper.requireNonNull(constants$564.ReadConsoleW$MH,"ReadConsoleW");
    }
    public static int ReadConsoleW ( Addressable hConsoleInput,  Addressable lpBuffer,  int nNumberOfCharsToRead,  Addressable lpNumberOfCharsRead,  Addressable pInputControl) {
        var mh$ = RuntimeHelper.requireNonNull(constants$564.ReadConsoleW$MH, "ReadConsoleW");
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nNumberOfCharsToRead, lpNumberOfCharsRead, pInputControl);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleA$MH() {
        return RuntimeHelper.requireNonNull(constants$564.WriteConsoleA$MH,"WriteConsoleA");
    }
    public static int WriteConsoleA ( Addressable hConsoleOutput,  Addressable lpBuffer,  int nNumberOfCharsToWrite,  Addressable lpNumberOfCharsWritten,  Addressable lpReserved) {
        var mh$ = RuntimeHelper.requireNonNull(constants$564.WriteConsoleA$MH, "WriteConsoleA");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpBuffer, nNumberOfCharsToWrite, lpNumberOfCharsWritten, lpReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleW$MH() {
        return RuntimeHelper.requireNonNull(constants$564.WriteConsoleW$MH,"WriteConsoleW");
    }
    public static int WriteConsoleW ( Addressable hConsoleOutput,  Addressable lpBuffer,  int nNumberOfCharsToWrite,  Addressable lpNumberOfCharsWritten,  Addressable lpReserved) {
        var mh$ = RuntimeHelper.requireNonNull(constants$564.WriteConsoleW$MH, "WriteConsoleW");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpBuffer, nNumberOfCharsToWrite, lpNumberOfCharsWritten, lpReserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleCtrlHandler$MH() {
        return RuntimeHelper.requireNonNull(constants$565.SetConsoleCtrlHandler$MH,"SetConsoleCtrlHandler");
    }
    public static int SetConsoleCtrlHandler ( Addressable HandlerRoutine,  int Add) {
        var mh$ = RuntimeHelper.requireNonNull(constants$565.SetConsoleCtrlHandler$MH, "SetConsoleCtrlHandler");
        try {
            return (int)mh$.invokeExact(HandlerRoutine, Add);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreatePseudoConsole$MH() {
        return RuntimeHelper.requireNonNull(constants$565.CreatePseudoConsole$MH,"CreatePseudoConsole");
    }
    public static int CreatePseudoConsole ( MemorySegment size,  Addressable hInput,  Addressable hOutput,  int dwFlags,  Addressable phPC) {
        var mh$ = RuntimeHelper.requireNonNull(constants$565.CreatePseudoConsole$MH, "CreatePseudoConsole");
        try {
            return (int)mh$.invokeExact(size, hInput, hOutput, dwFlags, phPC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ResizePseudoConsole$MH() {
        return RuntimeHelper.requireNonNull(constants$565.ResizePseudoConsole$MH,"ResizePseudoConsole");
    }
    public static int ResizePseudoConsole ( Addressable hPC,  MemorySegment size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$565.ResizePseudoConsole$MH, "ResizePseudoConsole");
        try {
            return (int)mh$.invokeExact(hPC, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ClosePseudoConsole$MH() {
        return RuntimeHelper.requireNonNull(constants$565.ClosePseudoConsole$MH,"ClosePseudoConsole");
    }
    public static void ClosePseudoConsole ( Addressable hPC) {
        var mh$ = RuntimeHelper.requireNonNull(constants$565.ClosePseudoConsole$MH, "ClosePseudoConsole");
        try {
            mh$.invokeExact(hPC);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FillConsoleOutputCharacterA$MH() {
        return RuntimeHelper.requireNonNull(constants$566.FillConsoleOutputCharacterA$MH,"FillConsoleOutputCharacterA");
    }
    public static int FillConsoleOutputCharacterA ( Addressable hConsoleOutput,  byte cCharacter,  int nLength,  MemorySegment dwWriteCoord,  Addressable lpNumberOfCharsWritten) {
        var mh$ = RuntimeHelper.requireNonNull(constants$566.FillConsoleOutputCharacterA$MH, "FillConsoleOutputCharacterA");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, cCharacter, nLength, dwWriteCoord, lpNumberOfCharsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FillConsoleOutputCharacterW$MH() {
        return RuntimeHelper.requireNonNull(constants$566.FillConsoleOutputCharacterW$MH,"FillConsoleOutputCharacterW");
    }
    public static int FillConsoleOutputCharacterW ( Addressable hConsoleOutput,  short cCharacter,  int nLength,  MemorySegment dwWriteCoord,  Addressable lpNumberOfCharsWritten) {
        var mh$ = RuntimeHelper.requireNonNull(constants$566.FillConsoleOutputCharacterW$MH, "FillConsoleOutputCharacterW");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, cCharacter, nLength, dwWriteCoord, lpNumberOfCharsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FillConsoleOutputAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$566.FillConsoleOutputAttribute$MH,"FillConsoleOutputAttribute");
    }
    public static int FillConsoleOutputAttribute ( Addressable hConsoleOutput,  short wAttribute,  int nLength,  MemorySegment dwWriteCoord,  Addressable lpNumberOfAttrsWritten) {
        var mh$ = RuntimeHelper.requireNonNull(constants$566.FillConsoleOutputAttribute$MH, "FillConsoleOutputAttribute");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, wAttribute, nLength, dwWriteCoord, lpNumberOfAttrsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GenerateConsoleCtrlEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$566.GenerateConsoleCtrlEvent$MH,"GenerateConsoleCtrlEvent");
    }
    public static int GenerateConsoleCtrlEvent ( int dwCtrlEvent,  int dwProcessGroupId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$566.GenerateConsoleCtrlEvent$MH, "GenerateConsoleCtrlEvent");
        try {
            return (int)mh$.invokeExact(dwCtrlEvent, dwProcessGroupId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateConsoleScreenBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$566.CreateConsoleScreenBuffer$MH,"CreateConsoleScreenBuffer");
    }
    public static MemoryAddress CreateConsoleScreenBuffer ( int dwDesiredAccess,  int dwShareMode,  Addressable lpSecurityAttributes,  int dwFlags,  Addressable lpScreenBufferData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$566.CreateConsoleScreenBuffer$MH, "CreateConsoleScreenBuffer");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwFlags, lpScreenBufferData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleActiveScreenBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$566.SetConsoleActiveScreenBuffer$MH,"SetConsoleActiveScreenBuffer");
    }
    public static int SetConsoleActiveScreenBuffer ( Addressable hConsoleOutput) {
        var mh$ = RuntimeHelper.requireNonNull(constants$566.SetConsoleActiveScreenBuffer$MH, "SetConsoleActiveScreenBuffer");
        try {
            return (int)mh$.invokeExact(hConsoleOutput);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle FlushConsoleInputBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$567.FlushConsoleInputBuffer$MH,"FlushConsoleInputBuffer");
    }
    public static int FlushConsoleInputBuffer ( Addressable hConsoleInput) {
        var mh$ = RuntimeHelper.requireNonNull(constants$567.FlushConsoleInputBuffer$MH, "FlushConsoleInputBuffer");
        try {
            return (int)mh$.invokeExact(hConsoleInput);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleCP$MH() {
        return RuntimeHelper.requireNonNull(constants$567.SetConsoleCP$MH,"SetConsoleCP");
    }
    public static int SetConsoleCP ( int wCodePageID) {
        var mh$ = RuntimeHelper.requireNonNull(constants$567.SetConsoleCP$MH, "SetConsoleCP");
        try {
            return (int)mh$.invokeExact(wCodePageID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleOutputCP$MH() {
        return RuntimeHelper.requireNonNull(constants$567.SetConsoleOutputCP$MH,"SetConsoleOutputCP");
    }
    public static int SetConsoleOutputCP ( int wCodePageID) {
        var mh$ = RuntimeHelper.requireNonNull(constants$567.SetConsoleOutputCP$MH, "SetConsoleOutputCP");
        try {
            return (int)mh$.invokeExact(wCodePageID);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCONSOLE_CURSOR_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetConsoleCursorInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$567.GetConsoleCursorInfo$MH,"GetConsoleCursorInfo");
    }
    public static int GetConsoleCursorInfo ( Addressable hConsoleOutput,  Addressable lpConsoleCursorInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$567.GetConsoleCursorInfo$MH, "GetConsoleCursorInfo");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpConsoleCursorInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleCursorInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$567.SetConsoleCursorInfo$MH,"SetConsoleCursorInfo");
    }
    public static int SetConsoleCursorInfo ( Addressable hConsoleOutput,  Addressable lpConsoleCursorInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$567.SetConsoleCursorInfo$MH, "SetConsoleCursorInfo");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpConsoleCursorInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCONSOLE_SCREEN_BUFFER_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetConsoleScreenBufferInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$567.GetConsoleScreenBufferInfo$MH,"GetConsoleScreenBufferInfo");
    }
    public static int GetConsoleScreenBufferInfo ( Addressable hConsoleOutput,  Addressable lpConsoleScreenBufferInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$567.GetConsoleScreenBufferInfo$MH, "GetConsoleScreenBufferInfo");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpConsoleScreenBufferInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCONSOLE_SCREEN_BUFFER_INFOEX = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetConsoleScreenBufferInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$568.GetConsoleScreenBufferInfoEx$MH,"GetConsoleScreenBufferInfoEx");
    }
    public static int GetConsoleScreenBufferInfoEx ( Addressable hConsoleOutput,  Addressable lpConsoleScreenBufferInfoEx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$568.GetConsoleScreenBufferInfoEx$MH, "GetConsoleScreenBufferInfoEx");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpConsoleScreenBufferInfoEx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleScreenBufferInfoEx$MH() {
        return RuntimeHelper.requireNonNull(constants$568.SetConsoleScreenBufferInfoEx$MH,"SetConsoleScreenBufferInfoEx");
    }
    public static int SetConsoleScreenBufferInfoEx ( Addressable hConsoleOutput,  Addressable lpConsoleScreenBufferInfoEx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$568.SetConsoleScreenBufferInfoEx$MH, "SetConsoleScreenBufferInfoEx");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpConsoleScreenBufferInfoEx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleScreenBufferSize$MH() {
        return RuntimeHelper.requireNonNull(constants$568.SetConsoleScreenBufferSize$MH,"SetConsoleScreenBufferSize");
    }
    public static int SetConsoleScreenBufferSize ( Addressable hConsoleOutput,  MemorySegment dwSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$568.SetConsoleScreenBufferSize$MH, "SetConsoleScreenBufferSize");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleCursorPosition$MH() {
        return RuntimeHelper.requireNonNull(constants$568.SetConsoleCursorPosition$MH,"SetConsoleCursorPosition");
    }
    public static int SetConsoleCursorPosition ( Addressable hConsoleOutput,  MemorySegment dwCursorPosition) {
        var mh$ = RuntimeHelper.requireNonNull(constants$568.SetConsoleCursorPosition$MH, "SetConsoleCursorPosition");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, dwCursorPosition);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetLargestConsoleWindowSize$MH() {
        return RuntimeHelper.requireNonNull(constants$568.GetLargestConsoleWindowSize$MH,"GetLargestConsoleWindowSize");
    }
    public static MemorySegment GetLargestConsoleWindowSize ( SegmentAllocator allocator,  Addressable hConsoleOutput) {
        var mh$ = RuntimeHelper.requireNonNull(constants$568.GetLargestConsoleWindowSize$MH, "GetLargestConsoleWindowSize");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, hConsoleOutput);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment GetLargestConsoleWindowSize ( ResourceScope scope,  Addressable hConsoleOutput) {
        return GetLargestConsoleWindowSize(SegmentAllocator.nativeAllocator(scope), hConsoleOutput);
    }
    public static MethodHandle SetConsoleTextAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$568.SetConsoleTextAttribute$MH,"SetConsoleTextAttribute");
    }
    public static int SetConsoleTextAttribute ( Addressable hConsoleOutput,  short wAttributes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$568.SetConsoleTextAttribute$MH, "SetConsoleTextAttribute");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, wAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleWindowInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$569.SetConsoleWindowInfo$MH,"SetConsoleWindowInfo");
    }
    public static int SetConsoleWindowInfo ( Addressable hConsoleOutput,  int bAbsolute,  Addressable lpConsoleWindow) {
        var mh$ = RuntimeHelper.requireNonNull(constants$569.SetConsoleWindowInfo$MH, "SetConsoleWindowInfo");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, bAbsolute, lpConsoleWindow);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleOutputCharacterA$MH() {
        return RuntimeHelper.requireNonNull(constants$569.WriteConsoleOutputCharacterA$MH,"WriteConsoleOutputCharacterA");
    }
    public static int WriteConsoleOutputCharacterA ( Addressable hConsoleOutput,  Addressable lpCharacter,  int nLength,  MemorySegment dwWriteCoord,  Addressable lpNumberOfCharsWritten) {
        var mh$ = RuntimeHelper.requireNonNull(constants$569.WriteConsoleOutputCharacterA$MH, "WriteConsoleOutputCharacterA");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpCharacter, nLength, dwWriteCoord, lpNumberOfCharsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleOutputCharacterW$MH() {
        return RuntimeHelper.requireNonNull(constants$569.WriteConsoleOutputCharacterW$MH,"WriteConsoleOutputCharacterW");
    }
    public static int WriteConsoleOutputCharacterW ( Addressable hConsoleOutput,  Addressable lpCharacter,  int nLength,  MemorySegment dwWriteCoord,  Addressable lpNumberOfCharsWritten) {
        var mh$ = RuntimeHelper.requireNonNull(constants$569.WriteConsoleOutputCharacterW$MH, "WriteConsoleOutputCharacterW");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpCharacter, nLength, dwWriteCoord, lpNumberOfCharsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleOutputAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$569.WriteConsoleOutputAttribute$MH,"WriteConsoleOutputAttribute");
    }
    public static int WriteConsoleOutputAttribute ( Addressable hConsoleOutput,  Addressable lpAttribute,  int nLength,  MemorySegment dwWriteCoord,  Addressable lpNumberOfAttrsWritten) {
        var mh$ = RuntimeHelper.requireNonNull(constants$569.WriteConsoleOutputAttribute$MH, "WriteConsoleOutputAttribute");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpAttribute, nLength, dwWriteCoord, lpNumberOfAttrsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleOutputCharacterA$MH() {
        return RuntimeHelper.requireNonNull(constants$569.ReadConsoleOutputCharacterA$MH,"ReadConsoleOutputCharacterA");
    }
    public static int ReadConsoleOutputCharacterA ( Addressable hConsoleOutput,  Addressable lpCharacter,  int nLength,  MemorySegment dwReadCoord,  Addressable lpNumberOfCharsRead) {
        var mh$ = RuntimeHelper.requireNonNull(constants$569.ReadConsoleOutputCharacterA$MH, "ReadConsoleOutputCharacterA");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpCharacter, nLength, dwReadCoord, lpNumberOfCharsRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleOutputCharacterW$MH() {
        return RuntimeHelper.requireNonNull(constants$569.ReadConsoleOutputCharacterW$MH,"ReadConsoleOutputCharacterW");
    }
    public static int ReadConsoleOutputCharacterW ( Addressable hConsoleOutput,  Addressable lpCharacter,  int nLength,  MemorySegment dwReadCoord,  Addressable lpNumberOfCharsRead) {
        var mh$ = RuntimeHelper.requireNonNull(constants$569.ReadConsoleOutputCharacterW$MH, "ReadConsoleOutputCharacterW");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpCharacter, nLength, dwReadCoord, lpNumberOfCharsRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleOutputAttribute$MH() {
        return RuntimeHelper.requireNonNull(constants$570.ReadConsoleOutputAttribute$MH,"ReadConsoleOutputAttribute");
    }
    public static int ReadConsoleOutputAttribute ( Addressable hConsoleOutput,  Addressable lpAttribute,  int nLength,  MemorySegment dwReadCoord,  Addressable lpNumberOfAttrsRead) {
        var mh$ = RuntimeHelper.requireNonNull(constants$570.ReadConsoleOutputAttribute$MH, "ReadConsoleOutputAttribute");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpAttribute, nLength, dwReadCoord, lpNumberOfAttrsRead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleInputA$MH() {
        return RuntimeHelper.requireNonNull(constants$570.WriteConsoleInputA$MH,"WriteConsoleInputA");
    }
    public static int WriteConsoleInputA ( Addressable hConsoleInput,  Addressable lpBuffer,  int nLength,  Addressable lpNumberOfEventsWritten) {
        var mh$ = RuntimeHelper.requireNonNull(constants$570.WriteConsoleInputA$MH, "WriteConsoleInputA");
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nLength, lpNumberOfEventsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleInputW$MH() {
        return RuntimeHelper.requireNonNull(constants$570.WriteConsoleInputW$MH,"WriteConsoleInputW");
    }
    public static int WriteConsoleInputW ( Addressable hConsoleInput,  Addressable lpBuffer,  int nLength,  Addressable lpNumberOfEventsWritten) {
        var mh$ = RuntimeHelper.requireNonNull(constants$570.WriteConsoleInputW$MH, "WriteConsoleInputW");
        try {
            return (int)mh$.invokeExact(hConsoleInput, lpBuffer, nLength, lpNumberOfEventsWritten);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ScrollConsoleScreenBufferA$MH() {
        return RuntimeHelper.requireNonNull(constants$570.ScrollConsoleScreenBufferA$MH,"ScrollConsoleScreenBufferA");
    }
    public static int ScrollConsoleScreenBufferA ( Addressable hConsoleOutput,  Addressable lpScrollRectangle,  Addressable lpClipRectangle,  MemorySegment dwDestinationOrigin,  Addressable lpFill) {
        var mh$ = RuntimeHelper.requireNonNull(constants$570.ScrollConsoleScreenBufferA$MH, "ScrollConsoleScreenBufferA");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpScrollRectangle, lpClipRectangle, dwDestinationOrigin, lpFill);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ScrollConsoleScreenBufferW$MH() {
        return RuntimeHelper.requireNonNull(constants$570.ScrollConsoleScreenBufferW$MH,"ScrollConsoleScreenBufferW");
    }
    public static int ScrollConsoleScreenBufferW ( Addressable hConsoleOutput,  Addressable lpScrollRectangle,  Addressable lpClipRectangle,  MemorySegment dwDestinationOrigin,  Addressable lpFill) {
        var mh$ = RuntimeHelper.requireNonNull(constants$570.ScrollConsoleScreenBufferW$MH, "ScrollConsoleScreenBufferW");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpScrollRectangle, lpClipRectangle, dwDestinationOrigin, lpFill);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleOutputA$MH() {
        return RuntimeHelper.requireNonNull(constants$570.WriteConsoleOutputA$MH,"WriteConsoleOutputA");
    }
    public static int WriteConsoleOutputA ( Addressable hConsoleOutput,  Addressable lpBuffer,  MemorySegment dwBufferSize,  MemorySegment dwBufferCoord,  Addressable lpWriteRegion) {
        var mh$ = RuntimeHelper.requireNonNull(constants$570.WriteConsoleOutputA$MH, "WriteConsoleOutputA");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpBuffer, dwBufferSize, dwBufferCoord, lpWriteRegion);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteConsoleOutputW$MH() {
        return RuntimeHelper.requireNonNull(constants$571.WriteConsoleOutputW$MH,"WriteConsoleOutputW");
    }
    public static int WriteConsoleOutputW ( Addressable hConsoleOutput,  Addressable lpBuffer,  MemorySegment dwBufferSize,  MemorySegment dwBufferCoord,  Addressable lpWriteRegion) {
        var mh$ = RuntimeHelper.requireNonNull(constants$571.WriteConsoleOutputW$MH, "WriteConsoleOutputW");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpBuffer, dwBufferSize, dwBufferCoord, lpWriteRegion);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleOutputA$MH() {
        return RuntimeHelper.requireNonNull(constants$571.ReadConsoleOutputA$MH,"ReadConsoleOutputA");
    }
    public static int ReadConsoleOutputA ( Addressable hConsoleOutput,  Addressable lpBuffer,  MemorySegment dwBufferSize,  MemorySegment dwBufferCoord,  Addressable lpReadRegion) {
        var mh$ = RuntimeHelper.requireNonNull(constants$571.ReadConsoleOutputA$MH, "ReadConsoleOutputA");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpBuffer, dwBufferSize, dwBufferCoord, lpReadRegion);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadConsoleOutputW$MH() {
        return RuntimeHelper.requireNonNull(constants$571.ReadConsoleOutputW$MH,"ReadConsoleOutputW");
    }
    public static int ReadConsoleOutputW ( Addressable hConsoleOutput,  Addressable lpBuffer,  MemorySegment dwBufferSize,  MemorySegment dwBufferCoord,  Addressable lpReadRegion) {
        var mh$ = RuntimeHelper.requireNonNull(constants$571.ReadConsoleOutputW$MH, "ReadConsoleOutputW");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, lpBuffer, dwBufferSize, dwBufferCoord, lpReadRegion);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleTitleA$MH() {
        return RuntimeHelper.requireNonNull(constants$571.GetConsoleTitleA$MH,"GetConsoleTitleA");
    }
    public static int GetConsoleTitleA ( Addressable lpConsoleTitle,  int nSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$571.GetConsoleTitleA$MH, "GetConsoleTitleA");
        try {
            return (int)mh$.invokeExact(lpConsoleTitle, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleTitleW$MH() {
        return RuntimeHelper.requireNonNull(constants$571.GetConsoleTitleW$MH,"GetConsoleTitleW");
    }
    public static int GetConsoleTitleW ( Addressable lpConsoleTitle,  int nSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$571.GetConsoleTitleW$MH, "GetConsoleTitleW");
        try {
            return (int)mh$.invokeExact(lpConsoleTitle, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleOriginalTitleA$MH() {
        return RuntimeHelper.requireNonNull(constants$571.GetConsoleOriginalTitleA$MH,"GetConsoleOriginalTitleA");
    }
    public static int GetConsoleOriginalTitleA ( Addressable lpConsoleTitle,  int nSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$571.GetConsoleOriginalTitleA$MH, "GetConsoleOriginalTitleA");
        try {
            return (int)mh$.invokeExact(lpConsoleTitle, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleOriginalTitleW$MH() {
        return RuntimeHelper.requireNonNull(constants$572.GetConsoleOriginalTitleW$MH,"GetConsoleOriginalTitleW");
    }
    public static int GetConsoleOriginalTitleW ( Addressable lpConsoleTitle,  int nSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$572.GetConsoleOriginalTitleW$MH, "GetConsoleOriginalTitleW");
        try {
            return (int)mh$.invokeExact(lpConsoleTitle, nSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleTitleA$MH() {
        return RuntimeHelper.requireNonNull(constants$572.SetConsoleTitleA$MH,"SetConsoleTitleA");
    }
    public static int SetConsoleTitleA ( Addressable lpConsoleTitle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$572.SetConsoleTitleA$MH, "SetConsoleTitleA");
        try {
            return (int)mh$.invokeExact(lpConsoleTitle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleTitleW$MH() {
        return RuntimeHelper.requireNonNull(constants$572.SetConsoleTitleW$MH,"SetConsoleTitleW");
    }
    public static int SetConsoleTitleW ( Addressable lpConsoleTitle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$572.SetConsoleTitleW$MH, "SetConsoleTitleW");
        try {
            return (int)mh$.invokeExact(lpConsoleTitle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetNumberOfConsoleMouseButtons$MH() {
        return RuntimeHelper.requireNonNull(constants$572.GetNumberOfConsoleMouseButtons$MH,"GetNumberOfConsoleMouseButtons");
    }
    public static int GetNumberOfConsoleMouseButtons ( Addressable lpNumberOfMouseButtons) {
        var mh$ = RuntimeHelper.requireNonNull(constants$572.GetNumberOfConsoleMouseButtons$MH, "GetNumberOfConsoleMouseButtons");
        try {
            return (int)mh$.invokeExact(lpNumberOfMouseButtons);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleFontSize$MH() {
        return RuntimeHelper.requireNonNull(constants$572.GetConsoleFontSize$MH,"GetConsoleFontSize");
    }
    public static MemorySegment GetConsoleFontSize ( SegmentAllocator allocator,  Addressable hConsoleOutput,  int nFont) {
        var mh$ = RuntimeHelper.requireNonNull(constants$572.GetConsoleFontSize$MH, "GetConsoleFontSize");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, hConsoleOutput, nFont);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment GetConsoleFontSize ( ResourceScope scope,  Addressable hConsoleOutput,  int nFont) {
        return GetConsoleFontSize(SegmentAllocator.nativeAllocator(scope), hConsoleOutput, nFont);
    }
    public static MethodHandle GetCurrentConsoleFont$MH() {
        return RuntimeHelper.requireNonNull(constants$572.GetCurrentConsoleFont$MH,"GetCurrentConsoleFont");
    }
    public static int GetCurrentConsoleFont ( Addressable hConsoleOutput,  int bMaximumWindow,  Addressable lpConsoleCurrentFont) {
        var mh$ = RuntimeHelper.requireNonNull(constants$572.GetCurrentConsoleFont$MH, "GetCurrentConsoleFont");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, bMaximumWindow, lpConsoleCurrentFont);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCONSOLE_FONT_INFOEX = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetCurrentConsoleFontEx$MH() {
        return RuntimeHelper.requireNonNull(constants$573.GetCurrentConsoleFontEx$MH,"GetCurrentConsoleFontEx");
    }
    public static int GetCurrentConsoleFontEx ( Addressable hConsoleOutput,  int bMaximumWindow,  Addressable lpConsoleCurrentFontEx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$573.GetCurrentConsoleFontEx$MH, "GetCurrentConsoleFontEx");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, bMaximumWindow, lpConsoleCurrentFontEx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetCurrentConsoleFontEx$MH() {
        return RuntimeHelper.requireNonNull(constants$573.SetCurrentConsoleFontEx$MH,"SetCurrentConsoleFontEx");
    }
    public static int SetCurrentConsoleFontEx ( Addressable hConsoleOutput,  int bMaximumWindow,  Addressable lpConsoleCurrentFontEx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$573.SetCurrentConsoleFontEx$MH, "SetCurrentConsoleFontEx");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, bMaximumWindow, lpConsoleCurrentFontEx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCONSOLE_SELECTION_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetConsoleSelectionInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$573.GetConsoleSelectionInfo$MH,"GetConsoleSelectionInfo");
    }
    public static int GetConsoleSelectionInfo ( Addressable lpConsoleSelectionInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$573.GetConsoleSelectionInfo$MH, "GetConsoleSelectionInfo");
        try {
            return (int)mh$.invokeExact(lpConsoleSelectionInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCONSOLE_HISTORY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle GetConsoleHistoryInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$573.GetConsoleHistoryInfo$MH,"GetConsoleHistoryInfo");
    }
    public static int GetConsoleHistoryInfo ( Addressable lpConsoleHistoryInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$573.GetConsoleHistoryInfo$MH, "GetConsoleHistoryInfo");
        try {
            return (int)mh$.invokeExact(lpConsoleHistoryInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleHistoryInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$573.SetConsoleHistoryInfo$MH,"SetConsoleHistoryInfo");
    }
    public static int SetConsoleHistoryInfo ( Addressable lpConsoleHistoryInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$573.SetConsoleHistoryInfo$MH, "SetConsoleHistoryInfo");
        try {
            return (int)mh$.invokeExact(lpConsoleHistoryInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleDisplayMode$MH() {
        return RuntimeHelper.requireNonNull(constants$573.GetConsoleDisplayMode$MH,"GetConsoleDisplayMode");
    }
    public static int GetConsoleDisplayMode ( Addressable lpModeFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$573.GetConsoleDisplayMode$MH, "GetConsoleDisplayMode");
        try {
            return (int)mh$.invokeExact(lpModeFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleDisplayMode$MH() {
        return RuntimeHelper.requireNonNull(constants$574.SetConsoleDisplayMode$MH,"SetConsoleDisplayMode");
    }
    public static int SetConsoleDisplayMode ( Addressable hConsoleOutput,  int dwFlags,  Addressable lpNewScreenBufferDimensions) {
        var mh$ = RuntimeHelper.requireNonNull(constants$574.SetConsoleDisplayMode$MH, "SetConsoleDisplayMode");
        try {
            return (int)mh$.invokeExact(hConsoleOutput, dwFlags, lpNewScreenBufferDimensions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$574.GetConsoleWindow$MH,"GetConsoleWindow");
    }
    public static MemoryAddress GetConsoleWindow () {
        var mh$ = RuntimeHelper.requireNonNull(constants$574.GetConsoleWindow$MH, "GetConsoleWindow");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddConsoleAliasA$MH() {
        return RuntimeHelper.requireNonNull(constants$574.AddConsoleAliasA$MH,"AddConsoleAliasA");
    }
    public static int AddConsoleAliasA ( Addressable Source,  Addressable Target,  Addressable ExeName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$574.AddConsoleAliasA$MH, "AddConsoleAliasA");
        try {
            return (int)mh$.invokeExact(Source, Target, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AddConsoleAliasW$MH() {
        return RuntimeHelper.requireNonNull(constants$574.AddConsoleAliasW$MH,"AddConsoleAliasW");
    }
    public static int AddConsoleAliasW ( Addressable Source,  Addressable Target,  Addressable ExeName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$574.AddConsoleAliasW$MH, "AddConsoleAliasW");
        try {
            return (int)mh$.invokeExact(Source, Target, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasA$MH() {
        return RuntimeHelper.requireNonNull(constants$574.GetConsoleAliasA$MH,"GetConsoleAliasA");
    }
    public static int GetConsoleAliasA ( Addressable Source,  Addressable TargetBuffer,  int TargetBufferLength,  Addressable ExeName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$574.GetConsoleAliasA$MH, "GetConsoleAliasA");
        try {
            return (int)mh$.invokeExact(Source, TargetBuffer, TargetBufferLength, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasW$MH() {
        return RuntimeHelper.requireNonNull(constants$574.GetConsoleAliasW$MH,"GetConsoleAliasW");
    }
    public static int GetConsoleAliasW ( Addressable Source,  Addressable TargetBuffer,  int TargetBufferLength,  Addressable ExeName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$574.GetConsoleAliasW$MH, "GetConsoleAliasW");
        try {
            return (int)mh$.invokeExact(Source, TargetBuffer, TargetBufferLength, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasesLengthA$MH() {
        return RuntimeHelper.requireNonNull(constants$575.GetConsoleAliasesLengthA$MH,"GetConsoleAliasesLengthA");
    }
    public static int GetConsoleAliasesLengthA ( Addressable ExeName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$575.GetConsoleAliasesLengthA$MH, "GetConsoleAliasesLengthA");
        try {
            return (int)mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasesLengthW$MH() {
        return RuntimeHelper.requireNonNull(constants$575.GetConsoleAliasesLengthW$MH,"GetConsoleAliasesLengthW");
    }
    public static int GetConsoleAliasesLengthW ( Addressable ExeName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$575.GetConsoleAliasesLengthW$MH, "GetConsoleAliasesLengthW");
        try {
            return (int)mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasExesLengthA$MH() {
        return RuntimeHelper.requireNonNull(constants$575.GetConsoleAliasExesLengthA$MH,"GetConsoleAliasExesLengthA");
    }
    public static int GetConsoleAliasExesLengthA () {
        var mh$ = RuntimeHelper.requireNonNull(constants$575.GetConsoleAliasExesLengthA$MH, "GetConsoleAliasExesLengthA");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasExesLengthW$MH() {
        return RuntimeHelper.requireNonNull(constants$575.GetConsoleAliasExesLengthW$MH,"GetConsoleAliasExesLengthW");
    }
    public static int GetConsoleAliasExesLengthW () {
        var mh$ = RuntimeHelper.requireNonNull(constants$575.GetConsoleAliasExesLengthW$MH, "GetConsoleAliasExesLengthW");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasesA$MH() {
        return RuntimeHelper.requireNonNull(constants$575.GetConsoleAliasesA$MH,"GetConsoleAliasesA");
    }
    public static int GetConsoleAliasesA ( Addressable AliasBuffer,  int AliasBufferLength,  Addressable ExeName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$575.GetConsoleAliasesA$MH, "GetConsoleAliasesA");
        try {
            return (int)mh$.invokeExact(AliasBuffer, AliasBufferLength, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasesW$MH() {
        return RuntimeHelper.requireNonNull(constants$575.GetConsoleAliasesW$MH,"GetConsoleAliasesW");
    }
    public static int GetConsoleAliasesW ( Addressable AliasBuffer,  int AliasBufferLength,  Addressable ExeName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$575.GetConsoleAliasesW$MH, "GetConsoleAliasesW");
        try {
            return (int)mh$.invokeExact(AliasBuffer, AliasBufferLength, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasExesA$MH() {
        return RuntimeHelper.requireNonNull(constants$576.GetConsoleAliasExesA$MH,"GetConsoleAliasExesA");
    }
    public static int GetConsoleAliasExesA ( Addressable ExeNameBuffer,  int ExeNameBufferLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$576.GetConsoleAliasExesA$MH, "GetConsoleAliasExesA");
        try {
            return (int)mh$.invokeExact(ExeNameBuffer, ExeNameBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleAliasExesW$MH() {
        return RuntimeHelper.requireNonNull(constants$576.GetConsoleAliasExesW$MH,"GetConsoleAliasExesW");
    }
    public static int GetConsoleAliasExesW ( Addressable ExeNameBuffer,  int ExeNameBufferLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$576.GetConsoleAliasExesW$MH, "GetConsoleAliasExesW");
        try {
            return (int)mh$.invokeExact(ExeNameBuffer, ExeNameBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExpungeConsoleCommandHistoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$576.ExpungeConsoleCommandHistoryA$MH,"ExpungeConsoleCommandHistoryA");
    }
    public static void ExpungeConsoleCommandHistoryA ( Addressable ExeName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$576.ExpungeConsoleCommandHistoryA$MH, "ExpungeConsoleCommandHistoryA");
        try {
            mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ExpungeConsoleCommandHistoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$576.ExpungeConsoleCommandHistoryW$MH,"ExpungeConsoleCommandHistoryW");
    }
    public static void ExpungeConsoleCommandHistoryW ( Addressable ExeName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$576.ExpungeConsoleCommandHistoryW$MH, "ExpungeConsoleCommandHistoryW");
        try {
            mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleNumberOfCommandsA$MH() {
        return RuntimeHelper.requireNonNull(constants$576.SetConsoleNumberOfCommandsA$MH,"SetConsoleNumberOfCommandsA");
    }
    public static int SetConsoleNumberOfCommandsA ( int Number,  Addressable ExeName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$576.SetConsoleNumberOfCommandsA$MH, "SetConsoleNumberOfCommandsA");
        try {
            return (int)mh$.invokeExact(Number, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetConsoleNumberOfCommandsW$MH() {
        return RuntimeHelper.requireNonNull(constants$576.SetConsoleNumberOfCommandsW$MH,"SetConsoleNumberOfCommandsW");
    }
    public static int SetConsoleNumberOfCommandsW ( int Number,  Addressable ExeName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$576.SetConsoleNumberOfCommandsW$MH, "SetConsoleNumberOfCommandsW");
        try {
            return (int)mh$.invokeExact(Number, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleCommandHistoryLengthA$MH() {
        return RuntimeHelper.requireNonNull(constants$577.GetConsoleCommandHistoryLengthA$MH,"GetConsoleCommandHistoryLengthA");
    }
    public static int GetConsoleCommandHistoryLengthA ( Addressable ExeName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$577.GetConsoleCommandHistoryLengthA$MH, "GetConsoleCommandHistoryLengthA");
        try {
            return (int)mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleCommandHistoryLengthW$MH() {
        return RuntimeHelper.requireNonNull(constants$577.GetConsoleCommandHistoryLengthW$MH,"GetConsoleCommandHistoryLengthW");
    }
    public static int GetConsoleCommandHistoryLengthW ( Addressable ExeName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$577.GetConsoleCommandHistoryLengthW$MH, "GetConsoleCommandHistoryLengthW");
        try {
            return (int)mh$.invokeExact(ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleCommandHistoryA$MH() {
        return RuntimeHelper.requireNonNull(constants$577.GetConsoleCommandHistoryA$MH,"GetConsoleCommandHistoryA");
    }
    public static int GetConsoleCommandHistoryA ( Addressable Commands,  int CommandBufferLength,  Addressable ExeName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$577.GetConsoleCommandHistoryA$MH, "GetConsoleCommandHistoryA");
        try {
            return (int)mh$.invokeExact(Commands, CommandBufferLength, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleCommandHistoryW$MH() {
        return RuntimeHelper.requireNonNull(constants$577.GetConsoleCommandHistoryW$MH,"GetConsoleCommandHistoryW");
    }
    public static int GetConsoleCommandHistoryW ( Addressable Commands,  int CommandBufferLength,  Addressable ExeName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$577.GetConsoleCommandHistoryW$MH, "GetConsoleCommandHistoryW");
        try {
            return (int)mh$.invokeExact(Commands, CommandBufferLength, ExeName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetConsoleProcessList$MH() {
        return RuntimeHelper.requireNonNull(constants$577.GetConsoleProcessList$MH,"GetConsoleProcessList");
    }
    public static int GetConsoleProcessList ( Addressable lpdwProcessList,  int dwProcessCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$577.GetConsoleProcessList$MH, "GetConsoleProcessList");
        try {
            return (int)mh$.invokeExact(lpdwProcessList, dwProcessCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerFindFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$577.VerFindFileA$MH,"VerFindFileA");
    }
    public static int VerFindFileA ( int uFlags,  Addressable szFileName,  Addressable szWinDir,  Addressable szAppDir,  Addressable szCurDir,  Addressable puCurDirLen,  Addressable szDestDir,  Addressable puDestDirLen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$577.VerFindFileA$MH, "VerFindFileA");
        try {
            return (int)mh$.invokeExact(uFlags, szFileName, szWinDir, szAppDir, szCurDir, puCurDirLen, szDestDir, puDestDirLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerFindFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$578.VerFindFileW$MH,"VerFindFileW");
    }
    public static int VerFindFileW ( int uFlags,  Addressable szFileName,  Addressable szWinDir,  Addressable szAppDir,  Addressable szCurDir,  Addressable puCurDirLen,  Addressable szDestDir,  Addressable puDestDirLen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$578.VerFindFileW$MH, "VerFindFileW");
        try {
            return (int)mh$.invokeExact(uFlags, szFileName, szWinDir, szAppDir, szCurDir, puCurDirLen, szDestDir, puDestDirLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerInstallFileA$MH() {
        return RuntimeHelper.requireNonNull(constants$578.VerInstallFileA$MH,"VerInstallFileA");
    }
    public static int VerInstallFileA ( int uFlags,  Addressable szSrcFileName,  Addressable szDestFileName,  Addressable szSrcDir,  Addressable szDestDir,  Addressable szCurDir,  Addressable szTmpFile,  Addressable puTmpFileLen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$578.VerInstallFileA$MH, "VerInstallFileA");
        try {
            return (int)mh$.invokeExact(uFlags, szSrcFileName, szDestFileName, szSrcDir, szDestDir, szCurDir, szTmpFile, puTmpFileLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerInstallFileW$MH() {
        return RuntimeHelper.requireNonNull(constants$578.VerInstallFileW$MH,"VerInstallFileW");
    }
    public static int VerInstallFileW ( int uFlags,  Addressable szSrcFileName,  Addressable szDestFileName,  Addressable szSrcDir,  Addressable szDestDir,  Addressable szCurDir,  Addressable szTmpFile,  Addressable puTmpFileLen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$578.VerInstallFileW$MH, "VerInstallFileW");
        try {
            return (int)mh$.invokeExact(uFlags, szSrcFileName, szDestFileName, szSrcDir, szDestDir, szCurDir, szTmpFile, puTmpFileLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoSizeA$MH() {
        return RuntimeHelper.requireNonNull(constants$578.GetFileVersionInfoSizeA$MH,"GetFileVersionInfoSizeA");
    }
    public static int GetFileVersionInfoSizeA ( Addressable lptstrFilename,  Addressable lpdwHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$578.GetFileVersionInfoSizeA$MH, "GetFileVersionInfoSizeA");
        try {
            return (int)mh$.invokeExact(lptstrFilename, lpdwHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoSizeW$MH() {
        return RuntimeHelper.requireNonNull(constants$578.GetFileVersionInfoSizeW$MH,"GetFileVersionInfoSizeW");
    }
    public static int GetFileVersionInfoSizeW ( Addressable lptstrFilename,  Addressable lpdwHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$578.GetFileVersionInfoSizeW$MH, "GetFileVersionInfoSizeW");
        try {
            return (int)mh$.invokeExact(lptstrFilename, lpdwHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoA$MH() {
        return RuntimeHelper.requireNonNull(constants$578.GetFileVersionInfoA$MH,"GetFileVersionInfoA");
    }
    public static int GetFileVersionInfoA ( Addressable lptstrFilename,  int dwHandle,  int dwLen,  Addressable lpData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$578.GetFileVersionInfoA$MH, "GetFileVersionInfoA");
        try {
            return (int)mh$.invokeExact(lptstrFilename, dwHandle, dwLen, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoW$MH() {
        return RuntimeHelper.requireNonNull(constants$579.GetFileVersionInfoW$MH,"GetFileVersionInfoW");
    }
    public static int GetFileVersionInfoW ( Addressable lptstrFilename,  int dwHandle,  int dwLen,  Addressable lpData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$579.GetFileVersionInfoW$MH, "GetFileVersionInfoW");
        try {
            return (int)mh$.invokeExact(lptstrFilename, dwHandle, dwLen, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoSizeExA$MH() {
        return RuntimeHelper.requireNonNull(constants$579.GetFileVersionInfoSizeExA$MH,"GetFileVersionInfoSizeExA");
    }
    public static int GetFileVersionInfoSizeExA ( int dwFlags,  Addressable lpwstrFilename,  Addressable lpdwHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$579.GetFileVersionInfoSizeExA$MH, "GetFileVersionInfoSizeExA");
        try {
            return (int)mh$.invokeExact(dwFlags, lpwstrFilename, lpdwHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoSizeExW$MH() {
        return RuntimeHelper.requireNonNull(constants$579.GetFileVersionInfoSizeExW$MH,"GetFileVersionInfoSizeExW");
    }
    public static int GetFileVersionInfoSizeExW ( int dwFlags,  Addressable lpwstrFilename,  Addressable lpdwHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$579.GetFileVersionInfoSizeExW$MH, "GetFileVersionInfoSizeExW");
        try {
            return (int)mh$.invokeExact(dwFlags, lpwstrFilename, lpdwHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoExA$MH() {
        return RuntimeHelper.requireNonNull(constants$579.GetFileVersionInfoExA$MH,"GetFileVersionInfoExA");
    }
    public static int GetFileVersionInfoExA ( int dwFlags,  Addressable lpwstrFilename,  int dwHandle,  int dwLen,  Addressable lpData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$579.GetFileVersionInfoExA$MH, "GetFileVersionInfoExA");
        try {
            return (int)mh$.invokeExact(dwFlags, lpwstrFilename, dwHandle, dwLen, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFileVersionInfoExW$MH() {
        return RuntimeHelper.requireNonNull(constants$579.GetFileVersionInfoExW$MH,"GetFileVersionInfoExW");
    }
    public static int GetFileVersionInfoExW ( int dwFlags,  Addressable lpwstrFilename,  int dwHandle,  int dwLen,  Addressable lpData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$579.GetFileVersionInfoExW$MH, "GetFileVersionInfoExW");
        try {
            return (int)mh$.invokeExact(dwFlags, lpwstrFilename, dwHandle, dwLen, lpData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerLanguageNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$579.VerLanguageNameA$MH,"VerLanguageNameA");
    }
    public static int VerLanguageNameA ( int wLang,  Addressable szLang,  int cchLang) {
        var mh$ = RuntimeHelper.requireNonNull(constants$579.VerLanguageNameA$MH, "VerLanguageNameA");
        try {
            return (int)mh$.invokeExact(wLang, szLang, cchLang);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerLanguageNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$580.VerLanguageNameW$MH,"VerLanguageNameW");
    }
    public static int VerLanguageNameW ( int wLang,  Addressable szLang,  int cchLang) {
        var mh$ = RuntimeHelper.requireNonNull(constants$580.VerLanguageNameW$MH, "VerLanguageNameW");
        try {
            return (int)mh$.invokeExact(wLang, szLang, cchLang);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerQueryValueA$MH() {
        return RuntimeHelper.requireNonNull(constants$580.VerQueryValueA$MH,"VerQueryValueA");
    }
    public static int VerQueryValueA ( Addressable pBlock,  Addressable lpSubBlock,  Addressable lplpBuffer,  Addressable puLen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$580.VerQueryValueA$MH, "VerQueryValueA");
        try {
            return (int)mh$.invokeExact(pBlock, lpSubBlock, lplpBuffer, puLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle VerQueryValueW$MH() {
        return RuntimeHelper.requireNonNull(constants$580.VerQueryValueW$MH,"VerQueryValueW");
    }
    public static int VerQueryValueW ( Addressable pBlock,  Addressable lpSubBlock,  Addressable lplpBuffer,  Addressable puLen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$580.VerQueryValueW$MH, "VerQueryValueW");
        try {
            return (int)mh$.invokeExact(pBlock, lpSubBlock, lplpBuffer, puLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt LSTATUS = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PVALCONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPVALUEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPVALUEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPVALUE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROVIDER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVALENTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVALENTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVALENT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RegCloseKey$MH() {
        return RuntimeHelper.requireNonNull(constants$581.RegCloseKey$MH,"RegCloseKey");
    }
    public static int RegCloseKey ( Addressable hKey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$581.RegCloseKey$MH, "RegCloseKey");
        try {
            return (int)mh$.invokeExact(hKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegOverridePredefKey$MH() {
        return RuntimeHelper.requireNonNull(constants$581.RegOverridePredefKey$MH,"RegOverridePredefKey");
    }
    public static int RegOverridePredefKey ( Addressable hKey,  Addressable hNewHKey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$581.RegOverridePredefKey$MH, "RegOverridePredefKey");
        try {
            return (int)mh$.invokeExact(hKey, hNewHKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegOpenUserClassesRoot$MH() {
        return RuntimeHelper.requireNonNull(constants$581.RegOpenUserClassesRoot$MH,"RegOpenUserClassesRoot");
    }
    public static int RegOpenUserClassesRoot ( Addressable hToken,  int dwOptions,  int samDesired,  Addressable phkResult) {
        var mh$ = RuntimeHelper.requireNonNull(constants$581.RegOpenUserClassesRoot$MH, "RegOpenUserClassesRoot");
        try {
            return (int)mh$.invokeExact(hToken, dwOptions, samDesired, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegOpenCurrentUser$MH() {
        return RuntimeHelper.requireNonNull(constants$581.RegOpenCurrentUser$MH,"RegOpenCurrentUser");
    }
    public static int RegOpenCurrentUser ( int samDesired,  Addressable phkResult) {
        var mh$ = RuntimeHelper.requireNonNull(constants$581.RegOpenCurrentUser$MH, "RegOpenCurrentUser");
        try {
            return (int)mh$.invokeExact(samDesired, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDisablePredefinedCache$MH() {
        return RuntimeHelper.requireNonNull(constants$581.RegDisablePredefinedCache$MH,"RegDisablePredefinedCache");
    }
    public static int RegDisablePredefinedCache () {
        var mh$ = RuntimeHelper.requireNonNull(constants$581.RegDisablePredefinedCache$MH, "RegDisablePredefinedCache");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDisablePredefinedCacheEx$MH() {
        return RuntimeHelper.requireNonNull(constants$582.RegDisablePredefinedCacheEx$MH,"RegDisablePredefinedCacheEx");
    }
    public static int RegDisablePredefinedCacheEx () {
        var mh$ = RuntimeHelper.requireNonNull(constants$582.RegDisablePredefinedCacheEx$MH, "RegDisablePredefinedCacheEx");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegConnectRegistryA$MH() {
        return RuntimeHelper.requireNonNull(constants$582.RegConnectRegistryA$MH,"RegConnectRegistryA");
    }
    public static int RegConnectRegistryA ( Addressable lpMachineName,  Addressable hKey,  Addressable phkResult) {
        var mh$ = RuntimeHelper.requireNonNull(constants$582.RegConnectRegistryA$MH, "RegConnectRegistryA");
        try {
            return (int)mh$.invokeExact(lpMachineName, hKey, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegConnectRegistryW$MH() {
        return RuntimeHelper.requireNonNull(constants$582.RegConnectRegistryW$MH,"RegConnectRegistryW");
    }
    public static int RegConnectRegistryW ( Addressable lpMachineName,  Addressable hKey,  Addressable phkResult) {
        var mh$ = RuntimeHelper.requireNonNull(constants$582.RegConnectRegistryW$MH, "RegConnectRegistryW");
        try {
            return (int)mh$.invokeExact(lpMachineName, hKey, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegConnectRegistryExA$MH() {
        return RuntimeHelper.requireNonNull(constants$582.RegConnectRegistryExA$MH,"RegConnectRegistryExA");
    }
    public static int RegConnectRegistryExA ( Addressable lpMachineName,  Addressable hKey,  int Flags,  Addressable phkResult) {
        var mh$ = RuntimeHelper.requireNonNull(constants$582.RegConnectRegistryExA$MH, "RegConnectRegistryExA");
        try {
            return (int)mh$.invokeExact(lpMachineName, hKey, Flags, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegConnectRegistryExW$MH() {
        return RuntimeHelper.requireNonNull(constants$582.RegConnectRegistryExW$MH,"RegConnectRegistryExW");
    }
    public static int RegConnectRegistryExW ( Addressable lpMachineName,  Addressable hKey,  int Flags,  Addressable phkResult) {
        var mh$ = RuntimeHelper.requireNonNull(constants$582.RegConnectRegistryExW$MH, "RegConnectRegistryExW");
        try {
            return (int)mh$.invokeExact(lpMachineName, hKey, Flags, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegCreateKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$582.RegCreateKeyA$MH,"RegCreateKeyA");
    }
    public static int RegCreateKeyA ( Addressable hKey,  Addressable lpSubKey,  Addressable phkResult) {
        var mh$ = RuntimeHelper.requireNonNull(constants$582.RegCreateKeyA$MH, "RegCreateKeyA");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegCreateKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$583.RegCreateKeyW$MH,"RegCreateKeyW");
    }
    public static int RegCreateKeyW ( Addressable hKey,  Addressable lpSubKey,  Addressable phkResult) {
        var mh$ = RuntimeHelper.requireNonNull(constants$583.RegCreateKeyW$MH, "RegCreateKeyW");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegCreateKeyExA$MH() {
        return RuntimeHelper.requireNonNull(constants$583.RegCreateKeyExA$MH,"RegCreateKeyExA");
    }
    public static int RegCreateKeyExA ( Addressable hKey,  Addressable lpSubKey,  int Reserved,  Addressable lpClass,  int dwOptions,  int samDesired,  Addressable lpSecurityAttributes,  Addressable phkResult,  Addressable lpdwDisposition) {
        var mh$ = RuntimeHelper.requireNonNull(constants$583.RegCreateKeyExA$MH, "RegCreateKeyExA");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, Reserved, lpClass, dwOptions, samDesired, lpSecurityAttributes, phkResult, lpdwDisposition);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegCreateKeyExW$MH() {
        return RuntimeHelper.requireNonNull(constants$583.RegCreateKeyExW$MH,"RegCreateKeyExW");
    }
    public static int RegCreateKeyExW ( Addressable hKey,  Addressable lpSubKey,  int Reserved,  Addressable lpClass,  int dwOptions,  int samDesired,  Addressable lpSecurityAttributes,  Addressable phkResult,  Addressable lpdwDisposition) {
        var mh$ = RuntimeHelper.requireNonNull(constants$583.RegCreateKeyExW$MH, "RegCreateKeyExW");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, Reserved, lpClass, dwOptions, samDesired, lpSecurityAttributes, phkResult, lpdwDisposition);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegCreateKeyTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$583.RegCreateKeyTransactedA$MH,"RegCreateKeyTransactedA");
    }
    public static int RegCreateKeyTransactedA ( Addressable hKey,  Addressable lpSubKey,  int Reserved,  Addressable lpClass,  int dwOptions,  int samDesired,  Addressable lpSecurityAttributes,  Addressable phkResult,  Addressable lpdwDisposition,  Addressable hTransaction,  Addressable pExtendedParemeter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$583.RegCreateKeyTransactedA$MH, "RegCreateKeyTransactedA");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, Reserved, lpClass, dwOptions, samDesired, lpSecurityAttributes, phkResult, lpdwDisposition, hTransaction, pExtendedParemeter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegCreateKeyTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$583.RegCreateKeyTransactedW$MH,"RegCreateKeyTransactedW");
    }
    public static int RegCreateKeyTransactedW ( Addressable hKey,  Addressable lpSubKey,  int Reserved,  Addressable lpClass,  int dwOptions,  int samDesired,  Addressable lpSecurityAttributes,  Addressable phkResult,  Addressable lpdwDisposition,  Addressable hTransaction,  Addressable pExtendedParemeter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$583.RegCreateKeyTransactedW$MH, "RegCreateKeyTransactedW");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, Reserved, lpClass, dwOptions, samDesired, lpSecurityAttributes, phkResult, lpdwDisposition, hTransaction, pExtendedParemeter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$583.RegDeleteKeyA$MH,"RegDeleteKeyA");
    }
    public static int RegDeleteKeyA ( Addressable hKey,  Addressable lpSubKey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$583.RegDeleteKeyA$MH, "RegDeleteKeyA");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$584.RegDeleteKeyW$MH,"RegDeleteKeyW");
    }
    public static int RegDeleteKeyW ( Addressable hKey,  Addressable lpSubKey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$584.RegDeleteKeyW$MH, "RegDeleteKeyW");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteKeyExA$MH() {
        return RuntimeHelper.requireNonNull(constants$584.RegDeleteKeyExA$MH,"RegDeleteKeyExA");
    }
    public static int RegDeleteKeyExA ( Addressable hKey,  Addressable lpSubKey,  int samDesired,  int Reserved) {
        var mh$ = RuntimeHelper.requireNonNull(constants$584.RegDeleteKeyExA$MH, "RegDeleteKeyExA");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, samDesired, Reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteKeyExW$MH() {
        return RuntimeHelper.requireNonNull(constants$584.RegDeleteKeyExW$MH,"RegDeleteKeyExW");
    }
    public static int RegDeleteKeyExW ( Addressable hKey,  Addressable lpSubKey,  int samDesired,  int Reserved) {
        var mh$ = RuntimeHelper.requireNonNull(constants$584.RegDeleteKeyExW$MH, "RegDeleteKeyExW");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, samDesired, Reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteKeyTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$584.RegDeleteKeyTransactedA$MH,"RegDeleteKeyTransactedA");
    }
    public static int RegDeleteKeyTransactedA ( Addressable hKey,  Addressable lpSubKey,  int samDesired,  int Reserved,  Addressable hTransaction,  Addressable pExtendedParameter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$584.RegDeleteKeyTransactedA$MH, "RegDeleteKeyTransactedA");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, samDesired, Reserved, hTransaction, pExtendedParameter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteKeyTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$584.RegDeleteKeyTransactedW$MH,"RegDeleteKeyTransactedW");
    }
    public static int RegDeleteKeyTransactedW ( Addressable hKey,  Addressable lpSubKey,  int samDesired,  int Reserved,  Addressable hTransaction,  Addressable pExtendedParameter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$584.RegDeleteKeyTransactedW$MH, "RegDeleteKeyTransactedW");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, samDesired, Reserved, hTransaction, pExtendedParameter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDisableReflectionKey$MH() {
        return RuntimeHelper.requireNonNull(constants$584.RegDisableReflectionKey$MH,"RegDisableReflectionKey");
    }
    public static int RegDisableReflectionKey ( Addressable hBase) {
        var mh$ = RuntimeHelper.requireNonNull(constants$584.RegDisableReflectionKey$MH, "RegDisableReflectionKey");
        try {
            return (int)mh$.invokeExact(hBase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegEnableReflectionKey$MH() {
        return RuntimeHelper.requireNonNull(constants$585.RegEnableReflectionKey$MH,"RegEnableReflectionKey");
    }
    public static int RegEnableReflectionKey ( Addressable hBase) {
        var mh$ = RuntimeHelper.requireNonNull(constants$585.RegEnableReflectionKey$MH, "RegEnableReflectionKey");
        try {
            return (int)mh$.invokeExact(hBase);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegQueryReflectionKey$MH() {
        return RuntimeHelper.requireNonNull(constants$585.RegQueryReflectionKey$MH,"RegQueryReflectionKey");
    }
    public static int RegQueryReflectionKey ( Addressable hBase,  Addressable bIsReflectionDisabled) {
        var mh$ = RuntimeHelper.requireNonNull(constants$585.RegQueryReflectionKey$MH, "RegQueryReflectionKey");
        try {
            return (int)mh$.invokeExact(hBase, bIsReflectionDisabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteValueA$MH() {
        return RuntimeHelper.requireNonNull(constants$585.RegDeleteValueA$MH,"RegDeleteValueA");
    }
    public static int RegDeleteValueA ( Addressable hKey,  Addressable lpValueName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$585.RegDeleteValueA$MH, "RegDeleteValueA");
        try {
            return (int)mh$.invokeExact(hKey, lpValueName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteValueW$MH() {
        return RuntimeHelper.requireNonNull(constants$585.RegDeleteValueW$MH,"RegDeleteValueW");
    }
    public static int RegDeleteValueW ( Addressable hKey,  Addressable lpValueName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$585.RegDeleteValueW$MH, "RegDeleteValueW");
        try {
            return (int)mh$.invokeExact(hKey, lpValueName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegEnumKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$585.RegEnumKeyA$MH,"RegEnumKeyA");
    }
    public static int RegEnumKeyA ( Addressable hKey,  int dwIndex,  Addressable lpName,  int cchName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$585.RegEnumKeyA$MH, "RegEnumKeyA");
        try {
            return (int)mh$.invokeExact(hKey, dwIndex, lpName, cchName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegEnumKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$585.RegEnumKeyW$MH,"RegEnumKeyW");
    }
    public static int RegEnumKeyW ( Addressable hKey,  int dwIndex,  Addressable lpName,  int cchName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$585.RegEnumKeyW$MH, "RegEnumKeyW");
        try {
            return (int)mh$.invokeExact(hKey, dwIndex, lpName, cchName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegEnumKeyExA$MH() {
        return RuntimeHelper.requireNonNull(constants$586.RegEnumKeyExA$MH,"RegEnumKeyExA");
    }
    public static int RegEnumKeyExA ( Addressable hKey,  int dwIndex,  Addressable lpName,  Addressable lpcchName,  Addressable lpReserved,  Addressable lpClass,  Addressable lpcchClass,  Addressable lpftLastWriteTime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$586.RegEnumKeyExA$MH, "RegEnumKeyExA");
        try {
            return (int)mh$.invokeExact(hKey, dwIndex, lpName, lpcchName, lpReserved, lpClass, lpcchClass, lpftLastWriteTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegEnumKeyExW$MH() {
        return RuntimeHelper.requireNonNull(constants$586.RegEnumKeyExW$MH,"RegEnumKeyExW");
    }
    public static int RegEnumKeyExW ( Addressable hKey,  int dwIndex,  Addressable lpName,  Addressable lpcchName,  Addressable lpReserved,  Addressable lpClass,  Addressable lpcchClass,  Addressable lpftLastWriteTime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$586.RegEnumKeyExW$MH, "RegEnumKeyExW");
        try {
            return (int)mh$.invokeExact(hKey, dwIndex, lpName, lpcchName, lpReserved, lpClass, lpcchClass, lpftLastWriteTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegEnumValueA$MH() {
        return RuntimeHelper.requireNonNull(constants$586.RegEnumValueA$MH,"RegEnumValueA");
    }
    public static int RegEnumValueA ( Addressable hKey,  int dwIndex,  Addressable lpValueName,  Addressable lpcchValueName,  Addressable lpReserved,  Addressable lpType,  Addressable lpData,  Addressable lpcbData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$586.RegEnumValueA$MH, "RegEnumValueA");
        try {
            return (int)mh$.invokeExact(hKey, dwIndex, lpValueName, lpcchValueName, lpReserved, lpType, lpData, lpcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegEnumValueW$MH() {
        return RuntimeHelper.requireNonNull(constants$586.RegEnumValueW$MH,"RegEnumValueW");
    }
    public static int RegEnumValueW ( Addressable hKey,  int dwIndex,  Addressable lpValueName,  Addressable lpcchValueName,  Addressable lpReserved,  Addressable lpType,  Addressable lpData,  Addressable lpcbData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$586.RegEnumValueW$MH, "RegEnumValueW");
        try {
            return (int)mh$.invokeExact(hKey, dwIndex, lpValueName, lpcchValueName, lpReserved, lpType, lpData, lpcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegFlushKey$MH() {
        return RuntimeHelper.requireNonNull(constants$586.RegFlushKey$MH,"RegFlushKey");
    }
    public static int RegFlushKey ( Addressable hKey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$586.RegFlushKey$MH, "RegFlushKey");
        try {
            return (int)mh$.invokeExact(hKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegGetKeySecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$586.RegGetKeySecurity$MH,"RegGetKeySecurity");
    }
    public static int RegGetKeySecurity ( Addressable hKey,  int SecurityInformation,  Addressable pSecurityDescriptor,  Addressable lpcbSecurityDescriptor) {
        var mh$ = RuntimeHelper.requireNonNull(constants$586.RegGetKeySecurity$MH, "RegGetKeySecurity");
        try {
            return (int)mh$.invokeExact(hKey, SecurityInformation, pSecurityDescriptor, lpcbSecurityDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegLoadKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$587.RegLoadKeyA$MH,"RegLoadKeyA");
    }
    public static int RegLoadKeyA ( Addressable hKey,  Addressable lpSubKey,  Addressable lpFile) {
        var mh$ = RuntimeHelper.requireNonNull(constants$587.RegLoadKeyA$MH, "RegLoadKeyA");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegLoadKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$587.RegLoadKeyW$MH,"RegLoadKeyW");
    }
    public static int RegLoadKeyW ( Addressable hKey,  Addressable lpSubKey,  Addressable lpFile) {
        var mh$ = RuntimeHelper.requireNonNull(constants$587.RegLoadKeyW$MH, "RegLoadKeyW");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegNotifyChangeKeyValue$MH() {
        return RuntimeHelper.requireNonNull(constants$587.RegNotifyChangeKeyValue$MH,"RegNotifyChangeKeyValue");
    }
    public static int RegNotifyChangeKeyValue ( Addressable hKey,  int bWatchSubtree,  int dwNotifyFilter,  Addressable hEvent,  int fAsynchronous) {
        var mh$ = RuntimeHelper.requireNonNull(constants$587.RegNotifyChangeKeyValue$MH, "RegNotifyChangeKeyValue");
        try {
            return (int)mh$.invokeExact(hKey, bWatchSubtree, dwNotifyFilter, hEvent, fAsynchronous);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegOpenKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$587.RegOpenKeyA$MH,"RegOpenKeyA");
    }
    public static int RegOpenKeyA ( Addressable hKey,  Addressable lpSubKey,  Addressable phkResult) {
        var mh$ = RuntimeHelper.requireNonNull(constants$587.RegOpenKeyA$MH, "RegOpenKeyA");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegOpenKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$587.RegOpenKeyW$MH,"RegOpenKeyW");
    }
    public static int RegOpenKeyW ( Addressable hKey,  Addressable lpSubKey,  Addressable phkResult) {
        var mh$ = RuntimeHelper.requireNonNull(constants$587.RegOpenKeyW$MH, "RegOpenKeyW");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegOpenKeyExA$MH() {
        return RuntimeHelper.requireNonNull(constants$587.RegOpenKeyExA$MH,"RegOpenKeyExA");
    }
    public static int RegOpenKeyExA ( Addressable hKey,  Addressable lpSubKey,  int ulOptions,  int samDesired,  Addressable phkResult) {
        var mh$ = RuntimeHelper.requireNonNull(constants$587.RegOpenKeyExA$MH, "RegOpenKeyExA");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, ulOptions, samDesired, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegOpenKeyExW$MH() {
        return RuntimeHelper.requireNonNull(constants$588.RegOpenKeyExW$MH,"RegOpenKeyExW");
    }
    public static int RegOpenKeyExW ( Addressable hKey,  Addressable lpSubKey,  int ulOptions,  int samDesired,  Addressable phkResult) {
        var mh$ = RuntimeHelper.requireNonNull(constants$588.RegOpenKeyExW$MH, "RegOpenKeyExW");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, ulOptions, samDesired, phkResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegOpenKeyTransactedA$MH() {
        return RuntimeHelper.requireNonNull(constants$588.RegOpenKeyTransactedA$MH,"RegOpenKeyTransactedA");
    }
    public static int RegOpenKeyTransactedA ( Addressable hKey,  Addressable lpSubKey,  int ulOptions,  int samDesired,  Addressable phkResult,  Addressable hTransaction,  Addressable pExtendedParemeter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$588.RegOpenKeyTransactedA$MH, "RegOpenKeyTransactedA");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, ulOptions, samDesired, phkResult, hTransaction, pExtendedParemeter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegOpenKeyTransactedW$MH() {
        return RuntimeHelper.requireNonNull(constants$588.RegOpenKeyTransactedW$MH,"RegOpenKeyTransactedW");
    }
    public static int RegOpenKeyTransactedW ( Addressable hKey,  Addressable lpSubKey,  int ulOptions,  int samDesired,  Addressable phkResult,  Addressable hTransaction,  Addressable pExtendedParemeter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$588.RegOpenKeyTransactedW$MH, "RegOpenKeyTransactedW");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, ulOptions, samDesired, phkResult, hTransaction, pExtendedParemeter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegQueryInfoKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$588.RegQueryInfoKeyA$MH,"RegQueryInfoKeyA");
    }
    public static int RegQueryInfoKeyA ( Addressable hKey,  Addressable lpClass,  Addressable lpcchClass,  Addressable lpReserved,  Addressable lpcSubKeys,  Addressable lpcbMaxSubKeyLen,  Addressable lpcbMaxClassLen,  Addressable lpcValues,  Addressable lpcbMaxValueNameLen,  Addressable lpcbMaxValueLen,  Addressable lpcbSecurityDescriptor,  Addressable lpftLastWriteTime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$588.RegQueryInfoKeyA$MH, "RegQueryInfoKeyA");
        try {
            return (int)mh$.invokeExact(hKey, lpClass, lpcchClass, lpReserved, lpcSubKeys, lpcbMaxSubKeyLen, lpcbMaxClassLen, lpcValues, lpcbMaxValueNameLen, lpcbMaxValueLen, lpcbSecurityDescriptor, lpftLastWriteTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegQueryInfoKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$588.RegQueryInfoKeyW$MH,"RegQueryInfoKeyW");
    }
    public static int RegQueryInfoKeyW ( Addressable hKey,  Addressable lpClass,  Addressable lpcchClass,  Addressable lpReserved,  Addressable lpcSubKeys,  Addressable lpcbMaxSubKeyLen,  Addressable lpcbMaxClassLen,  Addressable lpcValues,  Addressable lpcbMaxValueNameLen,  Addressable lpcbMaxValueLen,  Addressable lpcbSecurityDescriptor,  Addressable lpftLastWriteTime) {
        var mh$ = RuntimeHelper.requireNonNull(constants$588.RegQueryInfoKeyW$MH, "RegQueryInfoKeyW");
        try {
            return (int)mh$.invokeExact(hKey, lpClass, lpcchClass, lpReserved, lpcSubKeys, lpcbMaxSubKeyLen, lpcbMaxClassLen, lpcValues, lpcbMaxValueNameLen, lpcbMaxValueLen, lpcbSecurityDescriptor, lpftLastWriteTime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegQueryValueA$MH() {
        return RuntimeHelper.requireNonNull(constants$588.RegQueryValueA$MH,"RegQueryValueA");
    }
    public static int RegQueryValueA ( Addressable hKey,  Addressable lpSubKey,  Addressable lpData,  Addressable lpcbData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$588.RegQueryValueA$MH, "RegQueryValueA");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpData, lpcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegQueryValueW$MH() {
        return RuntimeHelper.requireNonNull(constants$589.RegQueryValueW$MH,"RegQueryValueW");
    }
    public static int RegQueryValueW ( Addressable hKey,  Addressable lpSubKey,  Addressable lpData,  Addressable lpcbData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$589.RegQueryValueW$MH, "RegQueryValueW");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpData, lpcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegQueryMultipleValuesA$MH() {
        return RuntimeHelper.requireNonNull(constants$589.RegQueryMultipleValuesA$MH,"RegQueryMultipleValuesA");
    }
    public static int RegQueryMultipleValuesA ( Addressable hKey,  Addressable val_list,  int num_vals,  Addressable lpValueBuf,  Addressable ldwTotsize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$589.RegQueryMultipleValuesA$MH, "RegQueryMultipleValuesA");
        try {
            return (int)mh$.invokeExact(hKey, val_list, num_vals, lpValueBuf, ldwTotsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegQueryMultipleValuesW$MH() {
        return RuntimeHelper.requireNonNull(constants$589.RegQueryMultipleValuesW$MH,"RegQueryMultipleValuesW");
    }
    public static int RegQueryMultipleValuesW ( Addressable hKey,  Addressable val_list,  int num_vals,  Addressable lpValueBuf,  Addressable ldwTotsize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$589.RegQueryMultipleValuesW$MH, "RegQueryMultipleValuesW");
        try {
            return (int)mh$.invokeExact(hKey, val_list, num_vals, lpValueBuf, ldwTotsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegQueryValueExA$MH() {
        return RuntimeHelper.requireNonNull(constants$589.RegQueryValueExA$MH,"RegQueryValueExA");
    }
    public static int RegQueryValueExA ( Addressable hKey,  Addressable lpValueName,  Addressable lpReserved,  Addressable lpType,  Addressable lpData,  Addressable lpcbData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$589.RegQueryValueExA$MH, "RegQueryValueExA");
        try {
            return (int)mh$.invokeExact(hKey, lpValueName, lpReserved, lpType, lpData, lpcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegQueryValueExW$MH() {
        return RuntimeHelper.requireNonNull(constants$589.RegQueryValueExW$MH,"RegQueryValueExW");
    }
    public static int RegQueryValueExW ( Addressable hKey,  Addressable lpValueName,  Addressable lpReserved,  Addressable lpType,  Addressable lpData,  Addressable lpcbData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$589.RegQueryValueExW$MH, "RegQueryValueExW");
        try {
            return (int)mh$.invokeExact(hKey, lpValueName, lpReserved, lpType, lpData, lpcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegReplaceKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$589.RegReplaceKeyA$MH,"RegReplaceKeyA");
    }
    public static int RegReplaceKeyA ( Addressable hKey,  Addressable lpSubKey,  Addressable lpNewFile,  Addressable lpOldFile) {
        var mh$ = RuntimeHelper.requireNonNull(constants$589.RegReplaceKeyA$MH, "RegReplaceKeyA");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpNewFile, lpOldFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegReplaceKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$590.RegReplaceKeyW$MH,"RegReplaceKeyW");
    }
    public static int RegReplaceKeyW ( Addressable hKey,  Addressable lpSubKey,  Addressable lpNewFile,  Addressable lpOldFile) {
        var mh$ = RuntimeHelper.requireNonNull(constants$590.RegReplaceKeyW$MH, "RegReplaceKeyW");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpNewFile, lpOldFile);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegRestoreKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$590.RegRestoreKeyA$MH,"RegRestoreKeyA");
    }
    public static int RegRestoreKeyA ( Addressable hKey,  Addressable lpFile,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$590.RegRestoreKeyA$MH, "RegRestoreKeyA");
        try {
            return (int)mh$.invokeExact(hKey, lpFile, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegRestoreKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$590.RegRestoreKeyW$MH,"RegRestoreKeyW");
    }
    public static int RegRestoreKeyW ( Addressable hKey,  Addressable lpFile,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$590.RegRestoreKeyW$MH, "RegRestoreKeyW");
        try {
            return (int)mh$.invokeExact(hKey, lpFile, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegRenameKey$MH() {
        return RuntimeHelper.requireNonNull(constants$590.RegRenameKey$MH,"RegRenameKey");
    }
    public static int RegRenameKey ( Addressable hKey,  Addressable lpSubKeyName,  Addressable lpNewKeyName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$590.RegRenameKey$MH, "RegRenameKey");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKeyName, lpNewKeyName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSaveKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$590.RegSaveKeyA$MH,"RegSaveKeyA");
    }
    public static int RegSaveKeyA ( Addressable hKey,  Addressable lpFile,  Addressable lpSecurityAttributes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$590.RegSaveKeyA$MH, "RegSaveKeyA");
        try {
            return (int)mh$.invokeExact(hKey, lpFile, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSaveKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$590.RegSaveKeyW$MH,"RegSaveKeyW");
    }
    public static int RegSaveKeyW ( Addressable hKey,  Addressable lpFile,  Addressable lpSecurityAttributes) {
        var mh$ = RuntimeHelper.requireNonNull(constants$590.RegSaveKeyW$MH, "RegSaveKeyW");
        try {
            return (int)mh$.invokeExact(hKey, lpFile, lpSecurityAttributes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSetKeySecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$591.RegSetKeySecurity$MH,"RegSetKeySecurity");
    }
    public static int RegSetKeySecurity ( Addressable hKey,  int SecurityInformation,  Addressable pSecurityDescriptor) {
        var mh$ = RuntimeHelper.requireNonNull(constants$591.RegSetKeySecurity$MH, "RegSetKeySecurity");
        try {
            return (int)mh$.invokeExact(hKey, SecurityInformation, pSecurityDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSetValueA$MH() {
        return RuntimeHelper.requireNonNull(constants$591.RegSetValueA$MH,"RegSetValueA");
    }
    public static int RegSetValueA ( Addressable hKey,  Addressable lpSubKey,  int dwType,  Addressable lpData,  int cbData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$591.RegSetValueA$MH, "RegSetValueA");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, dwType, lpData, cbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSetValueW$MH() {
        return RuntimeHelper.requireNonNull(constants$591.RegSetValueW$MH,"RegSetValueW");
    }
    public static int RegSetValueW ( Addressable hKey,  Addressable lpSubKey,  int dwType,  Addressable lpData,  int cbData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$591.RegSetValueW$MH, "RegSetValueW");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, dwType, lpData, cbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSetValueExA$MH() {
        return RuntimeHelper.requireNonNull(constants$591.RegSetValueExA$MH,"RegSetValueExA");
    }
    public static int RegSetValueExA ( Addressable hKey,  Addressable lpValueName,  int Reserved,  int dwType,  Addressable lpData,  int cbData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$591.RegSetValueExA$MH, "RegSetValueExA");
        try {
            return (int)mh$.invokeExact(hKey, lpValueName, Reserved, dwType, lpData, cbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSetValueExW$MH() {
        return RuntimeHelper.requireNonNull(constants$591.RegSetValueExW$MH,"RegSetValueExW");
    }
    public static int RegSetValueExW ( Addressable hKey,  Addressable lpValueName,  int Reserved,  int dwType,  Addressable lpData,  int cbData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$591.RegSetValueExW$MH, "RegSetValueExW");
        try {
            return (int)mh$.invokeExact(hKey, lpValueName, Reserved, dwType, lpData, cbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegUnLoadKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$591.RegUnLoadKeyA$MH,"RegUnLoadKeyA");
    }
    public static int RegUnLoadKeyA ( Addressable hKey,  Addressable lpSubKey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$591.RegUnLoadKeyA$MH, "RegUnLoadKeyA");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegUnLoadKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$592.RegUnLoadKeyW$MH,"RegUnLoadKeyW");
    }
    public static int RegUnLoadKeyW ( Addressable hKey,  Addressable lpSubKey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$592.RegUnLoadKeyW$MH, "RegUnLoadKeyW");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteKeyValueA$MH() {
        return RuntimeHelper.requireNonNull(constants$592.RegDeleteKeyValueA$MH,"RegDeleteKeyValueA");
    }
    public static int RegDeleteKeyValueA ( Addressable hKey,  Addressable lpSubKey,  Addressable lpValueName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$592.RegDeleteKeyValueA$MH, "RegDeleteKeyValueA");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpValueName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteKeyValueW$MH() {
        return RuntimeHelper.requireNonNull(constants$592.RegDeleteKeyValueW$MH,"RegDeleteKeyValueW");
    }
    public static int RegDeleteKeyValueW ( Addressable hKey,  Addressable lpSubKey,  Addressable lpValueName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$592.RegDeleteKeyValueW$MH, "RegDeleteKeyValueW");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpValueName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSetKeyValueA$MH() {
        return RuntimeHelper.requireNonNull(constants$592.RegSetKeyValueA$MH,"RegSetKeyValueA");
    }
    public static int RegSetKeyValueA ( Addressable hKey,  Addressable lpSubKey,  Addressable lpValueName,  int dwType,  Addressable lpData,  int cbData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$592.RegSetKeyValueA$MH, "RegSetKeyValueA");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpValueName, dwType, lpData, cbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSetKeyValueW$MH() {
        return RuntimeHelper.requireNonNull(constants$592.RegSetKeyValueW$MH,"RegSetKeyValueW");
    }
    public static int RegSetKeyValueW ( Addressable hKey,  Addressable lpSubKey,  Addressable lpValueName,  int dwType,  Addressable lpData,  int cbData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$592.RegSetKeyValueW$MH, "RegSetKeyValueW");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey, lpValueName, dwType, lpData, cbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteTreeA$MH() {
        return RuntimeHelper.requireNonNull(constants$592.RegDeleteTreeA$MH,"RegDeleteTreeA");
    }
    public static int RegDeleteTreeA ( Addressable hKey,  Addressable lpSubKey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$592.RegDeleteTreeA$MH, "RegDeleteTreeA");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegDeleteTreeW$MH() {
        return RuntimeHelper.requireNonNull(constants$593.RegDeleteTreeW$MH,"RegDeleteTreeW");
    }
    public static int RegDeleteTreeW ( Addressable hKey,  Addressable lpSubKey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$593.RegDeleteTreeW$MH, "RegDeleteTreeW");
        try {
            return (int)mh$.invokeExact(hKey, lpSubKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegCopyTreeA$MH() {
        return RuntimeHelper.requireNonNull(constants$593.RegCopyTreeA$MH,"RegCopyTreeA");
    }
    public static int RegCopyTreeA ( Addressable hKeySrc,  Addressable lpSubKey,  Addressable hKeyDest) {
        var mh$ = RuntimeHelper.requireNonNull(constants$593.RegCopyTreeA$MH, "RegCopyTreeA");
        try {
            return (int)mh$.invokeExact(hKeySrc, lpSubKey, hKeyDest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegGetValueA$MH() {
        return RuntimeHelper.requireNonNull(constants$593.RegGetValueA$MH,"RegGetValueA");
    }
    public static int RegGetValueA ( Addressable hkey,  Addressable lpSubKey,  Addressable lpValue,  int dwFlags,  Addressable pdwType,  Addressable pvData,  Addressable pcbData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$593.RegGetValueA$MH, "RegGetValueA");
        try {
            return (int)mh$.invokeExact(hkey, lpSubKey, lpValue, dwFlags, pdwType, pvData, pcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegGetValueW$MH() {
        return RuntimeHelper.requireNonNull(constants$593.RegGetValueW$MH,"RegGetValueW");
    }
    public static int RegGetValueW ( Addressable hkey,  Addressable lpSubKey,  Addressable lpValue,  int dwFlags,  Addressable pdwType,  Addressable pvData,  Addressable pcbData) {
        var mh$ = RuntimeHelper.requireNonNull(constants$593.RegGetValueW$MH, "RegGetValueW");
        try {
            return (int)mh$.invokeExact(hkey, lpSubKey, lpValue, dwFlags, pdwType, pvData, pcbData);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegCopyTreeW$MH() {
        return RuntimeHelper.requireNonNull(constants$593.RegCopyTreeW$MH,"RegCopyTreeW");
    }
    public static int RegCopyTreeW ( Addressable hKeySrc,  Addressable lpSubKey,  Addressable hKeyDest) {
        var mh$ = RuntimeHelper.requireNonNull(constants$593.RegCopyTreeW$MH, "RegCopyTreeW");
        try {
            return (int)mh$.invokeExact(hKeySrc, lpSubKey, hKeyDest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegLoadMUIStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$593.RegLoadMUIStringA$MH,"RegLoadMUIStringA");
    }
    public static int RegLoadMUIStringA ( Addressable hKey,  Addressable pszValue,  Addressable pszOutBuf,  int cbOutBuf,  Addressable pcbData,  int Flags,  Addressable pszDirectory) {
        var mh$ = RuntimeHelper.requireNonNull(constants$593.RegLoadMUIStringA$MH, "RegLoadMUIStringA");
        try {
            return (int)mh$.invokeExact(hKey, pszValue, pszOutBuf, cbOutBuf, pcbData, Flags, pszDirectory);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegLoadMUIStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$594.RegLoadMUIStringW$MH,"RegLoadMUIStringW");
    }
    public static int RegLoadMUIStringW ( Addressable hKey,  Addressable pszValue,  Addressable pszOutBuf,  int cbOutBuf,  Addressable pcbData,  int Flags,  Addressable pszDirectory) {
        var mh$ = RuntimeHelper.requireNonNull(constants$594.RegLoadMUIStringW$MH, "RegLoadMUIStringW");
        try {
            return (int)mh$.invokeExact(hKey, pszValue, pszOutBuf, cbOutBuf, pcbData, Flags, pszDirectory);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegLoadAppKeyA$MH() {
        return RuntimeHelper.requireNonNull(constants$594.RegLoadAppKeyA$MH,"RegLoadAppKeyA");
    }
    public static int RegLoadAppKeyA ( Addressable lpFile,  Addressable phkResult,  int samDesired,  int dwOptions,  int Reserved) {
        var mh$ = RuntimeHelper.requireNonNull(constants$594.RegLoadAppKeyA$MH, "RegLoadAppKeyA");
        try {
            return (int)mh$.invokeExact(lpFile, phkResult, samDesired, dwOptions, Reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegLoadAppKeyW$MH() {
        return RuntimeHelper.requireNonNull(constants$594.RegLoadAppKeyW$MH,"RegLoadAppKeyW");
    }
    public static int RegLoadAppKeyW ( Addressable lpFile,  Addressable phkResult,  int samDesired,  int dwOptions,  int Reserved) {
        var mh$ = RuntimeHelper.requireNonNull(constants$594.RegLoadAppKeyW$MH, "RegLoadAppKeyW");
        try {
            return (int)mh$.invokeExact(lpFile, phkResult, samDesired, dwOptions, Reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitiateSystemShutdownA$MH() {
        return RuntimeHelper.requireNonNull(constants$594.InitiateSystemShutdownA$MH,"InitiateSystemShutdownA");
    }
    public static int InitiateSystemShutdownA ( Addressable lpMachineName,  Addressable lpMessage,  int dwTimeout,  int bForceAppsClosed,  int bRebootAfterShutdown) {
        var mh$ = RuntimeHelper.requireNonNull(constants$594.InitiateSystemShutdownA$MH, "InitiateSystemShutdownA");
        try {
            return (int)mh$.invokeExact(lpMachineName, lpMessage, dwTimeout, bForceAppsClosed, bRebootAfterShutdown);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitiateSystemShutdownW$MH() {
        return RuntimeHelper.requireNonNull(constants$594.InitiateSystemShutdownW$MH,"InitiateSystemShutdownW");
    }
    public static int InitiateSystemShutdownW ( Addressable lpMachineName,  Addressable lpMessage,  int dwTimeout,  int bForceAppsClosed,  int bRebootAfterShutdown) {
        var mh$ = RuntimeHelper.requireNonNull(constants$594.InitiateSystemShutdownW$MH, "InitiateSystemShutdownW");
        try {
            return (int)mh$.invokeExact(lpMachineName, lpMessage, dwTimeout, bForceAppsClosed, bRebootAfterShutdown);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AbortSystemShutdownA$MH() {
        return RuntimeHelper.requireNonNull(constants$594.AbortSystemShutdownA$MH,"AbortSystemShutdownA");
    }
    public static int AbortSystemShutdownA ( Addressable lpMachineName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$594.AbortSystemShutdownA$MH, "AbortSystemShutdownA");
        try {
            return (int)mh$.invokeExact(lpMachineName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle AbortSystemShutdownW$MH() {
        return RuntimeHelper.requireNonNull(constants$595.AbortSystemShutdownW$MH,"AbortSystemShutdownW");
    }
    public static int AbortSystemShutdownW ( Addressable lpMachineName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$595.AbortSystemShutdownW$MH, "AbortSystemShutdownW");
        try {
            return (int)mh$.invokeExact(lpMachineName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitiateSystemShutdownExA$MH() {
        return RuntimeHelper.requireNonNull(constants$595.InitiateSystemShutdownExA$MH,"InitiateSystemShutdownExA");
    }
    public static int InitiateSystemShutdownExA ( Addressable lpMachineName,  Addressable lpMessage,  int dwTimeout,  int bForceAppsClosed,  int bRebootAfterShutdown,  int dwReason) {
        var mh$ = RuntimeHelper.requireNonNull(constants$595.InitiateSystemShutdownExA$MH, "InitiateSystemShutdownExA");
        try {
            return (int)mh$.invokeExact(lpMachineName, lpMessage, dwTimeout, bForceAppsClosed, bRebootAfterShutdown, dwReason);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitiateSystemShutdownExW$MH() {
        return RuntimeHelper.requireNonNull(constants$595.InitiateSystemShutdownExW$MH,"InitiateSystemShutdownExW");
    }
    public static int InitiateSystemShutdownExW ( Addressable lpMachineName,  Addressable lpMessage,  int dwTimeout,  int bForceAppsClosed,  int bRebootAfterShutdown,  int dwReason) {
        var mh$ = RuntimeHelper.requireNonNull(constants$595.InitiateSystemShutdownExW$MH, "InitiateSystemShutdownExW");
        try {
            return (int)mh$.invokeExact(lpMachineName, lpMessage, dwTimeout, bForceAppsClosed, bRebootAfterShutdown, dwReason);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitiateShutdownA$MH() {
        return RuntimeHelper.requireNonNull(constants$595.InitiateShutdownA$MH,"InitiateShutdownA");
    }
    public static int InitiateShutdownA ( Addressable lpMachineName,  Addressable lpMessage,  int dwGracePeriod,  int dwShutdownFlags,  int dwReason) {
        var mh$ = RuntimeHelper.requireNonNull(constants$595.InitiateShutdownA$MH, "InitiateShutdownA");
        try {
            return (int)mh$.invokeExact(lpMachineName, lpMessage, dwGracePeriod, dwShutdownFlags, dwReason);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle InitiateShutdownW$MH() {
        return RuntimeHelper.requireNonNull(constants$595.InitiateShutdownW$MH,"InitiateShutdownW");
    }
    public static int InitiateShutdownW ( Addressable lpMachineName,  Addressable lpMessage,  int dwGracePeriod,  int dwShutdownFlags,  int dwReason) {
        var mh$ = RuntimeHelper.requireNonNull(constants$595.InitiateShutdownW$MH, "InitiateShutdownW");
        try {
            return (int)mh$.invokeExact(lpMachineName, lpMessage, dwGracePeriod, dwShutdownFlags, dwReason);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CheckForHiberboot$MH() {
        return RuntimeHelper.requireNonNull(constants$595.CheckForHiberboot$MH,"CheckForHiberboot");
    }
    public static int CheckForHiberboot ( Addressable pHiberboot,  byte bClearFlag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$595.CheckForHiberboot$MH, "CheckForHiberboot");
        try {
            return (int)mh$.invokeExact(pHiberboot, bClearFlag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSaveKeyExA$MH() {
        return RuntimeHelper.requireNonNull(constants$596.RegSaveKeyExA$MH,"RegSaveKeyExA");
    }
    public static int RegSaveKeyExA ( Addressable hKey,  Addressable lpFile,  Addressable lpSecurityAttributes,  int Flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$596.RegSaveKeyExA$MH, "RegSaveKeyExA");
        try {
            return (int)mh$.invokeExact(hKey, lpFile, lpSecurityAttributes, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegSaveKeyExW$MH() {
        return RuntimeHelper.requireNonNull(constants$596.RegSaveKeyExW$MH,"RegSaveKeyExW");
    }
    public static int RegSaveKeyExW ( Addressable hKey,  Addressable lpFile,  Addressable lpSecurityAttributes,  int Flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$596.RegSaveKeyExW$MH, "RegSaveKeyExW");
        try {
            return (int)mh$.invokeExact(hKey, lpFile, lpSecurityAttributes, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPNETRESOURCEA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNETRESOURCEW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPNETRESOURCE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle WNetAddConnectionA$MH() {
        return RuntimeHelper.requireNonNull(constants$596.WNetAddConnectionA$MH,"WNetAddConnectionA");
    }
    public static int WNetAddConnectionA ( Addressable lpRemoteName,  Addressable lpPassword,  Addressable lpLocalName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$596.WNetAddConnectionA$MH, "WNetAddConnectionA");
        try {
            return (int)mh$.invokeExact(lpRemoteName, lpPassword, lpLocalName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetAddConnectionW$MH() {
        return RuntimeHelper.requireNonNull(constants$596.WNetAddConnectionW$MH,"WNetAddConnectionW");
    }
    public static int WNetAddConnectionW ( Addressable lpRemoteName,  Addressable lpPassword,  Addressable lpLocalName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$596.WNetAddConnectionW$MH, "WNetAddConnectionW");
        try {
            return (int)mh$.invokeExact(lpRemoteName, lpPassword, lpLocalName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetAddConnection2A$MH() {
        return RuntimeHelper.requireNonNull(constants$596.WNetAddConnection2A$MH,"WNetAddConnection2A");
    }
    public static int WNetAddConnection2A ( Addressable lpNetResource,  Addressable lpPassword,  Addressable lpUserName,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$596.WNetAddConnection2A$MH, "WNetAddConnection2A");
        try {
            return (int)mh$.invokeExact(lpNetResource, lpPassword, lpUserName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetAddConnection2W$MH() {
        return RuntimeHelper.requireNonNull(constants$596.WNetAddConnection2W$MH,"WNetAddConnection2W");
    }
    public static int WNetAddConnection2W ( Addressable lpNetResource,  Addressable lpPassword,  Addressable lpUserName,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$596.WNetAddConnection2W$MH, "WNetAddConnection2W");
        try {
            return (int)mh$.invokeExact(lpNetResource, lpPassword, lpUserName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetAddConnection3A$MH() {
        return RuntimeHelper.requireNonNull(constants$597.WNetAddConnection3A$MH,"WNetAddConnection3A");
    }
    public static int WNetAddConnection3A ( Addressable hwndOwner,  Addressable lpNetResource,  Addressable lpPassword,  Addressable lpUserName,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$597.WNetAddConnection3A$MH, "WNetAddConnection3A");
        try {
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, lpPassword, lpUserName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetAddConnection3W$MH() {
        return RuntimeHelper.requireNonNull(constants$597.WNetAddConnection3W$MH,"WNetAddConnection3W");
    }
    public static int WNetAddConnection3W ( Addressable hwndOwner,  Addressable lpNetResource,  Addressable lpPassword,  Addressable lpUserName,  int dwFlags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$597.WNetAddConnection3W$MH, "WNetAddConnection3W");
        try {
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, lpPassword, lpUserName, dwFlags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetAddConnection4A$MH() {
        return RuntimeHelper.requireNonNull(constants$597.WNetAddConnection4A$MH,"WNetAddConnection4A");
    }
    public static int WNetAddConnection4A ( Addressable hwndOwner,  Addressable lpNetResource,  Addressable pAuthBuffer,  int cbAuthBuffer,  int dwFlags,  Addressable lpUseOptions,  int cbUseOptions) {
        var mh$ = RuntimeHelper.requireNonNull(constants$597.WNetAddConnection4A$MH, "WNetAddConnection4A");
        try {
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, pAuthBuffer, cbAuthBuffer, dwFlags, lpUseOptions, cbUseOptions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetAddConnection4W$MH() {
        return RuntimeHelper.requireNonNull(constants$597.WNetAddConnection4W$MH,"WNetAddConnection4W");
    }
    public static int WNetAddConnection4W ( Addressable hwndOwner,  Addressable lpNetResource,  Addressable pAuthBuffer,  int cbAuthBuffer,  int dwFlags,  Addressable lpUseOptions,  int cbUseOptions) {
        var mh$ = RuntimeHelper.requireNonNull(constants$597.WNetAddConnection4W$MH, "WNetAddConnection4W");
        try {
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, pAuthBuffer, cbAuthBuffer, dwFlags, lpUseOptions, cbUseOptions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetCancelConnectionA$MH() {
        return RuntimeHelper.requireNonNull(constants$597.WNetCancelConnectionA$MH,"WNetCancelConnectionA");
    }
    public static int WNetCancelConnectionA ( Addressable lpName,  int fForce) {
        var mh$ = RuntimeHelper.requireNonNull(constants$597.WNetCancelConnectionA$MH, "WNetCancelConnectionA");
        try {
            return (int)mh$.invokeExact(lpName, fForce);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetCancelConnectionW$MH() {
        return RuntimeHelper.requireNonNull(constants$597.WNetCancelConnectionW$MH,"WNetCancelConnectionW");
    }
    public static int WNetCancelConnectionW ( Addressable lpName,  int fForce) {
        var mh$ = RuntimeHelper.requireNonNull(constants$597.WNetCancelConnectionW$MH, "WNetCancelConnectionW");
        try {
            return (int)mh$.invokeExact(lpName, fForce);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetCancelConnection2A$MH() {
        return RuntimeHelper.requireNonNull(constants$598.WNetCancelConnection2A$MH,"WNetCancelConnection2A");
    }
    public static int WNetCancelConnection2A ( Addressable lpName,  int dwFlags,  int fForce) {
        var mh$ = RuntimeHelper.requireNonNull(constants$598.WNetCancelConnection2A$MH, "WNetCancelConnection2A");
        try {
            return (int)mh$.invokeExact(lpName, dwFlags, fForce);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetCancelConnection2W$MH() {
        return RuntimeHelper.requireNonNull(constants$598.WNetCancelConnection2W$MH,"WNetCancelConnection2W");
    }
    public static int WNetCancelConnection2W ( Addressable lpName,  int dwFlags,  int fForce) {
        var mh$ = RuntimeHelper.requireNonNull(constants$598.WNetCancelConnection2W$MH, "WNetCancelConnection2W");
        try {
            return (int)mh$.invokeExact(lpName, dwFlags, fForce);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetConnectionA$MH() {
        return RuntimeHelper.requireNonNull(constants$598.WNetGetConnectionA$MH,"WNetGetConnectionA");
    }
    public static int WNetGetConnectionA ( Addressable lpLocalName,  Addressable lpRemoteName,  Addressable lpnLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$598.WNetGetConnectionA$MH, "WNetGetConnectionA");
        try {
            return (int)mh$.invokeExact(lpLocalName, lpRemoteName, lpnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetConnectionW$MH() {
        return RuntimeHelper.requireNonNull(constants$598.WNetGetConnectionW$MH,"WNetGetConnectionW");
    }
    public static int WNetGetConnectionW ( Addressable lpLocalName,  Addressable lpRemoteName,  Addressable lpnLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$598.WNetGetConnectionW$MH, "WNetGetConnectionW");
        try {
            return (int)mh$.invokeExact(lpLocalName, lpRemoteName, lpnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetRestoreSingleConnectionW$MH() {
        return RuntimeHelper.requireNonNull(constants$598.WNetRestoreSingleConnectionW$MH,"WNetRestoreSingleConnectionW");
    }
    public static int WNetRestoreSingleConnectionW ( Addressable hwndParent,  Addressable lpDevice,  int fUseUI) {
        var mh$ = RuntimeHelper.requireNonNull(constants$598.WNetRestoreSingleConnectionW$MH, "WNetRestoreSingleConnectionW");
        try {
            return (int)mh$.invokeExact(hwndParent, lpDevice, fUseUI);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetUseConnectionA$MH() {
        return RuntimeHelper.requireNonNull(constants$598.WNetUseConnectionA$MH,"WNetUseConnectionA");
    }
    public static int WNetUseConnectionA ( Addressable hwndOwner,  Addressable lpNetResource,  Addressable lpPassword,  Addressable lpUserId,  int dwFlags,  Addressable lpAccessName,  Addressable lpBufferSize,  Addressable lpResult) {
        var mh$ = RuntimeHelper.requireNonNull(constants$598.WNetUseConnectionA$MH, "WNetUseConnectionA");
        try {
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, lpPassword, lpUserId, dwFlags, lpAccessName, lpBufferSize, lpResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetUseConnectionW$MH() {
        return RuntimeHelper.requireNonNull(constants$599.WNetUseConnectionW$MH,"WNetUseConnectionW");
    }
    public static int WNetUseConnectionW ( Addressable hwndOwner,  Addressable lpNetResource,  Addressable lpPassword,  Addressable lpUserId,  int dwFlags,  Addressable lpAccessName,  Addressable lpBufferSize,  Addressable lpResult) {
        var mh$ = RuntimeHelper.requireNonNull(constants$599.WNetUseConnectionW$MH, "WNetUseConnectionW");
        try {
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, lpPassword, lpUserId, dwFlags, lpAccessName, lpBufferSize, lpResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetUseConnection4A$MH() {
        return RuntimeHelper.requireNonNull(constants$599.WNetUseConnection4A$MH,"WNetUseConnection4A");
    }
    public static int WNetUseConnection4A ( Addressable hwndOwner,  Addressable lpNetResource,  Addressable pAuthBuffer,  int cbAuthBuffer,  int dwFlags,  Addressable lpUseOptions,  int cbUseOptions,  Addressable lpAccessName,  Addressable lpBufferSize,  Addressable lpResult) {
        var mh$ = RuntimeHelper.requireNonNull(constants$599.WNetUseConnection4A$MH, "WNetUseConnection4A");
        try {
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, pAuthBuffer, cbAuthBuffer, dwFlags, lpUseOptions, cbUseOptions, lpAccessName, lpBufferSize, lpResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetUseConnection4W$MH() {
        return RuntimeHelper.requireNonNull(constants$599.WNetUseConnection4W$MH,"WNetUseConnection4W");
    }
    public static int WNetUseConnection4W ( Addressable hwndOwner,  Addressable lpNetResource,  Addressable pAuthBuffer,  int cbAuthBuffer,  int dwFlags,  Addressable lpUseOptions,  int cbUseOptions,  Addressable lpAccessName,  Addressable lpBufferSize,  Addressable lpResult) {
        var mh$ = RuntimeHelper.requireNonNull(constants$599.WNetUseConnection4W$MH, "WNetUseConnection4W");
        try {
            return (int)mh$.invokeExact(hwndOwner, lpNetResource, pAuthBuffer, cbAuthBuffer, dwFlags, lpUseOptions, cbUseOptions, lpAccessName, lpBufferSize, lpResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetConnectionDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$599.WNetConnectionDialog$MH,"WNetConnectionDialog");
    }
    public static int WNetConnectionDialog ( Addressable hwnd,  int dwType) {
        var mh$ = RuntimeHelper.requireNonNull(constants$599.WNetConnectionDialog$MH, "WNetConnectionDialog");
        try {
            return (int)mh$.invokeExact(hwnd, dwType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetDisconnectDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$599.WNetDisconnectDialog$MH,"WNetDisconnectDialog");
    }
    public static int WNetDisconnectDialog ( Addressable hwnd,  int dwType) {
        var mh$ = RuntimeHelper.requireNonNull(constants$599.WNetDisconnectDialog$MH, "WNetDisconnectDialog");
        try {
            return (int)mh$.invokeExact(hwnd, dwType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPCONNECTDLGSTRUCTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCONNECTDLGSTRUCTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCONNECTDLGSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle WNetConnectionDialog1A$MH() {
        return RuntimeHelper.requireNonNull(constants$599.WNetConnectionDialog1A$MH,"WNetConnectionDialog1A");
    }
    public static int WNetConnectionDialog1A ( Addressable lpConnDlgStruct) {
        var mh$ = RuntimeHelper.requireNonNull(constants$599.WNetConnectionDialog1A$MH, "WNetConnectionDialog1A");
        try {
            return (int)mh$.invokeExact(lpConnDlgStruct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetConnectionDialog1W$MH() {
        return RuntimeHelper.requireNonNull(constants$600.WNetConnectionDialog1W$MH,"WNetConnectionDialog1W");
    }
    public static int WNetConnectionDialog1W ( Addressable lpConnDlgStruct) {
        var mh$ = RuntimeHelper.requireNonNull(constants$600.WNetConnectionDialog1W$MH, "WNetConnectionDialog1W");
        try {
            return (int)mh$.invokeExact(lpConnDlgStruct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPDISCDLGSTRUCTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDISCDLGSTRUCTW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDISCDLGSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle WNetDisconnectDialog1A$MH() {
        return RuntimeHelper.requireNonNull(constants$600.WNetDisconnectDialog1A$MH,"WNetDisconnectDialog1A");
    }
    public static int WNetDisconnectDialog1A ( Addressable lpConnDlgStruct) {
        var mh$ = RuntimeHelper.requireNonNull(constants$600.WNetDisconnectDialog1A$MH, "WNetDisconnectDialog1A");
        try {
            return (int)mh$.invokeExact(lpConnDlgStruct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetDisconnectDialog1W$MH() {
        return RuntimeHelper.requireNonNull(constants$600.WNetDisconnectDialog1W$MH,"WNetDisconnectDialog1W");
    }
    public static int WNetDisconnectDialog1W ( Addressable lpConnDlgStruct) {
        var mh$ = RuntimeHelper.requireNonNull(constants$600.WNetDisconnectDialog1W$MH, "WNetDisconnectDialog1W");
        try {
            return (int)mh$.invokeExact(lpConnDlgStruct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetOpenEnumA$MH() {
        return RuntimeHelper.requireNonNull(constants$600.WNetOpenEnumA$MH,"WNetOpenEnumA");
    }
    public static int WNetOpenEnumA ( int dwScope,  int dwType,  int dwUsage,  Addressable lpNetResource,  Addressable lphEnum) {
        var mh$ = RuntimeHelper.requireNonNull(constants$600.WNetOpenEnumA$MH, "WNetOpenEnumA");
        try {
            return (int)mh$.invokeExact(dwScope, dwType, dwUsage, lpNetResource, lphEnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetOpenEnumW$MH() {
        return RuntimeHelper.requireNonNull(constants$600.WNetOpenEnumW$MH,"WNetOpenEnumW");
    }
    public static int WNetOpenEnumW ( int dwScope,  int dwType,  int dwUsage,  Addressable lpNetResource,  Addressable lphEnum) {
        var mh$ = RuntimeHelper.requireNonNull(constants$600.WNetOpenEnumW$MH, "WNetOpenEnumW");
        try {
            return (int)mh$.invokeExact(dwScope, dwType, dwUsage, lpNetResource, lphEnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetEnumResourceA$MH() {
        return RuntimeHelper.requireNonNull(constants$600.WNetEnumResourceA$MH,"WNetEnumResourceA");
    }
    public static int WNetEnumResourceA ( Addressable hEnum,  Addressable lpcCount,  Addressable lpBuffer,  Addressable lpBufferSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$600.WNetEnumResourceA$MH, "WNetEnumResourceA");
        try {
            return (int)mh$.invokeExact(hEnum, lpcCount, lpBuffer, lpBufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetEnumResourceW$MH() {
        return RuntimeHelper.requireNonNull(constants$601.WNetEnumResourceW$MH,"WNetEnumResourceW");
    }
    public static int WNetEnumResourceW ( Addressable hEnum,  Addressable lpcCount,  Addressable lpBuffer,  Addressable lpBufferSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$601.WNetEnumResourceW$MH, "WNetEnumResourceW");
        try {
            return (int)mh$.invokeExact(hEnum, lpcCount, lpBuffer, lpBufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetCloseEnum$MH() {
        return RuntimeHelper.requireNonNull(constants$601.WNetCloseEnum$MH,"WNetCloseEnum");
    }
    public static int WNetCloseEnum ( Addressable hEnum) {
        var mh$ = RuntimeHelper.requireNonNull(constants$601.WNetCloseEnum$MH, "WNetCloseEnum");
        try {
            return (int)mh$.invokeExact(hEnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetResourceParentA$MH() {
        return RuntimeHelper.requireNonNull(constants$601.WNetGetResourceParentA$MH,"WNetGetResourceParentA");
    }
    public static int WNetGetResourceParentA ( Addressable lpNetResource,  Addressable lpBuffer,  Addressable lpcbBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$601.WNetGetResourceParentA$MH, "WNetGetResourceParentA");
        try {
            return (int)mh$.invokeExact(lpNetResource, lpBuffer, lpcbBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetResourceParentW$MH() {
        return RuntimeHelper.requireNonNull(constants$601.WNetGetResourceParentW$MH,"WNetGetResourceParentW");
    }
    public static int WNetGetResourceParentW ( Addressable lpNetResource,  Addressable lpBuffer,  Addressable lpcbBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$601.WNetGetResourceParentW$MH, "WNetGetResourceParentW");
        try {
            return (int)mh$.invokeExact(lpNetResource, lpBuffer, lpcbBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetResourceInformationA$MH() {
        return RuntimeHelper.requireNonNull(constants$601.WNetGetResourceInformationA$MH,"WNetGetResourceInformationA");
    }
    public static int WNetGetResourceInformationA ( Addressable lpNetResource,  Addressable lpBuffer,  Addressable lpcbBuffer,  Addressable lplpSystem) {
        var mh$ = RuntimeHelper.requireNonNull(constants$601.WNetGetResourceInformationA$MH, "WNetGetResourceInformationA");
        try {
            return (int)mh$.invokeExact(lpNetResource, lpBuffer, lpcbBuffer, lplpSystem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetResourceInformationW$MH() {
        return RuntimeHelper.requireNonNull(constants$601.WNetGetResourceInformationW$MH,"WNetGetResourceInformationW");
    }
    public static int WNetGetResourceInformationW ( Addressable lpNetResource,  Addressable lpBuffer,  Addressable lpcbBuffer,  Addressable lplpSystem) {
        var mh$ = RuntimeHelper.requireNonNull(constants$601.WNetGetResourceInformationW$MH, "WNetGetResourceInformationW");
        try {
            return (int)mh$.invokeExact(lpNetResource, lpBuffer, lpcbBuffer, lplpSystem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPUNIVERSAL_NAME_INFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPUNIVERSAL_NAME_INFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPUNIVERSAL_NAME_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPREMOTE_NAME_INFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPREMOTE_NAME_INFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPREMOTE_NAME_INFO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle WNetGetUniversalNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$602.WNetGetUniversalNameA$MH,"WNetGetUniversalNameA");
    }
    public static int WNetGetUniversalNameA ( Addressable lpLocalPath,  int dwInfoLevel,  Addressable lpBuffer,  Addressable lpBufferSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$602.WNetGetUniversalNameA$MH, "WNetGetUniversalNameA");
        try {
            return (int)mh$.invokeExact(lpLocalPath, dwInfoLevel, lpBuffer, lpBufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetUniversalNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$602.WNetGetUniversalNameW$MH,"WNetGetUniversalNameW");
    }
    public static int WNetGetUniversalNameW ( Addressable lpLocalPath,  int dwInfoLevel,  Addressable lpBuffer,  Addressable lpBufferSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$602.WNetGetUniversalNameW$MH, "WNetGetUniversalNameW");
        try {
            return (int)mh$.invokeExact(lpLocalPath, dwInfoLevel, lpBuffer, lpBufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetUserA$MH() {
        return RuntimeHelper.requireNonNull(constants$602.WNetGetUserA$MH,"WNetGetUserA");
    }
    public static int WNetGetUserA ( Addressable lpName,  Addressable lpUserName,  Addressable lpnLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$602.WNetGetUserA$MH, "WNetGetUserA");
        try {
            return (int)mh$.invokeExact(lpName, lpUserName, lpnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetUserW$MH() {
        return RuntimeHelper.requireNonNull(constants$602.WNetGetUserW$MH,"WNetGetUserW");
    }
    public static int WNetGetUserW ( Addressable lpName,  Addressable lpUserName,  Addressable lpnLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$602.WNetGetUserW$MH, "WNetGetUserW");
        try {
            return (int)mh$.invokeExact(lpName, lpUserName, lpnLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetProviderNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$602.WNetGetProviderNameA$MH,"WNetGetProviderNameA");
    }
    public static int WNetGetProviderNameA ( int dwNetType,  Addressable lpProviderName,  Addressable lpBufferSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$602.WNetGetProviderNameA$MH, "WNetGetProviderNameA");
        try {
            return (int)mh$.invokeExact(dwNetType, lpProviderName, lpBufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetProviderNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$602.WNetGetProviderNameW$MH,"WNetGetProviderNameW");
    }
    public static int WNetGetProviderNameW ( int dwNetType,  Addressable lpProviderName,  Addressable lpBufferSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$602.WNetGetProviderNameW$MH, "WNetGetProviderNameW");
        try {
            return (int)mh$.invokeExact(dwNetType, lpProviderName, lpBufferSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPNETINFOSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle WNetGetNetworkInformationA$MH() {
        return RuntimeHelper.requireNonNull(constants$603.WNetGetNetworkInformationA$MH,"WNetGetNetworkInformationA");
    }
    public static int WNetGetNetworkInformationA ( Addressable lpProvider,  Addressable lpNetInfoStruct) {
        var mh$ = RuntimeHelper.requireNonNull(constants$603.WNetGetNetworkInformationA$MH, "WNetGetNetworkInformationA");
        try {
            return (int)mh$.invokeExact(lpProvider, lpNetInfoStruct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetNetworkInformationW$MH() {
        return RuntimeHelper.requireNonNull(constants$603.WNetGetNetworkInformationW$MH,"WNetGetNetworkInformationW");
    }
    public static int WNetGetNetworkInformationW ( Addressable lpProvider,  Addressable lpNetInfoStruct) {
        var mh$ = RuntimeHelper.requireNonNull(constants$603.WNetGetNetworkInformationW$MH, "WNetGetNetworkInformationW");
        try {
            return (int)mh$.invokeExact(lpProvider, lpNetInfoStruct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetLastErrorA$MH() {
        return RuntimeHelper.requireNonNull(constants$603.WNetGetLastErrorA$MH,"WNetGetLastErrorA");
    }
    public static int WNetGetLastErrorA ( Addressable lpError,  Addressable lpErrorBuf,  int nErrorBufSize,  Addressable lpNameBuf,  int nNameBufSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$603.WNetGetLastErrorA$MH, "WNetGetLastErrorA");
        try {
            return (int)mh$.invokeExact(lpError, lpErrorBuf, nErrorBufSize, lpNameBuf, nNameBufSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WNetGetLastErrorW$MH() {
        return RuntimeHelper.requireNonNull(constants$603.WNetGetLastErrorW$MH,"WNetGetLastErrorW");
    }
    public static int WNetGetLastErrorW ( Addressable lpError,  Addressable lpErrorBuf,  int nErrorBufSize,  Addressable lpNameBuf,  int nNameBufSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$603.WNetGetLastErrorW$MH, "WNetGetLastErrorW");
        try {
            return (int)mh$.invokeExact(lpError, lpErrorBuf, nErrorBufSize, lpNameBuf, nNameBufSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress LPNETCONNECTINFOSTRUCT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle MultinetGetConnectionPerformanceA$MH() {
        return RuntimeHelper.requireNonNull(constants$603.MultinetGetConnectionPerformanceA$MH,"MultinetGetConnectionPerformanceA");
    }
    public static int MultinetGetConnectionPerformanceA ( Addressable lpNetResource,  Addressable lpNetConnectInfoStruct) {
        var mh$ = RuntimeHelper.requireNonNull(constants$603.MultinetGetConnectionPerformanceA$MH, "MultinetGetConnectionPerformanceA");
        try {
            return (int)mh$.invokeExact(lpNetResource, lpNetConnectInfoStruct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MultinetGetConnectionPerformanceW$MH() {
        return RuntimeHelper.requireNonNull(constants$603.MultinetGetConnectionPerformanceW$MH,"MultinetGetConnectionPerformanceW");
    }
    public static int MultinetGetConnectionPerformanceW ( Addressable lpNetResource,  Addressable lpNetConnectInfoStruct) {
        var mh$ = RuntimeHelper.requireNonNull(constants$603.MultinetGetConnectionPerformanceW$MH, "MultinetGetConnectionPerformanceW");
        try {
            return (int)mh$.invokeExact(lpNetResource, lpNetConnectInfoStruct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_CharUpperW$MH() {
        return RuntimeHelper.requireNonNull(constants$604.uaw_CharUpperW$MH,"uaw_CharUpperW");
    }
    public static MemoryAddress uaw_CharUpperW ( Addressable String_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$604.uaw_CharUpperW$MH, "uaw_CharUpperW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_lstrcmpW$MH() {
        return RuntimeHelper.requireNonNull(constants$604.uaw_lstrcmpW$MH,"uaw_lstrcmpW");
    }
    public static int uaw_lstrcmpW ( Addressable String1,  Addressable String2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$604.uaw_lstrcmpW$MH, "uaw_lstrcmpW");
        try {
            return (int)mh$.invokeExact(String1, String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_lstrcmpiW$MH() {
        return RuntimeHelper.requireNonNull(constants$604.uaw_lstrcmpiW$MH,"uaw_lstrcmpiW");
    }
    public static int uaw_lstrcmpiW ( Addressable String1,  Addressable String2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$604.uaw_lstrcmpiW$MH, "uaw_lstrcmpiW");
        try {
            return (int)mh$.invokeExact(String1, String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_lstrlenW$MH() {
        return RuntimeHelper.requireNonNull(constants$604.uaw_lstrlenW$MH,"uaw_lstrlenW");
    }
    public static int uaw_lstrlenW ( Addressable String_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$604.uaw_lstrlenW$MH, "uaw_lstrlenW");
        try {
            return (int)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_wcschr$MH() {
        return RuntimeHelper.requireNonNull(constants$604.uaw_wcschr$MH,"uaw_wcschr");
    }
    public static MemoryAddress uaw_wcschr ( Addressable String_,  short Character) {
        var mh$ = RuntimeHelper.requireNonNull(constants$604.uaw_wcschr$MH, "uaw_wcschr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(String_, Character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_wcscpy$MH() {
        return RuntimeHelper.requireNonNull(constants$604.uaw_wcscpy$MH,"uaw_wcscpy");
    }
    public static MemoryAddress uaw_wcscpy ( Addressable Destination,  Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$604.uaw_wcscpy$MH, "uaw_wcscpy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Destination, Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_wcsicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$605.uaw_wcsicmp$MH,"uaw_wcsicmp");
    }
    public static int uaw_wcsicmp ( Addressable String1,  Addressable String2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$605.uaw_wcsicmp$MH, "uaw_wcsicmp");
        try {
            return (int)mh$.invokeExact(String1, String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_wcslen$MH() {
        return RuntimeHelper.requireNonNull(constants$605.uaw_wcslen$MH,"uaw_wcslen");
    }
    public static long uaw_wcslen ( Addressable String_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$605.uaw_wcslen$MH, "uaw_wcslen");
        try {
            return (long)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle uaw_wcsrchr$MH() {
        return RuntimeHelper.requireNonNull(constants$605.uaw_wcsrchr$MH,"uaw_wcsrchr");
    }
    public static MemoryAddress uaw_wcsrchr ( Addressable String_,  short Character) {
        var mh$ = RuntimeHelper.requireNonNull(constants$605.uaw_wcsrchr$MH, "uaw_wcsrchr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(String_, Character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ua_CharUpperW$MH() {
        return RuntimeHelper.requireNonNull(constants$605.ua_CharUpperW$MH,"ua_CharUpperW");
    }
    public static MemoryAddress ua_CharUpperW ( Addressable String_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$605.ua_CharUpperW$MH, "ua_CharUpperW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ua_lstrcmpW$MH() {
        return RuntimeHelper.requireNonNull(constants$605.ua_lstrcmpW$MH,"ua_lstrcmpW");
    }
    public static int ua_lstrcmpW ( Addressable String1,  Addressable String2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$605.ua_lstrcmpW$MH, "ua_lstrcmpW");
        try {
            return (int)mh$.invokeExact(String1, String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ua_lstrcmpiW$MH() {
        return RuntimeHelper.requireNonNull(constants$605.ua_lstrcmpiW$MH,"ua_lstrcmpiW");
    }
    public static int ua_lstrcmpiW ( Addressable String1,  Addressable String2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$605.ua_lstrcmpiW$MH, "ua_lstrcmpiW");
        try {
            return (int)mh$.invokeExact(String1, String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ua_lstrlenW$MH() {
        return RuntimeHelper.requireNonNull(constants$606.ua_lstrlenW$MH,"ua_lstrlenW");
    }
    public static int ua_lstrlenW ( Addressable String_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$606.ua_lstrlenW$MH, "ua_lstrlenW");
        try {
            return (int)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PUWSTR_C = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ua_wcschr$MH() {
        return RuntimeHelper.requireNonNull(constants$606.ua_wcschr$MH,"ua_wcschr");
    }
    public static MemoryAddress ua_wcschr ( Addressable String_,  short Character) {
        var mh$ = RuntimeHelper.requireNonNull(constants$606.ua_wcschr$MH, "ua_wcschr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(String_, Character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ua_wcsrchr$MH() {
        return RuntimeHelper.requireNonNull(constants$606.ua_wcsrchr$MH,"ua_wcsrchr");
    }
    public static MemoryAddress ua_wcsrchr ( Addressable String_,  short Character) {
        var mh$ = RuntimeHelper.requireNonNull(constants$606.ua_wcsrchr$MH, "ua_wcsrchr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(String_, Character);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ua_wcscpy$MH() {
        return RuntimeHelper.requireNonNull(constants$606.ua_wcscpy$MH,"ua_wcscpy");
    }
    public static MemoryAddress ua_wcscpy ( Addressable Destination,  Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$606.ua_wcscpy$MH, "ua_wcscpy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Destination, Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ua_wcscpy_s$MH() {
        return RuntimeHelper.requireNonNull(constants$606.ua_wcscpy_s$MH,"ua_wcscpy_s");
    }
    public static MemoryAddress ua_wcscpy_s ( Addressable Destination,  long DestinationSize,  Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$606.ua_wcscpy_s$MH, "ua_wcscpy_s");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Destination, DestinationSize, Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ua_wcslen$MH() {
        return RuntimeHelper.requireNonNull(constants$606.ua_wcslen$MH,"ua_wcslen");
    }
    public static long ua_wcslen ( Addressable String_) {
        var mh$ = RuntimeHelper.requireNonNull(constants$606.ua_wcslen$MH, "ua_wcslen");
        try {
            return (long)mh$.invokeExact(String_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ua_wcsicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$607.ua_wcsicmp$MH,"ua_wcsicmp");
    }
    public static int ua_wcsicmp ( Addressable String1,  Addressable String2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$607.ua_wcsicmp$MH, "ua_wcsicmp");
        try {
            return (int)mh$.invokeExact(String1, String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$607.NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID$SEGMENT,"NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID");
    }
    public static MemorySegment NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$607.NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID$SEGMENT,"NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID");
    }
    public static MemorySegment DOMAIN_JOIN_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$607.DOMAIN_JOIN_GUID$SEGMENT,"DOMAIN_JOIN_GUID");
    }
    public static MemorySegment DOMAIN_LEAVE_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$607.DOMAIN_LEAVE_GUID$SEGMENT,"DOMAIN_LEAVE_GUID");
    }
    public static MemorySegment FIREWALL_PORT_OPEN_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$607.FIREWALL_PORT_OPEN_GUID$SEGMENT,"FIREWALL_PORT_OPEN_GUID");
    }
    public static MemorySegment FIREWALL_PORT_CLOSE_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$608.FIREWALL_PORT_CLOSE_GUID$SEGMENT,"FIREWALL_PORT_CLOSE_GUID");
    }
    public static MemorySegment MACHINE_POLICY_PRESENT_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$608.MACHINE_POLICY_PRESENT_GUID$SEGMENT,"MACHINE_POLICY_PRESENT_GUID");
    }
    public static MemorySegment USER_POLICY_PRESENT_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$608.USER_POLICY_PRESENT_GUID$SEGMENT,"USER_POLICY_PRESENT_GUID");
    }
    public static MemorySegment RPC_INTERFACE_EVENT_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$608.RPC_INTERFACE_EVENT_GUID$SEGMENT,"RPC_INTERFACE_EVENT_GUID");
    }
    public static MemorySegment NAMED_PIPE_EVENT_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$608.NAMED_PIPE_EVENT_GUID$SEGMENT,"NAMED_PIPE_EVENT_GUID");
    }
    public static MemorySegment CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$608.CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID$SEGMENT,"CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID");
    }
    public static OfAddress LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_DESCRIPTIONA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_DESCRIPTIONW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_DESCRIPTION = Constants$root.C_POINTER$LAYOUT;
    public static int SC_ACTION_NONE() {
        return (int)0L;
    }
    public static int SC_ACTION_RESTART() {
        return (int)1L;
    }
    public static int SC_ACTION_REBOOT() {
        return (int)2L;
    }
    public static int SC_ACTION_RUN_COMMAND() {
        return (int)3L;
    }
    public static int SC_ACTION_OWN_RESTART() {
        return (int)4L;
    }
    public static OfAddress LPSC_ACTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_FAILURE_ACTIONSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_FAILURE_ACTIONSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_FAILURE_ACTIONS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_DELAYED_AUTO_START_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_FAILURE_ACTIONS_FLAG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_SID_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_REQUIRED_PRIVILEGES_INFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_REQUIRED_PRIVILEGES_INFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_REQUIRED_PRIVILEGES_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_PRESHUTDOWN_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_TRIGGER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_TRIGGER_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_PREFERRED_NODE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_TIMECHANGE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_LAUNCH_PROTECTED_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress SC_HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSC_HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress SERVICE_STATUS_HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static int SC_STATUS_PROCESS_INFO() {
        return (int)0L;
    }
    public static int SC_ENUM_PROCESS_INFO() {
        return (int)0L;
    }
    public static OfAddress LPSERVICE_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_STATUS_PROCESS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUM_SERVICE_STATUSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUM_SERVICE_STATUSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUM_SERVICE_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUM_SERVICE_STATUS_PROCESSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUM_SERVICE_STATUS_PROCESSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPENUM_SERVICE_STATUS_PROCESS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress SC_LOCK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPQUERY_SERVICE_LOCK_STATUSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPQUERY_SERVICE_LOCK_STATUSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPQUERY_SERVICE_LOCK_STATUS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPQUERY_SERVICE_CONFIGA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPQUERY_SERVICE_CONFIGW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPQUERY_SERVICE_CONFIG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_TABLE_ENTRYA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_TABLE_ENTRYW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSERVICE_TABLE_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_NOTIFY_1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_NOTIFY_2A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_NOTIFY_2W = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_NOTIFY_2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_NOTIFYA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_NOTIFYW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_NOTIFY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_CONTROL_STATUS_REASON_PARAMSA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_CONTROL_STATUS_REASON_PARAMSW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_CONTROL_STATUS_REASON_PARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVICE_START_REASON = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ChangeServiceConfigA$MH() {
        return RuntimeHelper.requireNonNull(constants$612.ChangeServiceConfigA$MH,"ChangeServiceConfigA");
    }
    public static int ChangeServiceConfigA ( Addressable hService,  int dwServiceType,  int dwStartType,  int dwErrorControl,  Addressable lpBinaryPathName,  Addressable lpLoadOrderGroup,  Addressable lpdwTagId,  Addressable lpDependencies,  Addressable lpServiceStartName,  Addressable lpPassword,  Addressable lpDisplayName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$612.ChangeServiceConfigA$MH, "ChangeServiceConfigA");
        try {
            return (int)mh$.invokeExact(hService, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword, lpDisplayName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeServiceConfigW$MH() {
        return RuntimeHelper.requireNonNull(constants$612.ChangeServiceConfigW$MH,"ChangeServiceConfigW");
    }
    public static int ChangeServiceConfigW ( Addressable hService,  int dwServiceType,  int dwStartType,  int dwErrorControl,  Addressable lpBinaryPathName,  Addressable lpLoadOrderGroup,  Addressable lpdwTagId,  Addressable lpDependencies,  Addressable lpServiceStartName,  Addressable lpPassword,  Addressable lpDisplayName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$612.ChangeServiceConfigW$MH, "ChangeServiceConfigW");
        try {
            return (int)mh$.invokeExact(hService, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword, lpDisplayName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeServiceConfig2A$MH() {
        return RuntimeHelper.requireNonNull(constants$612.ChangeServiceConfig2A$MH,"ChangeServiceConfig2A");
    }
    public static int ChangeServiceConfig2A ( Addressable hService,  int dwInfoLevel,  Addressable lpInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$612.ChangeServiceConfig2A$MH, "ChangeServiceConfig2A");
        try {
            return (int)mh$.invokeExact(hService, dwInfoLevel, lpInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ChangeServiceConfig2W$MH() {
        return RuntimeHelper.requireNonNull(constants$612.ChangeServiceConfig2W$MH,"ChangeServiceConfig2W");
    }
    public static int ChangeServiceConfig2W ( Addressable hService,  int dwInfoLevel,  Addressable lpInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$612.ChangeServiceConfig2W$MH, "ChangeServiceConfig2W");
        try {
            return (int)mh$.invokeExact(hService, dwInfoLevel, lpInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CloseServiceHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$612.CloseServiceHandle$MH,"CloseServiceHandle");
    }
    public static int CloseServiceHandle ( Addressable hSCObject) {
        var mh$ = RuntimeHelper.requireNonNull(constants$612.CloseServiceHandle$MH, "CloseServiceHandle");
        try {
            return (int)mh$.invokeExact(hSCObject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ControlService$MH() {
        return RuntimeHelper.requireNonNull(constants$612.ControlService$MH,"ControlService");
    }
    public static int ControlService ( Addressable hService,  int dwControl,  Addressable lpServiceStatus) {
        var mh$ = RuntimeHelper.requireNonNull(constants$612.ControlService$MH, "ControlService");
        try {
            return (int)mh$.invokeExact(hService, dwControl, lpServiceStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateServiceA$MH() {
        return RuntimeHelper.requireNonNull(constants$613.CreateServiceA$MH,"CreateServiceA");
    }
    public static MemoryAddress CreateServiceA ( Addressable hSCManager,  Addressable lpServiceName,  Addressable lpDisplayName,  int dwDesiredAccess,  int dwServiceType,  int dwStartType,  int dwErrorControl,  Addressable lpBinaryPathName,  Addressable lpLoadOrderGroup,  Addressable lpdwTagId,  Addressable lpDependencies,  Addressable lpServiceStartName,  Addressable lpPassword) {
        var mh$ = RuntimeHelper.requireNonNull(constants$613.CreateServiceA$MH, "CreateServiceA");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hSCManager, lpServiceName, lpDisplayName, dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle CreateServiceW$MH() {
        return RuntimeHelper.requireNonNull(constants$613.CreateServiceW$MH,"CreateServiceW");
    }
    public static MemoryAddress CreateServiceW ( Addressable hSCManager,  Addressable lpServiceName,  Addressable lpDisplayName,  int dwDesiredAccess,  int dwServiceType,  int dwStartType,  int dwErrorControl,  Addressable lpBinaryPathName,  Addressable lpLoadOrderGroup,  Addressable lpdwTagId,  Addressable lpDependencies,  Addressable lpServiceStartName,  Addressable lpPassword) {
        var mh$ = RuntimeHelper.requireNonNull(constants$613.CreateServiceW$MH, "CreateServiceW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hSCManager, lpServiceName, lpDisplayName, dwDesiredAccess, dwServiceType, dwStartType, dwErrorControl, lpBinaryPathName, lpLoadOrderGroup, lpdwTagId, lpDependencies, lpServiceStartName, lpPassword);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle DeleteService$MH() {
        return RuntimeHelper.requireNonNull(constants$613.DeleteService$MH,"DeleteService");
    }
    public static int DeleteService ( Addressable hService) {
        var mh$ = RuntimeHelper.requireNonNull(constants$613.DeleteService$MH, "DeleteService");
        try {
            return (int)mh$.invokeExact(hService);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDependentServicesA$MH() {
        return RuntimeHelper.requireNonNull(constants$613.EnumDependentServicesA$MH,"EnumDependentServicesA");
    }
    public static int EnumDependentServicesA ( Addressable hService,  int dwServiceState,  Addressable lpServices,  int cbBufSize,  Addressable pcbBytesNeeded,  Addressable lpServicesReturned) {
        var mh$ = RuntimeHelper.requireNonNull(constants$613.EnumDependentServicesA$MH, "EnumDependentServicesA");
        try {
            return (int)mh$.invokeExact(hService, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumDependentServicesW$MH() {
        return RuntimeHelper.requireNonNull(constants$613.EnumDependentServicesW$MH,"EnumDependentServicesW");
    }
    public static int EnumDependentServicesW ( Addressable hService,  int dwServiceState,  Addressable lpServices,  int cbBufSize,  Addressable pcbBytesNeeded,  Addressable lpServicesReturned) {
        var mh$ = RuntimeHelper.requireNonNull(constants$613.EnumDependentServicesW$MH, "EnumDependentServicesW");
        try {
            return (int)mh$.invokeExact(hService, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumServicesStatusA$MH() {
        return RuntimeHelper.requireNonNull(constants$613.EnumServicesStatusA$MH,"EnumServicesStatusA");
    }
    public static int EnumServicesStatusA ( Addressable hSCManager,  int dwServiceType,  int dwServiceState,  Addressable lpServices,  int cbBufSize,  Addressable pcbBytesNeeded,  Addressable lpServicesReturned,  Addressable lpResumeHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$613.EnumServicesStatusA$MH, "EnumServicesStatusA");
        try {
            return (int)mh$.invokeExact(hSCManager, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumServicesStatusW$MH() {
        return RuntimeHelper.requireNonNull(constants$614.EnumServicesStatusW$MH,"EnumServicesStatusW");
    }
    public static int EnumServicesStatusW ( Addressable hSCManager,  int dwServiceType,  int dwServiceState,  Addressable lpServices,  int cbBufSize,  Addressable pcbBytesNeeded,  Addressable lpServicesReturned,  Addressable lpResumeHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$614.EnumServicesStatusW$MH, "EnumServicesStatusW");
        try {
            return (int)mh$.invokeExact(hSCManager, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumServicesStatusExA$MH() {
        return RuntimeHelper.requireNonNull(constants$614.EnumServicesStatusExA$MH,"EnumServicesStatusExA");
    }
    public static int EnumServicesStatusExA ( Addressable hSCManager,  int InfoLevel,  int dwServiceType,  int dwServiceState,  Addressable lpServices,  int cbBufSize,  Addressable pcbBytesNeeded,  Addressable lpServicesReturned,  Addressable lpResumeHandle,  Addressable pszGroupName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$614.EnumServicesStatusExA$MH, "EnumServicesStatusExA");
        try {
            return (int)mh$.invokeExact(hSCManager, InfoLevel, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle, pszGroupName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle EnumServicesStatusExW$MH() {
        return RuntimeHelper.requireNonNull(constants$614.EnumServicesStatusExW$MH,"EnumServicesStatusExW");
    }
    public static int EnumServicesStatusExW ( Addressable hSCManager,  int InfoLevel,  int dwServiceType,  int dwServiceState,  Addressable lpServices,  int cbBufSize,  Addressable pcbBytesNeeded,  Addressable lpServicesReturned,  Addressable lpResumeHandle,  Addressable pszGroupName) {
        var mh$ = RuntimeHelper.requireNonNull(constants$614.EnumServicesStatusExW$MH, "EnumServicesStatusExW");
        try {
            return (int)mh$.invokeExact(hSCManager, InfoLevel, dwServiceType, dwServiceState, lpServices, cbBufSize, pcbBytesNeeded, lpServicesReturned, lpResumeHandle, pszGroupName);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetServiceKeyNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$614.GetServiceKeyNameA$MH,"GetServiceKeyNameA");
    }
    public static int GetServiceKeyNameA ( Addressable hSCManager,  Addressable lpDisplayName,  Addressable lpServiceName,  Addressable lpcchBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$614.GetServiceKeyNameA$MH, "GetServiceKeyNameA");
        try {
            return (int)mh$.invokeExact(hSCManager, lpDisplayName, lpServiceName, lpcchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetServiceKeyNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$614.GetServiceKeyNameW$MH,"GetServiceKeyNameW");
    }
    public static int GetServiceKeyNameW ( Addressable hSCManager,  Addressable lpDisplayName,  Addressable lpServiceName,  Addressable lpcchBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$614.GetServiceKeyNameW$MH, "GetServiceKeyNameW");
        try {
            return (int)mh$.invokeExact(hSCManager, lpDisplayName, lpServiceName, lpcchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetServiceDisplayNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$614.GetServiceDisplayNameA$MH,"GetServiceDisplayNameA");
    }
    public static int GetServiceDisplayNameA ( Addressable hSCManager,  Addressable lpServiceName,  Addressable lpDisplayName,  Addressable lpcchBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$614.GetServiceDisplayNameA$MH, "GetServiceDisplayNameA");
        try {
            return (int)mh$.invokeExact(hSCManager, lpServiceName, lpDisplayName, lpcchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetServiceDisplayNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$615.GetServiceDisplayNameW$MH,"GetServiceDisplayNameW");
    }
    public static int GetServiceDisplayNameW ( Addressable hSCManager,  Addressable lpServiceName,  Addressable lpDisplayName,  Addressable lpcchBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$615.GetServiceDisplayNameW$MH, "GetServiceDisplayNameW");
        try {
            return (int)mh$.invokeExact(hSCManager, lpServiceName, lpDisplayName, lpcchBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LockServiceDatabase$MH() {
        return RuntimeHelper.requireNonNull(constants$615.LockServiceDatabase$MH,"LockServiceDatabase");
    }
    public static MemoryAddress LockServiceDatabase ( Addressable hSCManager) {
        var mh$ = RuntimeHelper.requireNonNull(constants$615.LockServiceDatabase$MH, "LockServiceDatabase");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hSCManager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NotifyBootConfigStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$615.NotifyBootConfigStatus$MH,"NotifyBootConfigStatus");
    }
    public static int NotifyBootConfigStatus ( int BootAcceptable) {
        var mh$ = RuntimeHelper.requireNonNull(constants$615.NotifyBootConfigStatus$MH, "NotifyBootConfigStatus");
        try {
            return (int)mh$.invokeExact(BootAcceptable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenSCManagerA$MH() {
        return RuntimeHelper.requireNonNull(constants$615.OpenSCManagerA$MH,"OpenSCManagerA");
    }
    public static MemoryAddress OpenSCManagerA ( Addressable lpMachineName,  Addressable lpDatabaseName,  int dwDesiredAccess) {
        var mh$ = RuntimeHelper.requireNonNull(constants$615.OpenSCManagerA$MH, "OpenSCManagerA");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpMachineName, lpDatabaseName, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenSCManagerW$MH() {
        return RuntimeHelper.requireNonNull(constants$615.OpenSCManagerW$MH,"OpenSCManagerW");
    }
    public static MemoryAddress OpenSCManagerW ( Addressable lpMachineName,  Addressable lpDatabaseName,  int dwDesiredAccess) {
        var mh$ = RuntimeHelper.requireNonNull(constants$615.OpenSCManagerW$MH, "OpenSCManagerW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpMachineName, lpDatabaseName, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenServiceA$MH() {
        return RuntimeHelper.requireNonNull(constants$615.OpenServiceA$MH,"OpenServiceA");
    }
    public static MemoryAddress OpenServiceA ( Addressable hSCManager,  Addressable lpServiceName,  int dwDesiredAccess) {
        var mh$ = RuntimeHelper.requireNonNull(constants$615.OpenServiceA$MH, "OpenServiceA");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hSCManager, lpServiceName, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle OpenServiceW$MH() {
        return RuntimeHelper.requireNonNull(constants$616.OpenServiceW$MH,"OpenServiceW");
    }
    public static MemoryAddress OpenServiceW ( Addressable hSCManager,  Addressable lpServiceName,  int dwDesiredAccess) {
        var mh$ = RuntimeHelper.requireNonNull(constants$616.OpenServiceW$MH, "OpenServiceW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(hSCManager, lpServiceName, dwDesiredAccess);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceConfigA$MH() {
        return RuntimeHelper.requireNonNull(constants$616.QueryServiceConfigA$MH,"QueryServiceConfigA");
    }
    public static int QueryServiceConfigA ( Addressable hService,  Addressable lpServiceConfig,  int cbBufSize,  Addressable pcbBytesNeeded) {
        var mh$ = RuntimeHelper.requireNonNull(constants$616.QueryServiceConfigA$MH, "QueryServiceConfigA");
        try {
            return (int)mh$.invokeExact(hService, lpServiceConfig, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceConfigW$MH() {
        return RuntimeHelper.requireNonNull(constants$616.QueryServiceConfigW$MH,"QueryServiceConfigW");
    }
    public static int QueryServiceConfigW ( Addressable hService,  Addressable lpServiceConfig,  int cbBufSize,  Addressable pcbBytesNeeded) {
        var mh$ = RuntimeHelper.requireNonNull(constants$616.QueryServiceConfigW$MH, "QueryServiceConfigW");
        try {
            return (int)mh$.invokeExact(hService, lpServiceConfig, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceConfig2A$MH() {
        return RuntimeHelper.requireNonNull(constants$616.QueryServiceConfig2A$MH,"QueryServiceConfig2A");
    }
    public static int QueryServiceConfig2A ( Addressable hService,  int dwInfoLevel,  Addressable lpBuffer,  int cbBufSize,  Addressable pcbBytesNeeded) {
        var mh$ = RuntimeHelper.requireNonNull(constants$616.QueryServiceConfig2A$MH, "QueryServiceConfig2A");
        try {
            return (int)mh$.invokeExact(hService, dwInfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceConfig2W$MH() {
        return RuntimeHelper.requireNonNull(constants$616.QueryServiceConfig2W$MH,"QueryServiceConfig2W");
    }
    public static int QueryServiceConfig2W ( Addressable hService,  int dwInfoLevel,  Addressable lpBuffer,  int cbBufSize,  Addressable pcbBytesNeeded) {
        var mh$ = RuntimeHelper.requireNonNull(constants$616.QueryServiceConfig2W$MH, "QueryServiceConfig2W");
        try {
            return (int)mh$.invokeExact(hService, dwInfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceLockStatusA$MH() {
        return RuntimeHelper.requireNonNull(constants$616.QueryServiceLockStatusA$MH,"QueryServiceLockStatusA");
    }
    public static int QueryServiceLockStatusA ( Addressable hSCManager,  Addressable lpLockStatus,  int cbBufSize,  Addressable pcbBytesNeeded) {
        var mh$ = RuntimeHelper.requireNonNull(constants$616.QueryServiceLockStatusA$MH, "QueryServiceLockStatusA");
        try {
            return (int)mh$.invokeExact(hSCManager, lpLockStatus, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceLockStatusW$MH() {
        return RuntimeHelper.requireNonNull(constants$617.QueryServiceLockStatusW$MH,"QueryServiceLockStatusW");
    }
    public static int QueryServiceLockStatusW ( Addressable hSCManager,  Addressable lpLockStatus,  int cbBufSize,  Addressable pcbBytesNeeded) {
        var mh$ = RuntimeHelper.requireNonNull(constants$617.QueryServiceLockStatusW$MH, "QueryServiceLockStatusW");
        try {
            return (int)mh$.invokeExact(hSCManager, lpLockStatus, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$617.QueryServiceObjectSecurity$MH,"QueryServiceObjectSecurity");
    }
    public static int QueryServiceObjectSecurity ( Addressable hService,  int dwSecurityInformation,  Addressable lpSecurityDescriptor,  int cbBufSize,  Addressable pcbBytesNeeded) {
        var mh$ = RuntimeHelper.requireNonNull(constants$617.QueryServiceObjectSecurity$MH, "QueryServiceObjectSecurity");
        try {
            return (int)mh$.invokeExact(hService, dwSecurityInformation, lpSecurityDescriptor, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$617.QueryServiceStatus$MH,"QueryServiceStatus");
    }
    public static int QueryServiceStatus ( Addressable hService,  Addressable lpServiceStatus) {
        var mh$ = RuntimeHelper.requireNonNull(constants$617.QueryServiceStatus$MH, "QueryServiceStatus");
        try {
            return (int)mh$.invokeExact(hService, lpServiceStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceStatusEx$MH() {
        return RuntimeHelper.requireNonNull(constants$617.QueryServiceStatusEx$MH,"QueryServiceStatusEx");
    }
    public static int QueryServiceStatusEx ( Addressable hService,  int InfoLevel,  Addressable lpBuffer,  int cbBufSize,  Addressable pcbBytesNeeded) {
        var mh$ = RuntimeHelper.requireNonNull(constants$617.QueryServiceStatusEx$MH, "QueryServiceStatusEx");
        try {
            return (int)mh$.invokeExact(hService, InfoLevel, lpBuffer, cbBufSize, pcbBytesNeeded);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterServiceCtrlHandlerA$MH() {
        return RuntimeHelper.requireNonNull(constants$617.RegisterServiceCtrlHandlerA$MH,"RegisterServiceCtrlHandlerA");
    }
    public static MemoryAddress RegisterServiceCtrlHandlerA ( Addressable lpServiceName,  Addressable lpHandlerProc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$617.RegisterServiceCtrlHandlerA$MH, "RegisterServiceCtrlHandlerA");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpServiceName, lpHandlerProc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterServiceCtrlHandlerW$MH() {
        return RuntimeHelper.requireNonNull(constants$617.RegisterServiceCtrlHandlerW$MH,"RegisterServiceCtrlHandlerW");
    }
    public static MemoryAddress RegisterServiceCtrlHandlerW ( Addressable lpServiceName,  Addressable lpHandlerProc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$617.RegisterServiceCtrlHandlerW$MH, "RegisterServiceCtrlHandlerW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpServiceName, lpHandlerProc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterServiceCtrlHandlerExA$MH() {
        return RuntimeHelper.requireNonNull(constants$618.RegisterServiceCtrlHandlerExA$MH,"RegisterServiceCtrlHandlerExA");
    }
    public static MemoryAddress RegisterServiceCtrlHandlerExA ( Addressable lpServiceName,  Addressable lpHandlerProc,  Addressable lpContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$618.RegisterServiceCtrlHandlerExA$MH, "RegisterServiceCtrlHandlerExA");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpServiceName, lpHandlerProc, lpContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RegisterServiceCtrlHandlerExW$MH() {
        return RuntimeHelper.requireNonNull(constants$618.RegisterServiceCtrlHandlerExW$MH,"RegisterServiceCtrlHandlerExW");
    }
    public static MemoryAddress RegisterServiceCtrlHandlerExW ( Addressable lpServiceName,  Addressable lpHandlerProc,  Addressable lpContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$618.RegisterServiceCtrlHandlerExW$MH, "RegisterServiceCtrlHandlerExW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpServiceName, lpHandlerProc, lpContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetServiceObjectSecurity$MH() {
        return RuntimeHelper.requireNonNull(constants$618.SetServiceObjectSecurity$MH,"SetServiceObjectSecurity");
    }
    public static int SetServiceObjectSecurity ( Addressable hService,  int dwSecurityInformation,  Addressable lpSecurityDescriptor) {
        var mh$ = RuntimeHelper.requireNonNull(constants$618.SetServiceObjectSecurity$MH, "SetServiceObjectSecurity");
        try {
            return (int)mh$.invokeExact(hService, dwSecurityInformation, lpSecurityDescriptor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetServiceStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$618.SetServiceStatus$MH,"SetServiceStatus");
    }
    public static int SetServiceStatus ( Addressable hServiceStatus,  Addressable lpServiceStatus) {
        var mh$ = RuntimeHelper.requireNonNull(constants$618.SetServiceStatus$MH, "SetServiceStatus");
        try {
            return (int)mh$.invokeExact(hServiceStatus, lpServiceStatus);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartServiceCtrlDispatcherA$MH() {
        return RuntimeHelper.requireNonNull(constants$618.StartServiceCtrlDispatcherA$MH,"StartServiceCtrlDispatcherA");
    }
    public static int StartServiceCtrlDispatcherA ( Addressable lpServiceStartTable) {
        var mh$ = RuntimeHelper.requireNonNull(constants$618.StartServiceCtrlDispatcherA$MH, "StartServiceCtrlDispatcherA");
        try {
            return (int)mh$.invokeExact(lpServiceStartTable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartServiceCtrlDispatcherW$MH() {
        return RuntimeHelper.requireNonNull(constants$618.StartServiceCtrlDispatcherW$MH,"StartServiceCtrlDispatcherW");
    }
    public static int StartServiceCtrlDispatcherW ( Addressable lpServiceStartTable) {
        var mh$ = RuntimeHelper.requireNonNull(constants$618.StartServiceCtrlDispatcherW$MH, "StartServiceCtrlDispatcherW");
        try {
            return (int)mh$.invokeExact(lpServiceStartTable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartServiceA$MH() {
        return RuntimeHelper.requireNonNull(constants$619.StartServiceA$MH,"StartServiceA");
    }
    public static int StartServiceA ( Addressable hService,  int dwNumServiceArgs,  Addressable lpServiceArgVectors) {
        var mh$ = RuntimeHelper.requireNonNull(constants$619.StartServiceA$MH, "StartServiceA");
        try {
            return (int)mh$.invokeExact(hService, dwNumServiceArgs, lpServiceArgVectors);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle StartServiceW$MH() {
        return RuntimeHelper.requireNonNull(constants$619.StartServiceW$MH,"StartServiceW");
    }
    public static int StartServiceW ( Addressable hService,  int dwNumServiceArgs,  Addressable lpServiceArgVectors) {
        var mh$ = RuntimeHelper.requireNonNull(constants$619.StartServiceW$MH, "StartServiceW");
        try {
            return (int)mh$.invokeExact(hService, dwNumServiceArgs, lpServiceArgVectors);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnlockServiceDatabase$MH() {
        return RuntimeHelper.requireNonNull(constants$619.UnlockServiceDatabase$MH,"UnlockServiceDatabase");
    }
    public static int UnlockServiceDatabase ( Addressable ScLock) {
        var mh$ = RuntimeHelper.requireNonNull(constants$619.UnlockServiceDatabase$MH, "UnlockServiceDatabase");
        try {
            return (int)mh$.invokeExact(ScLock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NotifyServiceStatusChangeA$MH() {
        return RuntimeHelper.requireNonNull(constants$619.NotifyServiceStatusChangeA$MH,"NotifyServiceStatusChangeA");
    }
    public static int NotifyServiceStatusChangeA ( Addressable hService,  int dwNotifyMask,  Addressable pNotifyBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$619.NotifyServiceStatusChangeA$MH, "NotifyServiceStatusChangeA");
        try {
            return (int)mh$.invokeExact(hService, dwNotifyMask, pNotifyBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle NotifyServiceStatusChangeW$MH() {
        return RuntimeHelper.requireNonNull(constants$619.NotifyServiceStatusChangeW$MH,"NotifyServiceStatusChangeW");
    }
    public static int NotifyServiceStatusChangeW ( Addressable hService,  int dwNotifyMask,  Addressable pNotifyBuffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$619.NotifyServiceStatusChangeW$MH, "NotifyServiceStatusChangeW");
        try {
            return (int)mh$.invokeExact(hService, dwNotifyMask, pNotifyBuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ControlServiceExA$MH() {
        return RuntimeHelper.requireNonNull(constants$619.ControlServiceExA$MH,"ControlServiceExA");
    }
    public static int ControlServiceExA ( Addressable hService,  int dwControl,  int dwInfoLevel,  Addressable pControlParams) {
        var mh$ = RuntimeHelper.requireNonNull(constants$619.ControlServiceExA$MH, "ControlServiceExA");
        try {
            return (int)mh$.invokeExact(hService, dwControl, dwInfoLevel, pControlParams);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ControlServiceExW$MH() {
        return RuntimeHelper.requireNonNull(constants$620.ControlServiceExW$MH,"ControlServiceExW");
    }
    public static int ControlServiceExW ( Addressable hService,  int dwControl,  int dwInfoLevel,  Addressable pControlParams) {
        var mh$ = RuntimeHelper.requireNonNull(constants$620.ControlServiceExW$MH, "ControlServiceExW");
        try {
            return (int)mh$.invokeExact(hService, dwControl, dwInfoLevel, pControlParams);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle QueryServiceDynamicInformation$MH() {
        return RuntimeHelper.requireNonNull(constants$620.QueryServiceDynamicInformation$MH,"QueryServiceDynamicInformation");
    }
    public static int QueryServiceDynamicInformation ( Addressable hServiceStatus,  int dwInfoLevel,  Addressable ppDynamicInfo) {
        var mh$ = RuntimeHelper.requireNonNull(constants$620.QueryServiceDynamicInformation$MH, "QueryServiceDynamicInformation");
        try {
            return (int)mh$.invokeExact(hServiceStatus, dwInfoLevel, ppDynamicInfo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int SC_EVENT_DATABASE_CHANGE() {
        return (int)0L;
    }
    public static int SC_EVENT_PROPERTY_CHANGE() {
        return (int)1L;
    }
    public static int SC_EVENT_STATUS_CHANGE() {
        return (int)2L;
    }
    public static OfAddress PSC_EVENT_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSC_NOTIFICATION_REGISTRATION = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle SubscribeServiceChangeNotifications$MH() {
        return RuntimeHelper.requireNonNull(constants$621.SubscribeServiceChangeNotifications$MH,"SubscribeServiceChangeNotifications");
    }
    public static int SubscribeServiceChangeNotifications ( Addressable hService,  int eEventType,  Addressable pCallback,  Addressable pCallbackContext,  Addressable pSubscription) {
        var mh$ = RuntimeHelper.requireNonNull(constants$621.SubscribeServiceChangeNotifications$MH, "SubscribeServiceChangeNotifications");
        try {
            return (int)mh$.invokeExact(hService, eEventType, pCallback, pCallbackContext, pSubscription);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnsubscribeServiceChangeNotifications$MH() {
        return RuntimeHelper.requireNonNull(constants$621.UnsubscribeServiceChangeNotifications$MH,"UnsubscribeServiceChangeNotifications");
    }
    public static void UnsubscribeServiceChangeNotifications ( Addressable pSubscription) {
        var mh$ = RuntimeHelper.requireNonNull(constants$621.UnsubscribeServiceChangeNotifications$MH, "UnsubscribeServiceChangeNotifications");
        try {
            mh$.invokeExact(pSubscription);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WaitServiceState$MH() {
        return RuntimeHelper.requireNonNull(constants$621.WaitServiceState$MH,"WaitServiceState");
    }
    public static int WaitServiceState ( Addressable hService,  int dwNotify,  int dwTimeout,  Addressable hCancelEvent) {
        var mh$ = RuntimeHelper.requireNonNull(constants$621.WaitServiceState$MH, "WaitServiceState");
        try {
            return (int)mh$.invokeExact(hService, dwNotify, dwTimeout, hCancelEvent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int ServiceRegistryStateParameters() {
        return (int)0L;
    }
    public static int ServiceRegistryStatePersistent() {
        return (int)1L;
    }
    public static int MaxServiceRegistryStateType() {
        return (int)2L;
    }
    public static MethodHandle GetServiceRegistryStateKey$MH() {
        return RuntimeHelper.requireNonNull(constants$621.GetServiceRegistryStateKey$MH,"GetServiceRegistryStateKey");
    }
    public static int GetServiceRegistryStateKey ( Addressable ServiceStatusHandle,  int StateType,  int AccessMask,  Addressable ServiceStateKey) {
        var mh$ = RuntimeHelper.requireNonNull(constants$621.GetServiceRegistryStateKey$MH, "GetServiceRegistryStateKey");
        try {
            return (int)mh$.invokeExact(ServiceStatusHandle, StateType, AccessMask, ServiceStateKey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int ServiceDirectoryPersistentState() {
        return (int)0L;
    }
    public static int ServiceDirectoryTypeMax() {
        return (int)1L;
    }
    public static MethodHandle GetServiceDirectory$MH() {
        return RuntimeHelper.requireNonNull(constants$621.GetServiceDirectory$MH,"GetServiceDirectory");
    }
    public static int GetServiceDirectory ( Addressable hServiceStatus,  int eDirectoryType,  Addressable lpPathBuffer,  int cchPathBufferLength,  Addressable lpcchRequiredBufferLength) {
        var mh$ = RuntimeHelper.requireNonNull(constants$621.GetServiceDirectory$MH, "GetServiceDirectory");
        try {
            return (int)mh$.invokeExact(hServiceStatus, eDirectoryType, lpPathBuffer, cchPathBufferLength, lpcchRequiredBufferLength);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PMODEMDEVCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMODEMDEVCAPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMODEMSETTINGS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPMODEMSETTINGS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HIMC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HIMCC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHKL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPUINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCOMPOSITIONFORM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPCOMPOSITIONFORM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCOMPOSITIONFORM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCANDIDATEFORM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPCANDIDATEFORM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCANDIDATEFORM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCANDIDATELIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPCANDIDATELIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCANDIDATELIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREGISTERWORDA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPREGISTERWORDA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPREGISTERWORDA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREGISTERWORDW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPREGISTERWORDW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPREGISTERWORDW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREGISTERWORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPREGISTERWORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPREGISTERWORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRECONVERTSTRING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPRECONVERTSTRING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRECONVERTSTRING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTYLEBUFA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPSTYLEBUFA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSTYLEBUFA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTYLEBUFW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPSTYLEBUFW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSTYLEBUFW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTYLEBUF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPSTYLEBUF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSTYLEBUF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMEMENUITEMINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPIMEMENUITEMINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPIMEMENUITEMINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMEMENUITEMINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPIMEMENUITEMINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPIMEMENUITEMINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMEMENUITEMINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPIMEMENUITEMINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPIMEMENUITEMINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMECHARPOSITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPIMECHARPOSITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPIMECHARPOSITION = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ImmInstallIMEA$MH() {
        return RuntimeHelper.requireNonNull(constants$622.ImmInstallIMEA$MH,"ImmInstallIMEA");
    }
    public static MemoryAddress ImmInstallIMEA ( Addressable lpszIMEFileName,  Addressable lpszLayoutText) {
        var mh$ = RuntimeHelper.requireNonNull(constants$622.ImmInstallIMEA$MH, "ImmInstallIMEA");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpszIMEFileName, lpszLayoutText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmInstallIMEW$MH() {
        return RuntimeHelper.requireNonNull(constants$622.ImmInstallIMEW$MH,"ImmInstallIMEW");
    }
    public static MemoryAddress ImmInstallIMEW ( Addressable lpszIMEFileName,  Addressable lpszLayoutText) {
        var mh$ = RuntimeHelper.requireNonNull(constants$622.ImmInstallIMEW$MH, "ImmInstallIMEW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(lpszIMEFileName, lpszLayoutText);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetDefaultIMEWnd$MH() {
        return RuntimeHelper.requireNonNull(constants$622.ImmGetDefaultIMEWnd$MH,"ImmGetDefaultIMEWnd");
    }
    public static MemoryAddress ImmGetDefaultIMEWnd ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$622.ImmGetDefaultIMEWnd$MH, "ImmGetDefaultIMEWnd");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetDescriptionA$MH() {
        return RuntimeHelper.requireNonNull(constants$622.ImmGetDescriptionA$MH,"ImmGetDescriptionA");
    }
    public static int ImmGetDescriptionA ( Addressable x0,  Addressable lpszDescription,  int uBufLen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$622.ImmGetDescriptionA$MH, "ImmGetDescriptionA");
        try {
            return (int)mh$.invokeExact(x0, lpszDescription, uBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetDescriptionW$MH() {
        return RuntimeHelper.requireNonNull(constants$622.ImmGetDescriptionW$MH,"ImmGetDescriptionW");
    }
    public static int ImmGetDescriptionW ( Addressable x0,  Addressable lpszDescription,  int uBufLen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$622.ImmGetDescriptionW$MH, "ImmGetDescriptionW");
        try {
            return (int)mh$.invokeExact(x0, lpszDescription, uBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetIMEFileNameA$MH() {
        return RuntimeHelper.requireNonNull(constants$623.ImmGetIMEFileNameA$MH,"ImmGetIMEFileNameA");
    }
    public static int ImmGetIMEFileNameA ( Addressable x0,  Addressable lpszFileName,  int uBufLen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$623.ImmGetIMEFileNameA$MH, "ImmGetIMEFileNameA");
        try {
            return (int)mh$.invokeExact(x0, lpszFileName, uBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetIMEFileNameW$MH() {
        return RuntimeHelper.requireNonNull(constants$623.ImmGetIMEFileNameW$MH,"ImmGetIMEFileNameW");
    }
    public static int ImmGetIMEFileNameW ( Addressable x0,  Addressable lpszFileName,  int uBufLen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$623.ImmGetIMEFileNameW$MH, "ImmGetIMEFileNameW");
        try {
            return (int)mh$.invokeExact(x0, lpszFileName, uBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetProperty$MH() {
        return RuntimeHelper.requireNonNull(constants$623.ImmGetProperty$MH,"ImmGetProperty");
    }
    public static int ImmGetProperty ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$623.ImmGetProperty$MH, "ImmGetProperty");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmIsIME$MH() {
        return RuntimeHelper.requireNonNull(constants$623.ImmIsIME$MH,"ImmIsIME");
    }
    public static int ImmIsIME ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$623.ImmIsIME$MH, "ImmIsIME");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSimulateHotKey$MH() {
        return RuntimeHelper.requireNonNull(constants$623.ImmSimulateHotKey$MH,"ImmSimulateHotKey");
    }
    public static int ImmSimulateHotKey ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$623.ImmSimulateHotKey$MH, "ImmSimulateHotKey");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmCreateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$623.ImmCreateContext$MH,"ImmCreateContext");
    }
    public static MemoryAddress ImmCreateContext () {
        var mh$ = RuntimeHelper.requireNonNull(constants$623.ImmCreateContext$MH, "ImmCreateContext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmDestroyContext$MH() {
        return RuntimeHelper.requireNonNull(constants$624.ImmDestroyContext$MH,"ImmDestroyContext");
    }
    public static int ImmDestroyContext ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$624.ImmDestroyContext$MH, "ImmDestroyContext");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetContext$MH() {
        return RuntimeHelper.requireNonNull(constants$624.ImmGetContext$MH,"ImmGetContext");
    }
    public static MemoryAddress ImmGetContext ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$624.ImmGetContext$MH, "ImmGetContext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmReleaseContext$MH() {
        return RuntimeHelper.requireNonNull(constants$624.ImmReleaseContext$MH,"ImmReleaseContext");
    }
    public static int ImmReleaseContext ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$624.ImmReleaseContext$MH, "ImmReleaseContext");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmAssociateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$624.ImmAssociateContext$MH,"ImmAssociateContext");
    }
    public static MemoryAddress ImmAssociateContext ( Addressable x0,  Addressable x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$624.ImmAssociateContext$MH, "ImmAssociateContext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmAssociateContextEx$MH() {
        return RuntimeHelper.requireNonNull(constants$624.ImmAssociateContextEx$MH,"ImmAssociateContextEx");
    }
    public static int ImmAssociateContextEx ( Addressable x0,  Addressable x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$624.ImmAssociateContextEx$MH, "ImmAssociateContextEx");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$624.ImmGetCompositionStringA$MH,"ImmGetCompositionStringA");
    }
    public static int ImmGetCompositionStringA ( Addressable x0,  int x1,  Addressable lpBuf,  int dwBufLen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$624.ImmGetCompositionStringA$MH, "ImmGetCompositionStringA");
        try {
            return (int)mh$.invokeExact(x0, x1, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$625.ImmGetCompositionStringW$MH,"ImmGetCompositionStringW");
    }
    public static int ImmGetCompositionStringW ( Addressable x0,  int x1,  Addressable lpBuf,  int dwBufLen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$625.ImmGetCompositionStringW$MH, "ImmGetCompositionStringW");
        try {
            return (int)mh$.invokeExact(x0, x1, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionStringA$MH() {
        return RuntimeHelper.requireNonNull(constants$625.ImmSetCompositionStringA$MH,"ImmSetCompositionStringA");
    }
    public static int ImmSetCompositionStringA ( Addressable x0,  int dwIndex,  Addressable lpComp,  int dwCompLen,  Addressable lpRead,  int dwReadLen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$625.ImmSetCompositionStringA$MH, "ImmSetCompositionStringA");
        try {
            return (int)mh$.invokeExact(x0, dwIndex, lpComp, dwCompLen, lpRead, dwReadLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionStringW$MH() {
        return RuntimeHelper.requireNonNull(constants$625.ImmSetCompositionStringW$MH,"ImmSetCompositionStringW");
    }
    public static int ImmSetCompositionStringW ( Addressable x0,  int dwIndex,  Addressable lpComp,  int dwCompLen,  Addressable lpRead,  int dwReadLen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$625.ImmSetCompositionStringW$MH, "ImmSetCompositionStringW");
        try {
            return (int)mh$.invokeExact(x0, dwIndex, lpComp, dwCompLen, lpRead, dwReadLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateListCountA$MH() {
        return RuntimeHelper.requireNonNull(constants$625.ImmGetCandidateListCountA$MH,"ImmGetCandidateListCountA");
    }
    public static int ImmGetCandidateListCountA ( Addressable x0,  Addressable lpdwListCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$625.ImmGetCandidateListCountA$MH, "ImmGetCandidateListCountA");
        try {
            return (int)mh$.invokeExact(x0, lpdwListCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateListCountW$MH() {
        return RuntimeHelper.requireNonNull(constants$625.ImmGetCandidateListCountW$MH,"ImmGetCandidateListCountW");
    }
    public static int ImmGetCandidateListCountW ( Addressable x0,  Addressable lpdwListCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$625.ImmGetCandidateListCountW$MH, "ImmGetCandidateListCountW");
        try {
            return (int)mh$.invokeExact(x0, lpdwListCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateListA$MH() {
        return RuntimeHelper.requireNonNull(constants$625.ImmGetCandidateListA$MH,"ImmGetCandidateListA");
    }
    public static int ImmGetCandidateListA ( Addressable x0,  int deIndex,  Addressable lpCandList,  int dwBufLen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$625.ImmGetCandidateListA$MH, "ImmGetCandidateListA");
        try {
            return (int)mh$.invokeExact(x0, deIndex, lpCandList, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateListW$MH() {
        return RuntimeHelper.requireNonNull(constants$626.ImmGetCandidateListW$MH,"ImmGetCandidateListW");
    }
    public static int ImmGetCandidateListW ( Addressable x0,  int deIndex,  Addressable lpCandList,  int dwBufLen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$626.ImmGetCandidateListW$MH, "ImmGetCandidateListW");
        try {
            return (int)mh$.invokeExact(x0, deIndex, lpCandList, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetGuideLineA$MH() {
        return RuntimeHelper.requireNonNull(constants$626.ImmGetGuideLineA$MH,"ImmGetGuideLineA");
    }
    public static int ImmGetGuideLineA ( Addressable x0,  int dwIndex,  Addressable lpBuf,  int dwBufLen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$626.ImmGetGuideLineA$MH, "ImmGetGuideLineA");
        try {
            return (int)mh$.invokeExact(x0, dwIndex, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetGuideLineW$MH() {
        return RuntimeHelper.requireNonNull(constants$626.ImmGetGuideLineW$MH,"ImmGetGuideLineW");
    }
    public static int ImmGetGuideLineW ( Addressable x0,  int dwIndex,  Addressable lpBuf,  int dwBufLen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$626.ImmGetGuideLineW$MH, "ImmGetGuideLineW");
        try {
            return (int)mh$.invokeExact(x0, dwIndex, lpBuf, dwBufLen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetConversionStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$626.ImmGetConversionStatus$MH,"ImmGetConversionStatus");
    }
    public static int ImmGetConversionStatus ( Addressable x0,  Addressable lpfdwConversion,  Addressable lpfdwSentence) {
        var mh$ = RuntimeHelper.requireNonNull(constants$626.ImmGetConversionStatus$MH, "ImmGetConversionStatus");
        try {
            return (int)mh$.invokeExact(x0, lpfdwConversion, lpfdwSentence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetConversionStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$626.ImmSetConversionStatus$MH,"ImmSetConversionStatus");
    }
    public static int ImmSetConversionStatus ( Addressable x0,  int x1,  int x2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$626.ImmSetConversionStatus$MH, "ImmSetConversionStatus");
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetOpenStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$626.ImmGetOpenStatus$MH,"ImmGetOpenStatus");
    }
    public static int ImmGetOpenStatus ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$626.ImmGetOpenStatus$MH, "ImmGetOpenStatus");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetOpenStatus$MH() {
        return RuntimeHelper.requireNonNull(constants$627.ImmSetOpenStatus$MH,"ImmSetOpenStatus");
    }
    public static int ImmSetOpenStatus ( Addressable x0,  int x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$627.ImmSetOpenStatus$MH, "ImmSetOpenStatus");
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionFontA$MH() {
        return RuntimeHelper.requireNonNull(constants$627.ImmGetCompositionFontA$MH,"ImmGetCompositionFontA");
    }
    public static int ImmGetCompositionFontA ( Addressable x0,  Addressable lplf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$627.ImmGetCompositionFontA$MH, "ImmGetCompositionFontA");
        try {
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionFontW$MH() {
        return RuntimeHelper.requireNonNull(constants$627.ImmGetCompositionFontW$MH,"ImmGetCompositionFontW");
    }
    public static int ImmGetCompositionFontW ( Addressable x0,  Addressable lplf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$627.ImmGetCompositionFontW$MH, "ImmGetCompositionFontW");
        try {
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionFontA$MH() {
        return RuntimeHelper.requireNonNull(constants$627.ImmSetCompositionFontA$MH,"ImmSetCompositionFontA");
    }
    public static int ImmSetCompositionFontA ( Addressable x0,  Addressable lplf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$627.ImmSetCompositionFontA$MH, "ImmSetCompositionFontA");
        try {
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionFontW$MH() {
        return RuntimeHelper.requireNonNull(constants$627.ImmSetCompositionFontW$MH,"ImmSetCompositionFontW");
    }
    public static int ImmSetCompositionFontW ( Addressable x0,  Addressable lplf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$627.ImmSetCompositionFontW$MH, "ImmSetCompositionFontW");
        try {
            return (int)mh$.invokeExact(x0, lplf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmConfigureIMEA$MH() {
        return RuntimeHelper.requireNonNull(constants$627.ImmConfigureIMEA$MH,"ImmConfigureIMEA");
    }
    public static int ImmConfigureIMEA ( Addressable x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$627.ImmConfigureIMEA$MH, "ImmConfigureIMEA");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmConfigureIMEW$MH() {
        return RuntimeHelper.requireNonNull(constants$628.ImmConfigureIMEW$MH,"ImmConfigureIMEW");
    }
    public static int ImmConfigureIMEW ( Addressable x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$628.ImmConfigureIMEW$MH, "ImmConfigureIMEW");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEscapeA$MH() {
        return RuntimeHelper.requireNonNull(constants$628.ImmEscapeA$MH,"ImmEscapeA");
    }
    public static long ImmEscapeA ( Addressable x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$628.ImmEscapeA$MH, "ImmEscapeA");
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEscapeW$MH() {
        return RuntimeHelper.requireNonNull(constants$628.ImmEscapeW$MH,"ImmEscapeW");
    }
    public static long ImmEscapeW ( Addressable x0,  Addressable x1,  int x2,  Addressable x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$628.ImmEscapeW$MH, "ImmEscapeW");
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetConversionListA$MH() {
        return RuntimeHelper.requireNonNull(constants$628.ImmGetConversionListA$MH,"ImmGetConversionListA");
    }
    public static int ImmGetConversionListA ( Addressable x0,  Addressable x1,  Addressable lpSrc,  Addressable lpDst,  int dwBufLen,  int uFlag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$628.ImmGetConversionListA$MH, "ImmGetConversionListA");
        try {
            return (int)mh$.invokeExact(x0, x1, lpSrc, lpDst, dwBufLen, uFlag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetConversionListW$MH() {
        return RuntimeHelper.requireNonNull(constants$628.ImmGetConversionListW$MH,"ImmGetConversionListW");
    }
    public static int ImmGetConversionListW ( Addressable x0,  Addressable x1,  Addressable lpSrc,  Addressable lpDst,  int dwBufLen,  int uFlag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$628.ImmGetConversionListW$MH, "ImmGetConversionListW");
        try {
            return (int)mh$.invokeExact(x0, x1, lpSrc, lpDst, dwBufLen, uFlag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmNotifyIME$MH() {
        return RuntimeHelper.requireNonNull(constants$628.ImmNotifyIME$MH,"ImmNotifyIME");
    }
    public static int ImmNotifyIME ( Addressable x0,  int dwAction,  int dwIndex,  int dwValue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$628.ImmNotifyIME$MH, "ImmNotifyIME");
        try {
            return (int)mh$.invokeExact(x0, dwAction, dwIndex, dwValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetStatusWindowPos$MH() {
        return RuntimeHelper.requireNonNull(constants$629.ImmGetStatusWindowPos$MH,"ImmGetStatusWindowPos");
    }
    public static int ImmGetStatusWindowPos ( Addressable x0,  Addressable lpptPos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$629.ImmGetStatusWindowPos$MH, "ImmGetStatusWindowPos");
        try {
            return (int)mh$.invokeExact(x0, lpptPos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetStatusWindowPos$MH() {
        return RuntimeHelper.requireNonNull(constants$629.ImmSetStatusWindowPos$MH,"ImmSetStatusWindowPos");
    }
    public static int ImmSetStatusWindowPos ( Addressable x0,  Addressable lpptPos) {
        var mh$ = RuntimeHelper.requireNonNull(constants$629.ImmSetStatusWindowPos$MH, "ImmSetStatusWindowPos");
        try {
            return (int)mh$.invokeExact(x0, lpptPos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCompositionWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$629.ImmGetCompositionWindow$MH,"ImmGetCompositionWindow");
    }
    public static int ImmGetCompositionWindow ( Addressable x0,  Addressable lpCompForm) {
        var mh$ = RuntimeHelper.requireNonNull(constants$629.ImmGetCompositionWindow$MH, "ImmGetCompositionWindow");
        try {
            return (int)mh$.invokeExact(x0, lpCompForm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCompositionWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$629.ImmSetCompositionWindow$MH,"ImmSetCompositionWindow");
    }
    public static int ImmSetCompositionWindow ( Addressable x0,  Addressable lpCompForm) {
        var mh$ = RuntimeHelper.requireNonNull(constants$629.ImmSetCompositionWindow$MH, "ImmSetCompositionWindow");
        try {
            return (int)mh$.invokeExact(x0, lpCompForm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetCandidateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$629.ImmGetCandidateWindow$MH,"ImmGetCandidateWindow");
    }
    public static int ImmGetCandidateWindow ( Addressable x0,  int x1,  Addressable lpCandidate) {
        var mh$ = RuntimeHelper.requireNonNull(constants$629.ImmGetCandidateWindow$MH, "ImmGetCandidateWindow");
        try {
            return (int)mh$.invokeExact(x0, x1, lpCandidate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmSetCandidateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$629.ImmSetCandidateWindow$MH,"ImmSetCandidateWindow");
    }
    public static int ImmSetCandidateWindow ( Addressable x0,  Addressable lpCandidate) {
        var mh$ = RuntimeHelper.requireNonNull(constants$629.ImmSetCandidateWindow$MH, "ImmSetCandidateWindow");
        try {
            return (int)mh$.invokeExact(x0, lpCandidate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmIsUIMessageA$MH() {
        return RuntimeHelper.requireNonNull(constants$630.ImmIsUIMessageA$MH,"ImmIsUIMessageA");
    }
    public static int ImmIsUIMessageA ( Addressable x0,  int x1,  long x2,  long x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$630.ImmIsUIMessageA$MH, "ImmIsUIMessageA");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmIsUIMessageW$MH() {
        return RuntimeHelper.requireNonNull(constants$630.ImmIsUIMessageW$MH,"ImmIsUIMessageW");
    }
    public static int ImmIsUIMessageW ( Addressable x0,  int x1,  long x2,  long x3) {
        var mh$ = RuntimeHelper.requireNonNull(constants$630.ImmIsUIMessageW$MH, "ImmIsUIMessageW");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetVirtualKey$MH() {
        return RuntimeHelper.requireNonNull(constants$630.ImmGetVirtualKey$MH,"ImmGetVirtualKey");
    }
    public static int ImmGetVirtualKey ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$630.ImmGetVirtualKey$MH, "ImmGetVirtualKey");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmRegisterWordA$MH() {
        return RuntimeHelper.requireNonNull(constants$631.ImmRegisterWordA$MH,"ImmRegisterWordA");
    }
    public static int ImmRegisterWordA ( Addressable x0,  Addressable lpszReading,  int x2,  Addressable lpszRegister) {
        var mh$ = RuntimeHelper.requireNonNull(constants$631.ImmRegisterWordA$MH, "ImmRegisterWordA");
        try {
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszRegister);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmRegisterWordW$MH() {
        return RuntimeHelper.requireNonNull(constants$631.ImmRegisterWordW$MH,"ImmRegisterWordW");
    }
    public static int ImmRegisterWordW ( Addressable x0,  Addressable lpszReading,  int x2,  Addressable lpszRegister) {
        var mh$ = RuntimeHelper.requireNonNull(constants$631.ImmRegisterWordW$MH, "ImmRegisterWordW");
        try {
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszRegister);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmUnregisterWordA$MH() {
        return RuntimeHelper.requireNonNull(constants$631.ImmUnregisterWordA$MH,"ImmUnregisterWordA");
    }
    public static int ImmUnregisterWordA ( Addressable x0,  Addressable lpszReading,  int x2,  Addressable lpszUnregister) {
        var mh$ = RuntimeHelper.requireNonNull(constants$631.ImmUnregisterWordA$MH, "ImmUnregisterWordA");
        try {
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszUnregister);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmUnregisterWordW$MH() {
        return RuntimeHelper.requireNonNull(constants$631.ImmUnregisterWordW$MH,"ImmUnregisterWordW");
    }
    public static int ImmUnregisterWordW ( Addressable x0,  Addressable lpszReading,  int x2,  Addressable lpszUnregister) {
        var mh$ = RuntimeHelper.requireNonNull(constants$631.ImmUnregisterWordW$MH, "ImmUnregisterWordW");
        try {
            return (int)mh$.invokeExact(x0, lpszReading, x2, lpszUnregister);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetRegisterWordStyleA$MH() {
        return RuntimeHelper.requireNonNull(constants$631.ImmGetRegisterWordStyleA$MH,"ImmGetRegisterWordStyleA");
    }
    public static int ImmGetRegisterWordStyleA ( Addressable x0,  int nItem,  Addressable lpStyleBuf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$631.ImmGetRegisterWordStyleA$MH, "ImmGetRegisterWordStyleA");
        try {
            return (int)mh$.invokeExact(x0, nItem, lpStyleBuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetRegisterWordStyleW$MH() {
        return RuntimeHelper.requireNonNull(constants$632.ImmGetRegisterWordStyleW$MH,"ImmGetRegisterWordStyleW");
    }
    public static int ImmGetRegisterWordStyleW ( Addressable x0,  int nItem,  Addressable lpStyleBuf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$632.ImmGetRegisterWordStyleW$MH, "ImmGetRegisterWordStyleW");
        try {
            return (int)mh$.invokeExact(x0, nItem, lpStyleBuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEnumRegisterWordA$MH() {
        return RuntimeHelper.requireNonNull(constants$632.ImmEnumRegisterWordA$MH,"ImmEnumRegisterWordA");
    }
    public static int ImmEnumRegisterWordA ( Addressable x0,  Addressable x1,  Addressable lpszReading,  int x3,  Addressable lpszRegister,  Addressable x5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$632.ImmEnumRegisterWordA$MH, "ImmEnumRegisterWordA");
        try {
            return (int)mh$.invokeExact(x0, x1, lpszReading, x3, lpszRegister, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEnumRegisterWordW$MH() {
        return RuntimeHelper.requireNonNull(constants$632.ImmEnumRegisterWordW$MH,"ImmEnumRegisterWordW");
    }
    public static int ImmEnumRegisterWordW ( Addressable x0,  Addressable x1,  Addressable lpszReading,  int x3,  Addressable lpszRegister,  Addressable x5) {
        var mh$ = RuntimeHelper.requireNonNull(constants$632.ImmEnumRegisterWordW$MH, "ImmEnumRegisterWordW");
        try {
            return (int)mh$.invokeExact(x0, x1, lpszReading, x3, lpszRegister, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmDisableIME$MH() {
        return RuntimeHelper.requireNonNull(constants$632.ImmDisableIME$MH,"ImmDisableIME");
    }
    public static int ImmDisableIME ( int x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$632.ImmDisableIME$MH, "ImmDisableIME");
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmEnumInputContext$MH() {
        return RuntimeHelper.requireNonNull(constants$632.ImmEnumInputContext$MH,"ImmEnumInputContext");
    }
    public static int ImmEnumInputContext ( int idThread,  Addressable lpfn,  long lParam) {
        var mh$ = RuntimeHelper.requireNonNull(constants$632.ImmEnumInputContext$MH, "ImmEnumInputContext");
        try {
            return (int)mh$.invokeExact(idThread, lpfn, lParam);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetImeMenuItemsA$MH() {
        return RuntimeHelper.requireNonNull(constants$632.ImmGetImeMenuItemsA$MH,"ImmGetImeMenuItemsA");
    }
    public static int ImmGetImeMenuItemsA ( Addressable x0,  int x1,  int x2,  Addressable lpImeParentMenu,  Addressable lpImeMenu,  int dwSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$632.ImmGetImeMenuItemsA$MH, "ImmGetImeMenuItemsA");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, lpImeParentMenu, lpImeMenu, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmGetImeMenuItemsW$MH() {
        return RuntimeHelper.requireNonNull(constants$633.ImmGetImeMenuItemsW$MH,"ImmGetImeMenuItemsW");
    }
    public static int ImmGetImeMenuItemsW ( Addressable x0,  int x1,  int x2,  Addressable lpImeParentMenu,  Addressable lpImeMenu,  int dwSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$633.ImmGetImeMenuItemsW$MH, "ImmGetImeMenuItemsW");
        try {
            return (int)mh$.invokeExact(x0, x1, x2, lpImeParentMenu, lpImeMenu, dwSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmDisableTextFrameService$MH() {
        return RuntimeHelper.requireNonNull(constants$633.ImmDisableTextFrameService$MH,"ImmDisableTextFrameService");
    }
    public static int ImmDisableTextFrameService ( int idThread) {
        var mh$ = RuntimeHelper.requireNonNull(constants$633.ImmDisableTextFrameService$MH, "ImmDisableTextFrameService");
        try {
            return (int)mh$.invokeExact(idThread);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ImmDisableLegacyIME$MH() {
        return RuntimeHelper.requireNonNull(constants$633.ImmDisableLegacyIME$MH,"ImmDisableLegacyIME");
    }
    public static int ImmDisableLegacyIME () {
        var mh$ = RuntimeHelper.requireNonNull(constants$633.ImmDisableLegacyIME$MH, "ImmDisableLegacyIME");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfShort GLshort = Constants$root.C_SHORT$LAYOUT;
    public static OfInt GLint = Constants$root.C_LONG$LAYOUT;
    public static OfInt GLsizei = Constants$root.C_LONG$LAYOUT;
    public static OfFloat GLfloat = Constants$root.C_FLOAT$LAYOUT;
    public static OfFloat GLclampf = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble GLdouble = Constants$root.C_DOUBLE$LAYOUT;
    public static OfDouble GLclampd = Constants$root.C_DOUBLE$LAYOUT;
    public static MethodHandle glAccum$MH() {
        return RuntimeHelper.requireNonNull(constants$633.glAccum$MH,"glAccum");
    }
    public static void glAccum ( int op,  float value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$633.glAccum$MH, "glAccum");
        try {
            mh$.invokeExact(op, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAlphaFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$633.glAlphaFunc$MH,"glAlphaFunc");
    }
    public static void glAlphaFunc ( int func,  float ref) {
        var mh$ = RuntimeHelper.requireNonNull(constants$633.glAlphaFunc$MH, "glAlphaFunc");
        try {
            mh$.invokeExact(func, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAreTexturesResident$MH() {
        return RuntimeHelper.requireNonNull(constants$633.glAreTexturesResident$MH,"glAreTexturesResident");
    }
    public static byte glAreTexturesResident ( int n,  Addressable textures,  Addressable residences) {
        var mh$ = RuntimeHelper.requireNonNull(constants$633.glAreTexturesResident$MH, "glAreTexturesResident");
        try {
            return (byte)mh$.invokeExact(n, textures, residences);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glArrayElement$MH() {
        return RuntimeHelper.requireNonNull(constants$634.glArrayElement$MH,"glArrayElement");
    }
    public static void glArrayElement ( int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$634.glArrayElement$MH, "glArrayElement");
        try {
            mh$.invokeExact(i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBegin$MH() {
        return RuntimeHelper.requireNonNull(constants$634.glBegin$MH,"glBegin");
    }
    public static void glBegin ( int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$634.glBegin$MH, "glBegin");
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$634.glBindTexture$MH,"glBindTexture");
    }
    public static void glBindTexture ( int target,  int texture) {
        var mh$ = RuntimeHelper.requireNonNull(constants$634.glBindTexture$MH, "glBindTexture");
        try {
            mh$.invokeExact(target, texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBitmap$MH() {
        return RuntimeHelper.requireNonNull(constants$634.glBitmap$MH,"glBitmap");
    }
    public static void glBitmap ( int width,  int height,  float xorig,  float yorig,  float xmove,  float ymove,  Addressable bitmap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$634.glBitmap$MH, "glBitmap");
        try {
            mh$.invokeExact(width, height, xorig, yorig, xmove, ymove, bitmap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$634.glBlendFunc$MH,"glBlendFunc");
    }
    public static void glBlendFunc ( int sfactor,  int dfactor) {
        var mh$ = RuntimeHelper.requireNonNull(constants$634.glBlendFunc$MH, "glBlendFunc");
        try {
            mh$.invokeExact(sfactor, dfactor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCallList$MH() {
        return RuntimeHelper.requireNonNull(constants$634.glCallList$MH,"glCallList");
    }
    public static void glCallList ( int list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$634.glCallList$MH, "glCallList");
        try {
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCallLists$MH() {
        return RuntimeHelper.requireNonNull(constants$635.glCallLists$MH,"glCallLists");
    }
    public static void glCallLists ( int n,  int type,  Addressable lists) {
        var mh$ = RuntimeHelper.requireNonNull(constants$635.glCallLists$MH, "glCallLists");
        try {
            mh$.invokeExact(n, type, lists);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClear$MH() {
        return RuntimeHelper.requireNonNull(constants$635.glClear$MH,"glClear");
    }
    public static void glClear ( int mask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$635.glClear$MH, "glClear");
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearAccum$MH() {
        return RuntimeHelper.requireNonNull(constants$635.glClearAccum$MH,"glClearAccum");
    }
    public static void glClearAccum ( float red,  float green,  float blue,  float alpha) {
        var mh$ = RuntimeHelper.requireNonNull(constants$635.glClearAccum$MH, "glClearAccum");
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearColor$MH() {
        return RuntimeHelper.requireNonNull(constants$635.glClearColor$MH,"glClearColor");
    }
    public static void glClearColor ( float red,  float green,  float blue,  float alpha) {
        var mh$ = RuntimeHelper.requireNonNull(constants$635.glClearColor$MH, "glClearColor");
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearDepth$MH() {
        return RuntimeHelper.requireNonNull(constants$635.glClearDepth$MH,"glClearDepth");
    }
    public static void glClearDepth ( double depth) {
        var mh$ = RuntimeHelper.requireNonNull(constants$635.glClearDepth$MH, "glClearDepth");
        try {
            mh$.invokeExact(depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearIndex$MH() {
        return RuntimeHelper.requireNonNull(constants$635.glClearIndex$MH,"glClearIndex");
    }
    public static void glClearIndex ( float c) {
        var mh$ = RuntimeHelper.requireNonNull(constants$635.glClearIndex$MH, "glClearIndex");
        try {
            mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearStencil$MH() {
        return RuntimeHelper.requireNonNull(constants$636.glClearStencil$MH,"glClearStencil");
    }
    public static void glClearStencil ( int s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$636.glClearStencil$MH, "glClearStencil");
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClipPlane$MH() {
        return RuntimeHelper.requireNonNull(constants$636.glClipPlane$MH,"glClipPlane");
    }
    public static void glClipPlane ( int plane,  Addressable equation) {
        var mh$ = RuntimeHelper.requireNonNull(constants$636.glClipPlane$MH, "glClipPlane");
        try {
            mh$.invokeExact(plane, equation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3b$MH() {
        return RuntimeHelper.requireNonNull(constants$636.glColor3b$MH,"glColor3b");
    }
    public static void glColor3b ( byte red,  byte green,  byte blue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$636.glColor3b$MH, "glColor3b");
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3bv$MH() {
        return RuntimeHelper.requireNonNull(constants$636.glColor3bv$MH,"glColor3bv");
    }
    public static void glColor3bv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$636.glColor3bv$MH, "glColor3bv");
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3d$MH() {
        return RuntimeHelper.requireNonNull(constants$636.glColor3d$MH,"glColor3d");
    }
    public static void glColor3d ( double red,  double green,  double blue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$636.glColor3d$MH, "glColor3d");
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$636.glColor3dv$MH,"glColor3dv");
    }
    public static void glColor3dv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$636.glColor3dv$MH, "glColor3dv");
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3f$MH() {
        return RuntimeHelper.requireNonNull(constants$637.glColor3f$MH,"glColor3f");
    }
    public static void glColor3f ( float red,  float green,  float blue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$637.glColor3f$MH, "glColor3f");
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$637.glColor3fv$MH,"glColor3fv");
    }
    public static void glColor3fv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$637.glColor3fv$MH, "glColor3fv");
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3i$MH() {
        return RuntimeHelper.requireNonNull(constants$637.glColor3i$MH,"glColor3i");
    }
    public static void glColor3i ( int red,  int green,  int blue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$637.glColor3i$MH, "glColor3i");
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$637.glColor3iv$MH,"glColor3iv");
    }
    public static void glColor3iv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$637.glColor3iv$MH, "glColor3iv");
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3s$MH() {
        return RuntimeHelper.requireNonNull(constants$637.glColor3s$MH,"glColor3s");
    }
    public static void glColor3s ( short red,  short green,  short blue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$637.glColor3s$MH, "glColor3s");
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$637.glColor3sv$MH,"glColor3sv");
    }
    public static void glColor3sv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$637.glColor3sv$MH, "glColor3sv");
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3ub$MH() {
        return RuntimeHelper.requireNonNull(constants$638.glColor3ub$MH,"glColor3ub");
    }
    public static void glColor3ub ( byte red,  byte green,  byte blue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$638.glColor3ub$MH, "glColor3ub");
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3ubv$MH() {
        return RuntimeHelper.requireNonNull(constants$638.glColor3ubv$MH,"glColor3ubv");
    }
    public static void glColor3ubv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$638.glColor3ubv$MH, "glColor3ubv");
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3ui$MH() {
        return RuntimeHelper.requireNonNull(constants$638.glColor3ui$MH,"glColor3ui");
    }
    public static void glColor3ui ( int red,  int green,  int blue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$638.glColor3ui$MH, "glColor3ui");
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3uiv$MH() {
        return RuntimeHelper.requireNonNull(constants$638.glColor3uiv$MH,"glColor3uiv");
    }
    public static void glColor3uiv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$638.glColor3uiv$MH, "glColor3uiv");
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3us$MH() {
        return RuntimeHelper.requireNonNull(constants$638.glColor3us$MH,"glColor3us");
    }
    public static void glColor3us ( short red,  short green,  short blue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$638.glColor3us$MH, "glColor3us");
        try {
            mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor3usv$MH() {
        return RuntimeHelper.requireNonNull(constants$638.glColor3usv$MH,"glColor3usv");
    }
    public static void glColor3usv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$638.glColor3usv$MH, "glColor3usv");
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4b$MH() {
        return RuntimeHelper.requireNonNull(constants$639.glColor4b$MH,"glColor4b");
    }
    public static void glColor4b ( byte red,  byte green,  byte blue,  byte alpha) {
        var mh$ = RuntimeHelper.requireNonNull(constants$639.glColor4b$MH, "glColor4b");
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4bv$MH() {
        return RuntimeHelper.requireNonNull(constants$639.glColor4bv$MH,"glColor4bv");
    }
    public static void glColor4bv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$639.glColor4bv$MH, "glColor4bv");
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4d$MH() {
        return RuntimeHelper.requireNonNull(constants$639.glColor4d$MH,"glColor4d");
    }
    public static void glColor4d ( double red,  double green,  double blue,  double alpha) {
        var mh$ = RuntimeHelper.requireNonNull(constants$639.glColor4d$MH, "glColor4d");
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$639.glColor4dv$MH,"glColor4dv");
    }
    public static void glColor4dv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$639.glColor4dv$MH, "glColor4dv");
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4f$MH() {
        return RuntimeHelper.requireNonNull(constants$639.glColor4f$MH,"glColor4f");
    }
    public static void glColor4f ( float red,  float green,  float blue,  float alpha) {
        var mh$ = RuntimeHelper.requireNonNull(constants$639.glColor4f$MH, "glColor4f");
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$639.glColor4fv$MH,"glColor4fv");
    }
    public static void glColor4fv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$639.glColor4fv$MH, "glColor4fv");
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4i$MH() {
        return RuntimeHelper.requireNonNull(constants$640.glColor4i$MH,"glColor4i");
    }
    public static void glColor4i ( int red,  int green,  int blue,  int alpha) {
        var mh$ = RuntimeHelper.requireNonNull(constants$640.glColor4i$MH, "glColor4i");
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$640.glColor4iv$MH,"glColor4iv");
    }
    public static void glColor4iv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$640.glColor4iv$MH, "glColor4iv");
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4s$MH() {
        return RuntimeHelper.requireNonNull(constants$640.glColor4s$MH,"glColor4s");
    }
    public static void glColor4s ( short red,  short green,  short blue,  short alpha) {
        var mh$ = RuntimeHelper.requireNonNull(constants$640.glColor4s$MH, "glColor4s");
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColor4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$640.glColor4sv$MH,"glColor4sv");
    }
    public static void glColor4sv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$640.glColor4sv$MH, "glColor4sv");
        try {
            mh$.invokeExact(v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


