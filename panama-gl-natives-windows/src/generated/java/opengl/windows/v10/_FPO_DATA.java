// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _FPO_DATA {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("ulOffStart"),
        Constants$root.C_LONG$LAYOUT.withName("cbProcSize"),
        Constants$root.C_LONG$LAYOUT.withName("cdwLocals"),
        Constants$root.C_SHORT$LAYOUT.withName("cdwParams"),
        MemoryLayout.structLayout(
            MemoryLayout.paddingLayout(8).withName("cbProlog"),
            MemoryLayout.paddingLayout(3).withName("cbRegs"),
            MemoryLayout.paddingLayout(1).withName("fHasSEH"),
            MemoryLayout.paddingLayout(1).withName("fUseBP"),
            MemoryLayout.paddingLayout(1).withName("reserved"),
            MemoryLayout.paddingLayout(2).withName("cbFrame")
        )
    ).withName("_FPO_DATA");
    public static MemoryLayout $LAYOUT() {
        return _FPO_DATA.$struct$LAYOUT;
    }
    static final VarHandle ulOffStart$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ulOffStart"));
    public static VarHandle ulOffStart$VH() {
        return _FPO_DATA.ulOffStart$VH;
    }
    public static int ulOffStart$get(MemorySegment seg) {
        return (int)_FPO_DATA.ulOffStart$VH.get(seg);
    }
    public static void ulOffStart$set( MemorySegment seg, int x) {
        _FPO_DATA.ulOffStart$VH.set(seg, x);
    }
    public static int ulOffStart$get(MemorySegment seg, long index) {
        return (int)_FPO_DATA.ulOffStart$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ulOffStart$set(MemorySegment seg, long index, int x) {
        _FPO_DATA.ulOffStart$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cbProcSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbProcSize"));
    public static VarHandle cbProcSize$VH() {
        return _FPO_DATA.cbProcSize$VH;
    }
    public static int cbProcSize$get(MemorySegment seg) {
        return (int)_FPO_DATA.cbProcSize$VH.get(seg);
    }
    public static void cbProcSize$set( MemorySegment seg, int x) {
        _FPO_DATA.cbProcSize$VH.set(seg, x);
    }
    public static int cbProcSize$get(MemorySegment seg, long index) {
        return (int)_FPO_DATA.cbProcSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbProcSize$set(MemorySegment seg, long index, int x) {
        _FPO_DATA.cbProcSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cdwLocals$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cdwLocals"));
    public static VarHandle cdwLocals$VH() {
        return _FPO_DATA.cdwLocals$VH;
    }
    public static int cdwLocals$get(MemorySegment seg) {
        return (int)_FPO_DATA.cdwLocals$VH.get(seg);
    }
    public static void cdwLocals$set( MemorySegment seg, int x) {
        _FPO_DATA.cdwLocals$VH.set(seg, x);
    }
    public static int cdwLocals$get(MemorySegment seg, long index) {
        return (int)_FPO_DATA.cdwLocals$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cdwLocals$set(MemorySegment seg, long index, int x) {
        _FPO_DATA.cdwLocals$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cdwParams$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cdwParams"));
    public static VarHandle cdwParams$VH() {
        return _FPO_DATA.cdwParams$VH;
    }
    public static short cdwParams$get(MemorySegment seg) {
        return (short)_FPO_DATA.cdwParams$VH.get(seg);
    }
    public static void cdwParams$set( MemorySegment seg, short x) {
        _FPO_DATA.cdwParams$VH.set(seg, x);
    }
    public static short cdwParams$get(MemorySegment seg, long index) {
        return (short)_FPO_DATA.cdwParams$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cdwParams$set(MemorySegment seg, long index, short x) {
        _FPO_DATA.cdwParams$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


