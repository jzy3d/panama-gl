// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _TOKEN_GROUPS_AND_PRIVILEGES {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("SidCount"),
        Constants$root.C_LONG$LAYOUT.withName("SidLength"),
        Constants$root.C_POINTER$LAYOUT.withName("Sids"),
        Constants$root.C_LONG$LAYOUT.withName("RestrictedSidCount"),
        Constants$root.C_LONG$LAYOUT.withName("RestrictedSidLength"),
        Constants$root.C_POINTER$LAYOUT.withName("RestrictedSids"),
        Constants$root.C_LONG$LAYOUT.withName("PrivilegeCount"),
        Constants$root.C_LONG$LAYOUT.withName("PrivilegeLength"),
        Constants$root.C_POINTER$LAYOUT.withName("Privileges"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("LowPart"),
            Constants$root.C_LONG$LAYOUT.withName("HighPart")
        ).withName("AuthenticationId")
    ).withName("_TOKEN_GROUPS_AND_PRIVILEGES");
    public static MemoryLayout $LAYOUT() {
        return _TOKEN_GROUPS_AND_PRIVILEGES.$struct$LAYOUT;
    }
    static final VarHandle SidCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SidCount"));
    public static VarHandle SidCount$VH() {
        return _TOKEN_GROUPS_AND_PRIVILEGES.SidCount$VH;
    }
    public static int SidCount$get(MemorySegment seg) {
        return (int)_TOKEN_GROUPS_AND_PRIVILEGES.SidCount$VH.get(seg);
    }
    public static void SidCount$set( MemorySegment seg, int x) {
        _TOKEN_GROUPS_AND_PRIVILEGES.SidCount$VH.set(seg, x);
    }
    public static int SidCount$get(MemorySegment seg, long index) {
        return (int)_TOKEN_GROUPS_AND_PRIVILEGES.SidCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SidCount$set(MemorySegment seg, long index, int x) {
        _TOKEN_GROUPS_AND_PRIVILEGES.SidCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SidLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SidLength"));
    public static VarHandle SidLength$VH() {
        return _TOKEN_GROUPS_AND_PRIVILEGES.SidLength$VH;
    }
    public static int SidLength$get(MemorySegment seg) {
        return (int)_TOKEN_GROUPS_AND_PRIVILEGES.SidLength$VH.get(seg);
    }
    public static void SidLength$set( MemorySegment seg, int x) {
        _TOKEN_GROUPS_AND_PRIVILEGES.SidLength$VH.set(seg, x);
    }
    public static int SidLength$get(MemorySegment seg, long index) {
        return (int)_TOKEN_GROUPS_AND_PRIVILEGES.SidLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SidLength$set(MemorySegment seg, long index, int x) {
        _TOKEN_GROUPS_AND_PRIVILEGES.SidLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Sids$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Sids"));
    public static VarHandle Sids$VH() {
        return _TOKEN_GROUPS_AND_PRIVILEGES.Sids$VH;
    }
    public static MemoryAddress Sids$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_TOKEN_GROUPS_AND_PRIVILEGES.Sids$VH.get(seg);
    }
    public static void Sids$set( MemorySegment seg, MemoryAddress x) {
        _TOKEN_GROUPS_AND_PRIVILEGES.Sids$VH.set(seg, x);
    }
    public static MemoryAddress Sids$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_TOKEN_GROUPS_AND_PRIVILEGES.Sids$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Sids$set(MemorySegment seg, long index, MemoryAddress x) {
        _TOKEN_GROUPS_AND_PRIVILEGES.Sids$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RestrictedSidCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RestrictedSidCount"));
    public static VarHandle RestrictedSidCount$VH() {
        return _TOKEN_GROUPS_AND_PRIVILEGES.RestrictedSidCount$VH;
    }
    public static int RestrictedSidCount$get(MemorySegment seg) {
        return (int)_TOKEN_GROUPS_AND_PRIVILEGES.RestrictedSidCount$VH.get(seg);
    }
    public static void RestrictedSidCount$set( MemorySegment seg, int x) {
        _TOKEN_GROUPS_AND_PRIVILEGES.RestrictedSidCount$VH.set(seg, x);
    }
    public static int RestrictedSidCount$get(MemorySegment seg, long index) {
        return (int)_TOKEN_GROUPS_AND_PRIVILEGES.RestrictedSidCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RestrictedSidCount$set(MemorySegment seg, long index, int x) {
        _TOKEN_GROUPS_AND_PRIVILEGES.RestrictedSidCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RestrictedSidLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RestrictedSidLength"));
    public static VarHandle RestrictedSidLength$VH() {
        return _TOKEN_GROUPS_AND_PRIVILEGES.RestrictedSidLength$VH;
    }
    public static int RestrictedSidLength$get(MemorySegment seg) {
        return (int)_TOKEN_GROUPS_AND_PRIVILEGES.RestrictedSidLength$VH.get(seg);
    }
    public static void RestrictedSidLength$set( MemorySegment seg, int x) {
        _TOKEN_GROUPS_AND_PRIVILEGES.RestrictedSidLength$VH.set(seg, x);
    }
    public static int RestrictedSidLength$get(MemorySegment seg, long index) {
        return (int)_TOKEN_GROUPS_AND_PRIVILEGES.RestrictedSidLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RestrictedSidLength$set(MemorySegment seg, long index, int x) {
        _TOKEN_GROUPS_AND_PRIVILEGES.RestrictedSidLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle RestrictedSids$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("RestrictedSids"));
    public static VarHandle RestrictedSids$VH() {
        return _TOKEN_GROUPS_AND_PRIVILEGES.RestrictedSids$VH;
    }
    public static MemoryAddress RestrictedSids$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_TOKEN_GROUPS_AND_PRIVILEGES.RestrictedSids$VH.get(seg);
    }
    public static void RestrictedSids$set( MemorySegment seg, MemoryAddress x) {
        _TOKEN_GROUPS_AND_PRIVILEGES.RestrictedSids$VH.set(seg, x);
    }
    public static MemoryAddress RestrictedSids$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_TOKEN_GROUPS_AND_PRIVILEGES.RestrictedSids$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void RestrictedSids$set(MemorySegment seg, long index, MemoryAddress x) {
        _TOKEN_GROUPS_AND_PRIVILEGES.RestrictedSids$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle PrivilegeCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PrivilegeCount"));
    public static VarHandle PrivilegeCount$VH() {
        return _TOKEN_GROUPS_AND_PRIVILEGES.PrivilegeCount$VH;
    }
    public static int PrivilegeCount$get(MemorySegment seg) {
        return (int)_TOKEN_GROUPS_AND_PRIVILEGES.PrivilegeCount$VH.get(seg);
    }
    public static void PrivilegeCount$set( MemorySegment seg, int x) {
        _TOKEN_GROUPS_AND_PRIVILEGES.PrivilegeCount$VH.set(seg, x);
    }
    public static int PrivilegeCount$get(MemorySegment seg, long index) {
        return (int)_TOKEN_GROUPS_AND_PRIVILEGES.PrivilegeCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PrivilegeCount$set(MemorySegment seg, long index, int x) {
        _TOKEN_GROUPS_AND_PRIVILEGES.PrivilegeCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle PrivilegeLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PrivilegeLength"));
    public static VarHandle PrivilegeLength$VH() {
        return _TOKEN_GROUPS_AND_PRIVILEGES.PrivilegeLength$VH;
    }
    public static int PrivilegeLength$get(MemorySegment seg) {
        return (int)_TOKEN_GROUPS_AND_PRIVILEGES.PrivilegeLength$VH.get(seg);
    }
    public static void PrivilegeLength$set( MemorySegment seg, int x) {
        _TOKEN_GROUPS_AND_PRIVILEGES.PrivilegeLength$VH.set(seg, x);
    }
    public static int PrivilegeLength$get(MemorySegment seg, long index) {
        return (int)_TOKEN_GROUPS_AND_PRIVILEGES.PrivilegeLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PrivilegeLength$set(MemorySegment seg, long index, int x) {
        _TOKEN_GROUPS_AND_PRIVILEGES.PrivilegeLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Privileges$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Privileges"));
    public static VarHandle Privileges$VH() {
        return _TOKEN_GROUPS_AND_PRIVILEGES.Privileges$VH;
    }
    public static MemoryAddress Privileges$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_TOKEN_GROUPS_AND_PRIVILEGES.Privileges$VH.get(seg);
    }
    public static void Privileges$set( MemorySegment seg, MemoryAddress x) {
        _TOKEN_GROUPS_AND_PRIVILEGES.Privileges$VH.set(seg, x);
    }
    public static MemoryAddress Privileges$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_TOKEN_GROUPS_AND_PRIVILEGES.Privileges$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Privileges$set(MemorySegment seg, long index, MemoryAddress x) {
        _TOKEN_GROUPS_AND_PRIVILEGES.Privileges$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment AuthenticationId$slice(MemorySegment seg) {
        return seg.asSlice(48, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


