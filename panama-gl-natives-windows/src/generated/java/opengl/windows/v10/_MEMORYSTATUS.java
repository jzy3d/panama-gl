// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _MEMORYSTATUS {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("dwLength"),
        Constants$root.C_LONG$LAYOUT.withName("dwMemoryLoad"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("dwTotalPhys"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("dwAvailPhys"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("dwTotalPageFile"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("dwAvailPageFile"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("dwTotalVirtual"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("dwAvailVirtual")
    ).withName("_MEMORYSTATUS");
    public static MemoryLayout $LAYOUT() {
        return _MEMORYSTATUS.$struct$LAYOUT;
    }
    static final VarHandle dwLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwLength"));
    public static VarHandle dwLength$VH() {
        return _MEMORYSTATUS.dwLength$VH;
    }
    public static int dwLength$get(MemorySegment seg) {
        return (int)_MEMORYSTATUS.dwLength$VH.get(seg);
    }
    public static void dwLength$set( MemorySegment seg, int x) {
        _MEMORYSTATUS.dwLength$VH.set(seg, x);
    }
    public static int dwLength$get(MemorySegment seg, long index) {
        return (int)_MEMORYSTATUS.dwLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwLength$set(MemorySegment seg, long index, int x) {
        _MEMORYSTATUS.dwLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwMemoryLoad$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwMemoryLoad"));
    public static VarHandle dwMemoryLoad$VH() {
        return _MEMORYSTATUS.dwMemoryLoad$VH;
    }
    public static int dwMemoryLoad$get(MemorySegment seg) {
        return (int)_MEMORYSTATUS.dwMemoryLoad$VH.get(seg);
    }
    public static void dwMemoryLoad$set( MemorySegment seg, int x) {
        _MEMORYSTATUS.dwMemoryLoad$VH.set(seg, x);
    }
    public static int dwMemoryLoad$get(MemorySegment seg, long index) {
        return (int)_MEMORYSTATUS.dwMemoryLoad$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwMemoryLoad$set(MemorySegment seg, long index, int x) {
        _MEMORYSTATUS.dwMemoryLoad$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwTotalPhys$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwTotalPhys"));
    public static VarHandle dwTotalPhys$VH() {
        return _MEMORYSTATUS.dwTotalPhys$VH;
    }
    public static long dwTotalPhys$get(MemorySegment seg) {
        return (long)_MEMORYSTATUS.dwTotalPhys$VH.get(seg);
    }
    public static void dwTotalPhys$set( MemorySegment seg, long x) {
        _MEMORYSTATUS.dwTotalPhys$VH.set(seg, x);
    }
    public static long dwTotalPhys$get(MemorySegment seg, long index) {
        return (long)_MEMORYSTATUS.dwTotalPhys$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwTotalPhys$set(MemorySegment seg, long index, long x) {
        _MEMORYSTATUS.dwTotalPhys$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwAvailPhys$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwAvailPhys"));
    public static VarHandle dwAvailPhys$VH() {
        return _MEMORYSTATUS.dwAvailPhys$VH;
    }
    public static long dwAvailPhys$get(MemorySegment seg) {
        return (long)_MEMORYSTATUS.dwAvailPhys$VH.get(seg);
    }
    public static void dwAvailPhys$set( MemorySegment seg, long x) {
        _MEMORYSTATUS.dwAvailPhys$VH.set(seg, x);
    }
    public static long dwAvailPhys$get(MemorySegment seg, long index) {
        return (long)_MEMORYSTATUS.dwAvailPhys$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwAvailPhys$set(MemorySegment seg, long index, long x) {
        _MEMORYSTATUS.dwAvailPhys$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwTotalPageFile$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwTotalPageFile"));
    public static VarHandle dwTotalPageFile$VH() {
        return _MEMORYSTATUS.dwTotalPageFile$VH;
    }
    public static long dwTotalPageFile$get(MemorySegment seg) {
        return (long)_MEMORYSTATUS.dwTotalPageFile$VH.get(seg);
    }
    public static void dwTotalPageFile$set( MemorySegment seg, long x) {
        _MEMORYSTATUS.dwTotalPageFile$VH.set(seg, x);
    }
    public static long dwTotalPageFile$get(MemorySegment seg, long index) {
        return (long)_MEMORYSTATUS.dwTotalPageFile$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwTotalPageFile$set(MemorySegment seg, long index, long x) {
        _MEMORYSTATUS.dwTotalPageFile$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwAvailPageFile$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwAvailPageFile"));
    public static VarHandle dwAvailPageFile$VH() {
        return _MEMORYSTATUS.dwAvailPageFile$VH;
    }
    public static long dwAvailPageFile$get(MemorySegment seg) {
        return (long)_MEMORYSTATUS.dwAvailPageFile$VH.get(seg);
    }
    public static void dwAvailPageFile$set( MemorySegment seg, long x) {
        _MEMORYSTATUS.dwAvailPageFile$VH.set(seg, x);
    }
    public static long dwAvailPageFile$get(MemorySegment seg, long index) {
        return (long)_MEMORYSTATUS.dwAvailPageFile$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwAvailPageFile$set(MemorySegment seg, long index, long x) {
        _MEMORYSTATUS.dwAvailPageFile$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwTotalVirtual$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwTotalVirtual"));
    public static VarHandle dwTotalVirtual$VH() {
        return _MEMORYSTATUS.dwTotalVirtual$VH;
    }
    public static long dwTotalVirtual$get(MemorySegment seg) {
        return (long)_MEMORYSTATUS.dwTotalVirtual$VH.get(seg);
    }
    public static void dwTotalVirtual$set( MemorySegment seg, long x) {
        _MEMORYSTATUS.dwTotalVirtual$VH.set(seg, x);
    }
    public static long dwTotalVirtual$get(MemorySegment seg, long index) {
        return (long)_MEMORYSTATUS.dwTotalVirtual$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwTotalVirtual$set(MemorySegment seg, long index, long x) {
        _MEMORYSTATUS.dwTotalVirtual$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwAvailVirtual$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwAvailVirtual"));
    public static VarHandle dwAvailVirtual$VH() {
        return _MEMORYSTATUS.dwAvailVirtual$VH;
    }
    public static long dwAvailVirtual$get(MemorySegment seg) {
        return (long)_MEMORYSTATUS.dwAvailVirtual$VH.get(seg);
    }
    public static void dwAvailVirtual$set( MemorySegment seg, long x) {
        _MEMORYSTATUS.dwAvailVirtual$VH.set(seg, x);
    }
    public static long dwAvailVirtual$get(MemorySegment seg, long index) {
        return (long)_MEMORYSTATUS.dwAvailVirtual$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwAvailVirtual$set(MemorySegment seg, long index, long x) {
        _MEMORYSTATUS.dwAvailVirtual$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


