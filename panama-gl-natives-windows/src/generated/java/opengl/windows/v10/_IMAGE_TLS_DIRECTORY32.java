// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _IMAGE_TLS_DIRECTORY32 {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("StartAddressOfRawData"),
        Constants$root.C_LONG$LAYOUT.withName("EndAddressOfRawData"),
        Constants$root.C_LONG$LAYOUT.withName("AddressOfIndex"),
        Constants$root.C_LONG$LAYOUT.withName("AddressOfCallBacks"),
        Constants$root.C_LONG$LAYOUT.withName("SizeOfZeroFill"),
        MemoryLayout.unionLayout(
            Constants$root.C_LONG$LAYOUT.withName("Characteristics"),
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    MemoryLayout.paddingLayout(20).withName("Reserved0"),
                    MemoryLayout.paddingLayout(4).withName("Alignment"),
                    MemoryLayout.paddingLayout(8).withName("Reserved1")
                )
            ).withName("$anon$0")
        ).withName("$anon$0")
    ).withName("_IMAGE_TLS_DIRECTORY32");
    public static MemoryLayout $LAYOUT() {
        return _IMAGE_TLS_DIRECTORY32.$struct$LAYOUT;
    }
    static final VarHandle StartAddressOfRawData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("StartAddressOfRawData"));
    public static VarHandle StartAddressOfRawData$VH() {
        return _IMAGE_TLS_DIRECTORY32.StartAddressOfRawData$VH;
    }
    public static int StartAddressOfRawData$get(MemorySegment seg) {
        return (int)_IMAGE_TLS_DIRECTORY32.StartAddressOfRawData$VH.get(seg);
    }
    public static void StartAddressOfRawData$set( MemorySegment seg, int x) {
        _IMAGE_TLS_DIRECTORY32.StartAddressOfRawData$VH.set(seg, x);
    }
    public static int StartAddressOfRawData$get(MemorySegment seg, long index) {
        return (int)_IMAGE_TLS_DIRECTORY32.StartAddressOfRawData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StartAddressOfRawData$set(MemorySegment seg, long index, int x) {
        _IMAGE_TLS_DIRECTORY32.StartAddressOfRawData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle EndAddressOfRawData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EndAddressOfRawData"));
    public static VarHandle EndAddressOfRawData$VH() {
        return _IMAGE_TLS_DIRECTORY32.EndAddressOfRawData$VH;
    }
    public static int EndAddressOfRawData$get(MemorySegment seg) {
        return (int)_IMAGE_TLS_DIRECTORY32.EndAddressOfRawData$VH.get(seg);
    }
    public static void EndAddressOfRawData$set( MemorySegment seg, int x) {
        _IMAGE_TLS_DIRECTORY32.EndAddressOfRawData$VH.set(seg, x);
    }
    public static int EndAddressOfRawData$get(MemorySegment seg, long index) {
        return (int)_IMAGE_TLS_DIRECTORY32.EndAddressOfRawData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EndAddressOfRawData$set(MemorySegment seg, long index, int x) {
        _IMAGE_TLS_DIRECTORY32.EndAddressOfRawData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AddressOfIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddressOfIndex"));
    public static VarHandle AddressOfIndex$VH() {
        return _IMAGE_TLS_DIRECTORY32.AddressOfIndex$VH;
    }
    public static int AddressOfIndex$get(MemorySegment seg) {
        return (int)_IMAGE_TLS_DIRECTORY32.AddressOfIndex$VH.get(seg);
    }
    public static void AddressOfIndex$set( MemorySegment seg, int x) {
        _IMAGE_TLS_DIRECTORY32.AddressOfIndex$VH.set(seg, x);
    }
    public static int AddressOfIndex$get(MemorySegment seg, long index) {
        return (int)_IMAGE_TLS_DIRECTORY32.AddressOfIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddressOfIndex$set(MemorySegment seg, long index, int x) {
        _IMAGE_TLS_DIRECTORY32.AddressOfIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AddressOfCallBacks$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AddressOfCallBacks"));
    public static VarHandle AddressOfCallBacks$VH() {
        return _IMAGE_TLS_DIRECTORY32.AddressOfCallBacks$VH;
    }
    public static int AddressOfCallBacks$get(MemorySegment seg) {
        return (int)_IMAGE_TLS_DIRECTORY32.AddressOfCallBacks$VH.get(seg);
    }
    public static void AddressOfCallBacks$set( MemorySegment seg, int x) {
        _IMAGE_TLS_DIRECTORY32.AddressOfCallBacks$VH.set(seg, x);
    }
    public static int AddressOfCallBacks$get(MemorySegment seg, long index) {
        return (int)_IMAGE_TLS_DIRECTORY32.AddressOfCallBacks$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AddressOfCallBacks$set(MemorySegment seg, long index, int x) {
        _IMAGE_TLS_DIRECTORY32.AddressOfCallBacks$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SizeOfZeroFill$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SizeOfZeroFill"));
    public static VarHandle SizeOfZeroFill$VH() {
        return _IMAGE_TLS_DIRECTORY32.SizeOfZeroFill$VH;
    }
    public static int SizeOfZeroFill$get(MemorySegment seg) {
        return (int)_IMAGE_TLS_DIRECTORY32.SizeOfZeroFill$VH.get(seg);
    }
    public static void SizeOfZeroFill$set( MemorySegment seg, int x) {
        _IMAGE_TLS_DIRECTORY32.SizeOfZeroFill$VH.set(seg, x);
    }
    public static int SizeOfZeroFill$get(MemorySegment seg, long index) {
        return (int)_IMAGE_TLS_DIRECTORY32.SizeOfZeroFill$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SizeOfZeroFill$set(MemorySegment seg, long index, int x) {
        _IMAGE_TLS_DIRECTORY32.SizeOfZeroFill$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Characteristics$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("Characteristics"));
    public static VarHandle Characteristics$VH() {
        return _IMAGE_TLS_DIRECTORY32.Characteristics$VH;
    }
    public static int Characteristics$get(MemorySegment seg) {
        return (int)_IMAGE_TLS_DIRECTORY32.Characteristics$VH.get(seg);
    }
    public static void Characteristics$set( MemorySegment seg, int x) {
        _IMAGE_TLS_DIRECTORY32.Characteristics$VH.set(seg, x);
    }
    public static int Characteristics$get(MemorySegment seg, long index) {
        return (int)_IMAGE_TLS_DIRECTORY32.Characteristics$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Characteristics$set(MemorySegment seg, long index, int x) {
        _IMAGE_TLS_DIRECTORY32.Characteristics$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


