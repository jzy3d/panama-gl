// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
 class freeglut_h_10 extends freeglut_h_9 {

    public static MemorySegment GUID_STANDBY_BUDGET_GRACE_PERIOD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$82.GUID_STANDBY_BUDGET_GRACE_PERIOD$SEGMENT,"GUID_STANDBY_BUDGET_GRACE_PERIOD");
    }
    public static MemorySegment GUID_STANDBY_BUDGET_PERCENT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$83.GUID_STANDBY_BUDGET_PERCENT$SEGMENT,"GUID_STANDBY_BUDGET_PERCENT");
    }
    public static MemorySegment GUID_STANDBY_RESERVE_GRACE_PERIOD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$83.GUID_STANDBY_RESERVE_GRACE_PERIOD$SEGMENT,"GUID_STANDBY_RESERVE_GRACE_PERIOD");
    }
    public static MemorySegment GUID_STANDBY_RESERVE_TIME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$83.GUID_STANDBY_RESERVE_TIME$SEGMENT,"GUID_STANDBY_RESERVE_TIME");
    }
    public static MemorySegment GUID_STANDBY_RESET_PERCENT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$83.GUID_STANDBY_RESET_PERCENT$SEGMENT,"GUID_STANDBY_RESET_PERCENT");
    }
    public static MemorySegment GUID_ALLOW_STANDBY_STATES$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$83.GUID_ALLOW_STANDBY_STATES$SEGMENT,"GUID_ALLOW_STANDBY_STATES");
    }
    public static MemorySegment GUID_ALLOW_RTC_WAKE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$83.GUID_ALLOW_RTC_WAKE$SEGMENT,"GUID_ALLOW_RTC_WAKE");
    }
    public static MemorySegment GUID_LEGACY_RTC_MITIGATION$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$84.GUID_LEGACY_RTC_MITIGATION$SEGMENT,"GUID_LEGACY_RTC_MITIGATION");
    }
    public static MemorySegment GUID_ALLOW_SYSTEM_REQUIRED$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$84.GUID_ALLOW_SYSTEM_REQUIRED$SEGMENT,"GUID_ALLOW_SYSTEM_REQUIRED");
    }
    public static MemorySegment GUID_POWER_SAVING_STATUS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$84.GUID_POWER_SAVING_STATUS$SEGMENT,"GUID_POWER_SAVING_STATUS");
    }
    public static MemorySegment GUID_ENERGY_SAVER_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$84.GUID_ENERGY_SAVER_SUBGROUP$SEGMENT,"GUID_ENERGY_SAVER_SUBGROUP");
    }
    public static MemorySegment GUID_ENERGY_SAVER_BATTERY_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$84.GUID_ENERGY_SAVER_BATTERY_THRESHOLD$SEGMENT,"GUID_ENERGY_SAVER_BATTERY_THRESHOLD");
    }
    public static MemorySegment GUID_ENERGY_SAVER_BRIGHTNESS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$84.GUID_ENERGY_SAVER_BRIGHTNESS$SEGMENT,"GUID_ENERGY_SAVER_BRIGHTNESS");
    }
    public static MemorySegment GUID_ENERGY_SAVER_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$85.GUID_ENERGY_SAVER_POLICY$SEGMENT,"GUID_ENERGY_SAVER_POLICY");
    }
    public static MemorySegment GUID_SYSTEM_BUTTON_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$85.GUID_SYSTEM_BUTTON_SUBGROUP$SEGMENT,"GUID_SYSTEM_BUTTON_SUBGROUP");
    }
    public static MemorySegment GUID_POWERBUTTON_ACTION$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$85.GUID_POWERBUTTON_ACTION$SEGMENT,"GUID_POWERBUTTON_ACTION");
    }
    public static MemorySegment GUID_SLEEPBUTTON_ACTION$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$85.GUID_SLEEPBUTTON_ACTION$SEGMENT,"GUID_SLEEPBUTTON_ACTION");
    }
    public static MemorySegment GUID_USERINTERFACEBUTTON_ACTION$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$85.GUID_USERINTERFACEBUTTON_ACTION$SEGMENT,"GUID_USERINTERFACEBUTTON_ACTION");
    }
    public static MemorySegment GUID_LIDCLOSE_ACTION$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$85.GUID_LIDCLOSE_ACTION$SEGMENT,"GUID_LIDCLOSE_ACTION");
    }
    public static MemorySegment GUID_LIDOPEN_POWERSTATE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$86.GUID_LIDOPEN_POWERSTATE$SEGMENT,"GUID_LIDOPEN_POWERSTATE");
    }
    public static MemorySegment GUID_BATTERY_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$86.GUID_BATTERY_SUBGROUP$SEGMENT,"GUID_BATTERY_SUBGROUP");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_ACTION_0$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$86.GUID_BATTERY_DISCHARGE_ACTION_0$SEGMENT,"GUID_BATTERY_DISCHARGE_ACTION_0");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_LEVEL_0$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$86.GUID_BATTERY_DISCHARGE_LEVEL_0$SEGMENT,"GUID_BATTERY_DISCHARGE_LEVEL_0");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_FLAGS_0$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$86.GUID_BATTERY_DISCHARGE_FLAGS_0$SEGMENT,"GUID_BATTERY_DISCHARGE_FLAGS_0");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_ACTION_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$86.GUID_BATTERY_DISCHARGE_ACTION_1$SEGMENT,"GUID_BATTERY_DISCHARGE_ACTION_1");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_LEVEL_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$87.GUID_BATTERY_DISCHARGE_LEVEL_1$SEGMENT,"GUID_BATTERY_DISCHARGE_LEVEL_1");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_FLAGS_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$87.GUID_BATTERY_DISCHARGE_FLAGS_1$SEGMENT,"GUID_BATTERY_DISCHARGE_FLAGS_1");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_ACTION_2$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$87.GUID_BATTERY_DISCHARGE_ACTION_2$SEGMENT,"GUID_BATTERY_DISCHARGE_ACTION_2");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_LEVEL_2$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$87.GUID_BATTERY_DISCHARGE_LEVEL_2$SEGMENT,"GUID_BATTERY_DISCHARGE_LEVEL_2");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_FLAGS_2$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$87.GUID_BATTERY_DISCHARGE_FLAGS_2$SEGMENT,"GUID_BATTERY_DISCHARGE_FLAGS_2");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_ACTION_3$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$87.GUID_BATTERY_DISCHARGE_ACTION_3$SEGMENT,"GUID_BATTERY_DISCHARGE_ACTION_3");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_LEVEL_3$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$88.GUID_BATTERY_DISCHARGE_LEVEL_3$SEGMENT,"GUID_BATTERY_DISCHARGE_LEVEL_3");
    }
    public static MemorySegment GUID_BATTERY_DISCHARGE_FLAGS_3$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$88.GUID_BATTERY_DISCHARGE_FLAGS_3$SEGMENT,"GUID_BATTERY_DISCHARGE_FLAGS_3");
    }
    public static MemorySegment GUID_PROCESSOR_SETTINGS_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$88.GUID_PROCESSOR_SETTINGS_SUBGROUP$SEGMENT,"GUID_PROCESSOR_SETTINGS_SUBGROUP");
    }
    public static MemorySegment GUID_PROCESSOR_THROTTLE_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$88.GUID_PROCESSOR_THROTTLE_POLICY$SEGMENT,"GUID_PROCESSOR_THROTTLE_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_THROTTLE_MAXIMUM$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$88.GUID_PROCESSOR_THROTTLE_MAXIMUM$SEGMENT,"GUID_PROCESSOR_THROTTLE_MAXIMUM");
    }
    public static MemorySegment GUID_PROCESSOR_THROTTLE_MAXIMUM_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$88.GUID_PROCESSOR_THROTTLE_MAXIMUM_1$SEGMENT,"GUID_PROCESSOR_THROTTLE_MAXIMUM_1");
    }
    public static MemorySegment GUID_PROCESSOR_THROTTLE_MINIMUM$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$89.GUID_PROCESSOR_THROTTLE_MINIMUM$SEGMENT,"GUID_PROCESSOR_THROTTLE_MINIMUM");
    }
    public static MemorySegment GUID_PROCESSOR_THROTTLE_MINIMUM_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$89.GUID_PROCESSOR_THROTTLE_MINIMUM_1$SEGMENT,"GUID_PROCESSOR_THROTTLE_MINIMUM_1");
    }
    public static MemorySegment GUID_PROCESSOR_FREQUENCY_LIMIT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$89.GUID_PROCESSOR_FREQUENCY_LIMIT$SEGMENT,"GUID_PROCESSOR_FREQUENCY_LIMIT");
    }
    public static MemorySegment GUID_PROCESSOR_FREQUENCY_LIMIT_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$89.GUID_PROCESSOR_FREQUENCY_LIMIT_1$SEGMENT,"GUID_PROCESSOR_FREQUENCY_LIMIT_1");
    }
    public static MemorySegment GUID_PROCESSOR_ALLOW_THROTTLING$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$89.GUID_PROCESSOR_ALLOW_THROTTLING$SEGMENT,"GUID_PROCESSOR_ALLOW_THROTTLING");
    }
    public static MemorySegment GUID_PROCESSOR_IDLESTATE_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$89.GUID_PROCESSOR_IDLESTATE_POLICY$SEGMENT,"GUID_PROCESSOR_IDLESTATE_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_PERFSTATE_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$90.GUID_PROCESSOR_PERFSTATE_POLICY$SEGMENT,"GUID_PROCESSOR_PERFSTATE_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_INCREASE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$90.GUID_PROCESSOR_PERF_INCREASE_THRESHOLD$SEGMENT,"GUID_PROCESSOR_PERF_INCREASE_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$90.GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1$SEGMENT,"GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_DECREASE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$90.GUID_PROCESSOR_PERF_DECREASE_THRESHOLD$SEGMENT,"GUID_PROCESSOR_PERF_DECREASE_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$90.GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1$SEGMENT,"GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_INCREASE_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$90.GUID_PROCESSOR_PERF_INCREASE_POLICY$SEGMENT,"GUID_PROCESSOR_PERF_INCREASE_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_INCREASE_POLICY_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$91.GUID_PROCESSOR_PERF_INCREASE_POLICY_1$SEGMENT,"GUID_PROCESSOR_PERF_INCREASE_POLICY_1");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_DECREASE_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$91.GUID_PROCESSOR_PERF_DECREASE_POLICY$SEGMENT,"GUID_PROCESSOR_PERF_DECREASE_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_DECREASE_POLICY_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$91.GUID_PROCESSOR_PERF_DECREASE_POLICY_1$SEGMENT,"GUID_PROCESSOR_PERF_DECREASE_POLICY_1");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_INCREASE_TIME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$91.GUID_PROCESSOR_PERF_INCREASE_TIME$SEGMENT,"GUID_PROCESSOR_PERF_INCREASE_TIME");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_INCREASE_TIME_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$91.GUID_PROCESSOR_PERF_INCREASE_TIME_1$SEGMENT,"GUID_PROCESSOR_PERF_INCREASE_TIME_1");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_DECREASE_TIME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$91.GUID_PROCESSOR_PERF_DECREASE_TIME$SEGMENT,"GUID_PROCESSOR_PERF_DECREASE_TIME");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_DECREASE_TIME_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$92.GUID_PROCESSOR_PERF_DECREASE_TIME_1$SEGMENT,"GUID_PROCESSOR_PERF_DECREASE_TIME_1");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_TIME_CHECK$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$92.GUID_PROCESSOR_PERF_TIME_CHECK$SEGMENT,"GUID_PROCESSOR_PERF_TIME_CHECK");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_BOOST_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$92.GUID_PROCESSOR_PERF_BOOST_POLICY$SEGMENT,"GUID_PROCESSOR_PERF_BOOST_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_BOOST_MODE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$92.GUID_PROCESSOR_PERF_BOOST_MODE$SEGMENT,"GUID_PROCESSOR_PERF_BOOST_MODE");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_AUTONOMOUS_MODE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$92.GUID_PROCESSOR_PERF_AUTONOMOUS_MODE$SEGMENT,"GUID_PROCESSOR_PERF_AUTONOMOUS_MODE");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$92.GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE$SEGMENT,"GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$93.GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1$SEGMENT,"GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$93.GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW$SEGMENT,"GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW");
    }
    public static MemorySegment GUID_PROCESSOR_DUTY_CYCLING$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$93.GUID_PROCESSOR_DUTY_CYCLING$SEGMENT,"GUID_PROCESSOR_DUTY_CYCLING");
    }
    public static MemorySegment GUID_PROCESSOR_IDLE_ALLOW_SCALING$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$93.GUID_PROCESSOR_IDLE_ALLOW_SCALING$SEGMENT,"GUID_PROCESSOR_IDLE_ALLOW_SCALING");
    }
    public static MemorySegment GUID_PROCESSOR_IDLE_DISABLE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$93.GUID_PROCESSOR_IDLE_DISABLE$SEGMENT,"GUID_PROCESSOR_IDLE_DISABLE");
    }
    public static MemorySegment GUID_PROCESSOR_IDLE_STATE_MAXIMUM$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$93.GUID_PROCESSOR_IDLE_STATE_MAXIMUM$SEGMENT,"GUID_PROCESSOR_IDLE_STATE_MAXIMUM");
    }
    public static MemorySegment GUID_PROCESSOR_IDLE_TIME_CHECK$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$94.GUID_PROCESSOR_IDLE_TIME_CHECK$SEGMENT,"GUID_PROCESSOR_IDLE_TIME_CHECK");
    }
    public static MemorySegment GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$94.GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD$SEGMENT,"GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$94.GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD$SEGMENT,"GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$94.GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$94.GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$94.GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$95.GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_MAX_CORES$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$95.GUID_PROCESSOR_CORE_PARKING_MAX_CORES$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_MAX_CORES");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$95.GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_MIN_CORES$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$95.GUID_PROCESSOR_CORE_PARKING_MIN_CORES$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_MIN_CORES");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$95.GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$95.GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$96.GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$96.GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$96.GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$96.GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$96.GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$96.GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$97.GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING");
    }
    public static MemorySegment GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$97.GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD$SEGMENT,"GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_PARKING_CORE_OVERRIDE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$97.GUID_PROCESSOR_PARKING_CORE_OVERRIDE$SEGMENT,"GUID_PROCESSOR_PARKING_CORE_OVERRIDE");
    }
    public static MemorySegment GUID_PROCESSOR_PARKING_PERF_STATE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$97.GUID_PROCESSOR_PARKING_PERF_STATE$SEGMENT,"GUID_PROCESSOR_PARKING_PERF_STATE");
    }
    public static MemorySegment GUID_PROCESSOR_PARKING_PERF_STATE_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$97.GUID_PROCESSOR_PARKING_PERF_STATE_1$SEGMENT,"GUID_PROCESSOR_PARKING_PERF_STATE_1");
    }
    public static MemorySegment GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$97.GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD$SEGMENT,"GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$98.GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD$SEGMENT,"GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$98.GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD$SEGMENT,"GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_SOFT_PARKING_LATENCY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$98.GUID_PROCESSOR_SOFT_PARKING_LATENCY$SEGMENT,"GUID_PROCESSOR_SOFT_PARKING_LATENCY");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_HISTORY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$98.GUID_PROCESSOR_PERF_HISTORY$SEGMENT,"GUID_PROCESSOR_PERF_HISTORY");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_HISTORY_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$98.GUID_PROCESSOR_PERF_HISTORY_1$SEGMENT,"GUID_PROCESSOR_PERF_HISTORY_1");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_INCREASE_HISTORY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$98.GUID_PROCESSOR_PERF_INCREASE_HISTORY$SEGMENT,"GUID_PROCESSOR_PERF_INCREASE_HISTORY");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_DECREASE_HISTORY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$99.GUID_PROCESSOR_PERF_DECREASE_HISTORY$SEGMENT,"GUID_PROCESSOR_PERF_DECREASE_HISTORY");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$99.GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY$SEGMENT,"GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_LATENCY_HINT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$99.GUID_PROCESSOR_PERF_LATENCY_HINT$SEGMENT,"GUID_PROCESSOR_PERF_LATENCY_HINT");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_LATENCY_HINT_PERF$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$99.GUID_PROCESSOR_PERF_LATENCY_HINT_PERF$SEGMENT,"GUID_PROCESSOR_PERF_LATENCY_HINT_PERF");
    }
    public static MemorySegment GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$99.GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1$SEGMENT,"GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1");
    }
    public static MemorySegment GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$99.GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK$SEGMENT,"GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK");
    }
    public static MemorySegment GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$100.GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1$SEGMENT,"GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1");
    }
    public static MemorySegment GUID_PROCESSOR_DISTRIBUTE_UTILITY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$100.GUID_PROCESSOR_DISTRIBUTE_UTILITY$SEGMENT,"GUID_PROCESSOR_DISTRIBUTE_UTILITY");
    }
    public static MemorySegment GUID_PROCESSOR_HETEROGENEOUS_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$100.GUID_PROCESSOR_HETEROGENEOUS_POLICY$SEGMENT,"GUID_PROCESSOR_HETEROGENEOUS_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_HETERO_DECREASE_TIME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$100.GUID_PROCESSOR_HETERO_DECREASE_TIME$SEGMENT,"GUID_PROCESSOR_HETERO_DECREASE_TIME");
    }
    public static MemorySegment GUID_PROCESSOR_HETERO_INCREASE_TIME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$100.GUID_PROCESSOR_HETERO_INCREASE_TIME$SEGMENT,"GUID_PROCESSOR_HETERO_INCREASE_TIME");
    }
    public static MemorySegment GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$100.GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD$SEGMENT,"GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$101.GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD$SEGMENT,"GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_CLASS0_FLOOR_PERF$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$101.GUID_PROCESSOR_CLASS0_FLOOR_PERF$SEGMENT,"GUID_PROCESSOR_CLASS0_FLOOR_PERF");
    }
    public static MemorySegment GUID_PROCESSOR_CLASS1_INITIAL_PERF$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$101.GUID_PROCESSOR_CLASS1_INITIAL_PERF$SEGMENT,"GUID_PROCESSOR_CLASS1_INITIAL_PERF");
    }
    public static MemorySegment GUID_PROCESSOR_THREAD_SCHEDULING_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$101.GUID_PROCESSOR_THREAD_SCHEDULING_POLICY$SEGMENT,"GUID_PROCESSOR_THREAD_SCHEDULING_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$101.GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY$SEGMENT,"GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY");
    }
    public static MemorySegment GUID_SYSTEM_COOLING_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$101.GUID_SYSTEM_COOLING_POLICY$SEGMENT,"GUID_SYSTEM_COOLING_POLICY");
    }
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$102.GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD$SEGMENT,"GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$102.GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1$SEGMENT,"GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1");
    }
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$102.GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD$SEGMENT,"GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD");
    }
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$102.GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1$SEGMENT,"GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1");
    }
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$102.GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME$SEGMENT,"GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME");
    }
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$102.GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1$SEGMENT,"GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1");
    }
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$103.GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME$SEGMENT,"GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME");
    }
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$103.GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1$SEGMENT,"GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1");
    }
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$103.GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING$SEGMENT,"GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING");
    }
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$103.GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1$SEGMENT,"GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1");
    }
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$103.GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR$SEGMENT,"GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR");
    }
    public static MemorySegment GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$103.GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1$SEGMENT,"GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1");
    }
    public static MemorySegment GUID_LOCK_CONSOLE_ON_WAKE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$104.GUID_LOCK_CONSOLE_ON_WAKE$SEGMENT,"GUID_LOCK_CONSOLE_ON_WAKE");
    }
    public static MemorySegment GUID_DEVICE_IDLE_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$104.GUID_DEVICE_IDLE_POLICY$SEGMENT,"GUID_DEVICE_IDLE_POLICY");
    }
    public static MemorySegment GUID_CONNECTIVITY_IN_STANDBY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$104.GUID_CONNECTIVITY_IN_STANDBY$SEGMENT,"GUID_CONNECTIVITY_IN_STANDBY");
    }
    public static MemorySegment GUID_DISCONNECTED_STANDBY_MODE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$104.GUID_DISCONNECTED_STANDBY_MODE$SEGMENT,"GUID_DISCONNECTED_STANDBY_MODE");
    }
    public static MemorySegment GUID_ACDC_POWER_SOURCE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$104.GUID_ACDC_POWER_SOURCE$SEGMENT,"GUID_ACDC_POWER_SOURCE");
    }
    public static MemorySegment GUID_LIDSWITCH_STATE_CHANGE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$104.GUID_LIDSWITCH_STATE_CHANGE$SEGMENT,"GUID_LIDSWITCH_STATE_CHANGE");
    }
    public static MemorySegment GUID_BATTERY_PERCENTAGE_REMAINING$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$105.GUID_BATTERY_PERCENTAGE_REMAINING$SEGMENT,"GUID_BATTERY_PERCENTAGE_REMAINING");
    }
    public static MemorySegment GUID_BATTERY_COUNT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$105.GUID_BATTERY_COUNT$SEGMENT,"GUID_BATTERY_COUNT");
    }
    public static MemorySegment GUID_GLOBAL_USER_PRESENCE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$105.GUID_GLOBAL_USER_PRESENCE$SEGMENT,"GUID_GLOBAL_USER_PRESENCE");
    }
    public static MemorySegment GUID_SESSION_DISPLAY_STATUS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$105.GUID_SESSION_DISPLAY_STATUS$SEGMENT,"GUID_SESSION_DISPLAY_STATUS");
    }
    public static MemorySegment GUID_SESSION_USER_PRESENCE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$105.GUID_SESSION_USER_PRESENCE$SEGMENT,"GUID_SESSION_USER_PRESENCE");
    }
    public static MemorySegment GUID_IDLE_BACKGROUND_TASK$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$105.GUID_IDLE_BACKGROUND_TASK$SEGMENT,"GUID_IDLE_BACKGROUND_TASK");
    }
    public static MemorySegment GUID_BACKGROUND_TASK_NOTIFICATION$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$106.GUID_BACKGROUND_TASK_NOTIFICATION$SEGMENT,"GUID_BACKGROUND_TASK_NOTIFICATION");
    }
    public static MemorySegment GUID_APPLAUNCH_BUTTON$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$106.GUID_APPLAUNCH_BUTTON$SEGMENT,"GUID_APPLAUNCH_BUTTON");
    }
    public static MemorySegment GUID_PCIEXPRESS_SETTINGS_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$106.GUID_PCIEXPRESS_SETTINGS_SUBGROUP$SEGMENT,"GUID_PCIEXPRESS_SETTINGS_SUBGROUP");
    }
    public static MemorySegment GUID_PCIEXPRESS_ASPM_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$106.GUID_PCIEXPRESS_ASPM_POLICY$SEGMENT,"GUID_PCIEXPRESS_ASPM_POLICY");
    }
    public static MemorySegment GUID_ENABLE_SWITCH_FORCED_SHUTDOWN$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$106.GUID_ENABLE_SWITCH_FORCED_SHUTDOWN$SEGMENT,"GUID_ENABLE_SWITCH_FORCED_SHUTDOWN");
    }
    public static MemorySegment GUID_INTSTEER_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$106.GUID_INTSTEER_SUBGROUP$SEGMENT,"GUID_INTSTEER_SUBGROUP");
    }
    public static MemorySegment GUID_INTSTEER_MODE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$107.GUID_INTSTEER_MODE$SEGMENT,"GUID_INTSTEER_MODE");
    }
    public static MemorySegment GUID_INTSTEER_LOAD_PER_PROC_TRIGGER$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$107.GUID_INTSTEER_LOAD_PER_PROC_TRIGGER$SEGMENT,"GUID_INTSTEER_LOAD_PER_PROC_TRIGGER");
    }
    public static MemorySegment GUID_INTSTEER_TIME_UNPARK_TRIGGER$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$107.GUID_INTSTEER_TIME_UNPARK_TRIGGER$SEGMENT,"GUID_INTSTEER_TIME_UNPARK_TRIGGER");
    }
    public static MemorySegment GUID_GRAPHICS_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$107.GUID_GRAPHICS_SUBGROUP$SEGMENT,"GUID_GRAPHICS_SUBGROUP");
    }
    public static MemorySegment GUID_GPU_PREFERENCE_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$107.GUID_GPU_PREFERENCE_POLICY$SEGMENT,"GUID_GPU_PREFERENCE_POLICY");
    }
    public static MemorySegment GUID_MIXED_REALITY_MODE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$107.GUID_MIXED_REALITY_MODE$SEGMENT,"GUID_MIXED_REALITY_MODE");
    }
    public static MemorySegment GUID_SPR_ACTIVE_SESSION_CHANGE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$108.GUID_SPR_ACTIVE_SESSION_CHANGE$SEGMENT,"GUID_SPR_ACTIVE_SESSION_CHANGE");
    }
    public static int PowerSystemUnspecified() {
        return (int)0L;
    }
    public static int PowerSystemWorking() {
        return (int)1L;
    }
    public static int PowerSystemSleeping1() {
        return (int)2L;
    }
    public static int PowerSystemSleeping2() {
        return (int)3L;
    }
    public static int PowerSystemSleeping3() {
        return (int)4L;
    }
    public static int PowerSystemHibernate() {
        return (int)5L;
    }
    public static int PowerSystemShutdown() {
        return (int)6L;
    }
    public static int PowerSystemMaximum() {
        return (int)7L;
    }
    public static OfAddress PSYSTEM_POWER_STATE = Constants$root.C_POINTER$LAYOUT;
    public static int PowerActionNone() {
        return (int)0L;
    }
    public static int PowerActionReserved() {
        return (int)1L;
    }
    public static int PowerActionSleep() {
        return (int)2L;
    }
    public static int PowerActionHibernate() {
        return (int)3L;
    }
    public static int PowerActionShutdown() {
        return (int)4L;
    }
    public static int PowerActionShutdownReset() {
        return (int)5L;
    }
    public static int PowerActionShutdownOff() {
        return (int)6L;
    }
    public static int PowerActionWarmEject() {
        return (int)7L;
    }
    public static int PowerActionDisplayOff() {
        return (int)8L;
    }
    public static OfAddress PPOWER_ACTION = Constants$root.C_POINTER$LAYOUT;
    public static int PowerDeviceUnspecified() {
        return (int)0L;
    }
    public static int PowerDeviceD0() {
        return (int)1L;
    }
    public static int PowerDeviceD1() {
        return (int)2L;
    }
    public static int PowerDeviceD2() {
        return (int)3L;
    }
    public static int PowerDeviceD3() {
        return (int)4L;
    }
    public static int PowerDeviceMaximum() {
        return (int)5L;
    }
    public static OfAddress PDEVICE_POWER_STATE = Constants$root.C_POINTER$LAYOUT;
    public static int PowerMonitorOff() {
        return (int)0L;
    }
    public static int PowerMonitorOn() {
        return (int)1L;
    }
    public static int PowerMonitorDim() {
        return (int)2L;
    }
    public static OfAddress PMONITOR_DISPLAY_STATE = Constants$root.C_POINTER$LAYOUT;
    public static int PowerUserPresent() {
        return (int)0L;
    }
    public static int PowerUserNotPresent() {
        return (int)1L;
    }
    public static int PowerUserInactive() {
        return (int)2L;
    }
    public static int PowerUserMaximum() {
        return (int)3L;
    }
    public static int PowerUserInvalid() {
        return (int)3L;
    }
    public static OfAddress PUSER_ACTIVITY_PRESENCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXECUTION_STATE = Constants$root.C_POINTER$LAYOUT;
    public static int LT_DONT_CARE() {
        return (int)0L;
    }
    public static int LT_LOWEST_LATENCY() {
        return (int)1L;
    }
    public static int PowerRequestDisplayRequired() {
        return (int)0L;
    }
    public static int PowerRequestSystemRequired() {
        return (int)1L;
    }
    public static int PowerRequestAwayModeRequired() {
        return (int)2L;
    }
    public static int PowerRequestExecutionRequired() {
        return (int)3L;
    }
    public static OfAddress PPOWER_REQUEST_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCM_POWER_DATA = Constants$root.C_POINTER$LAYOUT;
    public static int SystemPowerPolicyAc() {
        return (int)0L;
    }
    public static int SystemPowerPolicyDc() {
        return (int)1L;
    }
    public static int VerifySystemPolicyAc() {
        return (int)2L;
    }
    public static int VerifySystemPolicyDc() {
        return (int)3L;
    }
    public static int SystemPowerCapabilities() {
        return (int)4L;
    }
    public static int SystemBatteryState() {
        return (int)5L;
    }
    public static int SystemPowerStateHandler() {
        return (int)6L;
    }
    public static int ProcessorStateHandler() {
        return (int)7L;
    }
    public static int SystemPowerPolicyCurrent() {
        return (int)8L;
    }
    public static int AdministratorPowerPolicy() {
        return (int)9L;
    }
    public static int SystemReserveHiberFile() {
        return (int)10L;
    }
    public static int ProcessorInformation() {
        return (int)11L;
    }
    public static int SystemPowerInformation() {
        return (int)12L;
    }
    public static int ProcessorStateHandler2() {
        return (int)13L;
    }
    public static int LastWakeTime() {
        return (int)14L;
    }
    public static int LastSleepTime() {
        return (int)15L;
    }
    public static int SystemExecutionState() {
        return (int)16L;
    }
    public static int SystemPowerStateNotifyHandler() {
        return (int)17L;
    }
    public static int ProcessorPowerPolicyAc() {
        return (int)18L;
    }
    public static int ProcessorPowerPolicyDc() {
        return (int)19L;
    }
    public static int VerifyProcessorPowerPolicyAc() {
        return (int)20L;
    }
    public static int VerifyProcessorPowerPolicyDc() {
        return (int)21L;
    }
    public static int ProcessorPowerPolicyCurrent() {
        return (int)22L;
    }
    public static int SystemPowerStateLogging() {
        return (int)23L;
    }
    public static int SystemPowerLoggingEntry() {
        return (int)24L;
    }
    public static int SetPowerSettingValue() {
        return (int)25L;
    }
    public static int NotifyUserPowerSetting() {
        return (int)26L;
    }
    public static int PowerInformationLevelUnused0() {
        return (int)27L;
    }
    public static int SystemMonitorHiberBootPowerOff() {
        return (int)28L;
    }
    public static int SystemVideoState() {
        return (int)29L;
    }
    public static int TraceApplicationPowerMessage() {
        return (int)30L;
    }
    public static int TraceApplicationPowerMessageEnd() {
        return (int)31L;
    }
    public static int ProcessorPerfStates() {
        return (int)32L;
    }
    public static int ProcessorIdleStates() {
        return (int)33L;
    }
    public static int ProcessorCap() {
        return (int)34L;
    }
    public static int SystemWakeSource() {
        return (int)35L;
    }
    public static int SystemHiberFileInformation() {
        return (int)36L;
    }
    public static int TraceServicePowerMessage() {
        return (int)37L;
    }
    public static int ProcessorLoad() {
        return (int)38L;
    }
    public static int PowerShutdownNotification() {
        return (int)39L;
    }
    public static int MonitorCapabilities() {
        return (int)40L;
    }
    public static int SessionPowerInit() {
        return (int)41L;
    }
    public static int SessionDisplayState() {
        return (int)42L;
    }
    public static int PowerRequestCreate() {
        return (int)43L;
    }
    public static int PowerRequestAction() {
        return (int)44L;
    }
    public static int GetPowerRequestList() {
        return (int)45L;
    }
    public static int ProcessorInformationEx() {
        return (int)46L;
    }
    public static int NotifyUserModeLegacyPowerEvent() {
        return (int)47L;
    }
    public static int GroupPark() {
        return (int)48L;
    }
    public static int ProcessorIdleDomains() {
        return (int)49L;
    }
    public static int WakeTimerList() {
        return (int)50L;
    }
    public static int SystemHiberFileSize() {
        return (int)51L;
    }
    public static int ProcessorIdleStatesHv() {
        return (int)52L;
    }
    public static int ProcessorPerfStatesHv() {
        return (int)53L;
    }
    public static int ProcessorPerfCapHv() {
        return (int)54L;
    }
    public static int ProcessorSetIdle() {
        return (int)55L;
    }
    public static int LogicalProcessorIdling() {
        return (int)56L;
    }
    public static int UserPresence() {
        return (int)57L;
    }
    public static int PowerSettingNotificationName() {
        return (int)58L;
    }
    public static int GetPowerSettingValue() {
        return (int)59L;
    }
    public static int IdleResiliency() {
        return (int)60L;
    }
    public static int SessionRITState() {
        return (int)61L;
    }
    public static int SessionConnectNotification() {
        return (int)62L;
    }
    public static int SessionPowerCleanup() {
        return (int)63L;
    }
    public static int SessionLockState() {
        return (int)64L;
    }
    public static int SystemHiberbootState() {
        return (int)65L;
    }
    public static int PlatformInformation() {
        return (int)66L;
    }
    public static int PdcInvocation() {
        return (int)67L;
    }
    public static int MonitorInvocation() {
        return (int)68L;
    }
    public static int FirmwareTableInformationRegistered() {
        return (int)69L;
    }
    public static int SetShutdownSelectedTime() {
        return (int)70L;
    }
    public static int SuspendResumeInvocation() {
        return (int)71L;
    }
    public static int PlmPowerRequestCreate() {
        return (int)72L;
    }
    public static int ScreenOff() {
        return (int)73L;
    }
    public static int CsDeviceNotification() {
        return (int)74L;
    }
    public static int PlatformRole() {
        return (int)75L;
    }
    public static int LastResumePerformance() {
        return (int)76L;
    }
    public static int DisplayBurst() {
        return (int)77L;
    }
    public static int ExitLatencySamplingPercentage() {
        return (int)78L;
    }
    public static int RegisterSpmPowerSettings() {
        return (int)79L;
    }
    public static int PlatformIdleStates() {
        return (int)80L;
    }
    public static int ProcessorIdleVeto() {
        return (int)81L;
    }
    public static int PlatformIdleVeto() {
        return (int)82L;
    }
    public static int SystemBatteryStatePrecise() {
        return (int)83L;
    }
    public static int ThermalEvent() {
        return (int)84L;
    }
    public static int PowerRequestActionInternal() {
        return (int)85L;
    }
    public static int BatteryDeviceState() {
        return (int)86L;
    }
    public static int PowerInformationInternal() {
        return (int)87L;
    }
    public static int ThermalStandby() {
        return (int)88L;
    }
    public static int SystemHiberFileType() {
        return (int)89L;
    }
    public static int PhysicalPowerButtonPress() {
        return (int)90L;
    }
    public static int QueryPotentialDripsConstraint() {
        return (int)91L;
    }
    public static int EnergyTrackerCreate() {
        return (int)92L;
    }
    public static int EnergyTrackerQuery() {
        return (int)93L;
    }
    public static int UpdateBlackBoxRecorder() {
        return (int)94L;
    }
    public static int SessionAllowExternalDmaDevices() {
        return (int)95L;
    }
    public static int PowerInformationLevelMaximum() {
        return (int)96L;
    }
    public static int UserNotPresent() {
        return (int)0L;
    }
    public static int UserPresent() {
        return (int)1L;
    }
    public static int UserUnknown() {
        return (int)255L;
    }
    public static OfAddress PPOWER_USER_PRESENCE_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOWER_USER_PRESENCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOWER_SESSION_CONNECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOWER_SESSION_TIMEOUTS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOWER_SESSION_RIT_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOWER_SESSION_WINLOGON = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOWER_IDLE_RESILIENCY = Constants$root.C_POINTER$LAYOUT;
    public static int MonitorRequestReasonUnknown() {
        return (int)0L;
    }
    public static int MonitorRequestReasonPowerButton() {
        return (int)1L;
    }
    public static int MonitorRequestReasonRemoteConnection() {
        return (int)2L;
    }
    public static int MonitorRequestReasonScMonitorpower() {
        return (int)3L;
    }
    public static int MonitorRequestReasonUserInput() {
        return (int)4L;
    }
    public static int MonitorRequestReasonAcDcDisplayBurst() {
        return (int)5L;
    }
    public static int MonitorRequestReasonUserDisplayBurst() {
        return (int)6L;
    }
    public static int MonitorRequestReasonPoSetSystemState() {
        return (int)7L;
    }
    public static int MonitorRequestReasonSetThreadExecutionState() {
        return (int)8L;
    }
    public static int MonitorRequestReasonFullWake() {
        return (int)9L;
    }
    public static int MonitorRequestReasonSessionUnlock() {
        return (int)10L;
    }
    public static int MonitorRequestReasonScreenOffRequest() {
        return (int)11L;
    }
    public static int MonitorRequestReasonIdleTimeout() {
        return (int)12L;
    }
    public static int MonitorRequestReasonPolicyChange() {
        return (int)13L;
    }
    public static int MonitorRequestReasonSleepButton() {
        return (int)14L;
    }
    public static int MonitorRequestReasonLid() {
        return (int)15L;
    }
    public static int MonitorRequestReasonBatteryCountChange() {
        return (int)16L;
    }
    public static int MonitorRequestReasonGracePeriod() {
        return (int)17L;
    }
    public static int MonitorRequestReasonPnP() {
        return (int)18L;
    }
    public static int MonitorRequestReasonDP() {
        return (int)19L;
    }
    public static int MonitorRequestReasonSxTransition() {
        return (int)20L;
    }
    public static int MonitorRequestReasonSystemIdle() {
        return (int)21L;
    }
    public static int MonitorRequestReasonNearProximity() {
        return (int)22L;
    }
    public static int MonitorRequestReasonThermalStandby() {
        return (int)23L;
    }
    public static int MonitorRequestReasonResumePdc() {
        return (int)24L;
    }
    public static int MonitorRequestReasonResumeS4() {
        return (int)25L;
    }
    public static int MonitorRequestReasonTerminal() {
        return (int)26L;
    }
    public static int MonitorRequestReasonPdcSignal() {
        return (int)27L;
    }
    public static int MonitorRequestReasonAcDcDisplayBurstSuppressed() {
        return (int)28L;
    }
    public static int MonitorRequestReasonSystemStateEntered() {
        return (int)29L;
    }
    public static int MonitorRequestReasonWinrt() {
        return (int)30L;
    }
    public static int MonitorRequestReasonUserInputKeyboard() {
        return (int)31L;
    }
    public static int MonitorRequestReasonUserInputMouse() {
        return (int)32L;
    }
    public static int MonitorRequestReasonUserInputTouch() {
        return (int)33L;
    }
    public static int MonitorRequestReasonUserInputPen() {
        return (int)34L;
    }
    public static int MonitorRequestReasonUserInputAccelerometer() {
        return (int)35L;
    }
    public static int MonitorRequestReasonUserInputHid() {
        return (int)36L;
    }
    public static int MonitorRequestReasonUserInputPoUserPresent() {
        return (int)37L;
    }
    public static int MonitorRequestReasonUserInputSessionSwitch() {
        return (int)38L;
    }
    public static int MonitorRequestReasonUserInputInitialization() {
        return (int)39L;
    }
    public static int MonitorRequestReasonPdcSignalWindowsMobilePwrNotif() {
        return (int)40L;
    }
    public static int MonitorRequestReasonPdcSignalWindowsMobileShell() {
        return (int)41L;
    }
    public static int MonitorRequestReasonPdcSignalHeyCortana() {
        return (int)42L;
    }
    public static int MonitorRequestReasonPdcSignalHolographicShell() {
        return (int)43L;
    }
    public static int MonitorRequestReasonPdcSignalFingerprint() {
        return (int)44L;
    }
    public static int MonitorRequestReasonDirectedDrips() {
        return (int)45L;
    }
    public static int MonitorRequestReasonDim() {
        return (int)46L;
    }
    public static int MonitorRequestReasonBuiltinPanel() {
        return (int)47L;
    }
    public static int MonitorRequestReasonDisplayRequiredUnDim() {
        return (int)48L;
    }
    public static int MonitorRequestReasonBatteryCountChangeSuppressed() {
        return (int)49L;
    }
    public static int MonitorRequestReasonResumeModernStandby() {
        return (int)50L;
    }
    public static int MonitorRequestReasonMax() {
        return (int)51L;
    }
    public static int MonitorRequestTypeOff() {
        return (int)0L;
    }
    public static int MonitorRequestTypeOnAndPresent() {
        return (int)1L;
    }
    public static int MonitorRequestTypeToggleOn() {
        return (int)2L;
    }
    public static OfAddress PPOWER_MONITOR_INVOCATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRESUME_PERFORMANCE = Constants$root.C_POINTER$LAYOUT;
    public static int PoAc() {
        return (int)0L;
    }
    public static int PoDc() {
        return (int)1L;
    }
    public static int PoHot() {
        return (int)2L;
    }
    public static int PoConditionMaximum() {
        return (int)3L;
    }
    public static OfAddress PSET_POWER_SETTING_VALUE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNOTIFY_USER_POWER_SETTING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PAPPLICATIONLAUNCH_SETTING_VALUE = Constants$root.C_POINTER$LAYOUT;
    public static int PlatformRoleUnspecified() {
        return (int)0L;
    }
    public static int PlatformRoleDesktop() {
        return (int)1L;
    }
    public static int PlatformRoleMobile() {
        return (int)2L;
    }
    public static int PlatformRoleWorkstation() {
        return (int)3L;
    }
    public static int PlatformRoleEnterpriseServer() {
        return (int)4L;
    }
    public static int PlatformRoleSOHOServer() {
        return (int)5L;
    }
    public static int PlatformRoleAppliancePC() {
        return (int)6L;
    }
    public static int PlatformRolePerformanceServer() {
        return (int)7L;
    }
    public static int PlatformRoleSlate() {
        return (int)8L;
    }
    public static int PlatformRoleMaximum() {
        return (int)9L;
    }
    public static OfAddress PPOWER_PLATFORM_ROLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOWER_PLATFORM_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBATTERY_REPORTING_SCALE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_WMI_LEGACY_PERFSTATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_WMI_IDLE_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_WMI_IDLE_STATES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_WMI_IDLE_STATES_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_WMI_PERF_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_WMI_PERF_STATES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_WMI_PERF_STATES_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_IDLE_STATE_ACCOUNTING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_IDLE_ACCOUNTING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_IDLE_STATE_BUCKET_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_IDLE_STATE_ACCOUNTING_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_IDLE_ACCOUNTING_EX = Constants$root.C_POINTER$LAYOUT;
    public static MemorySegment PPM_PERFSTATE_CHANGE_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$108.PPM_PERFSTATE_CHANGE_GUID$SEGMENT,"PPM_PERFSTATE_CHANGE_GUID");
    }
    public static MemorySegment PPM_PERFSTATE_DOMAIN_CHANGE_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$108.PPM_PERFSTATE_DOMAIN_CHANGE_GUID$SEGMENT,"PPM_PERFSTATE_DOMAIN_CHANGE_GUID");
    }
    public static MemorySegment PPM_IDLESTATE_CHANGE_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$108.PPM_IDLESTATE_CHANGE_GUID$SEGMENT,"PPM_IDLESTATE_CHANGE_GUID");
    }
    public static MemorySegment PPM_PERFSTATES_DATA_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$108.PPM_PERFSTATES_DATA_GUID$SEGMENT,"PPM_PERFSTATES_DATA_GUID");
    }
    public static MemorySegment PPM_IDLESTATES_DATA_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$108.PPM_IDLESTATES_DATA_GUID$SEGMENT,"PPM_IDLESTATES_DATA_GUID");
    }
    public static MemorySegment PPM_IDLE_ACCOUNTING_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$109.PPM_IDLE_ACCOUNTING_GUID$SEGMENT,"PPM_IDLE_ACCOUNTING_GUID");
    }
    public static MemorySegment PPM_IDLE_ACCOUNTING_EX_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$109.PPM_IDLE_ACCOUNTING_EX_GUID$SEGMENT,"PPM_IDLE_ACCOUNTING_EX_GUID");
    }
    public static MemorySegment PPM_THERMALCONSTRAINT_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$109.PPM_THERMALCONSTRAINT_GUID$SEGMENT,"PPM_THERMALCONSTRAINT_GUID");
    }
    public static MemorySegment PPM_PERFMON_PERFSTATE_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$109.PPM_PERFMON_PERFSTATE_GUID$SEGMENT,"PPM_PERFMON_PERFSTATE_GUID");
    }
    public static MemorySegment PPM_THERMAL_POLICY_CHANGE_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$109.PPM_THERMAL_POLICY_CHANGE_GUID$SEGMENT,"PPM_THERMAL_POLICY_CHANGE_GUID");
    }
    public static OfAddress PPPM_PERFSTATE_EVENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_PERFSTATE_DOMAIN_EVENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_IDLESTATE_EVENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_THERMALCHANGE_EVENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPPM_THERMAL_POLICY_EVENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOWER_ACTION_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_POWER_LEVEL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_POWER_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESSOR_IDLESTATE_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESSOR_IDLESTATE_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESSOR_POWER_POLICY_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESSOR_POWER_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESSOR_PERFSTATE_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PADMINISTRATOR_POWER_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static int HiberFileBucket1GB() {
        return (int)0L;
    }
    public static int HiberFileBucket2GB() {
        return (int)1L;
    }
    public static int HiberFileBucket4GB() {
        return (int)2L;
    }
    public static int HiberFileBucket8GB() {
        return (int)3L;
    }
    public static int HiberFileBucket16GB() {
        return (int)4L;
    }
    public static int HiberFileBucket32GB() {
        return (int)5L;
    }
    public static int HiberFileBucketUnlimited() {
        return (int)6L;
    }
    public static int HiberFileBucketMax() {
        return (int)7L;
    }
    public static OfAddress PHIBERFILE_BUCKET_SIZE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHIBERFILE_BUCKET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_POWER_CAPABILITIES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_BATTERY_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_DOS_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_OS2_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_VXD_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_FILE_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_DATA_DIRECTORY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_OPTIONAL_HEADER32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_ROM_OPTIONAL_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_OPTIONAL_HEADER64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_OPTIONAL_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_NT_HEADERS64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_NT_HEADERS32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_ROM_HEADERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_NT_HEADERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_SECTION_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_SYMBOL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_SYMBOL_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_AUX_SYMBOL_TOKEN_DEF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_AUX_SYMBOL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_AUX_SYMBOL_EX = Constants$root.C_POINTER$LAYOUT;
    public static int IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF() {
        return (int)1L;
    }
    public static OfAddress PIMAGE_RELOCATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_LINENUMBER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_BASE_RELOCATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_ARCHIVE_MEMBER_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_EXPORT_DIRECTORY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_IMPORT_BY_NAME = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_THUNK_DATA64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_THUNK_DATA32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_TLS_DIRECTORY64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_TLS_DIRECTORY32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_THUNK_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_TLS_DIRECTORY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_IMPORT_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_BOUND_IMPORT_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_BOUND_FORWARDER_REF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_DELAYLOAD_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCIMAGE_DELAYLOAD_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_RESOURCE_DIRECTORY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_RESOURCE_DIRECTORY_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_RESOURCE_DIRECTORY_STRING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_RESOURCE_DIR_STRING_U = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_RESOURCE_DATA_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_LOAD_CONFIG_CODE_INTEGRITY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_DYNAMIC_RELOCATION_TABLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_DYNAMIC_RELOCATION32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_DYNAMIC_RELOCATION64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_DYNAMIC_RELOCATION32_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_DYNAMIC_RELOCATION64_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_DYNAMIC_RELOCATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_DYNAMIC_RELOCATION_V2 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_LOAD_CONFIG_DIRECTORY32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_LOAD_CONFIG_DIRECTORY64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_LOAD_CONFIG_DIRECTORY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_HOT_PATCH_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_HOT_PATCH_BASE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_HOT_PATCH_HASHES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_CE_RUNTIME_FUNCTION_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static int PdataRefToFullXdata() {
        return (int)0L;
    }
    public static int PdataPackedUnwindFunction() {
        return (int)1L;
    }
    public static int PdataPackedUnwindFragment() {
        return (int)2L;
    }
    public static int PdataCrUnchained() {
        return (int)0L;
    }
    public static int PdataCrUnchainedSavedLr() {
        return (int)1L;
    }
    public static int PdataCrChainedWithPac() {
        return (int)2L;
    }
    public static int PdataCrChained() {
        return (int)3L;
    }
    public static OfAddress PIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress _PIMAGE_RUNTIME_FUNCTION_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_RUNTIME_FUNCTION_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_ENCLAVE_CONFIG32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_ENCLAVE_CONFIG64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_ENCLAVE_CONFIG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_ENCLAVE_IMPORT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_DEBUG_DIRECTORY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_COFF_SYMBOLS_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFPO_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_DEBUG_MISC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_FUNCTION_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_FUNCTION_ENTRY64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_SEPARATE_DEBUG_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNON_PAGED_DEBUG_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_ARCHITECTURE_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIMAGE_ARCHITECTURE_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static int IMPORT_OBJECT_CODE() {
        return (int)0L;
    }
    public static int IMPORT_OBJECT_DATA() {
        return (int)1L;
    }
    public static int IMPORT_OBJECT_CONST() {
        return (int)2L;
    }
    public static int IMPORT_OBJECT_ORDINAL() {
        return (int)0L;
    }
    public static int IMPORT_OBJECT_NAME() {
        return (int)1L;
    }
    public static int IMPORT_OBJECT_NAME_NO_PREFIX() {
        return (int)2L;
    }
    public static int IMPORT_OBJECT_NAME_UNDECORATE() {
        return (int)3L;
    }
    public static int IMPORT_OBJECT_NAME_EXPORTAS() {
        return (int)4L;
    }
    public static int COMIMAGE_FLAGS_ILONLY() {
        return (int)1L;
    }
    public static int COMIMAGE_FLAGS_32BITREQUIRED() {
        return (int)2L;
    }
    public static int COMIMAGE_FLAGS_IL_LIBRARY() {
        return (int)4L;
    }
    public static int COMIMAGE_FLAGS_STRONGNAMESIGNED() {
        return (int)8L;
    }
    public static int COMIMAGE_FLAGS_NATIVE_ENTRYPOINT() {
        return (int)16L;
    }
    public static int COMIMAGE_FLAGS_TRACKDEBUGDATA() {
        return (int)65536L;
    }
    public static int COMIMAGE_FLAGS_32BITPREFERRED() {
        return (int)131072L;
    }
    public static int COR_VERSION_MAJOR_V2() {
        return (int)2L;
    }
    public static int COR_VERSION_MAJOR() {
        return (int)2L;
    }
    public static int COR_VERSION_MINOR() {
        return (int)5L;
    }
    public static int COR_DELETED_NAME_LENGTH() {
        return (int)8L;
    }
    public static int COR_VTABLEGAP_NAME_LENGTH() {
        return (int)8L;
    }
    public static int NATIVE_TYPE_MAX_CB() {
        return (int)1L;
    }
    public static int COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE() {
        return (int)255L;
    }
    public static int IMAGE_COR_MIH_METHODRVA() {
        return (int)1L;
    }
    public static int IMAGE_COR_MIH_EHRVA() {
        return (int)2L;
    }
    public static int IMAGE_COR_MIH_BASICBLOCK() {
        return (int)8L;
    }
    public static int COR_VTABLE_32BIT() {
        return (int)1L;
    }
    public static int COR_VTABLE_64BIT() {
        return (int)2L;
    }
    public static int COR_VTABLE_FROM_UNMANAGED() {
        return (int)4L;
    }
    public static int COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN() {
        return (int)8L;
    }
    public static int COR_VTABLE_CALL_MOST_DERIVED() {
        return (int)16L;
    }
    public static int IMAGE_COR_EATJ_THUNK_SIZE() {
        return (int)32L;
    }
    public static int MAX_CLASS_NAME() {
        return (int)1024L;
    }
    public static int MAX_PACKAGE_NAME() {
        return (int)1024L;
    }
    public static OfAddress PIMAGE_COR20_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RtlCaptureStackBackTrace$MH() {
        return RuntimeHelper.requireNonNull(constants$110.RtlCaptureStackBackTrace$MH,"RtlCaptureStackBackTrace");
    }
    public static short RtlCaptureStackBackTrace ( int FramesToSkip,  int FramesToCapture,  Addressable BackTrace,  Addressable BackTraceHash) {
        var mh$ = RuntimeHelper.requireNonNull(constants$110.RtlCaptureStackBackTrace$MH, "RtlCaptureStackBackTrace");
        try {
            return (short)mh$.invokeExact(FramesToSkip, FramesToCapture, BackTrace, BackTraceHash);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlCaptureContext$MH() {
        return RuntimeHelper.requireNonNull(constants$110.RtlCaptureContext$MH,"RtlCaptureContext");
    }
    public static void RtlCaptureContext ( Addressable ContextRecord) {
        var mh$ = RuntimeHelper.requireNonNull(constants$110.RtlCaptureContext$MH, "RtlCaptureContext");
        try {
            mh$.invokeExact(ContextRecord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlCaptureContext2$MH() {
        return RuntimeHelper.requireNonNull(constants$110.RtlCaptureContext2$MH,"RtlCaptureContext2");
    }
    public static void RtlCaptureContext2 ( Addressable ContextRecord) {
        var mh$ = RuntimeHelper.requireNonNull(constants$110.RtlCaptureContext2$MH, "RtlCaptureContext2");
        try {
            mh$.invokeExact(ContextRecord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlUnwind$MH() {
        return RuntimeHelper.requireNonNull(constants$110.RtlUnwind$MH,"RtlUnwind");
    }
    public static void RtlUnwind ( Addressable TargetFrame,  Addressable TargetIp,  Addressable ExceptionRecord,  Addressable ReturnValue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$110.RtlUnwind$MH, "RtlUnwind");
        try {
            mh$.invokeExact(TargetFrame, TargetIp, ExceptionRecord, ReturnValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlAddFunctionTable$MH() {
        return RuntimeHelper.requireNonNull(constants$110.RtlAddFunctionTable$MH,"RtlAddFunctionTable");
    }
    public static byte RtlAddFunctionTable ( Addressable FunctionTable,  int EntryCount,  long BaseAddress) {
        var mh$ = RuntimeHelper.requireNonNull(constants$110.RtlAddFunctionTable$MH, "RtlAddFunctionTable");
        try {
            return (byte)mh$.invokeExact(FunctionTable, EntryCount, BaseAddress);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlDeleteFunctionTable$MH() {
        return RuntimeHelper.requireNonNull(constants$111.RtlDeleteFunctionTable$MH,"RtlDeleteFunctionTable");
    }
    public static byte RtlDeleteFunctionTable ( Addressable FunctionTable) {
        var mh$ = RuntimeHelper.requireNonNull(constants$111.RtlDeleteFunctionTable$MH, "RtlDeleteFunctionTable");
        try {
            return (byte)mh$.invokeExact(FunctionTable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlInstallFunctionTableCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$111.RtlInstallFunctionTableCallback$MH,"RtlInstallFunctionTableCallback");
    }
    public static byte RtlInstallFunctionTableCallback ( long TableIdentifier,  long BaseAddress,  int Length,  Addressable Callback,  Addressable Context,  Addressable OutOfProcessCallbackDll) {
        var mh$ = RuntimeHelper.requireNonNull(constants$111.RtlInstallFunctionTableCallback$MH, "RtlInstallFunctionTableCallback");
        try {
            return (byte)mh$.invokeExact(TableIdentifier, BaseAddress, Length, Callback, Context, OutOfProcessCallbackDll);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlAddGrowableFunctionTable$MH() {
        return RuntimeHelper.requireNonNull(constants$111.RtlAddGrowableFunctionTable$MH,"RtlAddGrowableFunctionTable");
    }
    public static int RtlAddGrowableFunctionTable ( Addressable DynamicTable,  Addressable FunctionTable,  int EntryCount,  int MaximumEntryCount,  long RangeBase,  long RangeEnd) {
        var mh$ = RuntimeHelper.requireNonNull(constants$111.RtlAddGrowableFunctionTable$MH, "RtlAddGrowableFunctionTable");
        try {
            return (int)mh$.invokeExact(DynamicTable, FunctionTable, EntryCount, MaximumEntryCount, RangeBase, RangeEnd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlGrowFunctionTable$MH() {
        return RuntimeHelper.requireNonNull(constants$111.RtlGrowFunctionTable$MH,"RtlGrowFunctionTable");
    }
    public static void RtlGrowFunctionTable ( Addressable DynamicTable,  int NewEntryCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$111.RtlGrowFunctionTable$MH, "RtlGrowFunctionTable");
        try {
            mh$.invokeExact(DynamicTable, NewEntryCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlDeleteGrowableFunctionTable$MH() {
        return RuntimeHelper.requireNonNull(constants$111.RtlDeleteGrowableFunctionTable$MH,"RtlDeleteGrowableFunctionTable");
    }
    public static void RtlDeleteGrowableFunctionTable ( Addressable DynamicTable) {
        var mh$ = RuntimeHelper.requireNonNull(constants$111.RtlDeleteGrowableFunctionTable$MH, "RtlDeleteGrowableFunctionTable");
        try {
            mh$.invokeExact(DynamicTable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlLookupFunctionEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$111.RtlLookupFunctionEntry$MH,"RtlLookupFunctionEntry");
    }
    public static MemoryAddress RtlLookupFunctionEntry ( long ControlPc,  Addressable ImageBase,  Addressable HistoryTable) {
        var mh$ = RuntimeHelper.requireNonNull(constants$111.RtlLookupFunctionEntry$MH, "RtlLookupFunctionEntry");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ControlPc, ImageBase, HistoryTable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlRestoreContext$MH() {
        return RuntimeHelper.requireNonNull(constants$112.RtlRestoreContext$MH,"RtlRestoreContext");
    }
    public static void RtlRestoreContext ( Addressable ContextRecord,  Addressable ExceptionRecord) {
        var mh$ = RuntimeHelper.requireNonNull(constants$112.RtlRestoreContext$MH, "RtlRestoreContext");
        try {
            mh$.invokeExact(ContextRecord, ExceptionRecord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlUnwindEx$MH() {
        return RuntimeHelper.requireNonNull(constants$112.RtlUnwindEx$MH,"RtlUnwindEx");
    }
    public static void RtlUnwindEx ( Addressable TargetFrame,  Addressable TargetIp,  Addressable ExceptionRecord,  Addressable ReturnValue,  Addressable ContextRecord,  Addressable HistoryTable) {
        var mh$ = RuntimeHelper.requireNonNull(constants$112.RtlUnwindEx$MH, "RtlUnwindEx");
        try {
            mh$.invokeExact(TargetFrame, TargetIp, ExceptionRecord, ReturnValue, ContextRecord, HistoryTable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlVirtualUnwind$MH() {
        return RuntimeHelper.requireNonNull(constants$112.RtlVirtualUnwind$MH,"RtlVirtualUnwind");
    }
    public static MemoryAddress RtlVirtualUnwind ( int HandlerType,  long ImageBase,  long ControlPc,  Addressable FunctionEntry,  Addressable ContextRecord,  Addressable HandlerData,  Addressable EstablisherFrame,  Addressable ContextPointers) {
        var mh$ = RuntimeHelper.requireNonNull(constants$112.RtlVirtualUnwind$MH, "RtlVirtualUnwind");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(HandlerType, ImageBase, ControlPc, FunctionEntry, ContextRecord, HandlerData, EstablisherFrame, ContextPointers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlRaiseException$MH() {
        return RuntimeHelper.requireNonNull(constants$112.RtlRaiseException$MH,"RtlRaiseException");
    }
    public static void RtlRaiseException ( Addressable ExceptionRecord) {
        var mh$ = RuntimeHelper.requireNonNull(constants$112.RtlRaiseException$MH, "RtlRaiseException");
        try {
            mh$.invokeExact(ExceptionRecord);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlPcToFileHeader$MH() {
        return RuntimeHelper.requireNonNull(constants$112.RtlPcToFileHeader$MH,"RtlPcToFileHeader");
    }
    public static MemoryAddress RtlPcToFileHeader ( Addressable PcValue,  Addressable BaseOfImage) {
        var mh$ = RuntimeHelper.requireNonNull(constants$112.RtlPcToFileHeader$MH, "RtlPcToFileHeader");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(PcValue, BaseOfImage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlCompareMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$112.RtlCompareMemory$MH,"RtlCompareMemory");
    }
    public static long RtlCompareMemory ( Addressable Source1,  Addressable Source2,  long Length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$112.RtlCompareMemory$MH, "RtlCompareMemory");
        try {
            return (long)mh$.invokeExact(Source1, Source2, Length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PSLIST_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSLIST_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RtlInitializeSListHead$MH() {
        return RuntimeHelper.requireNonNull(constants$113.RtlInitializeSListHead$MH,"RtlInitializeSListHead");
    }
    public static void RtlInitializeSListHead ( Addressable ListHead) {
        var mh$ = RuntimeHelper.requireNonNull(constants$113.RtlInitializeSListHead$MH, "RtlInitializeSListHead");
        try {
            mh$.invokeExact(ListHead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlFirstEntrySList$MH() {
        return RuntimeHelper.requireNonNull(constants$113.RtlFirstEntrySList$MH,"RtlFirstEntrySList");
    }
    public static MemoryAddress RtlFirstEntrySList ( Addressable ListHead) {
        var mh$ = RuntimeHelper.requireNonNull(constants$113.RtlFirstEntrySList$MH, "RtlFirstEntrySList");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ListHead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlInterlockedPopEntrySList$MH() {
        return RuntimeHelper.requireNonNull(constants$113.RtlInterlockedPopEntrySList$MH,"RtlInterlockedPopEntrySList");
    }
    public static MemoryAddress RtlInterlockedPopEntrySList ( Addressable ListHead) {
        var mh$ = RuntimeHelper.requireNonNull(constants$113.RtlInterlockedPopEntrySList$MH, "RtlInterlockedPopEntrySList");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ListHead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlInterlockedPushEntrySList$MH() {
        return RuntimeHelper.requireNonNull(constants$113.RtlInterlockedPushEntrySList$MH,"RtlInterlockedPushEntrySList");
    }
    public static MemoryAddress RtlInterlockedPushEntrySList ( Addressable ListHead,  Addressable ListEntry) {
        var mh$ = RuntimeHelper.requireNonNull(constants$113.RtlInterlockedPushEntrySList$MH, "RtlInterlockedPushEntrySList");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ListHead, ListEntry);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlInterlockedPushListSListEx$MH() {
        return RuntimeHelper.requireNonNull(constants$113.RtlInterlockedPushListSListEx$MH,"RtlInterlockedPushListSListEx");
    }
    public static MemoryAddress RtlInterlockedPushListSListEx ( Addressable ListHead,  Addressable List,  Addressable ListEnd,  int Count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$113.RtlInterlockedPushListSListEx$MH, "RtlInterlockedPushListSListEx");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ListHead, List, ListEnd, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlInterlockedFlushSList$MH() {
        return RuntimeHelper.requireNonNull(constants$113.RtlInterlockedFlushSList$MH,"RtlInterlockedFlushSList");
    }
    public static MemoryAddress RtlInterlockedFlushSList ( Addressable ListHead) {
        var mh$ = RuntimeHelper.requireNonNull(constants$113.RtlInterlockedFlushSList$MH, "RtlInterlockedFlushSList");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ListHead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlQueryDepthSList$MH() {
        return RuntimeHelper.requireNonNull(constants$114.RtlQueryDepthSList$MH,"RtlQueryDepthSList");
    }
    public static short RtlQueryDepthSList ( Addressable ListHead) {
        var mh$ = RuntimeHelper.requireNonNull(constants$114.RtlQueryDepthSList$MH, "RtlQueryDepthSList");
        try {
            return (short)mh$.invokeExact(ListHead);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlGetReturnAddressHijackTarget$MH() {
        return RuntimeHelper.requireNonNull(constants$114.RtlGetReturnAddressHijackTarget$MH,"RtlGetReturnAddressHijackTarget");
    }
    public static long RtlGetReturnAddressHijackTarget () {
        var mh$ = RuntimeHelper.requireNonNull(constants$114.RtlGetReturnAddressHijackTarget$MH, "RtlGetReturnAddressHijackTarget");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PRTL_RUN_ONCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRTL_BARRIER = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle __fastfail$MH() {
        return RuntimeHelper.requireNonNull(constants$114.__fastfail$MH,"__fastfail");
    }
    public static void __fastfail ( int Code) {
        var mh$ = RuntimeHelper.requireNonNull(constants$114.__fastfail$MH, "__fastfail");
        try {
            mh$.invokeExact(Code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HEAP_MAKE_TAG_FLAGS$MH() {
        return RuntimeHelper.requireNonNull(constants$114.HEAP_MAKE_TAG_FLAGS$MH,"HEAP_MAKE_TAG_FLAGS");
    }
    public static int HEAP_MAKE_TAG_FLAGS ( int TagBase,  int Tag) {
        var mh$ = RuntimeHelper.requireNonNull(constants$114.HEAP_MAKE_TAG_FLAGS$MH, "HEAP_MAKE_TAG_FLAGS");
        try {
            return (int)mh$.invokeExact(TagBase, Tag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlSecureZeroMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$114.RtlSecureZeroMemory$MH,"RtlSecureZeroMemory");
    }
    public static MemoryAddress RtlSecureZeroMemory ( Addressable ptr,  long cnt) {
        var mh$ = RuntimeHelper.requireNonNull(constants$114.RtlSecureZeroMemory$MH, "RtlSecureZeroMemory");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ptr, cnt);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PMESSAGE_RESOURCE_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMESSAGE_RESOURCE_BLOCK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMESSAGE_RESOURCE_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POSVERSIONINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOSVERSIONINFOA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POSVERSIONINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOSVERSIONINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRTL_OSVERSIONINFOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POSVERSIONINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOSVERSIONINFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POSVERSIONINFOEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOSVERSIONINFOEXA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POSVERSIONINFOEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOSVERSIONINFOEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRTL_OSVERSIONINFOEXW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POSVERSIONINFOEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOSVERSIONINFOEX = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle VerSetConditionMask$MH() {
        return RuntimeHelper.requireNonNull(constants$114.VerSetConditionMask$MH,"VerSetConditionMask");
    }
    public static long VerSetConditionMask ( long ConditionMask,  int TypeMask,  byte Condition) {
        var mh$ = RuntimeHelper.requireNonNull(constants$114.VerSetConditionMask$MH, "VerSetConditionMask");
        try {
            return (long)mh$.invokeExact(ConditionMask, TypeMask, Condition);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlGetProductInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$115.RtlGetProductInfo$MH,"RtlGetProductInfo");
    }
    public static byte RtlGetProductInfo ( int OSMajorVersion,  int OSMinorVersion,  int SpMajorVersion,  int SpMinorVersion,  Addressable ReturnedProductType) {
        var mh$ = RuntimeHelper.requireNonNull(constants$115.RtlGetProductInfo$MH, "RtlGetProductInfo");
        try {
            return (byte)mh$.invokeExact(OSMajorVersion, OSMinorVersion, SpMajorVersion, SpMinorVersion, ReturnedProductType);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int UmsThreadInvalidInfoClass() {
        return (int)0L;
    }
    public static int UmsThreadUserContext() {
        return (int)1L;
    }
    public static int UmsThreadPriority() {
        return (int)2L;
    }
    public static int UmsThreadAffinity() {
        return (int)3L;
    }
    public static int UmsThreadTeb() {
        return (int)4L;
    }
    public static int UmsThreadIsSuspended() {
        return (int)5L;
    }
    public static int UmsThreadIsTerminated() {
        return (int)6L;
    }
    public static int UmsThreadMaxInfoClass() {
        return (int)7L;
    }
    public static OfAddress PRTL_UMS_THREAD_INFO_CLASS = Constants$root.C_POINTER$LAYOUT;
    public static int UmsSchedulerStartup() {
        return (int)0L;
    }
    public static int UmsSchedulerThreadBlocked() {
        return (int)1L;
    }
    public static int UmsSchedulerThreadYield() {
        return (int)2L;
    }
    public static OfAddress PRTL_UMS_SCHEDULER_REASON = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RtlCrc32$MH() {
        return RuntimeHelper.requireNonNull(constants$115.RtlCrc32$MH,"RtlCrc32");
    }
    public static int RtlCrc32 ( Addressable Buffer,  long Size,  int InitialCrc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$115.RtlCrc32$MH, "RtlCrc32");
        try {
            return (int)mh$.invokeExact(Buffer, Size, InitialCrc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlCrc64$MH() {
        return RuntimeHelper.requireNonNull(constants$116.RtlCrc64$MH,"RtlCrc64");
    }
    public static long RtlCrc64 ( Addressable Buffer,  long Size,  long InitialCrc) {
        var mh$ = RuntimeHelper.requireNonNull(constants$116.RtlCrc64$MH, "RtlCrc64");
        try {
            return (long)mh$.invokeExact(Buffer, Size, InitialCrc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int OS_DEPLOYMENT_STANDARD() {
        return (int)1L;
    }
    public static int OS_DEPLOYMENT_COMPACT() {
        return (int)2L;
    }
    public static MethodHandle RtlOsDeploymentState$MH() {
        return RuntimeHelper.requireNonNull(constants$116.RtlOsDeploymentState$MH,"RtlOsDeploymentState");
    }
    public static int RtlOsDeploymentState ( int Flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$116.RtlOsDeploymentState$MH, "RtlOsDeploymentState");
        try {
            return (int)mh$.invokeExact(Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PNV_MEMORY_RANGE = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RtlGetNonVolatileToken$MH() {
        return RuntimeHelper.requireNonNull(constants$116.RtlGetNonVolatileToken$MH,"RtlGetNonVolatileToken");
    }
    public static int RtlGetNonVolatileToken ( Addressable NvBuffer,  long Size,  Addressable NvToken) {
        var mh$ = RuntimeHelper.requireNonNull(constants$116.RtlGetNonVolatileToken$MH, "RtlGetNonVolatileToken");
        try {
            return (int)mh$.invokeExact(NvBuffer, Size, NvToken);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlFreeNonVolatileToken$MH() {
        return RuntimeHelper.requireNonNull(constants$116.RtlFreeNonVolatileToken$MH,"RtlFreeNonVolatileToken");
    }
    public static int RtlFreeNonVolatileToken ( Addressable NvToken) {
        var mh$ = RuntimeHelper.requireNonNull(constants$116.RtlFreeNonVolatileToken$MH, "RtlFreeNonVolatileToken");
        try {
            return (int)mh$.invokeExact(NvToken);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlFlushNonVolatileMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$116.RtlFlushNonVolatileMemory$MH,"RtlFlushNonVolatileMemory");
    }
    public static int RtlFlushNonVolatileMemory ( Addressable NvToken,  Addressable NvBuffer,  long Size,  int Flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$116.RtlFlushNonVolatileMemory$MH, "RtlFlushNonVolatileMemory");
        try {
            return (int)mh$.invokeExact(NvToken, NvBuffer, Size, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlDrainNonVolatileFlush$MH() {
        return RuntimeHelper.requireNonNull(constants$116.RtlDrainNonVolatileFlush$MH,"RtlDrainNonVolatileFlush");
    }
    public static int RtlDrainNonVolatileFlush ( Addressable NvToken) {
        var mh$ = RuntimeHelper.requireNonNull(constants$116.RtlDrainNonVolatileFlush$MH, "RtlDrainNonVolatileFlush");
        try {
            return (int)mh$.invokeExact(NvToken);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlWriteNonVolatileMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$117.RtlWriteNonVolatileMemory$MH,"RtlWriteNonVolatileMemory");
    }
    public static int RtlWriteNonVolatileMemory ( Addressable NvToken,  Addressable NvDestination,  Addressable Source,  long Size,  int Flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$117.RtlWriteNonVolatileMemory$MH, "RtlWriteNonVolatileMemory");
        try {
            return (int)mh$.invokeExact(NvToken, NvDestination, Source, Size, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlFillNonVolatileMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$117.RtlFillNonVolatileMemory$MH,"RtlFillNonVolatileMemory");
    }
    public static int RtlFillNonVolatileMemory ( Addressable NvToken,  Addressable NvDestination,  long Size,  byte Value,  int Flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$117.RtlFillNonVolatileMemory$MH, "RtlFillNonVolatileMemory");
        try {
            return (int)mh$.invokeExact(NvToken, NvDestination, Size, Value, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlFlushNonVolatileMemoryRanges$MH() {
        return RuntimeHelper.requireNonNull(constants$117.RtlFlushNonVolatileMemoryRanges$MH,"RtlFlushNonVolatileMemoryRanges");
    }
    public static int RtlFlushNonVolatileMemoryRanges ( Addressable NvToken,  Addressable NvRanges,  long NumRanges,  int Flags) {
        var mh$ = RuntimeHelper.requireNonNull(constants$117.RtlFlushNonVolatileMemoryRanges$MH, "RtlFlushNonVolatileMemoryRanges");
        try {
            return (int)mh$.invokeExact(NvToken, NvRanges, NumRanges, Flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCORRELATION_VECTOR = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RtlInitializeCorrelationVector$MH() {
        return RuntimeHelper.requireNonNull(constants$117.RtlInitializeCorrelationVector$MH,"RtlInitializeCorrelationVector");
    }
    public static int RtlInitializeCorrelationVector ( Addressable CorrelationVector,  int Version,  Addressable Guid) {
        var mh$ = RuntimeHelper.requireNonNull(constants$117.RtlInitializeCorrelationVector$MH, "RtlInitializeCorrelationVector");
        try {
            return (int)mh$.invokeExact(CorrelationVector, Version, Guid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlIncrementCorrelationVector$MH() {
        return RuntimeHelper.requireNonNull(constants$117.RtlIncrementCorrelationVector$MH,"RtlIncrementCorrelationVector");
    }
    public static int RtlIncrementCorrelationVector ( Addressable CorrelationVector) {
        var mh$ = RuntimeHelper.requireNonNull(constants$117.RtlIncrementCorrelationVector$MH, "RtlIncrementCorrelationVector");
        try {
            return (int)mh$.invokeExact(CorrelationVector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlExtendCorrelationVector$MH() {
        return RuntimeHelper.requireNonNull(constants$117.RtlExtendCorrelationVector$MH,"RtlExtendCorrelationVector");
    }
    public static int RtlExtendCorrelationVector ( Addressable CorrelationVector) {
        var mh$ = RuntimeHelper.requireNonNull(constants$117.RtlExtendCorrelationVector$MH, "RtlExtendCorrelationVector");
        try {
            return (int)mh$.invokeExact(CorrelationVector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlValidateCorrelationVector$MH() {
        return RuntimeHelper.requireNonNull(constants$118.RtlValidateCorrelationVector$MH,"RtlValidateCorrelationVector");
    }
    public static int RtlValidateCorrelationVector ( Addressable Vector) {
        var mh$ = RuntimeHelper.requireNonNull(constants$118.RtlValidateCorrelationVector$MH, "RtlValidateCorrelationVector");
        try {
            return (int)mh$.invokeExact(Vector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle CUSTOM_SYSTEM_EVENT_TRIGGER_INIT$MH() {
        return RuntimeHelper.requireNonNull(constants$118.CUSTOM_SYSTEM_EVENT_TRIGGER_INIT$MH,"CUSTOM_SYSTEM_EVENT_TRIGGER_INIT");
    }
    public static void CUSTOM_SYSTEM_EVENT_TRIGGER_INIT ( Addressable Config,  Addressable TriggerId) {
        var mh$ = RuntimeHelper.requireNonNull(constants$118.CUSTOM_SYSTEM_EVENT_TRIGGER_INIT$MH, "CUSTOM_SYSTEM_EVENT_TRIGGER_INIT");
        try {
            mh$.invokeExact(Config, TriggerId);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlRaiseCustomSystemEventTrigger$MH() {
        return RuntimeHelper.requireNonNull(constants$118.RtlRaiseCustomSystemEventTrigger$MH,"RtlRaiseCustomSystemEventTrigger");
    }
    public static int RtlRaiseCustomSystemEventTrigger ( Addressable TriggerConfig) {
        var mh$ = RuntimeHelper.requireNonNull(constants$118.RtlRaiseCustomSystemEventTrigger$MH, "RtlRaiseCustomSystemEventTrigger");
        try {
            return (int)mh$.invokeExact(TriggerConfig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int ImagePolicyEntryTypeNone() {
        return (int)0L;
    }
    public static int ImagePolicyEntryTypeBool() {
        return (int)1L;
    }
    public static int ImagePolicyEntryTypeInt8() {
        return (int)2L;
    }
    public static int ImagePolicyEntryTypeUInt8() {
        return (int)3L;
    }
    public static int ImagePolicyEntryTypeInt16() {
        return (int)4L;
    }
    public static int ImagePolicyEntryTypeUInt16() {
        return (int)5L;
    }
    public static int ImagePolicyEntryTypeInt32() {
        return (int)6L;
    }
    public static int ImagePolicyEntryTypeUInt32() {
        return (int)7L;
    }
    public static int ImagePolicyEntryTypeInt64() {
        return (int)8L;
    }
    public static int ImagePolicyEntryTypeUInt64() {
        return (int)9L;
    }
    public static int ImagePolicyEntryTypeAnsiString() {
        return (int)10L;
    }
    public static int ImagePolicyEntryTypeUnicodeString() {
        return (int)11L;
    }
    public static int ImagePolicyEntryTypeOverride() {
        return (int)12L;
    }
    public static int ImagePolicyEntryTypeMaximum() {
        return (int)13L;
    }
    public static int ImagePolicyIdNone() {
        return (int)0L;
    }
    public static int ImagePolicyIdEtw() {
        return (int)1L;
    }
    public static int ImagePolicyIdDebug() {
        return (int)2L;
    }
    public static int ImagePolicyIdCrashDump() {
        return (int)3L;
    }
    public static int ImagePolicyIdCrashDumpKey() {
        return (int)4L;
    }
    public static int ImagePolicyIdCrashDumpKeyGuid() {
        return (int)5L;
    }
    public static int ImagePolicyIdParentSd() {
        return (int)6L;
    }
    public static int ImagePolicyIdParentSdRev() {
        return (int)7L;
    }
    public static int ImagePolicyIdSvn() {
        return (int)8L;
    }
    public static int ImagePolicyIdDeviceId() {
        return (int)9L;
    }
    public static int ImagePolicyIdCapability() {
        return (int)10L;
    }
    public static int ImagePolicyIdScenarioId() {
        return (int)11L;
    }
    public static int ImagePolicyIdMaximum() {
        return (int)12L;
    }
    public static OfAddress PCIMAGE_POLICY_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCIMAGE_POLICY_METADATA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RtlIsZeroMemory$MH() {
        return RuntimeHelper.requireNonNull(constants$118.RtlIsZeroMemory$MH,"RtlIsZeroMemory");
    }
    public static byte RtlIsZeroMemory ( Addressable Buffer,  long Length) {
        var mh$ = RuntimeHelper.requireNonNull(constants$118.RtlIsZeroMemory$MH, "RtlIsZeroMemory");
        try {
            return (byte)mh$.invokeExact(Buffer, Length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlNormalizeSecurityDescriptor$MH() {
        return RuntimeHelper.requireNonNull(constants$118.RtlNormalizeSecurityDescriptor$MH,"RtlNormalizeSecurityDescriptor");
    }
    public static byte RtlNormalizeSecurityDescriptor ( Addressable SecurityDescriptor,  int SecurityDescriptorLength,  Addressable NewSecurityDescriptor,  Addressable NewSecurityDescriptorLength,  byte CheckOnly) {
        var mh$ = RuntimeHelper.requireNonNull(constants$118.RtlNormalizeSecurityDescriptor$MH, "RtlNormalizeSecurityDescriptor");
        try {
            return (byte)mh$.invokeExact(SecurityDescriptor, SecurityDescriptorLength, NewSecurityDescriptor, NewSecurityDescriptorLength, CheckOnly);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PRTL_CRITICAL_SECTION_DEBUG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRTL_RESOURCE_DEBUG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRTL_CRITICAL_SECTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRTL_SRWLOCK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRTL_CONDITION_VARIABLE = Constants$root.C_POINTER$LAYOUT;
    public static int HeapCompatibilityInformation() {
        return (int)0L;
    }
    public static int HeapEnableTerminationOnCorruption() {
        return (int)1L;
    }
    public static int HeapOptimizeResources() {
        return (int)3L;
    }
    public static OfAddress PHEAP_OPTIMIZE_RESOURCES_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static int ActivationContextBasicInformation() {
        return (int)1L;
    }
    public static int ActivationContextDetailedInformation() {
        return (int)2L;
    }
    public static int AssemblyDetailedInformationInActivationContext() {
        return (int)3L;
    }
    public static int FileInformationInAssemblyOfAssemblyInActivationContext() {
        return (int)4L;
    }
    public static int RunlevelInformationInActivationContext() {
        return (int)5L;
    }
    public static int CompatibilityInformationInActivationContext() {
        return (int)6L;
    }
    public static int ActivationContextManifestResourceName() {
        return (int)7L;
    }
    public static int MaxActivationContextInfoClass() {
        return (int)8L;
    }
    public static int AssemblyDetailedInformationInActivationContxt() {
        return (int)3L;
    }
    public static int FileInformationInAssemblyOfAssemblyInActivationContxt() {
        return (int)4L;
    }
    public static OfAddress PACTIVATION_CONTEXT_QUERY_INDEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCACTIVATION_CONTEXT_QUERY_INDEX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PASSEMBLY_FILE_DETAILED_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCASSEMBLY_FILE_DETAILED_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static int ACTCTX_RUN_LEVEL_UNSPECIFIED() {
        return (int)0L;
    }
    public static int ACTCTX_RUN_LEVEL_AS_INVOKER() {
        return (int)1L;
    }
    public static int ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE() {
        return (int)2L;
    }
    public static int ACTCTX_RUN_LEVEL_REQUIRE_ADMIN() {
        return (int)3L;
    }
    public static int ACTCTX_RUN_LEVEL_NUMBERS() {
        return (int)4L;
    }
    public static OfAddress PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN() {
        return (int)0L;
    }
    public static int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS() {
        return (int)1L;
    }
    public static int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION() {
        return (int)2L;
    }
    public static int ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED() {
        return (int)3L;
    }
    public static OfAddress PCOMPATIBILITY_CONTEXT_ELEMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCOMPATIBILITY_CONTEXT_ELEMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSUPPORTED_OS_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMAXVERSIONTESTED_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACTIVATION_CONTEXT_DETAILED_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCACTIVATION_CONTEXT_DETAILED_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHARDWARE_COUNTER_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPERFORMANCE_DATA = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle RtlGetDeviceFamilyInfoEnum$MH() {
        return RuntimeHelper.requireNonNull(constants$121.RtlGetDeviceFamilyInfoEnum$MH,"RtlGetDeviceFamilyInfoEnum");
    }
    public static void RtlGetDeviceFamilyInfoEnum ( Addressable pullUAPInfo,  Addressable pulDeviceFamily,  Addressable pulDeviceForm) {
        var mh$ = RuntimeHelper.requireNonNull(constants$121.RtlGetDeviceFamilyInfoEnum$MH, "RtlGetDeviceFamilyInfoEnum");
        try {
            mh$.invokeExact(pullUAPInfo, pulDeviceFamily, pulDeviceForm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlConvertDeviceFamilyInfoToString$MH() {
        return RuntimeHelper.requireNonNull(constants$121.RtlConvertDeviceFamilyInfoToString$MH,"RtlConvertDeviceFamilyInfoToString");
    }
    public static int RtlConvertDeviceFamilyInfoToString ( Addressable pulDeviceFamilyBufferSize,  Addressable pulDeviceFormBufferSize,  Addressable DeviceFamily,  Addressable DeviceForm) {
        var mh$ = RuntimeHelper.requireNonNull(constants$121.RtlConvertDeviceFamilyInfoToString$MH, "RtlConvertDeviceFamilyInfoToString");
        try {
            return (int)mh$.invokeExact(pulDeviceFamilyBufferSize, pulDeviceFormBufferSize, DeviceFamily, DeviceForm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle RtlSwitchedVVI$MH() {
        return RuntimeHelper.requireNonNull(constants$121.RtlSwitchedVVI$MH,"RtlSwitchedVVI");
    }
    public static int RtlSwitchedVVI ( Addressable VersionInfo,  int TypeMask,  long ConditionMask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$121.RtlSwitchedVVI$MH, "RtlSwitchedVVI");
        try {
            return (int)mh$.invokeExact(VersionInfo, TypeMask, ConditionMask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PEVENTLOGRECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEVENTSFORLOGFILE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPACKEDEVENTINFO = Constants$root.C_POINTER$LAYOUT;
    public static int DriverType() {
        return (int)1L;
    }
    public static int FileSystemType() {
        return (int)2L;
    }
    public static int Win32ServiceOwnProcess() {
        return (int)16L;
    }
    public static int Win32ServiceShareProcess() {
        return (int)32L;
    }
    public static int AdapterType() {
        return (int)4L;
    }
    public static int RecognizerType() {
        return (int)8L;
    }
    public static int BootLoad() {
        return (int)0L;
    }
    public static int SystemLoad() {
        return (int)1L;
    }
    public static int AutoLoad() {
        return (int)2L;
    }
    public static int DemandLoad() {
        return (int)3L;
    }
    public static int DisableLoad() {
        return (int)4L;
    }
    public static int IgnoreError() {
        return (int)0L;
    }
    public static int NormalError() {
        return (int)1L;
    }
    public static int SevereError() {
        return (int)2L;
    }
    public static int CriticalError() {
        return (int)3L;
    }
    public static OfAddress PTAPE_ERASE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_PREPARE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_WRITE_MARKS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_GET_POSITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_SET_POSITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_GET_DRIVE_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_SET_DRIVE_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_GET_MEDIA_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_SET_MEDIA_PARAMETERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_CREATE_PARTITION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTAPE_WMI_OPERATIONS = Constants$root.C_POINTER$LAYOUT;
    public static int TapeDriveProblemNone() {
        return (int)0L;
    }
    public static int TapeDriveReadWriteWarning() {
        return (int)1L;
    }
    public static int TapeDriveReadWriteError() {
        return (int)2L;
    }
    public static int TapeDriveReadWarning() {
        return (int)3L;
    }
    public static int TapeDriveWriteWarning() {
        return (int)4L;
    }
    public static int TapeDriveReadError() {
        return (int)5L;
    }
    public static int TapeDriveWriteError() {
        return (int)6L;
    }
    public static int TapeDriveHardwareError() {
        return (int)7L;
    }
    public static int TapeDriveUnsupportedMedia() {
        return (int)8L;
    }
    public static int TapeDriveScsiConnectionError() {
        return (int)9L;
    }
    public static int TapeDriveTimetoClean() {
        return (int)10L;
    }
    public static int TapeDriveCleanDriveNow() {
        return (int)11L;
    }
    public static int TapeDriveMediaLifeExpired() {
        return (int)12L;
    }
    public static int TapeDriveSnappedTape() {
        return (int)13L;
    }
    public static OfAddress PUOW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRM_PROTOCOL_ID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_NOTIFICATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSAVEPOINT_ID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PKCRM_MARSHAL_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRKCRM_MARSHAL_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PKCRM_TRANSACTION_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRKCRM_TRANSACTION_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PKCRM_PROTOCOL_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRKCRM_PROTOCOL_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static int TransactionOutcomeUndetermined() {
        return (int)1L;
    }
    public static int TransactionOutcomeCommitted() {
        return (int)2L;
    }
    public static int TransactionOutcomeAborted() {
        return (int)3L;
    }
    public static int TransactionStateNormal() {
        return (int)1L;
    }
    public static int TransactionStateIndoubt() {
        return (int)2L;
    }
    public static int TransactionStateCommittedNotify() {
        return (int)3L;
    }
    public static OfAddress PTRANSACTION_BASIC_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTIONMANAGER_BASIC_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTIONMANAGER_LOG_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTIONMANAGER_LOGPATH_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTIONMANAGER_RECOVERY_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTIONMANAGER_OLDEST_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_PROPERTIES_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_BIND_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_ENLISTMENT_PAIR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_ENLISTMENTS_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRESOURCEMANAGER_BASIC_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRESOURCEMANAGER_COMPLETION_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static int TransactionBasicInformation() {
        return (int)0L;
    }
    public static int TransactionPropertiesInformation() {
        return (int)1L;
    }
    public static int TransactionEnlistmentInformation() {
        return (int)2L;
    }
    public static int TransactionSuperiorEnlistmentInformation() {
        return (int)3L;
    }
    public static int TransactionBindInformation() {
        return (int)4L;
    }
    public static int TransactionDTCPrivateInformation() {
        return (int)5L;
    }
    public static int TransactionManagerBasicInformation() {
        return (int)0L;
    }
    public static int TransactionManagerLogInformation() {
        return (int)1L;
    }
    public static int TransactionManagerLogPathInformation() {
        return (int)2L;
    }
    public static int TransactionManagerRecoveryInformation() {
        return (int)4L;
    }
    public static int TransactionManagerOnlineProbeInformation() {
        return (int)3L;
    }
    public static int TransactionManagerOldestTransactionInformation() {
        return (int)5L;
    }
    public static int ResourceManagerBasicInformation() {
        return (int)0L;
    }
    public static int ResourceManagerCompletionInformation() {
        return (int)1L;
    }
    public static OfAddress PENLISTMENT_BASIC_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENLISTMENT_CRM_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static int EnlistmentBasicInformation() {
        return (int)0L;
    }
    public static int EnlistmentRecoveryInformation() {
        return (int)1L;
    }
    public static int EnlistmentCrmInformation() {
        return (int)2L;
    }
    public static OfAddress PTRANSACTION_LIST_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTRANSACTION_LIST_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static int KTMOBJECT_TRANSACTION() {
        return (int)0L;
    }
    public static int KTMOBJECT_TRANSACTION_MANAGER() {
        return (int)1L;
    }
    public static int KTMOBJECT_RESOURCE_MANAGER() {
        return (int)2L;
    }
    public static int KTMOBJECT_ENLISTMENT() {
        return (int)3L;
    }
    public static int KTMOBJECT_INVALID() {
        return (int)4L;
    }
    public static OfAddress PKTMOBJECT_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PKTMOBJECT_CURSOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTP_VERSION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTP_CALLBACK_INSTANCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTP_POOL = Constants$root.C_POINTER$LAYOUT;
    public static int TP_CALLBACK_PRIORITY_HIGH() {
        return (int)0L;
    }
    public static int TP_CALLBACK_PRIORITY_NORMAL() {
        return (int)1L;
    }
    public static int TP_CALLBACK_PRIORITY_LOW() {
        return (int)2L;
    }
    public static int TP_CALLBACK_PRIORITY_INVALID() {
        return (int)3L;
    }
    public static int TP_CALLBACK_PRIORITY_COUNT() {
        return (int)3L;
    }
    public static OfAddress PTP_POOL_STACK_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTP_CLEANUP_GROUP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTP_CALLBACK_ENVIRON = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle TpInitializeCallbackEnviron$MH() {
        return RuntimeHelper.requireNonNull(constants$122.TpInitializeCallbackEnviron$MH,"TpInitializeCallbackEnviron");
    }
    public static void TpInitializeCallbackEnviron ( Addressable CallbackEnviron) {
        var mh$ = RuntimeHelper.requireNonNull(constants$122.TpInitializeCallbackEnviron$MH, "TpInitializeCallbackEnviron");
        try {
            mh$.invokeExact(CallbackEnviron);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackThreadpool$MH() {
        return RuntimeHelper.requireNonNull(constants$122.TpSetCallbackThreadpool$MH,"TpSetCallbackThreadpool");
    }
    public static void TpSetCallbackThreadpool ( Addressable CallbackEnviron,  Addressable Pool) {
        var mh$ = RuntimeHelper.requireNonNull(constants$122.TpSetCallbackThreadpool$MH, "TpSetCallbackThreadpool");
        try {
            mh$.invokeExact(CallbackEnviron, Pool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackCleanupGroup$MH() {
        return RuntimeHelper.requireNonNull(constants$123.TpSetCallbackCleanupGroup$MH,"TpSetCallbackCleanupGroup");
    }
    public static void TpSetCallbackCleanupGroup ( Addressable CallbackEnviron,  Addressable CleanupGroup,  Addressable CleanupGroupCancelCallback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$123.TpSetCallbackCleanupGroup$MH, "TpSetCallbackCleanupGroup");
        try {
            mh$.invokeExact(CallbackEnviron, CleanupGroup, CleanupGroupCancelCallback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackActivationContext$MH() {
        return RuntimeHelper.requireNonNull(constants$123.TpSetCallbackActivationContext$MH,"TpSetCallbackActivationContext");
    }
    public static void TpSetCallbackActivationContext ( Addressable CallbackEnviron,  Addressable ActivationContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$123.TpSetCallbackActivationContext$MH, "TpSetCallbackActivationContext");
        try {
            mh$.invokeExact(CallbackEnviron, ActivationContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackNoActivationContext$MH() {
        return RuntimeHelper.requireNonNull(constants$123.TpSetCallbackNoActivationContext$MH,"TpSetCallbackNoActivationContext");
    }
    public static void TpSetCallbackNoActivationContext ( Addressable CallbackEnviron) {
        var mh$ = RuntimeHelper.requireNonNull(constants$123.TpSetCallbackNoActivationContext$MH, "TpSetCallbackNoActivationContext");
        try {
            mh$.invokeExact(CallbackEnviron);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackLongFunction$MH() {
        return RuntimeHelper.requireNonNull(constants$123.TpSetCallbackLongFunction$MH,"TpSetCallbackLongFunction");
    }
    public static void TpSetCallbackLongFunction ( Addressable CallbackEnviron) {
        var mh$ = RuntimeHelper.requireNonNull(constants$123.TpSetCallbackLongFunction$MH, "TpSetCallbackLongFunction");
        try {
            mh$.invokeExact(CallbackEnviron);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackRaceWithDll$MH() {
        return RuntimeHelper.requireNonNull(constants$123.TpSetCallbackRaceWithDll$MH,"TpSetCallbackRaceWithDll");
    }
    public static void TpSetCallbackRaceWithDll ( Addressable CallbackEnviron,  Addressable DllHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$123.TpSetCallbackRaceWithDll$MH, "TpSetCallbackRaceWithDll");
        try {
            mh$.invokeExact(CallbackEnviron, DllHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackFinalizationCallback$MH() {
        return RuntimeHelper.requireNonNull(constants$123.TpSetCallbackFinalizationCallback$MH,"TpSetCallbackFinalizationCallback");
    }
    public static void TpSetCallbackFinalizationCallback ( Addressable CallbackEnviron,  Addressable FinalizationCallback) {
        var mh$ = RuntimeHelper.requireNonNull(constants$123.TpSetCallbackFinalizationCallback$MH, "TpSetCallbackFinalizationCallback");
        try {
            mh$.invokeExact(CallbackEnviron, FinalizationCallback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackPriority$MH() {
        return RuntimeHelper.requireNonNull(constants$124.TpSetCallbackPriority$MH,"TpSetCallbackPriority");
    }
    public static void TpSetCallbackPriority ( Addressable CallbackEnviron,  int Priority) {
        var mh$ = RuntimeHelper.requireNonNull(constants$124.TpSetCallbackPriority$MH, "TpSetCallbackPriority");
        try {
            mh$.invokeExact(CallbackEnviron, Priority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpSetCallbackPersistent$MH() {
        return RuntimeHelper.requireNonNull(constants$124.TpSetCallbackPersistent$MH,"TpSetCallbackPersistent");
    }
    public static void TpSetCallbackPersistent ( Addressable CallbackEnviron) {
        var mh$ = RuntimeHelper.requireNonNull(constants$124.TpSetCallbackPersistent$MH, "TpSetCallbackPersistent");
        try {
            mh$.invokeExact(CallbackEnviron);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle TpDestroyCallbackEnviron$MH() {
        return RuntimeHelper.requireNonNull(constants$124.TpDestroyCallbackEnviron$MH,"TpDestroyCallbackEnviron");
    }
    public static void TpDestroyCallbackEnviron ( Addressable CallbackEnviron) {
        var mh$ = RuntimeHelper.requireNonNull(constants$124.TpDestroyCallbackEnviron$MH, "TpDestroyCallbackEnviron");
        try {
            mh$.invokeExact(CallbackEnviron);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PTP_WORK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTP_TIMER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTP_WAIT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTP_IO = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle NtCurrentTeb$MH() {
        return RuntimeHelper.requireNonNull(constants$125.NtCurrentTeb$MH,"NtCurrentTeb");
    }
    public static MemoryAddress NtCurrentTeb () {
        var mh$ = RuntimeHelper.requireNonNull(constants$125.NtCurrentTeb$MH, "NtCurrentTeb");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCurrentFiber$MH() {
        return RuntimeHelper.requireNonNull(constants$125.GetCurrentFiber$MH,"GetCurrentFiber");
    }
    public static MemoryAddress GetCurrentFiber () {
        var mh$ = RuntimeHelper.requireNonNull(constants$125.GetCurrentFiber$MH, "GetCurrentFiber");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetFiberData$MH() {
        return RuntimeHelper.requireNonNull(constants$125.GetFiberData$MH,"GetFiberData");
    }
    public static MemoryAddress GetFiberData () {
        var mh$ = RuntimeHelper.requireNonNull(constants$125.GetFiberData$MH, "GetFiberData");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong LPARAM = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong LRESULT = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress SPHANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPHANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HGLOBAL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HLOCAL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GLOBALHANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LOCALHANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HKEY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHKEY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HMETAFILE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HINSTANCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HMODULE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HRGN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HRSRC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HSPRITE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HLSURF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HTASK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HWINSTA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HKL = Constants$root.C_POINTER$LAYOUT;
    public static OfInt HFILE = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PFILETIME = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPFILETIME = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HWND = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HHOOK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HGDIOBJ = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HACCEL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HBITMAP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HBRUSH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HCOLORSPACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HDC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HGLRC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HDESK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HENHMETAFILE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HFONT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HICON = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HMENU = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HPALETTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HPEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HWINEVENTHOOK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HMONITOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HUMPD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HCURSOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCOLORREF = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPRECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCRECT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRECTL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRECTL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCRECTL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPPOINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPOINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOINTL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSIZE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSIZE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSIZEL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSIZEL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPOINTS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPOINTS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress DPI_AWARENESS_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static int DPI_AWARENESS_INVALID() {
        return (int)-1L;
    }
    public static int DPI_AWARENESS_UNAWARE() {
        return (int)0L;
    }
    public static int DPI_AWARENESS_SYSTEM_AWARE() {
        return (int)1L;
    }
    public static int DPI_AWARENESS_PER_MONITOR_AWARE() {
        return (int)2L;
    }
    public static int DPI_HOSTING_BEHAVIOR_INVALID() {
        return (int)-1L;
    }
    public static int DPI_HOSTING_BEHAVIOR_DEFAULT() {
        return (int)0L;
    }
    public static int DPI_HOSTING_BEHAVIOR_MIXED() {
        return (int)1L;
    }
    public static OfAddress PSECURITY_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSECURITY_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOVERLAPPED = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOVERLAPPED_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEMTIME = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSYSTEMTIME = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWIN32_FIND_DATAA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWIN32_FIND_DATAA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWIN32_FIND_DATAW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWIN32_FIND_DATAW = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWIN32_FIND_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWIN32_FIND_DATA = Constants$root.C_POINTER$LAYOUT;
    public static int FindExInfoStandard() {
        return (int)0L;
    }
    public static int FindExInfoBasic() {
        return (int)1L;
    }
    public static int FindExInfoMaxInfoLevel() {
        return (int)2L;
    }
    public static int FindExSearchNameMatch() {
        return (int)0L;
    }
    public static int FindExSearchLimitToDirectories() {
        return (int)1L;
    }
    public static int FindExSearchLimitToDevices() {
        return (int)2L;
    }
    public static int FindExSearchMaxSearchOp() {
        return (int)3L;
    }
    public static int ReadDirectoryNotifyInformation() {
        return (int)1L;
    }
    public static int ReadDirectoryNotifyExtendedInformation() {
        return (int)2L;
    }
    public static OfAddress PREAD_DIRECTORY_NOTIFY_INFORMATION_CLASS = Constants$root.C_POINTER$LAYOUT;
    public static int GetFileExInfoStandard() {
        return (int)0L;
    }
    public static int GetFileExMaxInfoLevel() {
        return (int)1L;
    }
    public static int FileBasicInfo() {
        return (int)0L;
    }
    public static int FileStandardInfo() {
        return (int)1L;
    }
    public static int FileNameInfo() {
        return (int)2L;
    }
    public static int FileRenameInfo() {
        return (int)3L;
    }
    public static int FileDispositionInfo() {
        return (int)4L;
    }
    public static int FileAllocationInfo() {
        return (int)5L;
    }
    public static int FileEndOfFileInfo() {
        return (int)6L;
    }
    public static int FileStreamInfo() {
        return (int)7L;
    }
    public static int FileCompressionInfo() {
        return (int)8L;
    }
    public static int FileAttributeTagInfo() {
        return (int)9L;
    }
    public static int FileIdBothDirectoryInfo() {
        return (int)10L;
    }
    public static int FileIdBothDirectoryRestartInfo() {
        return (int)11L;
    }
    public static int FileIoPriorityHintInfo() {
        return (int)12L;
    }
    public static int FileRemoteProtocolInfo() {
        return (int)13L;
    }
    public static int FileFullDirectoryInfo() {
        return (int)14L;
    }
    public static int FileFullDirectoryRestartInfo() {
        return (int)15L;
    }
    public static int FileStorageInfo() {
        return (int)16L;
    }
    public static int FileAlignmentInfo() {
        return (int)17L;
    }
    public static int FileIdInfo() {
        return (int)18L;
    }
    public static int FileIdExtdDirectoryInfo() {
        return (int)19L;
    }
    public static int FileIdExtdDirectoryRestartInfo() {
        return (int)20L;
    }
    public static int FileDispositionInfoEx() {
        return (int)21L;
    }
    public static int FileRenameInfoEx() {
        return (int)22L;
    }
    public static int FileCaseSensitiveInfo() {
        return (int)23L;
    }
    public static int FileNormalizedNameInfo() {
        return (int)24L;
    }
    public static int MaximumFileInfoByHandleClass() {
        return (int)25L;
    }
    public static OfAddress PFILE_INFO_BY_HANDLE_CLASS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRITICAL_SECTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCRITICAL_SECTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCRITICAL_SECTION_DEBUG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCRITICAL_SECTION_DEBUG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPPROCESS_HEAP_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_HEAP_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREASON_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPEXCEPTION_DEBUG_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCREATE_THREAD_DEBUG_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCREATE_PROCESS_DEBUG_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPEXIT_THREAD_DEBUG_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPEXIT_PROCESS_DEBUG_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLOAD_DLL_DEBUG_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPUNLOAD_DLL_DEBUG_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPOUTPUT_DEBUG_STRING_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPRIP_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDEBUG_EVENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle IsApiSetImplemented$MH() {
        return RuntimeHelper.requireNonNull(constants$128.IsApiSetImplemented$MH,"IsApiSetImplemented");
    }
    public static int IsApiSetImplemented ( Addressable Contract) {
        var mh$ = RuntimeHelper.requireNonNull(constants$128.IsApiSetImplemented$MH, "IsApiSetImplemented");
        try {
            return (int)mh$.invokeExact(Contract);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetEnvironmentStringsW$MH() {
        return RuntimeHelper.requireNonNull(constants$128.SetEnvironmentStringsW$MH,"SetEnvironmentStringsW");
    }
    public static int SetEnvironmentStringsW ( Addressable NewEnvironment) {
        var mh$ = RuntimeHelper.requireNonNull(constants$128.SetEnvironmentStringsW$MH, "SetEnvironmentStringsW");
        try {
            return (int)mh$.invokeExact(NewEnvironment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetStdHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$129.GetStdHandle$MH,"GetStdHandle");
    }
    public static MemoryAddress GetStdHandle ( int nStdHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$129.GetStdHandle$MH, "GetStdHandle");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(nStdHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetStdHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$129.SetStdHandle$MH,"SetStdHandle");
    }
    public static int SetStdHandle ( int nStdHandle,  Addressable hHandle) {
        var mh$ = RuntimeHelper.requireNonNull(constants$129.SetStdHandle$MH, "SetStdHandle");
        try {
            return (int)mh$.invokeExact(nStdHandle, hHandle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle SetStdHandleEx$MH() {
        return RuntimeHelper.requireNonNull(constants$129.SetStdHandleEx$MH,"SetStdHandleEx");
    }
    public static int SetStdHandleEx ( int nStdHandle,  Addressable hHandle,  Addressable phPrevValue) {
        var mh$ = RuntimeHelper.requireNonNull(constants$129.SetStdHandleEx$MH, "SetStdHandleEx");
        try {
            return (int)mh$.invokeExact(nStdHandle, hHandle, phPrevValue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCommandLineA$MH() {
        return RuntimeHelper.requireNonNull(constants$129.GetCommandLineA$MH,"GetCommandLineA");
    }
    public static MemoryAddress GetCommandLineA () {
        var mh$ = RuntimeHelper.requireNonNull(constants$129.GetCommandLineA$MH, "GetCommandLineA");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle GetCommandLineW$MH() {
        return RuntimeHelper.requireNonNull(constants$129.GetCommandLineW$MH,"GetCommandLineW");
    }
    public static MemoryAddress GetCommandLineW () {
        var mh$ = RuntimeHelper.requireNonNull(constants$129.GetCommandLineW$MH, "GetCommandLineW");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


