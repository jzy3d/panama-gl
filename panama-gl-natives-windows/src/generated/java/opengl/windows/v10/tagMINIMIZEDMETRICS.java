// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class tagMINIMIZEDMETRICS {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cbSize"),
        Constants$root.C_LONG$LAYOUT.withName("iWidth"),
        Constants$root.C_LONG$LAYOUT.withName("iHorzGap"),
        Constants$root.C_LONG$LAYOUT.withName("iVertGap"),
        Constants$root.C_LONG$LAYOUT.withName("iArrange")
    ).withName("tagMINIMIZEDMETRICS");
    public static MemoryLayout $LAYOUT() {
        return tagMINIMIZEDMETRICS.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return tagMINIMIZEDMETRICS.cbSize$VH;
    }
    public static int cbSize$get(MemorySegment seg) {
        return (int)tagMINIMIZEDMETRICS.cbSize$VH.get(seg);
    }
    public static void cbSize$set( MemorySegment seg, int x) {
        tagMINIMIZEDMETRICS.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)tagMINIMIZEDMETRICS.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        tagMINIMIZEDMETRICS.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iWidth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("iWidth"));
    public static VarHandle iWidth$VH() {
        return tagMINIMIZEDMETRICS.iWidth$VH;
    }
    public static int iWidth$get(MemorySegment seg) {
        return (int)tagMINIMIZEDMETRICS.iWidth$VH.get(seg);
    }
    public static void iWidth$set( MemorySegment seg, int x) {
        tagMINIMIZEDMETRICS.iWidth$VH.set(seg, x);
    }
    public static int iWidth$get(MemorySegment seg, long index) {
        return (int)tagMINIMIZEDMETRICS.iWidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iWidth$set(MemorySegment seg, long index, int x) {
        tagMINIMIZEDMETRICS.iWidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iHorzGap$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("iHorzGap"));
    public static VarHandle iHorzGap$VH() {
        return tagMINIMIZEDMETRICS.iHorzGap$VH;
    }
    public static int iHorzGap$get(MemorySegment seg) {
        return (int)tagMINIMIZEDMETRICS.iHorzGap$VH.get(seg);
    }
    public static void iHorzGap$set( MemorySegment seg, int x) {
        tagMINIMIZEDMETRICS.iHorzGap$VH.set(seg, x);
    }
    public static int iHorzGap$get(MemorySegment seg, long index) {
        return (int)tagMINIMIZEDMETRICS.iHorzGap$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iHorzGap$set(MemorySegment seg, long index, int x) {
        tagMINIMIZEDMETRICS.iHorzGap$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iVertGap$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("iVertGap"));
    public static VarHandle iVertGap$VH() {
        return tagMINIMIZEDMETRICS.iVertGap$VH;
    }
    public static int iVertGap$get(MemorySegment seg) {
        return (int)tagMINIMIZEDMETRICS.iVertGap$VH.get(seg);
    }
    public static void iVertGap$set( MemorySegment seg, int x) {
        tagMINIMIZEDMETRICS.iVertGap$VH.set(seg, x);
    }
    public static int iVertGap$get(MemorySegment seg, long index) {
        return (int)tagMINIMIZEDMETRICS.iVertGap$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iVertGap$set(MemorySegment seg, long index, int x) {
        tagMINIMIZEDMETRICS.iVertGap$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle iArrange$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("iArrange"));
    public static VarHandle iArrange$VH() {
        return tagMINIMIZEDMETRICS.iArrange$VH;
    }
    public static int iArrange$get(MemorySegment seg) {
        return (int)tagMINIMIZEDMETRICS.iArrange$VH.get(seg);
    }
    public static void iArrange$set( MemorySegment seg, int x) {
        tagMINIMIZEDMETRICS.iArrange$VH.set(seg, x);
    }
    public static int iArrange$get(MemorySegment seg, long index) {
        return (int)tagMINIMIZEDMETRICS.iArrange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void iArrange$set(MemorySegment seg, long index, int x) {
        tagMINIMIZEDMETRICS.iArrange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


