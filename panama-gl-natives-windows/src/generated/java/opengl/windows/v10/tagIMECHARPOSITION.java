// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class tagIMECHARPOSITION {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("dwSize"),
        Constants$root.C_LONG$LAYOUT.withName("dwCharPos"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("x"),
            Constants$root.C_LONG$LAYOUT.withName("y")
        ).withName("pt"),
        Constants$root.C_LONG$LAYOUT.withName("cLineHeight"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("left"),
            Constants$root.C_LONG$LAYOUT.withName("top"),
            Constants$root.C_LONG$LAYOUT.withName("right"),
            Constants$root.C_LONG$LAYOUT.withName("bottom")
        ).withName("rcDocument")
    ).withName("tagIMECHARPOSITION");
    public static MemoryLayout $LAYOUT() {
        return tagIMECHARPOSITION.$struct$LAYOUT;
    }
    static final VarHandle dwSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwSize"));
    public static VarHandle dwSize$VH() {
        return tagIMECHARPOSITION.dwSize$VH;
    }
    public static int dwSize$get(MemorySegment seg) {
        return (int)tagIMECHARPOSITION.dwSize$VH.get(seg);
    }
    public static void dwSize$set( MemorySegment seg, int x) {
        tagIMECHARPOSITION.dwSize$VH.set(seg, x);
    }
    public static int dwSize$get(MemorySegment seg, long index) {
        return (int)tagIMECHARPOSITION.dwSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwSize$set(MemorySegment seg, long index, int x) {
        tagIMECHARPOSITION.dwSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwCharPos$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwCharPos"));
    public static VarHandle dwCharPos$VH() {
        return tagIMECHARPOSITION.dwCharPos$VH;
    }
    public static int dwCharPos$get(MemorySegment seg) {
        return (int)tagIMECHARPOSITION.dwCharPos$VH.get(seg);
    }
    public static void dwCharPos$set( MemorySegment seg, int x) {
        tagIMECHARPOSITION.dwCharPos$VH.set(seg, x);
    }
    public static int dwCharPos$get(MemorySegment seg, long index) {
        return (int)tagIMECHARPOSITION.dwCharPos$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwCharPos$set(MemorySegment seg, long index, int x) {
        tagIMECHARPOSITION.dwCharPos$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment pt$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    static final VarHandle cLineHeight$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cLineHeight"));
    public static VarHandle cLineHeight$VH() {
        return tagIMECHARPOSITION.cLineHeight$VH;
    }
    public static int cLineHeight$get(MemorySegment seg) {
        return (int)tagIMECHARPOSITION.cLineHeight$VH.get(seg);
    }
    public static void cLineHeight$set( MemorySegment seg, int x) {
        tagIMECHARPOSITION.cLineHeight$VH.set(seg, x);
    }
    public static int cLineHeight$get(MemorySegment seg, long index) {
        return (int)tagIMECHARPOSITION.cLineHeight$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cLineHeight$set(MemorySegment seg, long index, int x) {
        tagIMECHARPOSITION.cLineHeight$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment rcDocument$slice(MemorySegment seg) {
        return seg.asSlice(20, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


