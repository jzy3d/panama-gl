// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _MAT2 {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("fract"),
            Constants$root.C_SHORT$LAYOUT.withName("value")
        ).withName("eM11"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("fract"),
            Constants$root.C_SHORT$LAYOUT.withName("value")
        ).withName("eM12"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("fract"),
            Constants$root.C_SHORT$LAYOUT.withName("value")
        ).withName("eM21"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("fract"),
            Constants$root.C_SHORT$LAYOUT.withName("value")
        ).withName("eM22")
    ).withName("_MAT2");
    public static MemoryLayout $LAYOUT() {
        return _MAT2.$struct$LAYOUT;
    }
    public static MemorySegment eM11$slice(MemorySegment seg) {
        return seg.asSlice(0, 4);
    }
    public static MemorySegment eM12$slice(MemorySegment seg) {
        return seg.asSlice(4, 4);
    }
    public static MemorySegment eM21$slice(MemorySegment seg) {
        return seg.asSlice(8, 4);
    }
    public static MemorySegment eM22$slice(MemorySegment seg) {
        return seg.asSlice(12, 4);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


