// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _PROCESS_INFORMATION {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("hProcess"),
        Constants$root.C_POINTER$LAYOUT.withName("hThread"),
        Constants$root.C_LONG$LAYOUT.withName("dwProcessId"),
        Constants$root.C_LONG$LAYOUT.withName("dwThreadId")
    ).withName("_PROCESS_INFORMATION");
    public static MemoryLayout $LAYOUT() {
        return _PROCESS_INFORMATION.$struct$LAYOUT;
    }
    static final VarHandle hProcess$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hProcess"));
    public static VarHandle hProcess$VH() {
        return _PROCESS_INFORMATION.hProcess$VH;
    }
    public static MemoryAddress hProcess$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PROCESS_INFORMATION.hProcess$VH.get(seg);
    }
    public static void hProcess$set( MemorySegment seg, MemoryAddress x) {
        _PROCESS_INFORMATION.hProcess$VH.set(seg, x);
    }
    public static MemoryAddress hProcess$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PROCESS_INFORMATION.hProcess$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hProcess$set(MemorySegment seg, long index, MemoryAddress x) {
        _PROCESS_INFORMATION.hProcess$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hThread$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hThread"));
    public static VarHandle hThread$VH() {
        return _PROCESS_INFORMATION.hThread$VH;
    }
    public static MemoryAddress hThread$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_PROCESS_INFORMATION.hThread$VH.get(seg);
    }
    public static void hThread$set( MemorySegment seg, MemoryAddress x) {
        _PROCESS_INFORMATION.hThread$VH.set(seg, x);
    }
    public static MemoryAddress hThread$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_PROCESS_INFORMATION.hThread$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hThread$set(MemorySegment seg, long index, MemoryAddress x) {
        _PROCESS_INFORMATION.hThread$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwProcessId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwProcessId"));
    public static VarHandle dwProcessId$VH() {
        return _PROCESS_INFORMATION.dwProcessId$VH;
    }
    public static int dwProcessId$get(MemorySegment seg) {
        return (int)_PROCESS_INFORMATION.dwProcessId$VH.get(seg);
    }
    public static void dwProcessId$set( MemorySegment seg, int x) {
        _PROCESS_INFORMATION.dwProcessId$VH.set(seg, x);
    }
    public static int dwProcessId$get(MemorySegment seg, long index) {
        return (int)_PROCESS_INFORMATION.dwProcessId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwProcessId$set(MemorySegment seg, long index, int x) {
        _PROCESS_INFORMATION.dwProcessId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwThreadId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwThreadId"));
    public static VarHandle dwThreadId$VH() {
        return _PROCESS_INFORMATION.dwThreadId$VH;
    }
    public static int dwThreadId$get(MemorySegment seg) {
        return (int)_PROCESS_INFORMATION.dwThreadId$VH.get(seg);
    }
    public static void dwThreadId$set( MemorySegment seg, int x) {
        _PROCESS_INFORMATION.dwThreadId$VH.set(seg, x);
    }
    public static int dwThreadId$get(MemorySegment seg, long index) {
        return (int)_PROCESS_INFORMATION.dwThreadId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwThreadId$set(MemorySegment seg, long index, int x) {
        _PROCESS_INFORMATION.dwThreadId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


