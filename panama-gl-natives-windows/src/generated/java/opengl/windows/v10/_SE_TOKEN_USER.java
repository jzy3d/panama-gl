// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _SE_TOKEN_USER {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_POINTER$LAYOUT.withName("Sid"),
                    Constants$root.C_LONG$LAYOUT.withName("Attributes"),
                    MemoryLayout.paddingLayout(32)
                ).withName("User")
            ).withName("TokenUser"),
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("Sid"),
                Constants$root.C_LONG$LAYOUT.withName("Attributes"),
                MemoryLayout.paddingLayout(32)
            ).withName("User")
        ).withName("$anon$0"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("Revision"),
                Constants$root.C_CHAR$LAYOUT.withName("SubAuthorityCount"),
                MemoryLayout.structLayout(
                    MemoryLayout.sequenceLayout(6, Constants$root.C_CHAR$LAYOUT).withName("Value")
                ).withName("IdentifierAuthority"),
                MemoryLayout.sequenceLayout(1, Constants$root.C_LONG$LAYOUT).withName("SubAuthority")
            ).withName("Sid"),
            MemoryLayout.sequenceLayout(68, Constants$root.C_CHAR$LAYOUT).withName("Buffer")
        ).withName("$anon$1"),
        MemoryLayout.paddingLayout(32)
    ).withName("_SE_TOKEN_USER");
    public static MemoryLayout $LAYOUT() {
        return _SE_TOKEN_USER.$struct$LAYOUT;
    }
    public static MemorySegment TokenUser$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment User$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment Sid$slice(MemorySegment seg) {
        return seg.asSlice(16, 12);
    }
    public static MemorySegment Buffer$slice(MemorySegment seg) {
        return seg.asSlice(16, 68);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


