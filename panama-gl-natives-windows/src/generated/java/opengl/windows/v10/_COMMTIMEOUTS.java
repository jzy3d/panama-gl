// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _COMMTIMEOUTS {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("ReadIntervalTimeout"),
        Constants$root.C_LONG$LAYOUT.withName("ReadTotalTimeoutMultiplier"),
        Constants$root.C_LONG$LAYOUT.withName("ReadTotalTimeoutConstant"),
        Constants$root.C_LONG$LAYOUT.withName("WriteTotalTimeoutMultiplier"),
        Constants$root.C_LONG$LAYOUT.withName("WriteTotalTimeoutConstant")
    ).withName("_COMMTIMEOUTS");
    public static MemoryLayout $LAYOUT() {
        return _COMMTIMEOUTS.$struct$LAYOUT;
    }
    static final VarHandle ReadIntervalTimeout$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReadIntervalTimeout"));
    public static VarHandle ReadIntervalTimeout$VH() {
        return _COMMTIMEOUTS.ReadIntervalTimeout$VH;
    }
    public static int ReadIntervalTimeout$get(MemorySegment seg) {
        return (int)_COMMTIMEOUTS.ReadIntervalTimeout$VH.get(seg);
    }
    public static void ReadIntervalTimeout$set( MemorySegment seg, int x) {
        _COMMTIMEOUTS.ReadIntervalTimeout$VH.set(seg, x);
    }
    public static int ReadIntervalTimeout$get(MemorySegment seg, long index) {
        return (int)_COMMTIMEOUTS.ReadIntervalTimeout$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReadIntervalTimeout$set(MemorySegment seg, long index, int x) {
        _COMMTIMEOUTS.ReadIntervalTimeout$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ReadTotalTimeoutMultiplier$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReadTotalTimeoutMultiplier"));
    public static VarHandle ReadTotalTimeoutMultiplier$VH() {
        return _COMMTIMEOUTS.ReadTotalTimeoutMultiplier$VH;
    }
    public static int ReadTotalTimeoutMultiplier$get(MemorySegment seg) {
        return (int)_COMMTIMEOUTS.ReadTotalTimeoutMultiplier$VH.get(seg);
    }
    public static void ReadTotalTimeoutMultiplier$set( MemorySegment seg, int x) {
        _COMMTIMEOUTS.ReadTotalTimeoutMultiplier$VH.set(seg, x);
    }
    public static int ReadTotalTimeoutMultiplier$get(MemorySegment seg, long index) {
        return (int)_COMMTIMEOUTS.ReadTotalTimeoutMultiplier$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReadTotalTimeoutMultiplier$set(MemorySegment seg, long index, int x) {
        _COMMTIMEOUTS.ReadTotalTimeoutMultiplier$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ReadTotalTimeoutConstant$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ReadTotalTimeoutConstant"));
    public static VarHandle ReadTotalTimeoutConstant$VH() {
        return _COMMTIMEOUTS.ReadTotalTimeoutConstant$VH;
    }
    public static int ReadTotalTimeoutConstant$get(MemorySegment seg) {
        return (int)_COMMTIMEOUTS.ReadTotalTimeoutConstant$VH.get(seg);
    }
    public static void ReadTotalTimeoutConstant$set( MemorySegment seg, int x) {
        _COMMTIMEOUTS.ReadTotalTimeoutConstant$VH.set(seg, x);
    }
    public static int ReadTotalTimeoutConstant$get(MemorySegment seg, long index) {
        return (int)_COMMTIMEOUTS.ReadTotalTimeoutConstant$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ReadTotalTimeoutConstant$set(MemorySegment seg, long index, int x) {
        _COMMTIMEOUTS.ReadTotalTimeoutConstant$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle WriteTotalTimeoutMultiplier$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("WriteTotalTimeoutMultiplier"));
    public static VarHandle WriteTotalTimeoutMultiplier$VH() {
        return _COMMTIMEOUTS.WriteTotalTimeoutMultiplier$VH;
    }
    public static int WriteTotalTimeoutMultiplier$get(MemorySegment seg) {
        return (int)_COMMTIMEOUTS.WriteTotalTimeoutMultiplier$VH.get(seg);
    }
    public static void WriteTotalTimeoutMultiplier$set( MemorySegment seg, int x) {
        _COMMTIMEOUTS.WriteTotalTimeoutMultiplier$VH.set(seg, x);
    }
    public static int WriteTotalTimeoutMultiplier$get(MemorySegment seg, long index) {
        return (int)_COMMTIMEOUTS.WriteTotalTimeoutMultiplier$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void WriteTotalTimeoutMultiplier$set(MemorySegment seg, long index, int x) {
        _COMMTIMEOUTS.WriteTotalTimeoutMultiplier$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle WriteTotalTimeoutConstant$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("WriteTotalTimeoutConstant"));
    public static VarHandle WriteTotalTimeoutConstant$VH() {
        return _COMMTIMEOUTS.WriteTotalTimeoutConstant$VH;
    }
    public static int WriteTotalTimeoutConstant$get(MemorySegment seg) {
        return (int)_COMMTIMEOUTS.WriteTotalTimeoutConstant$VH.get(seg);
    }
    public static void WriteTotalTimeoutConstant$set( MemorySegment seg, int x) {
        _COMMTIMEOUTS.WriteTotalTimeoutConstant$VH.set(seg, x);
    }
    public static int WriteTotalTimeoutConstant$get(MemorySegment seg, long index) {
        return (int)_COMMTIMEOUTS.WriteTotalTimeoutConstant$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void WriteTotalTimeoutConstant$set(MemorySegment seg, long index, int x) {
        _COMMTIMEOUTS.WriteTotalTimeoutConstant$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


