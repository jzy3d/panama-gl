// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class tagRAWMOUSE {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("usFlags"),
        MemoryLayout.paddingLayout(16),
        MemoryLayout.unionLayout(
            Constants$root.C_LONG$LAYOUT.withName("ulButtons"),
            MemoryLayout.structLayout(
                Constants$root.C_SHORT$LAYOUT.withName("usButtonFlags"),
                Constants$root.C_SHORT$LAYOUT.withName("usButtonData")
            ).withName("$anon$0")
        ).withName("$anon$0"),
        Constants$root.C_LONG$LAYOUT.withName("ulRawButtons"),
        Constants$root.C_LONG$LAYOUT.withName("lLastX"),
        Constants$root.C_LONG$LAYOUT.withName("lLastY"),
        Constants$root.C_LONG$LAYOUT.withName("ulExtraInformation")
    ).withName("tagRAWMOUSE");
    public static MemoryLayout $LAYOUT() {
        return tagRAWMOUSE.$struct$LAYOUT;
    }
    static final VarHandle usFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("usFlags"));
    public static VarHandle usFlags$VH() {
        return tagRAWMOUSE.usFlags$VH;
    }
    public static short usFlags$get(MemorySegment seg) {
        return (short)tagRAWMOUSE.usFlags$VH.get(seg);
    }
    public static void usFlags$set( MemorySegment seg, short x) {
        tagRAWMOUSE.usFlags$VH.set(seg, x);
    }
    public static short usFlags$get(MemorySegment seg, long index) {
        return (short)tagRAWMOUSE.usFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void usFlags$set(MemorySegment seg, long index, short x) {
        tagRAWMOUSE.usFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ulButtons$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("ulButtons"));
    public static VarHandle ulButtons$VH() {
        return tagRAWMOUSE.ulButtons$VH;
    }
    public static int ulButtons$get(MemorySegment seg) {
        return (int)tagRAWMOUSE.ulButtons$VH.get(seg);
    }
    public static void ulButtons$set( MemorySegment seg, int x) {
        tagRAWMOUSE.ulButtons$VH.set(seg, x);
    }
    public static int ulButtons$get(MemorySegment seg, long index) {
        return (int)tagRAWMOUSE.ulButtons$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ulButtons$set(MemorySegment seg, long index, int x) {
        tagRAWMOUSE.ulButtons$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle usButtonFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("usButtonFlags"));
    public static VarHandle usButtonFlags$VH() {
        return tagRAWMOUSE.usButtonFlags$VH;
    }
    public static short usButtonFlags$get(MemorySegment seg) {
        return (short)tagRAWMOUSE.usButtonFlags$VH.get(seg);
    }
    public static void usButtonFlags$set( MemorySegment seg, short x) {
        tagRAWMOUSE.usButtonFlags$VH.set(seg, x);
    }
    public static short usButtonFlags$get(MemorySegment seg, long index) {
        return (short)tagRAWMOUSE.usButtonFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void usButtonFlags$set(MemorySegment seg, long index, short x) {
        tagRAWMOUSE.usButtonFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle usButtonData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("usButtonData"));
    public static VarHandle usButtonData$VH() {
        return tagRAWMOUSE.usButtonData$VH;
    }
    public static short usButtonData$get(MemorySegment seg) {
        return (short)tagRAWMOUSE.usButtonData$VH.get(seg);
    }
    public static void usButtonData$set( MemorySegment seg, short x) {
        tagRAWMOUSE.usButtonData$VH.set(seg, x);
    }
    public static short usButtonData$get(MemorySegment seg, long index) {
        return (short)tagRAWMOUSE.usButtonData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void usButtonData$set(MemorySegment seg, long index, short x) {
        tagRAWMOUSE.usButtonData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ulRawButtons$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ulRawButtons"));
    public static VarHandle ulRawButtons$VH() {
        return tagRAWMOUSE.ulRawButtons$VH;
    }
    public static int ulRawButtons$get(MemorySegment seg) {
        return (int)tagRAWMOUSE.ulRawButtons$VH.get(seg);
    }
    public static void ulRawButtons$set( MemorySegment seg, int x) {
        tagRAWMOUSE.ulRawButtons$VH.set(seg, x);
    }
    public static int ulRawButtons$get(MemorySegment seg, long index) {
        return (int)tagRAWMOUSE.ulRawButtons$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ulRawButtons$set(MemorySegment seg, long index, int x) {
        tagRAWMOUSE.ulRawButtons$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lLastX$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lLastX"));
    public static VarHandle lLastX$VH() {
        return tagRAWMOUSE.lLastX$VH;
    }
    public static int lLastX$get(MemorySegment seg) {
        return (int)tagRAWMOUSE.lLastX$VH.get(seg);
    }
    public static void lLastX$set( MemorySegment seg, int x) {
        tagRAWMOUSE.lLastX$VH.set(seg, x);
    }
    public static int lLastX$get(MemorySegment seg, long index) {
        return (int)tagRAWMOUSE.lLastX$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lLastX$set(MemorySegment seg, long index, int x) {
        tagRAWMOUSE.lLastX$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lLastY$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lLastY"));
    public static VarHandle lLastY$VH() {
        return tagRAWMOUSE.lLastY$VH;
    }
    public static int lLastY$get(MemorySegment seg) {
        return (int)tagRAWMOUSE.lLastY$VH.get(seg);
    }
    public static void lLastY$set( MemorySegment seg, int x) {
        tagRAWMOUSE.lLastY$VH.set(seg, x);
    }
    public static int lLastY$get(MemorySegment seg, long index) {
        return (int)tagRAWMOUSE.lLastY$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lLastY$set(MemorySegment seg, long index, int x) {
        tagRAWMOUSE.lLastY$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ulExtraInformation$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ulExtraInformation"));
    public static VarHandle ulExtraInformation$VH() {
        return tagRAWMOUSE.ulExtraInformation$VH;
    }
    public static int ulExtraInformation$get(MemorySegment seg) {
        return (int)tagRAWMOUSE.ulExtraInformation$VH.get(seg);
    }
    public static void ulExtraInformation$set( MemorySegment seg, int x) {
        tagRAWMOUSE.ulExtraInformation$VH.set(seg, x);
    }
    public static int ulExtraInformation$get(MemorySegment seg, long index) {
        return (int)tagRAWMOUSE.ulExtraInformation$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ulExtraInformation$set(MemorySegment seg, long index, int x) {
        tagRAWMOUSE.ulExtraInformation$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


