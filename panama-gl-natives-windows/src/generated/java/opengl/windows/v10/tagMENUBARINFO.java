// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class tagMENUBARINFO {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cbSize"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("left"),
            Constants$root.C_LONG$LAYOUT.withName("top"),
            Constants$root.C_LONG$LAYOUT.withName("right"),
            Constants$root.C_LONG$LAYOUT.withName("bottom")
        ).withName("rcBar"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("hMenu"),
        Constants$root.C_POINTER$LAYOUT.withName("hwndMenu"),
        MemoryLayout.structLayout(
            MemoryLayout.paddingLayout(1).withName("fBarFocused"),
            MemoryLayout.paddingLayout(1).withName("fFocused"),
            MemoryLayout.paddingLayout(30).withName("fUnused"),
            MemoryLayout.paddingLayout(32)
        )
    ).withName("tagMENUBARINFO");
    public static MemoryLayout $LAYOUT() {
        return tagMENUBARINFO.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return tagMENUBARINFO.cbSize$VH;
    }
    public static int cbSize$get(MemorySegment seg) {
        return (int)tagMENUBARINFO.cbSize$VH.get(seg);
    }
    public static void cbSize$set( MemorySegment seg, int x) {
        tagMENUBARINFO.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)tagMENUBARINFO.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        tagMENUBARINFO.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment rcBar$slice(MemorySegment seg) {
        return seg.asSlice(4, 16);
    }
    static final VarHandle hMenu$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hMenu"));
    public static VarHandle hMenu$VH() {
        return tagMENUBARINFO.hMenu$VH;
    }
    public static MemoryAddress hMenu$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagMENUBARINFO.hMenu$VH.get(seg);
    }
    public static void hMenu$set( MemorySegment seg, MemoryAddress x) {
        tagMENUBARINFO.hMenu$VH.set(seg, x);
    }
    public static MemoryAddress hMenu$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagMENUBARINFO.hMenu$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hMenu$set(MemorySegment seg, long index, MemoryAddress x) {
        tagMENUBARINFO.hMenu$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hwndMenu$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hwndMenu"));
    public static VarHandle hwndMenu$VH() {
        return tagMENUBARINFO.hwndMenu$VH;
    }
    public static MemoryAddress hwndMenu$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagMENUBARINFO.hwndMenu$VH.get(seg);
    }
    public static void hwndMenu$set( MemorySegment seg, MemoryAddress x) {
        tagMENUBARINFO.hwndMenu$VH.set(seg, x);
    }
    public static MemoryAddress hwndMenu$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagMENUBARINFO.hwndMenu$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hwndMenu$set(MemorySegment seg, long index, MemoryAddress x) {
        tagMENUBARINFO.hwndMenu$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


