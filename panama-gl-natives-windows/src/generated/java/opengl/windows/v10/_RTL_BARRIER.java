// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _RTL_BARRIER {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Reserved1"),
        Constants$root.C_LONG$LAYOUT.withName("Reserved2"),
        MemoryLayout.sequenceLayout(2, Constants$root.C_LONG_LONG$LAYOUT).withName("Reserved3"),
        Constants$root.C_LONG$LAYOUT.withName("Reserved4"),
        Constants$root.C_LONG$LAYOUT.withName("Reserved5")
    ).withName("_RTL_BARRIER");
    public static MemoryLayout $LAYOUT() {
        return _RTL_BARRIER.$struct$LAYOUT;
    }
    static final VarHandle Reserved1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Reserved1"));
    public static VarHandle Reserved1$VH() {
        return _RTL_BARRIER.Reserved1$VH;
    }
    public static int Reserved1$get(MemorySegment seg) {
        return (int)_RTL_BARRIER.Reserved1$VH.get(seg);
    }
    public static void Reserved1$set( MemorySegment seg, int x) {
        _RTL_BARRIER.Reserved1$VH.set(seg, x);
    }
    public static int Reserved1$get(MemorySegment seg, long index) {
        return (int)_RTL_BARRIER.Reserved1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved1$set(MemorySegment seg, long index, int x) {
        _RTL_BARRIER.Reserved1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Reserved2"));
    public static VarHandle Reserved2$VH() {
        return _RTL_BARRIER.Reserved2$VH;
    }
    public static int Reserved2$get(MemorySegment seg) {
        return (int)_RTL_BARRIER.Reserved2$VH.get(seg);
    }
    public static void Reserved2$set( MemorySegment seg, int x) {
        _RTL_BARRIER.Reserved2$VH.set(seg, x);
    }
    public static int Reserved2$get(MemorySegment seg, long index) {
        return (int)_RTL_BARRIER.Reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved2$set(MemorySegment seg, long index, int x) {
        _RTL_BARRIER.Reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment Reserved3$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    static final VarHandle Reserved4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Reserved4"));
    public static VarHandle Reserved4$VH() {
        return _RTL_BARRIER.Reserved4$VH;
    }
    public static int Reserved4$get(MemorySegment seg) {
        return (int)_RTL_BARRIER.Reserved4$VH.get(seg);
    }
    public static void Reserved4$set( MemorySegment seg, int x) {
        _RTL_BARRIER.Reserved4$VH.set(seg, x);
    }
    public static int Reserved4$get(MemorySegment seg, long index) {
        return (int)_RTL_BARRIER.Reserved4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved4$set(MemorySegment seg, long index, int x) {
        _RTL_BARRIER.Reserved4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Reserved5$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Reserved5"));
    public static VarHandle Reserved5$VH() {
        return _RTL_BARRIER.Reserved5$VH;
    }
    public static int Reserved5$get(MemorySegment seg) {
        return (int)_RTL_BARRIER.Reserved5$VH.get(seg);
    }
    public static void Reserved5$set( MemorySegment seg, int x) {
        _RTL_BARRIER.Reserved5$VH.set(seg, x);
    }
    public static int Reserved5$get(MemorySegment seg, long index) {
        return (int)_RTL_BARRIER.Reserved5$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved5$set(MemorySegment seg, long index, int x) {
        _RTL_BARRIER.Reserved5$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


