// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class tagCOLORCORRECTPALETTE {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("iType"),
            Constants$root.C_LONG$LAYOUT.withName("nSize")
        ).withName("emr"),
        Constants$root.C_LONG$LAYOUT.withName("ihPalette"),
        Constants$root.C_LONG$LAYOUT.withName("nFirstEntry"),
        Constants$root.C_LONG$LAYOUT.withName("nPalEntries"),
        Constants$root.C_LONG$LAYOUT.withName("nReserved")
    ).withName("tagCOLORCORRECTPALETTE");
    public static MemoryLayout $LAYOUT() {
        return tagCOLORCORRECTPALETTE.$struct$LAYOUT;
    }
    public static MemorySegment emr$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    static final VarHandle ihPalette$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ihPalette"));
    public static VarHandle ihPalette$VH() {
        return tagCOLORCORRECTPALETTE.ihPalette$VH;
    }
    public static int ihPalette$get(MemorySegment seg) {
        return (int)tagCOLORCORRECTPALETTE.ihPalette$VH.get(seg);
    }
    public static void ihPalette$set( MemorySegment seg, int x) {
        tagCOLORCORRECTPALETTE.ihPalette$VH.set(seg, x);
    }
    public static int ihPalette$get(MemorySegment seg, long index) {
        return (int)tagCOLORCORRECTPALETTE.ihPalette$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ihPalette$set(MemorySegment seg, long index, int x) {
        tagCOLORCORRECTPALETTE.ihPalette$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nFirstEntry$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nFirstEntry"));
    public static VarHandle nFirstEntry$VH() {
        return tagCOLORCORRECTPALETTE.nFirstEntry$VH;
    }
    public static int nFirstEntry$get(MemorySegment seg) {
        return (int)tagCOLORCORRECTPALETTE.nFirstEntry$VH.get(seg);
    }
    public static void nFirstEntry$set( MemorySegment seg, int x) {
        tagCOLORCORRECTPALETTE.nFirstEntry$VH.set(seg, x);
    }
    public static int nFirstEntry$get(MemorySegment seg, long index) {
        return (int)tagCOLORCORRECTPALETTE.nFirstEntry$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nFirstEntry$set(MemorySegment seg, long index, int x) {
        tagCOLORCORRECTPALETTE.nFirstEntry$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nPalEntries$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nPalEntries"));
    public static VarHandle nPalEntries$VH() {
        return tagCOLORCORRECTPALETTE.nPalEntries$VH;
    }
    public static int nPalEntries$get(MemorySegment seg) {
        return (int)tagCOLORCORRECTPALETTE.nPalEntries$VH.get(seg);
    }
    public static void nPalEntries$set( MemorySegment seg, int x) {
        tagCOLORCORRECTPALETTE.nPalEntries$VH.set(seg, x);
    }
    public static int nPalEntries$get(MemorySegment seg, long index) {
        return (int)tagCOLORCORRECTPALETTE.nPalEntries$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nPalEntries$set(MemorySegment seg, long index, int x) {
        tagCOLORCORRECTPALETTE.nPalEntries$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nReserved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nReserved"));
    public static VarHandle nReserved$VH() {
        return tagCOLORCORRECTPALETTE.nReserved$VH;
    }
    public static int nReserved$get(MemorySegment seg) {
        return (int)tagCOLORCORRECTPALETTE.nReserved$VH.get(seg);
    }
    public static void nReserved$set( MemorySegment seg, int x) {
        tagCOLORCORRECTPALETTE.nReserved$VH.set(seg, x);
    }
    public static int nReserved$get(MemorySegment seg, long index) {
        return (int)tagCOLORCORRECTPALETTE.nReserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nReserved$set(MemorySegment seg, long index, int x) {
        tagCOLORCORRECTPALETTE.nReserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


