// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface PFIBER_CALLOUT_ROUTINE {

    jdk.incubator.foreign.Addressable apply(jdk.incubator.foreign.MemoryAddress x0);
    static NativeSymbol allocate(PFIBER_CALLOUT_ROUTINE fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(PFIBER_CALLOUT_ROUTINE.class, fi, constants$252.PFIBER_CALLOUT_ROUTINE$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
    }
    static PFIBER_CALLOUT_ROUTINE ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("PFIBER_CALLOUT_ROUTINE::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
            try {
                return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)constants$253.PFIBER_CALLOUT_ROUTINE$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


