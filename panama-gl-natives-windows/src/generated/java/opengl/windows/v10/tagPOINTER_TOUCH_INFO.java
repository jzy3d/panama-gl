// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class tagPOINTER_TOUCH_INFO {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("pointerType"),
            Constants$root.C_LONG$LAYOUT.withName("pointerId"),
            Constants$root.C_LONG$LAYOUT.withName("frameId"),
            Constants$root.C_LONG$LAYOUT.withName("pointerFlags"),
            Constants$root.C_POINTER$LAYOUT.withName("sourceDevice"),
            Constants$root.C_POINTER$LAYOUT.withName("hwndTarget"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("x"),
                Constants$root.C_LONG$LAYOUT.withName("y")
            ).withName("ptPixelLocation"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("x"),
                Constants$root.C_LONG$LAYOUT.withName("y")
            ).withName("ptHimetricLocation"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("x"),
                Constants$root.C_LONG$LAYOUT.withName("y")
            ).withName("ptPixelLocationRaw"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG$LAYOUT.withName("x"),
                Constants$root.C_LONG$LAYOUT.withName("y")
            ).withName("ptHimetricLocationRaw"),
            Constants$root.C_LONG$LAYOUT.withName("dwTime"),
            Constants$root.C_LONG$LAYOUT.withName("historyCount"),
            Constants$root.C_LONG$LAYOUT.withName("InputData"),
            Constants$root.C_LONG$LAYOUT.withName("dwKeyStates"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("PerformanceCount"),
            Constants$root.C_LONG$LAYOUT.withName("ButtonChangeType"),
            MemoryLayout.paddingLayout(32)
        ).withName("pointerInfo"),
        Constants$root.C_LONG$LAYOUT.withName("touchFlags"),
        Constants$root.C_LONG$LAYOUT.withName("touchMask"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("left"),
            Constants$root.C_LONG$LAYOUT.withName("top"),
            Constants$root.C_LONG$LAYOUT.withName("right"),
            Constants$root.C_LONG$LAYOUT.withName("bottom")
        ).withName("rcContact"),
        MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("left"),
            Constants$root.C_LONG$LAYOUT.withName("top"),
            Constants$root.C_LONG$LAYOUT.withName("right"),
            Constants$root.C_LONG$LAYOUT.withName("bottom")
        ).withName("rcContactRaw"),
        Constants$root.C_LONG$LAYOUT.withName("orientation"),
        Constants$root.C_LONG$LAYOUT.withName("pressure")
    ).withName("tagPOINTER_TOUCH_INFO");
    public static MemoryLayout $LAYOUT() {
        return tagPOINTER_TOUCH_INFO.$struct$LAYOUT;
    }
    public static MemorySegment pointerInfo$slice(MemorySegment seg) {
        return seg.asSlice(0, 96);
    }
    static final VarHandle touchFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("touchFlags"));
    public static VarHandle touchFlags$VH() {
        return tagPOINTER_TOUCH_INFO.touchFlags$VH;
    }
    public static int touchFlags$get(MemorySegment seg) {
        return (int)tagPOINTER_TOUCH_INFO.touchFlags$VH.get(seg);
    }
    public static void touchFlags$set( MemorySegment seg, int x) {
        tagPOINTER_TOUCH_INFO.touchFlags$VH.set(seg, x);
    }
    public static int touchFlags$get(MemorySegment seg, long index) {
        return (int)tagPOINTER_TOUCH_INFO.touchFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void touchFlags$set(MemorySegment seg, long index, int x) {
        tagPOINTER_TOUCH_INFO.touchFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle touchMask$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("touchMask"));
    public static VarHandle touchMask$VH() {
        return tagPOINTER_TOUCH_INFO.touchMask$VH;
    }
    public static int touchMask$get(MemorySegment seg) {
        return (int)tagPOINTER_TOUCH_INFO.touchMask$VH.get(seg);
    }
    public static void touchMask$set( MemorySegment seg, int x) {
        tagPOINTER_TOUCH_INFO.touchMask$VH.set(seg, x);
    }
    public static int touchMask$get(MemorySegment seg, long index) {
        return (int)tagPOINTER_TOUCH_INFO.touchMask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void touchMask$set(MemorySegment seg, long index, int x) {
        tagPOINTER_TOUCH_INFO.touchMask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment rcContact$slice(MemorySegment seg) {
        return seg.asSlice(104, 16);
    }
    public static MemorySegment rcContactRaw$slice(MemorySegment seg) {
        return seg.asSlice(120, 16);
    }
    static final VarHandle orientation$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("orientation"));
    public static VarHandle orientation$VH() {
        return tagPOINTER_TOUCH_INFO.orientation$VH;
    }
    public static int orientation$get(MemorySegment seg) {
        return (int)tagPOINTER_TOUCH_INFO.orientation$VH.get(seg);
    }
    public static void orientation$set( MemorySegment seg, int x) {
        tagPOINTER_TOUCH_INFO.orientation$VH.set(seg, x);
    }
    public static int orientation$get(MemorySegment seg, long index) {
        return (int)tagPOINTER_TOUCH_INFO.orientation$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void orientation$set(MemorySegment seg, long index, int x) {
        tagPOINTER_TOUCH_INFO.orientation$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pressure$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pressure"));
    public static VarHandle pressure$VH() {
        return tagPOINTER_TOUCH_INFO.pressure$VH;
    }
    public static int pressure$get(MemorySegment seg) {
        return (int)tagPOINTER_TOUCH_INFO.pressure$VH.get(seg);
    }
    public static void pressure$set( MemorySegment seg, int x) {
        tagPOINTER_TOUCH_INFO.pressure$VH.set(seg, x);
    }
    public static int pressure$get(MemorySegment seg, long index) {
        return (int)tagPOINTER_TOUCH_INFO.pressure$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pressure$set(MemorySegment seg, long index, int x) {
        tagPOINTER_TOUCH_INFO.pressure$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


