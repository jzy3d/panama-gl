// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _IMAGE_HOT_PATCH_BASE {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("SequenceNumber"),
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        Constants$root.C_LONG$LAYOUT.withName("OriginalTimeDateStamp"),
        Constants$root.C_LONG$LAYOUT.withName("OriginalCheckSum"),
        Constants$root.C_LONG$LAYOUT.withName("CodeIntegrityInfo"),
        Constants$root.C_LONG$LAYOUT.withName("CodeIntegritySize"),
        Constants$root.C_LONG$LAYOUT.withName("PatchTable"),
        Constants$root.C_LONG$LAYOUT.withName("BufferOffset")
    ).withName("_IMAGE_HOT_PATCH_BASE");
    public static MemoryLayout $LAYOUT() {
        return _IMAGE_HOT_PATCH_BASE.$struct$LAYOUT;
    }
    static final VarHandle SequenceNumber$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SequenceNumber"));
    public static VarHandle SequenceNumber$VH() {
        return _IMAGE_HOT_PATCH_BASE.SequenceNumber$VH;
    }
    public static int SequenceNumber$get(MemorySegment seg) {
        return (int)_IMAGE_HOT_PATCH_BASE.SequenceNumber$VH.get(seg);
    }
    public static void SequenceNumber$set( MemorySegment seg, int x) {
        _IMAGE_HOT_PATCH_BASE.SequenceNumber$VH.set(seg, x);
    }
    public static int SequenceNumber$get(MemorySegment seg, long index) {
        return (int)_IMAGE_HOT_PATCH_BASE.SequenceNumber$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SequenceNumber$set(MemorySegment seg, long index, int x) {
        _IMAGE_HOT_PATCH_BASE.SequenceNumber$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _IMAGE_HOT_PATCH_BASE.Flags$VH;
    }
    public static int Flags$get(MemorySegment seg) {
        return (int)_IMAGE_HOT_PATCH_BASE.Flags$VH.get(seg);
    }
    public static void Flags$set( MemorySegment seg, int x) {
        _IMAGE_HOT_PATCH_BASE.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)_IMAGE_HOT_PATCH_BASE.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        _IMAGE_HOT_PATCH_BASE.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle OriginalTimeDateStamp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OriginalTimeDateStamp"));
    public static VarHandle OriginalTimeDateStamp$VH() {
        return _IMAGE_HOT_PATCH_BASE.OriginalTimeDateStamp$VH;
    }
    public static int OriginalTimeDateStamp$get(MemorySegment seg) {
        return (int)_IMAGE_HOT_PATCH_BASE.OriginalTimeDateStamp$VH.get(seg);
    }
    public static void OriginalTimeDateStamp$set( MemorySegment seg, int x) {
        _IMAGE_HOT_PATCH_BASE.OriginalTimeDateStamp$VH.set(seg, x);
    }
    public static int OriginalTimeDateStamp$get(MemorySegment seg, long index) {
        return (int)_IMAGE_HOT_PATCH_BASE.OriginalTimeDateStamp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OriginalTimeDateStamp$set(MemorySegment seg, long index, int x) {
        _IMAGE_HOT_PATCH_BASE.OriginalTimeDateStamp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle OriginalCheckSum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("OriginalCheckSum"));
    public static VarHandle OriginalCheckSum$VH() {
        return _IMAGE_HOT_PATCH_BASE.OriginalCheckSum$VH;
    }
    public static int OriginalCheckSum$get(MemorySegment seg) {
        return (int)_IMAGE_HOT_PATCH_BASE.OriginalCheckSum$VH.get(seg);
    }
    public static void OriginalCheckSum$set( MemorySegment seg, int x) {
        _IMAGE_HOT_PATCH_BASE.OriginalCheckSum$VH.set(seg, x);
    }
    public static int OriginalCheckSum$get(MemorySegment seg, long index) {
        return (int)_IMAGE_HOT_PATCH_BASE.OriginalCheckSum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void OriginalCheckSum$set(MemorySegment seg, long index, int x) {
        _IMAGE_HOT_PATCH_BASE.OriginalCheckSum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CodeIntegrityInfo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CodeIntegrityInfo"));
    public static VarHandle CodeIntegrityInfo$VH() {
        return _IMAGE_HOT_PATCH_BASE.CodeIntegrityInfo$VH;
    }
    public static int CodeIntegrityInfo$get(MemorySegment seg) {
        return (int)_IMAGE_HOT_PATCH_BASE.CodeIntegrityInfo$VH.get(seg);
    }
    public static void CodeIntegrityInfo$set( MemorySegment seg, int x) {
        _IMAGE_HOT_PATCH_BASE.CodeIntegrityInfo$VH.set(seg, x);
    }
    public static int CodeIntegrityInfo$get(MemorySegment seg, long index) {
        return (int)_IMAGE_HOT_PATCH_BASE.CodeIntegrityInfo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CodeIntegrityInfo$set(MemorySegment seg, long index, int x) {
        _IMAGE_HOT_PATCH_BASE.CodeIntegrityInfo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CodeIntegritySize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CodeIntegritySize"));
    public static VarHandle CodeIntegritySize$VH() {
        return _IMAGE_HOT_PATCH_BASE.CodeIntegritySize$VH;
    }
    public static int CodeIntegritySize$get(MemorySegment seg) {
        return (int)_IMAGE_HOT_PATCH_BASE.CodeIntegritySize$VH.get(seg);
    }
    public static void CodeIntegritySize$set( MemorySegment seg, int x) {
        _IMAGE_HOT_PATCH_BASE.CodeIntegritySize$VH.set(seg, x);
    }
    public static int CodeIntegritySize$get(MemorySegment seg, long index) {
        return (int)_IMAGE_HOT_PATCH_BASE.CodeIntegritySize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CodeIntegritySize$set(MemorySegment seg, long index, int x) {
        _IMAGE_HOT_PATCH_BASE.CodeIntegritySize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle PatchTable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PatchTable"));
    public static VarHandle PatchTable$VH() {
        return _IMAGE_HOT_PATCH_BASE.PatchTable$VH;
    }
    public static int PatchTable$get(MemorySegment seg) {
        return (int)_IMAGE_HOT_PATCH_BASE.PatchTable$VH.get(seg);
    }
    public static void PatchTable$set( MemorySegment seg, int x) {
        _IMAGE_HOT_PATCH_BASE.PatchTable$VH.set(seg, x);
    }
    public static int PatchTable$get(MemorySegment seg, long index) {
        return (int)_IMAGE_HOT_PATCH_BASE.PatchTable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PatchTable$set(MemorySegment seg, long index, int x) {
        _IMAGE_HOT_PATCH_BASE.PatchTable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BufferOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BufferOffset"));
    public static VarHandle BufferOffset$VH() {
        return _IMAGE_HOT_PATCH_BASE.BufferOffset$VH;
    }
    public static int BufferOffset$get(MemorySegment seg) {
        return (int)_IMAGE_HOT_PATCH_BASE.BufferOffset$VH.get(seg);
    }
    public static void BufferOffset$set( MemorySegment seg, int x) {
        _IMAGE_HOT_PATCH_BASE.BufferOffset$VH.set(seg, x);
    }
    public static int BufferOffset$get(MemorySegment seg, long index) {
        return (int)_IMAGE_HOT_PATCH_BASE.BufferOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BufferOffset$set(MemorySegment seg, long index, int x) {
        _IMAGE_HOT_PATCH_BASE.BufferOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


