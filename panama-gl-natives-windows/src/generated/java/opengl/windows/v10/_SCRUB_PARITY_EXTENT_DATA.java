// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _SCRUB_PARITY_EXTENT_DATA {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("Size"),
        Constants$root.C_SHORT$LAYOUT.withName("Flags"),
        Constants$root.C_SHORT$LAYOUT.withName("NumberOfParityExtents"),
        Constants$root.C_SHORT$LAYOUT.withName("MaximumNumberOfParityExtents"),
        MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("Offset"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("Length")
        ).withName("_SCRUB_PARITY_EXTENT")).withName("ParityExtents")
    ).withName("_SCRUB_PARITY_EXTENT_DATA");
    public static MemoryLayout $LAYOUT() {
        return _SCRUB_PARITY_EXTENT_DATA.$struct$LAYOUT;
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _SCRUB_PARITY_EXTENT_DATA.Size$VH;
    }
    public static short Size$get(MemorySegment seg) {
        return (short)_SCRUB_PARITY_EXTENT_DATA.Size$VH.get(seg);
    }
    public static void Size$set( MemorySegment seg, short x) {
        _SCRUB_PARITY_EXTENT_DATA.Size$VH.set(seg, x);
    }
    public static short Size$get(MemorySegment seg, long index) {
        return (short)_SCRUB_PARITY_EXTENT_DATA.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, short x) {
        _SCRUB_PARITY_EXTENT_DATA.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _SCRUB_PARITY_EXTENT_DATA.Flags$VH;
    }
    public static short Flags$get(MemorySegment seg) {
        return (short)_SCRUB_PARITY_EXTENT_DATA.Flags$VH.get(seg);
    }
    public static void Flags$set( MemorySegment seg, short x) {
        _SCRUB_PARITY_EXTENT_DATA.Flags$VH.set(seg, x);
    }
    public static short Flags$get(MemorySegment seg, long index) {
        return (short)_SCRUB_PARITY_EXTENT_DATA.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, short x) {
        _SCRUB_PARITY_EXTENT_DATA.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NumberOfParityExtents$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumberOfParityExtents"));
    public static VarHandle NumberOfParityExtents$VH() {
        return _SCRUB_PARITY_EXTENT_DATA.NumberOfParityExtents$VH;
    }
    public static short NumberOfParityExtents$get(MemorySegment seg) {
        return (short)_SCRUB_PARITY_EXTENT_DATA.NumberOfParityExtents$VH.get(seg);
    }
    public static void NumberOfParityExtents$set( MemorySegment seg, short x) {
        _SCRUB_PARITY_EXTENT_DATA.NumberOfParityExtents$VH.set(seg, x);
    }
    public static short NumberOfParityExtents$get(MemorySegment seg, long index) {
        return (short)_SCRUB_PARITY_EXTENT_DATA.NumberOfParityExtents$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumberOfParityExtents$set(MemorySegment seg, long index, short x) {
        _SCRUB_PARITY_EXTENT_DATA.NumberOfParityExtents$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaximumNumberOfParityExtents$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MaximumNumberOfParityExtents"));
    public static VarHandle MaximumNumberOfParityExtents$VH() {
        return _SCRUB_PARITY_EXTENT_DATA.MaximumNumberOfParityExtents$VH;
    }
    public static short MaximumNumberOfParityExtents$get(MemorySegment seg) {
        return (short)_SCRUB_PARITY_EXTENT_DATA.MaximumNumberOfParityExtents$VH.get(seg);
    }
    public static void MaximumNumberOfParityExtents$set( MemorySegment seg, short x) {
        _SCRUB_PARITY_EXTENT_DATA.MaximumNumberOfParityExtents$VH.set(seg, x);
    }
    public static short MaximumNumberOfParityExtents$get(MemorySegment seg, long index) {
        return (short)_SCRUB_PARITY_EXTENT_DATA.MaximumNumberOfParityExtents$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaximumNumberOfParityExtents$set(MemorySegment seg, long index, short x) {
        _SCRUB_PARITY_EXTENT_DATA.MaximumNumberOfParityExtents$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment ParityExtents$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


