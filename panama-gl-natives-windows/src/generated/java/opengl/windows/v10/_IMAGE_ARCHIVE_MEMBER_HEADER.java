// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _IMAGE_ARCHIVE_MEMBER_HEADER {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("Name"),
        MemoryLayout.sequenceLayout(12, Constants$root.C_CHAR$LAYOUT).withName("Date"),
        MemoryLayout.sequenceLayout(6, Constants$root.C_CHAR$LAYOUT).withName("UserID"),
        MemoryLayout.sequenceLayout(6, Constants$root.C_CHAR$LAYOUT).withName("GroupID"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("Mode"),
        MemoryLayout.sequenceLayout(10, Constants$root.C_CHAR$LAYOUT).withName("Size"),
        MemoryLayout.sequenceLayout(2, Constants$root.C_CHAR$LAYOUT).withName("EndHeader")
    ).withName("_IMAGE_ARCHIVE_MEMBER_HEADER");
    public static MemoryLayout $LAYOUT() {
        return _IMAGE_ARCHIVE_MEMBER_HEADER.$struct$LAYOUT;
    }
    public static MemorySegment Name$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment Date$slice(MemorySegment seg) {
        return seg.asSlice(16, 12);
    }
    public static MemorySegment UserID$slice(MemorySegment seg) {
        return seg.asSlice(28, 6);
    }
    public static MemorySegment GroupID$slice(MemorySegment seg) {
        return seg.asSlice(34, 6);
    }
    public static MemorySegment Mode$slice(MemorySegment seg) {
        return seg.asSlice(40, 8);
    }
    public static MemorySegment Size$slice(MemorySegment seg) {
        return seg.asSlice(48, 10);
    }
    public static MemorySegment EndHeader$slice(MemorySegment seg) {
        return seg.asSlice(58, 2);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


