// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface PQUERYACTCTXW_FUNC {

    int apply(int x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, jdk.incubator.foreign.MemoryAddress x4, long x5, jdk.incubator.foreign.MemoryAddress x6);
    static NativeSymbol allocate(PQUERYACTCTXW_FUNC fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(PQUERYACTCTXW_FUNC.class, fi, constants$331.PQUERYACTCTXW_FUNC$FUNC, "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)I", scope);
    }
    static PQUERYACTCTXW_FUNC ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("PQUERYACTCTXW_FUNC::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (int x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, jdk.incubator.foreign.MemoryAddress x4, long x5, jdk.incubator.foreign.MemoryAddress x6) -> {
            try {
                return (int)constants$331.PQUERYACTCTXW_FUNC$MH.invokeExact(symbol, x0, (jdk.incubator.foreign.Addressable)x1, (jdk.incubator.foreign.Addressable)x2, x3, (jdk.incubator.foreign.Addressable)x4, x5, (jdk.incubator.foreign.Addressable)x6);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


