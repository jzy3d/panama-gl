// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class tagBITMAPINFOHEADER {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("biSize"),
        Constants$root.C_LONG$LAYOUT.withName("biWidth"),
        Constants$root.C_LONG$LAYOUT.withName("biHeight"),
        Constants$root.C_SHORT$LAYOUT.withName("biPlanes"),
        Constants$root.C_SHORT$LAYOUT.withName("biBitCount"),
        Constants$root.C_LONG$LAYOUT.withName("biCompression"),
        Constants$root.C_LONG$LAYOUT.withName("biSizeImage"),
        Constants$root.C_LONG$LAYOUT.withName("biXPelsPerMeter"),
        Constants$root.C_LONG$LAYOUT.withName("biYPelsPerMeter"),
        Constants$root.C_LONG$LAYOUT.withName("biClrUsed"),
        Constants$root.C_LONG$LAYOUT.withName("biClrImportant")
    ).withName("tagBITMAPINFOHEADER");
    public static MemoryLayout $LAYOUT() {
        return tagBITMAPINFOHEADER.$struct$LAYOUT;
    }
    static final VarHandle biSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("biSize"));
    public static VarHandle biSize$VH() {
        return tagBITMAPINFOHEADER.biSize$VH;
    }
    public static int biSize$get(MemorySegment seg) {
        return (int)tagBITMAPINFOHEADER.biSize$VH.get(seg);
    }
    public static void biSize$set( MemorySegment seg, int x) {
        tagBITMAPINFOHEADER.biSize$VH.set(seg, x);
    }
    public static int biSize$get(MemorySegment seg, long index) {
        return (int)tagBITMAPINFOHEADER.biSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void biSize$set(MemorySegment seg, long index, int x) {
        tagBITMAPINFOHEADER.biSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle biWidth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("biWidth"));
    public static VarHandle biWidth$VH() {
        return tagBITMAPINFOHEADER.biWidth$VH;
    }
    public static int biWidth$get(MemorySegment seg) {
        return (int)tagBITMAPINFOHEADER.biWidth$VH.get(seg);
    }
    public static void biWidth$set( MemorySegment seg, int x) {
        tagBITMAPINFOHEADER.biWidth$VH.set(seg, x);
    }
    public static int biWidth$get(MemorySegment seg, long index) {
        return (int)tagBITMAPINFOHEADER.biWidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void biWidth$set(MemorySegment seg, long index, int x) {
        tagBITMAPINFOHEADER.biWidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle biHeight$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("biHeight"));
    public static VarHandle biHeight$VH() {
        return tagBITMAPINFOHEADER.biHeight$VH;
    }
    public static int biHeight$get(MemorySegment seg) {
        return (int)tagBITMAPINFOHEADER.biHeight$VH.get(seg);
    }
    public static void biHeight$set( MemorySegment seg, int x) {
        tagBITMAPINFOHEADER.biHeight$VH.set(seg, x);
    }
    public static int biHeight$get(MemorySegment seg, long index) {
        return (int)tagBITMAPINFOHEADER.biHeight$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void biHeight$set(MemorySegment seg, long index, int x) {
        tagBITMAPINFOHEADER.biHeight$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle biPlanes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("biPlanes"));
    public static VarHandle biPlanes$VH() {
        return tagBITMAPINFOHEADER.biPlanes$VH;
    }
    public static short biPlanes$get(MemorySegment seg) {
        return (short)tagBITMAPINFOHEADER.biPlanes$VH.get(seg);
    }
    public static void biPlanes$set( MemorySegment seg, short x) {
        tagBITMAPINFOHEADER.biPlanes$VH.set(seg, x);
    }
    public static short biPlanes$get(MemorySegment seg, long index) {
        return (short)tagBITMAPINFOHEADER.biPlanes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void biPlanes$set(MemorySegment seg, long index, short x) {
        tagBITMAPINFOHEADER.biPlanes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle biBitCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("biBitCount"));
    public static VarHandle biBitCount$VH() {
        return tagBITMAPINFOHEADER.biBitCount$VH;
    }
    public static short biBitCount$get(MemorySegment seg) {
        return (short)tagBITMAPINFOHEADER.biBitCount$VH.get(seg);
    }
    public static void biBitCount$set( MemorySegment seg, short x) {
        tagBITMAPINFOHEADER.biBitCount$VH.set(seg, x);
    }
    public static short biBitCount$get(MemorySegment seg, long index) {
        return (short)tagBITMAPINFOHEADER.biBitCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void biBitCount$set(MemorySegment seg, long index, short x) {
        tagBITMAPINFOHEADER.biBitCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle biCompression$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("biCompression"));
    public static VarHandle biCompression$VH() {
        return tagBITMAPINFOHEADER.biCompression$VH;
    }
    public static int biCompression$get(MemorySegment seg) {
        return (int)tagBITMAPINFOHEADER.biCompression$VH.get(seg);
    }
    public static void biCompression$set( MemorySegment seg, int x) {
        tagBITMAPINFOHEADER.biCompression$VH.set(seg, x);
    }
    public static int biCompression$get(MemorySegment seg, long index) {
        return (int)tagBITMAPINFOHEADER.biCompression$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void biCompression$set(MemorySegment seg, long index, int x) {
        tagBITMAPINFOHEADER.biCompression$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle biSizeImage$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("biSizeImage"));
    public static VarHandle biSizeImage$VH() {
        return tagBITMAPINFOHEADER.biSizeImage$VH;
    }
    public static int biSizeImage$get(MemorySegment seg) {
        return (int)tagBITMAPINFOHEADER.biSizeImage$VH.get(seg);
    }
    public static void biSizeImage$set( MemorySegment seg, int x) {
        tagBITMAPINFOHEADER.biSizeImage$VH.set(seg, x);
    }
    public static int biSizeImage$get(MemorySegment seg, long index) {
        return (int)tagBITMAPINFOHEADER.biSizeImage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void biSizeImage$set(MemorySegment seg, long index, int x) {
        tagBITMAPINFOHEADER.biSizeImage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle biXPelsPerMeter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("biXPelsPerMeter"));
    public static VarHandle biXPelsPerMeter$VH() {
        return tagBITMAPINFOHEADER.biXPelsPerMeter$VH;
    }
    public static int biXPelsPerMeter$get(MemorySegment seg) {
        return (int)tagBITMAPINFOHEADER.biXPelsPerMeter$VH.get(seg);
    }
    public static void biXPelsPerMeter$set( MemorySegment seg, int x) {
        tagBITMAPINFOHEADER.biXPelsPerMeter$VH.set(seg, x);
    }
    public static int biXPelsPerMeter$get(MemorySegment seg, long index) {
        return (int)tagBITMAPINFOHEADER.biXPelsPerMeter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void biXPelsPerMeter$set(MemorySegment seg, long index, int x) {
        tagBITMAPINFOHEADER.biXPelsPerMeter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle biYPelsPerMeter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("biYPelsPerMeter"));
    public static VarHandle biYPelsPerMeter$VH() {
        return tagBITMAPINFOHEADER.biYPelsPerMeter$VH;
    }
    public static int biYPelsPerMeter$get(MemorySegment seg) {
        return (int)tagBITMAPINFOHEADER.biYPelsPerMeter$VH.get(seg);
    }
    public static void biYPelsPerMeter$set( MemorySegment seg, int x) {
        tagBITMAPINFOHEADER.biYPelsPerMeter$VH.set(seg, x);
    }
    public static int biYPelsPerMeter$get(MemorySegment seg, long index) {
        return (int)tagBITMAPINFOHEADER.biYPelsPerMeter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void biYPelsPerMeter$set(MemorySegment seg, long index, int x) {
        tagBITMAPINFOHEADER.biYPelsPerMeter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle biClrUsed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("biClrUsed"));
    public static VarHandle biClrUsed$VH() {
        return tagBITMAPINFOHEADER.biClrUsed$VH;
    }
    public static int biClrUsed$get(MemorySegment seg) {
        return (int)tagBITMAPINFOHEADER.biClrUsed$VH.get(seg);
    }
    public static void biClrUsed$set( MemorySegment seg, int x) {
        tagBITMAPINFOHEADER.biClrUsed$VH.set(seg, x);
    }
    public static int biClrUsed$get(MemorySegment seg, long index) {
        return (int)tagBITMAPINFOHEADER.biClrUsed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void biClrUsed$set(MemorySegment seg, long index, int x) {
        tagBITMAPINFOHEADER.biClrUsed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle biClrImportant$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("biClrImportant"));
    public static VarHandle biClrImportant$VH() {
        return tagBITMAPINFOHEADER.biClrImportant$VH;
    }
    public static int biClrImportant$get(MemorySegment seg) {
        return (int)tagBITMAPINFOHEADER.biClrImportant$VH.get(seg);
    }
    public static void biClrImportant$set( MemorySegment seg, int x) {
        tagBITMAPINFOHEADER.biClrImportant$VH.set(seg, x);
    }
    public static int biClrImportant$get(MemorySegment seg, long index) {
        return (int)tagBITMAPINFOHEADER.biClrImportant$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void biClrImportant$set(MemorySegment seg, long index, int x) {
        tagBITMAPINFOHEADER.biClrImportant$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


