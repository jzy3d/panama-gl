// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _FILEMUIINFO {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("dwSize"),
        Constants$root.C_LONG$LAYOUT.withName("dwVersion"),
        Constants$root.C_LONG$LAYOUT.withName("dwFileType"),
        MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("pChecksum"),
        MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("pServiceChecksum"),
        Constants$root.C_LONG$LAYOUT.withName("dwLanguageNameOffset"),
        Constants$root.C_LONG$LAYOUT.withName("dwTypeIDMainSize"),
        Constants$root.C_LONG$LAYOUT.withName("dwTypeIDMainOffset"),
        Constants$root.C_LONG$LAYOUT.withName("dwTypeNameMainOffset"),
        Constants$root.C_LONG$LAYOUT.withName("dwTypeIDMUISize"),
        Constants$root.C_LONG$LAYOUT.withName("dwTypeIDMUIOffset"),
        Constants$root.C_LONG$LAYOUT.withName("dwTypeNameMUIOffset"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("abBuffer")
    ).withName("_FILEMUIINFO");
    public static MemoryLayout $LAYOUT() {
        return _FILEMUIINFO.$struct$LAYOUT;
    }
    static final VarHandle dwSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwSize"));
    public static VarHandle dwSize$VH() {
        return _FILEMUIINFO.dwSize$VH;
    }
    public static int dwSize$get(MemorySegment seg) {
        return (int)_FILEMUIINFO.dwSize$VH.get(seg);
    }
    public static void dwSize$set( MemorySegment seg, int x) {
        _FILEMUIINFO.dwSize$VH.set(seg, x);
    }
    public static int dwSize$get(MemorySegment seg, long index) {
        return (int)_FILEMUIINFO.dwSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwSize$set(MemorySegment seg, long index, int x) {
        _FILEMUIINFO.dwSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwVersion"));
    public static VarHandle dwVersion$VH() {
        return _FILEMUIINFO.dwVersion$VH;
    }
    public static int dwVersion$get(MemorySegment seg) {
        return (int)_FILEMUIINFO.dwVersion$VH.get(seg);
    }
    public static void dwVersion$set( MemorySegment seg, int x) {
        _FILEMUIINFO.dwVersion$VH.set(seg, x);
    }
    public static int dwVersion$get(MemorySegment seg, long index) {
        return (int)_FILEMUIINFO.dwVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwVersion$set(MemorySegment seg, long index, int x) {
        _FILEMUIINFO.dwVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwFileType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwFileType"));
    public static VarHandle dwFileType$VH() {
        return _FILEMUIINFO.dwFileType$VH;
    }
    public static int dwFileType$get(MemorySegment seg) {
        return (int)_FILEMUIINFO.dwFileType$VH.get(seg);
    }
    public static void dwFileType$set( MemorySegment seg, int x) {
        _FILEMUIINFO.dwFileType$VH.set(seg, x);
    }
    public static int dwFileType$get(MemorySegment seg, long index) {
        return (int)_FILEMUIINFO.dwFileType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwFileType$set(MemorySegment seg, long index, int x) {
        _FILEMUIINFO.dwFileType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment pChecksum$slice(MemorySegment seg) {
        return seg.asSlice(12, 16);
    }
    public static MemorySegment pServiceChecksum$slice(MemorySegment seg) {
        return seg.asSlice(28, 16);
    }
    static final VarHandle dwLanguageNameOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwLanguageNameOffset"));
    public static VarHandle dwLanguageNameOffset$VH() {
        return _FILEMUIINFO.dwLanguageNameOffset$VH;
    }
    public static int dwLanguageNameOffset$get(MemorySegment seg) {
        return (int)_FILEMUIINFO.dwLanguageNameOffset$VH.get(seg);
    }
    public static void dwLanguageNameOffset$set( MemorySegment seg, int x) {
        _FILEMUIINFO.dwLanguageNameOffset$VH.set(seg, x);
    }
    public static int dwLanguageNameOffset$get(MemorySegment seg, long index) {
        return (int)_FILEMUIINFO.dwLanguageNameOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwLanguageNameOffset$set(MemorySegment seg, long index, int x) {
        _FILEMUIINFO.dwLanguageNameOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwTypeIDMainSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwTypeIDMainSize"));
    public static VarHandle dwTypeIDMainSize$VH() {
        return _FILEMUIINFO.dwTypeIDMainSize$VH;
    }
    public static int dwTypeIDMainSize$get(MemorySegment seg) {
        return (int)_FILEMUIINFO.dwTypeIDMainSize$VH.get(seg);
    }
    public static void dwTypeIDMainSize$set( MemorySegment seg, int x) {
        _FILEMUIINFO.dwTypeIDMainSize$VH.set(seg, x);
    }
    public static int dwTypeIDMainSize$get(MemorySegment seg, long index) {
        return (int)_FILEMUIINFO.dwTypeIDMainSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwTypeIDMainSize$set(MemorySegment seg, long index, int x) {
        _FILEMUIINFO.dwTypeIDMainSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwTypeIDMainOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwTypeIDMainOffset"));
    public static VarHandle dwTypeIDMainOffset$VH() {
        return _FILEMUIINFO.dwTypeIDMainOffset$VH;
    }
    public static int dwTypeIDMainOffset$get(MemorySegment seg) {
        return (int)_FILEMUIINFO.dwTypeIDMainOffset$VH.get(seg);
    }
    public static void dwTypeIDMainOffset$set( MemorySegment seg, int x) {
        _FILEMUIINFO.dwTypeIDMainOffset$VH.set(seg, x);
    }
    public static int dwTypeIDMainOffset$get(MemorySegment seg, long index) {
        return (int)_FILEMUIINFO.dwTypeIDMainOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwTypeIDMainOffset$set(MemorySegment seg, long index, int x) {
        _FILEMUIINFO.dwTypeIDMainOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwTypeNameMainOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwTypeNameMainOffset"));
    public static VarHandle dwTypeNameMainOffset$VH() {
        return _FILEMUIINFO.dwTypeNameMainOffset$VH;
    }
    public static int dwTypeNameMainOffset$get(MemorySegment seg) {
        return (int)_FILEMUIINFO.dwTypeNameMainOffset$VH.get(seg);
    }
    public static void dwTypeNameMainOffset$set( MemorySegment seg, int x) {
        _FILEMUIINFO.dwTypeNameMainOffset$VH.set(seg, x);
    }
    public static int dwTypeNameMainOffset$get(MemorySegment seg, long index) {
        return (int)_FILEMUIINFO.dwTypeNameMainOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwTypeNameMainOffset$set(MemorySegment seg, long index, int x) {
        _FILEMUIINFO.dwTypeNameMainOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwTypeIDMUISize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwTypeIDMUISize"));
    public static VarHandle dwTypeIDMUISize$VH() {
        return _FILEMUIINFO.dwTypeIDMUISize$VH;
    }
    public static int dwTypeIDMUISize$get(MemorySegment seg) {
        return (int)_FILEMUIINFO.dwTypeIDMUISize$VH.get(seg);
    }
    public static void dwTypeIDMUISize$set( MemorySegment seg, int x) {
        _FILEMUIINFO.dwTypeIDMUISize$VH.set(seg, x);
    }
    public static int dwTypeIDMUISize$get(MemorySegment seg, long index) {
        return (int)_FILEMUIINFO.dwTypeIDMUISize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwTypeIDMUISize$set(MemorySegment seg, long index, int x) {
        _FILEMUIINFO.dwTypeIDMUISize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwTypeIDMUIOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwTypeIDMUIOffset"));
    public static VarHandle dwTypeIDMUIOffset$VH() {
        return _FILEMUIINFO.dwTypeIDMUIOffset$VH;
    }
    public static int dwTypeIDMUIOffset$get(MemorySegment seg) {
        return (int)_FILEMUIINFO.dwTypeIDMUIOffset$VH.get(seg);
    }
    public static void dwTypeIDMUIOffset$set( MemorySegment seg, int x) {
        _FILEMUIINFO.dwTypeIDMUIOffset$VH.set(seg, x);
    }
    public static int dwTypeIDMUIOffset$get(MemorySegment seg, long index) {
        return (int)_FILEMUIINFO.dwTypeIDMUIOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwTypeIDMUIOffset$set(MemorySegment seg, long index, int x) {
        _FILEMUIINFO.dwTypeIDMUIOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwTypeNameMUIOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwTypeNameMUIOffset"));
    public static VarHandle dwTypeNameMUIOffset$VH() {
        return _FILEMUIINFO.dwTypeNameMUIOffset$VH;
    }
    public static int dwTypeNameMUIOffset$get(MemorySegment seg) {
        return (int)_FILEMUIINFO.dwTypeNameMUIOffset$VH.get(seg);
    }
    public static void dwTypeNameMUIOffset$set( MemorySegment seg, int x) {
        _FILEMUIINFO.dwTypeNameMUIOffset$VH.set(seg, x);
    }
    public static int dwTypeNameMUIOffset$get(MemorySegment seg, long index) {
        return (int)_FILEMUIINFO.dwTypeNameMUIOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwTypeNameMUIOffset$set(MemorySegment seg, long index, int x) {
        _FILEMUIINFO.dwTypeNameMUIOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment abBuffer$slice(MemorySegment seg) {
        return seg.asSlice(72, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


