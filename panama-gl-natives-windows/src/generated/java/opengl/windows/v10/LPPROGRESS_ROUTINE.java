// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface LPPROGRESS_ROUTINE {

    int apply(jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemorySegment x2, jdk.incubator.foreign.MemorySegment x3, int x4, int x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7, jdk.incubator.foreign.MemoryAddress x8);
    static NativeSymbol allocate(LPPROGRESS_ROUTINE fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(LPPROGRESS_ROUTINE.class, fi, constants$300.LPPROGRESS_ROUTINE$FUNC, "(Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;Ljdk/incubator/foreign/MemorySegment;IILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
    }
    static LPPROGRESS_ROUTINE ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("LPPROGRESS_ROUTINE::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemorySegment x0, jdk.incubator.foreign.MemorySegment x1, jdk.incubator.foreign.MemorySegment x2, jdk.incubator.foreign.MemorySegment x3, int x4, int x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7, jdk.incubator.foreign.MemoryAddress x8) -> {
            try {
                return (int)constants$300.LPPROGRESS_ROUTINE$MH.invokeExact(symbol, x0, x1, x2, x3, x4, x5, (jdk.incubator.foreign.Addressable)x6, (jdk.incubator.foreign.Addressable)x7, (jdk.incubator.foreign.Addressable)x8);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


