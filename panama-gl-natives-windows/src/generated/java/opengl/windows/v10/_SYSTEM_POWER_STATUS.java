// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _SYSTEM_POWER_STATUS {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_CHAR$LAYOUT.withName("ACLineStatus"),
        Constants$root.C_CHAR$LAYOUT.withName("BatteryFlag"),
        Constants$root.C_CHAR$LAYOUT.withName("BatteryLifePercent"),
        Constants$root.C_CHAR$LAYOUT.withName("SystemStatusFlag"),
        Constants$root.C_LONG$LAYOUT.withName("BatteryLifeTime"),
        Constants$root.C_LONG$LAYOUT.withName("BatteryFullLifeTime")
    ).withName("_SYSTEM_POWER_STATUS");
    public static MemoryLayout $LAYOUT() {
        return _SYSTEM_POWER_STATUS.$struct$LAYOUT;
    }
    static final VarHandle ACLineStatus$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ACLineStatus"));
    public static VarHandle ACLineStatus$VH() {
        return _SYSTEM_POWER_STATUS.ACLineStatus$VH;
    }
    public static byte ACLineStatus$get(MemorySegment seg) {
        return (byte)_SYSTEM_POWER_STATUS.ACLineStatus$VH.get(seg);
    }
    public static void ACLineStatus$set( MemorySegment seg, byte x) {
        _SYSTEM_POWER_STATUS.ACLineStatus$VH.set(seg, x);
    }
    public static byte ACLineStatus$get(MemorySegment seg, long index) {
        return (byte)_SYSTEM_POWER_STATUS.ACLineStatus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ACLineStatus$set(MemorySegment seg, long index, byte x) {
        _SYSTEM_POWER_STATUS.ACLineStatus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BatteryFlag$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BatteryFlag"));
    public static VarHandle BatteryFlag$VH() {
        return _SYSTEM_POWER_STATUS.BatteryFlag$VH;
    }
    public static byte BatteryFlag$get(MemorySegment seg) {
        return (byte)_SYSTEM_POWER_STATUS.BatteryFlag$VH.get(seg);
    }
    public static void BatteryFlag$set( MemorySegment seg, byte x) {
        _SYSTEM_POWER_STATUS.BatteryFlag$VH.set(seg, x);
    }
    public static byte BatteryFlag$get(MemorySegment seg, long index) {
        return (byte)_SYSTEM_POWER_STATUS.BatteryFlag$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BatteryFlag$set(MemorySegment seg, long index, byte x) {
        _SYSTEM_POWER_STATUS.BatteryFlag$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BatteryLifePercent$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BatteryLifePercent"));
    public static VarHandle BatteryLifePercent$VH() {
        return _SYSTEM_POWER_STATUS.BatteryLifePercent$VH;
    }
    public static byte BatteryLifePercent$get(MemorySegment seg) {
        return (byte)_SYSTEM_POWER_STATUS.BatteryLifePercent$VH.get(seg);
    }
    public static void BatteryLifePercent$set( MemorySegment seg, byte x) {
        _SYSTEM_POWER_STATUS.BatteryLifePercent$VH.set(seg, x);
    }
    public static byte BatteryLifePercent$get(MemorySegment seg, long index) {
        return (byte)_SYSTEM_POWER_STATUS.BatteryLifePercent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BatteryLifePercent$set(MemorySegment seg, long index, byte x) {
        _SYSTEM_POWER_STATUS.BatteryLifePercent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SystemStatusFlag$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SystemStatusFlag"));
    public static VarHandle SystemStatusFlag$VH() {
        return _SYSTEM_POWER_STATUS.SystemStatusFlag$VH;
    }
    public static byte SystemStatusFlag$get(MemorySegment seg) {
        return (byte)_SYSTEM_POWER_STATUS.SystemStatusFlag$VH.get(seg);
    }
    public static void SystemStatusFlag$set( MemorySegment seg, byte x) {
        _SYSTEM_POWER_STATUS.SystemStatusFlag$VH.set(seg, x);
    }
    public static byte SystemStatusFlag$get(MemorySegment seg, long index) {
        return (byte)_SYSTEM_POWER_STATUS.SystemStatusFlag$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SystemStatusFlag$set(MemorySegment seg, long index, byte x) {
        _SYSTEM_POWER_STATUS.SystemStatusFlag$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BatteryLifeTime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BatteryLifeTime"));
    public static VarHandle BatteryLifeTime$VH() {
        return _SYSTEM_POWER_STATUS.BatteryLifeTime$VH;
    }
    public static int BatteryLifeTime$get(MemorySegment seg) {
        return (int)_SYSTEM_POWER_STATUS.BatteryLifeTime$VH.get(seg);
    }
    public static void BatteryLifeTime$set( MemorySegment seg, int x) {
        _SYSTEM_POWER_STATUS.BatteryLifeTime$VH.set(seg, x);
    }
    public static int BatteryLifeTime$get(MemorySegment seg, long index) {
        return (int)_SYSTEM_POWER_STATUS.BatteryLifeTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BatteryLifeTime$set(MemorySegment seg, long index, int x) {
        _SYSTEM_POWER_STATUS.BatteryLifeTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle BatteryFullLifeTime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BatteryFullLifeTime"));
    public static VarHandle BatteryFullLifeTime$VH() {
        return _SYSTEM_POWER_STATUS.BatteryFullLifeTime$VH;
    }
    public static int BatteryFullLifeTime$get(MemorySegment seg) {
        return (int)_SYSTEM_POWER_STATUS.BatteryFullLifeTime$VH.get(seg);
    }
    public static void BatteryFullLifeTime$set( MemorySegment seg, int x) {
        _SYSTEM_POWER_STATUS.BatteryFullLifeTime$VH.set(seg, x);
    }
    public static int BatteryFullLifeTime$get(MemorySegment seg, long index) {
        return (int)_SYSTEM_POWER_STATUS.BatteryFullLifeTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BatteryFullLifeTime$set(MemorySegment seg, long index, int x) {
        _SYSTEM_POWER_STATUS.BatteryFullLifeTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


