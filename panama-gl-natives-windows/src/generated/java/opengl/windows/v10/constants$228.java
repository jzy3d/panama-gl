// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$228 {

    static final FunctionDescriptor LoadStringA$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle LoadStringA$MH = RuntimeHelper.downcallHandle(
        "LoadStringA",
        constants$228.LoadStringA$FUNC, false
    );
    static final FunctionDescriptor LoadStringW$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle LoadStringW$MH = RuntimeHelper.downcallHandle(
        "LoadStringW",
        constants$228.LoadStringW$FUNC, false
    );
    static final FunctionDescriptor LockResource$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle LockResource$MH = RuntimeHelper.downcallHandle(
        "LockResource",
        constants$228.LockResource$FUNC, false
    );
    static final FunctionDescriptor SizeofResource$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle SizeofResource$MH = RuntimeHelper.downcallHandle(
        "SizeofResource",
        constants$228.SizeofResource$FUNC, false
    );
    static final FunctionDescriptor AddDllDirectory$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle AddDllDirectory$MH = RuntimeHelper.downcallHandle(
        "AddDllDirectory",
        constants$228.AddDllDirectory$FUNC, false
    );
    static final FunctionDescriptor RemoveDllDirectory$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle RemoveDllDirectory$MH = RuntimeHelper.downcallHandle(
        "RemoveDllDirectory",
        constants$228.RemoveDllDirectory$FUNC, false
    );
}


