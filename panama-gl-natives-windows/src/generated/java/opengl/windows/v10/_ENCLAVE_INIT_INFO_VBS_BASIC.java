// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _ENCLAVE_INIT_INFO_VBS_BASIC {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("FamilyId"),
        MemoryLayout.sequenceLayout(16, Constants$root.C_CHAR$LAYOUT).withName("ImageId"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("EnclaveSize"),
        Constants$root.C_LONG$LAYOUT.withName("EnclaveSvn"),
        Constants$root.C_LONG$LAYOUT.withName("Reserved"),
        MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("SignatureInfoHandle"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("Unused")
        ).withName("$anon$0")
    ).withName("_ENCLAVE_INIT_INFO_VBS_BASIC");
    public static MemoryLayout $LAYOUT() {
        return _ENCLAVE_INIT_INFO_VBS_BASIC.$struct$LAYOUT;
    }
    public static MemorySegment FamilyId$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static MemorySegment ImageId$slice(MemorySegment seg) {
        return seg.asSlice(16, 16);
    }
    static final VarHandle EnclaveSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EnclaveSize"));
    public static VarHandle EnclaveSize$VH() {
        return _ENCLAVE_INIT_INFO_VBS_BASIC.EnclaveSize$VH;
    }
    public static long EnclaveSize$get(MemorySegment seg) {
        return (long)_ENCLAVE_INIT_INFO_VBS_BASIC.EnclaveSize$VH.get(seg);
    }
    public static void EnclaveSize$set( MemorySegment seg, long x) {
        _ENCLAVE_INIT_INFO_VBS_BASIC.EnclaveSize$VH.set(seg, x);
    }
    public static long EnclaveSize$get(MemorySegment seg, long index) {
        return (long)_ENCLAVE_INIT_INFO_VBS_BASIC.EnclaveSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EnclaveSize$set(MemorySegment seg, long index, long x) {
        _ENCLAVE_INIT_INFO_VBS_BASIC.EnclaveSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle EnclaveSvn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EnclaveSvn"));
    public static VarHandle EnclaveSvn$VH() {
        return _ENCLAVE_INIT_INFO_VBS_BASIC.EnclaveSvn$VH;
    }
    public static int EnclaveSvn$get(MemorySegment seg) {
        return (int)_ENCLAVE_INIT_INFO_VBS_BASIC.EnclaveSvn$VH.get(seg);
    }
    public static void EnclaveSvn$set( MemorySegment seg, int x) {
        _ENCLAVE_INIT_INFO_VBS_BASIC.EnclaveSvn$VH.set(seg, x);
    }
    public static int EnclaveSvn$get(MemorySegment seg, long index) {
        return (int)_ENCLAVE_INIT_INFO_VBS_BASIC.EnclaveSvn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EnclaveSvn$set(MemorySegment seg, long index, int x) {
        _ENCLAVE_INIT_INFO_VBS_BASIC.EnclaveSvn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Reserved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Reserved"));
    public static VarHandle Reserved$VH() {
        return _ENCLAVE_INIT_INFO_VBS_BASIC.Reserved$VH;
    }
    public static int Reserved$get(MemorySegment seg) {
        return (int)_ENCLAVE_INIT_INFO_VBS_BASIC.Reserved$VH.get(seg);
    }
    public static void Reserved$set( MemorySegment seg, int x) {
        _ENCLAVE_INIT_INFO_VBS_BASIC.Reserved$VH.set(seg, x);
    }
    public static int Reserved$get(MemorySegment seg, long index) {
        return (int)_ENCLAVE_INIT_INFO_VBS_BASIC.Reserved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved$set(MemorySegment seg, long index, int x) {
        _ENCLAVE_INIT_INFO_VBS_BASIC.Reserved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SignatureInfoHandle$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("SignatureInfoHandle"));
    public static VarHandle SignatureInfoHandle$VH() {
        return _ENCLAVE_INIT_INFO_VBS_BASIC.SignatureInfoHandle$VH;
    }
    public static MemoryAddress SignatureInfoHandle$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_ENCLAVE_INIT_INFO_VBS_BASIC.SignatureInfoHandle$VH.get(seg);
    }
    public static void SignatureInfoHandle$set( MemorySegment seg, MemoryAddress x) {
        _ENCLAVE_INIT_INFO_VBS_BASIC.SignatureInfoHandle$VH.set(seg, x);
    }
    public static MemoryAddress SignatureInfoHandle$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_ENCLAVE_INIT_INFO_VBS_BASIC.SignatureInfoHandle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SignatureInfoHandle$set(MemorySegment seg, long index, MemoryAddress x) {
        _ENCLAVE_INIT_INFO_VBS_BASIC.SignatureInfoHandle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Unused$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("Unused"));
    public static VarHandle Unused$VH() {
        return _ENCLAVE_INIT_INFO_VBS_BASIC.Unused$VH;
    }
    public static long Unused$get(MemorySegment seg) {
        return (long)_ENCLAVE_INIT_INFO_VBS_BASIC.Unused$VH.get(seg);
    }
    public static void Unused$set( MemorySegment seg, long x) {
        _ENCLAVE_INIT_INFO_VBS_BASIC.Unused$VH.set(seg, x);
    }
    public static long Unused$get(MemorySegment seg, long index) {
        return (long)_ENCLAVE_INIT_INFO_VBS_BASIC.Unused$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Unused$set(MemorySegment seg, long index, long x) {
        _ENCLAVE_INIT_INFO_VBS_BASIC.Unused$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


