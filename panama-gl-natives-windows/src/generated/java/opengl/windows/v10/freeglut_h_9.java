// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
 class freeglut_h_9 extends freeglut_h_8 {

    public static OfAddress LPCCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NPSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZPSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCZPSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZPCSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCZPCSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZZSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCZZSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNZCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCNZCH = Constants$root.C_POINTER$LAYOUT;
    public static OfByte TCHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfAddress PTCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTBYTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPUTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCUTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZZTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUZZTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCZZTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUZZTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZPTSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNZTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUNZTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCNZTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUNZTCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSHORT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLONG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESSOR_NUMBER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGROUP_AFFINITY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress HANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PHANDLE = Constants$root.C_POINTER$LAYOUT;
    public static OfInt HRESULT = Constants$root.C_LONG$LAYOUT;
    public static OfByte CCHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfAddress PLCID = Constants$root.C_POINTER$LAYOUT;
    public static int UNSPECIFIED_COMPARTMENT_ID() {
        return (int)0L;
    }
    public static int DEFAULT_COMPARTMENT_ID() {
        return (int)1L;
    }
    public static OfAddress PCOMPARTMENT_ID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFLOAT128 = Constants$root.C_POINTER$LAYOUT;
    public static OfLong LONGLONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress PLONGLONG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PULONGLONG = Constants$root.C_POINTER$LAYOUT;
    public static OfLong USN = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress PLARGE_INTEGER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PULARGE_INTEGER = Constants$root.C_POINTER$LAYOUT;
    public static OfLong RTL_REFERENCE_COUNT = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress PRTL_REFERENCE_COUNT = Constants$root.C_POINTER$LAYOUT;
    public static OfInt RTL_REFERENCE_COUNT32 = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PRTL_REFERENCE_COUNT32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLUID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDWORDLONG = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle _rotl8$MH() {
        return RuntimeHelper.requireNonNull(constants$19._rotl8$MH,"_rotl8");
    }
    public static byte _rotl8 ( byte Value,  byte Shift) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19._rotl8$MH, "_rotl8");
        try {
            return (byte)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotl16$MH() {
        return RuntimeHelper.requireNonNull(constants$19._rotl16$MH,"_rotl16");
    }
    public static short _rotl16 ( short Value,  byte Shift) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19._rotl16$MH, "_rotl16");
        try {
            return (short)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotr8$MH() {
        return RuntimeHelper.requireNonNull(constants$19._rotr8$MH,"_rotr8");
    }
    public static byte _rotr8 ( byte Value,  byte Shift) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19._rotr8$MH, "_rotr8");
        try {
            return (byte)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotr16$MH() {
        return RuntimeHelper.requireNonNull(constants$20._rotr16$MH,"_rotr16");
    }
    public static short _rotr16 ( short Value,  byte Shift) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20._rotr16$MH, "_rotr16");
        try {
            return (short)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotl$MH() {
        return RuntimeHelper.requireNonNull(constants$20._rotl$MH,"_rotl");
    }
    public static int _rotl ( int Value,  int Shift) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20._rotl$MH, "_rotl");
        try {
            return (int)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotl64$MH() {
        return RuntimeHelper.requireNonNull(constants$20._rotl64$MH,"_rotl64");
    }
    public static long _rotl64 ( long Value,  int Shift) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20._rotl64$MH, "_rotl64");
        try {
            return (long)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotr$MH() {
        return RuntimeHelper.requireNonNull(constants$20._rotr$MH,"_rotr");
    }
    public static int _rotr ( int Value,  int Shift) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20._rotr$MH, "_rotr");
        try {
            return (int)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _rotr64$MH() {
        return RuntimeHelper.requireNonNull(constants$20._rotr64$MH,"_rotr64");
    }
    public static long _rotr64 ( long Value,  int Shift) {
        var mh$ = RuntimeHelper.requireNonNull(constants$20._rotr64$MH, "_rotr64");
        try {
            return (long)mh$.invokeExact(Value, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PBOOLEAN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLIST_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRLIST_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSINGLE_LIST_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLIST_ENTRY32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLIST_ENTRY64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPGUID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCGUID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPIID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCLSID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPFMTID = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle _errno$MH() {
        return RuntimeHelper.requireNonNull(constants$20._errno$MH,"_errno");
    }
    public static MemoryAddress _errno () {
        var mh$ = RuntimeHelper.requireNonNull(constants$20._errno$MH, "_errno");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_errno$MH() {
        return RuntimeHelper.requireNonNull(constants$21._set_errno$MH,"_set_errno");
    }
    public static int _set_errno ( int _Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21._set_errno$MH, "_set_errno");
        try {
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_errno$MH() {
        return RuntimeHelper.requireNonNull(constants$21._get_errno$MH,"_get_errno");
    }
    public static int _get_errno ( Addressable _Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21._get_errno$MH, "_get_errno");
        try {
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __doserrno$MH() {
        return RuntimeHelper.requireNonNull(constants$21.__doserrno$MH,"__doserrno");
    }
    public static MemoryAddress __doserrno () {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.__doserrno$MH, "__doserrno");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _set_doserrno$MH() {
        return RuntimeHelper.requireNonNull(constants$21._set_doserrno$MH,"_set_doserrno");
    }
    public static int _set_doserrno ( int _Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21._set_doserrno$MH, "_set_doserrno");
        try {
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _get_doserrno$MH() {
        return RuntimeHelper.requireNonNull(constants$21._get_doserrno$MH,"_get_doserrno");
    }
    public static int _get_doserrno ( Addressable _Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21._get_doserrno$MH, "_get_doserrno");
        try {
            return (int)mh$.invokeExact(_Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memchr$MH() {
        return RuntimeHelper.requireNonNull(constants$21.memchr$MH,"memchr");
    }
    public static MemoryAddress memchr ( Addressable _Buf,  int _Val,  long _MaxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$21.memchr$MH, "memchr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_Buf, _Val, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$22.memcmp$MH,"memcmp");
    }
    public static int memcmp ( Addressable _Buf1,  Addressable _Buf2,  long _Size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.memcmp$MH, "memcmp");
        try {
            return (int)mh$.invokeExact(_Buf1, _Buf2, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$22.memcpy$MH,"memcpy");
    }
    public static MemoryAddress memcpy ( Addressable _Dst,  Addressable _Src,  long _Size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.memcpy$MH, "memcpy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_Dst, _Src, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memmove$MH() {
        return RuntimeHelper.requireNonNull(constants$22.memmove$MH,"memmove");
    }
    public static MemoryAddress memmove ( Addressable _Dst,  Addressable _Src,  long _Size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.memmove$MH, "memmove");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_Dst, _Src, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memset$MH() {
        return RuntimeHelper.requireNonNull(constants$22.memset$MH,"memset");
    }
    public static MemoryAddress memset ( Addressable _Dst,  int _Val,  long _Size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.memset$MH, "memset");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_Dst, _Val, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strchr$MH() {
        return RuntimeHelper.requireNonNull(constants$22.strchr$MH,"strchr");
    }
    public static MemoryAddress strchr ( Addressable _Str,  int _Val) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.strchr$MH, "strchr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_Str, _Val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strrchr$MH() {
        return RuntimeHelper.requireNonNull(constants$22.strrchr$MH,"strrchr");
    }
    public static MemoryAddress strrchr ( Addressable _Str,  int _Ch) {
        var mh$ = RuntimeHelper.requireNonNull(constants$22.strrchr$MH, "strrchr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_Str, _Ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strstr$MH() {
        return RuntimeHelper.requireNonNull(constants$23.strstr$MH,"strstr");
    }
    public static MemoryAddress strstr ( Addressable _Str,  Addressable _SubStr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.strstr$MH, "strstr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_Str, _SubStr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcschr$MH() {
        return RuntimeHelper.requireNonNull(constants$23.wcschr$MH,"wcschr");
    }
    public static MemoryAddress wcschr ( Addressable _Str,  short _Ch) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.wcschr$MH, "wcschr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_Str, _Ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsrchr$MH() {
        return RuntimeHelper.requireNonNull(constants$23.wcsrchr$MH,"wcsrchr");
    }
    public static MemoryAddress wcsrchr ( Addressable _Str,  short _Ch) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.wcsrchr$MH, "wcsrchr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_Str, _Ch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsstr$MH() {
        return RuntimeHelper.requireNonNull(constants$23.wcsstr$MH,"wcsstr");
    }
    public static MemoryAddress wcsstr ( Addressable _Str,  Addressable _SubStr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.wcsstr$MH, "wcsstr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_Str, _SubStr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memcpy_s$MH() {
        return RuntimeHelper.requireNonNull(constants$23.memcpy_s$MH,"memcpy_s");
    }
    public static int memcpy_s ( Addressable _Destination,  long _DestinationSize,  Addressable _Source,  long _SourceSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.memcpy_s$MH, "memcpy_s");
        try {
            return (int)mh$.invokeExact(_Destination, _DestinationSize, _Source, _SourceSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memmove_s$MH() {
        return RuntimeHelper.requireNonNull(constants$23.memmove_s$MH,"memmove_s");
    }
    public static int memmove_s ( Addressable _Destination,  long _DestinationSize,  Addressable _Source,  long _SourceSize) {
        var mh$ = RuntimeHelper.requireNonNull(constants$23.memmove_s$MH, "memmove_s");
        try {
            return (int)mh$.invokeExact(_Destination, _DestinationSize, _Source, _SourceSize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _memicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$24._memicmp$MH,"_memicmp");
    }
    public static int _memicmp ( Addressable _Buf1,  Addressable _Buf2,  long _Size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24._memicmp$MH, "_memicmp");
        try {
            return (int)mh$.invokeExact(_Buf1, _Buf2, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _memicmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$24._memicmp_l$MH,"_memicmp_l");
    }
    public static int _memicmp_l ( Addressable _Buf1,  Addressable _Buf2,  long _Size,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24._memicmp_l$MH, "_memicmp_l");
        try {
            return (int)mh$.invokeExact(_Buf1, _Buf2, _Size, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memccpy$MH() {
        return RuntimeHelper.requireNonNull(constants$24.memccpy$MH,"memccpy");
    }
    public static MemoryAddress memccpy ( Addressable _Dst,  Addressable _Src,  int _Val,  long _Size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.memccpy$MH, "memccpy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_Dst, _Src, _Val, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$24.memicmp$MH,"memicmp");
    }
    public static int memicmp ( Addressable _Buf1,  Addressable _Buf2,  long _Size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.memicmp$MH, "memicmp");
        try {
            return (int)mh$.invokeExact(_Buf1, _Buf2, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcscat_s$MH() {
        return RuntimeHelper.requireNonNull(constants$24.wcscat_s$MH,"wcscat_s");
    }
    public static int wcscat_s ( Addressable _Destination,  long _SizeInWords,  Addressable _Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.wcscat_s$MH, "wcscat_s");
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInWords, _Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcscpy_s$MH() {
        return RuntimeHelper.requireNonNull(constants$24.wcscpy_s$MH,"wcscpy_s");
    }
    public static int wcscpy_s ( Addressable _Destination,  long _SizeInWords,  Addressable _Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$24.wcscpy_s$MH, "wcscpy_s");
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInWords, _Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsncat_s$MH() {
        return RuntimeHelper.requireNonNull(constants$25.wcsncat_s$MH,"wcsncat_s");
    }
    public static int wcsncat_s ( Addressable _Destination,  long _SizeInWords,  Addressable _Source,  long _MaxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.wcsncat_s$MH, "wcsncat_s");
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInWords, _Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsncpy_s$MH() {
        return RuntimeHelper.requireNonNull(constants$25.wcsncpy_s$MH,"wcsncpy_s");
    }
    public static int wcsncpy_s ( Addressable _Destination,  long _SizeInWords,  Addressable _Source,  long _MaxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.wcsncpy_s$MH, "wcsncpy_s");
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInWords, _Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstok_s$MH() {
        return RuntimeHelper.requireNonNull(constants$25.wcstok_s$MH,"wcstok_s");
    }
    public static MemoryAddress wcstok_s ( Addressable _String,  Addressable _Delimiter,  Addressable _Context) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.wcstok_s$MH, "wcstok_s");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String, _Delimiter, _Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsdup$MH() {
        return RuntimeHelper.requireNonNull(constants$25._wcsdup$MH,"_wcsdup");
    }
    public static MemoryAddress _wcsdup ( Addressable _String) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25._wcsdup$MH, "_wcsdup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcscat$MH() {
        return RuntimeHelper.requireNonNull(constants$25.wcscat$MH,"wcscat");
    }
    public static MemoryAddress wcscat ( Addressable _Destination,  Addressable _Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.wcscat$MH, "wcscat");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_Destination, _Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcscmp$MH() {
        return RuntimeHelper.requireNonNull(constants$25.wcscmp$MH,"wcscmp");
    }
    public static int wcscmp ( Addressable _String1,  Addressable _String2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$25.wcscmp$MH, "wcscmp");
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcscpy$MH() {
        return RuntimeHelper.requireNonNull(constants$26.wcscpy$MH,"wcscpy");
    }
    public static MemoryAddress wcscpy ( Addressable _Destination,  Addressable _Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.wcscpy$MH, "wcscpy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_Destination, _Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcscspn$MH() {
        return RuntimeHelper.requireNonNull(constants$26.wcscspn$MH,"wcscspn");
    }
    public static long wcscspn ( Addressable _String,  Addressable _Control) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.wcscspn$MH, "wcscspn");
        try {
            return (long)mh$.invokeExact(_String, _Control);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcslen$MH() {
        return RuntimeHelper.requireNonNull(constants$26.wcslen$MH,"wcslen");
    }
    public static long wcslen ( Addressable _String) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.wcslen$MH, "wcslen");
        try {
            return (long)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsnlen$MH() {
        return RuntimeHelper.requireNonNull(constants$26.wcsnlen$MH,"wcsnlen");
    }
    public static long wcsnlen ( Addressable _Source,  long _MaxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.wcsnlen$MH, "wcsnlen");
        try {
            return (long)mh$.invokeExact(_Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsnlen_s$MH() {
        return RuntimeHelper.requireNonNull(constants$26.wcsnlen_s$MH,"wcsnlen_s");
    }
    public static long wcsnlen_s ( Addressable _Source,  long _MaxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.wcsnlen_s$MH, "wcsnlen_s");
        try {
            return (long)mh$.invokeExact(_Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsncat$MH() {
        return RuntimeHelper.requireNonNull(constants$26.wcsncat$MH,"wcsncat");
    }
    public static MemoryAddress wcsncat ( Addressable _Destination,  Addressable _Source,  long _Count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$26.wcsncat$MH, "wcsncat");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_Destination, _Source, _Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsncmp$MH() {
        return RuntimeHelper.requireNonNull(constants$27.wcsncmp$MH,"wcsncmp");
    }
    public static int wcsncmp ( Addressable _String1,  Addressable _String2,  long _MaxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.wcsncmp$MH, "wcsncmp");
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$27.wcsncpy$MH,"wcsncpy");
    }
    public static MemoryAddress wcsncpy ( Addressable _Destination,  Addressable _Source,  long _Count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.wcsncpy$MH, "wcsncpy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_Destination, _Source, _Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcspbrk$MH() {
        return RuntimeHelper.requireNonNull(constants$27.wcspbrk$MH,"wcspbrk");
    }
    public static MemoryAddress wcspbrk ( Addressable _String,  Addressable _Control) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.wcspbrk$MH, "wcspbrk");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String, _Control);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsspn$MH() {
        return RuntimeHelper.requireNonNull(constants$27.wcsspn$MH,"wcsspn");
    }
    public static long wcsspn ( Addressable _String,  Addressable _Control) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.wcsspn$MH, "wcsspn");
        try {
            return (long)mh$.invokeExact(_String, _Control);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstok$MH() {
        return RuntimeHelper.requireNonNull(constants$27.wcstok$MH,"wcstok");
    }
    public static MemoryAddress wcstok ( Addressable _String,  Addressable _Delimiter,  Addressable _Context) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27.wcstok$MH, "wcstok");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String, _Delimiter, _Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcstok$MH() {
        return RuntimeHelper.requireNonNull(constants$27._wcstok$MH,"_wcstok");
    }
    public static MemoryAddress _wcstok ( Addressable _String,  Addressable _Delimiter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$27._wcstok$MH, "_wcstok");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String, _Delimiter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcserror$MH() {
        return RuntimeHelper.requireNonNull(constants$28._wcserror$MH,"_wcserror");
    }
    public static MemoryAddress _wcserror ( int _ErrorNumber) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28._wcserror$MH, "_wcserror");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_ErrorNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcserror_s$MH() {
        return RuntimeHelper.requireNonNull(constants$28._wcserror_s$MH,"_wcserror_s");
    }
    public static int _wcserror_s ( Addressable _Buffer,  long _SizeInWords,  int _ErrorNumber) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28._wcserror_s$MH, "_wcserror_s");
        try {
            return (int)mh$.invokeExact(_Buffer, _SizeInWords, _ErrorNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __wcserror$MH() {
        return RuntimeHelper.requireNonNull(constants$28.__wcserror$MH,"__wcserror");
    }
    public static MemoryAddress __wcserror ( Addressable _String) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.__wcserror$MH, "__wcserror");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __wcserror_s$MH() {
        return RuntimeHelper.requireNonNull(constants$28.__wcserror_s$MH,"__wcserror_s");
    }
    public static int __wcserror_s ( Addressable _Buffer,  long _SizeInWords,  Addressable _ErrorMessage) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28.__wcserror_s$MH, "__wcserror_s");
        try {
            return (int)mh$.invokeExact(_Buffer, _SizeInWords, _ErrorMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$28._wcsicmp$MH,"_wcsicmp");
    }
    public static int _wcsicmp ( Addressable _String1,  Addressable _String2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28._wcsicmp$MH, "_wcsicmp");
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsicmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$28._wcsicmp_l$MH,"_wcsicmp_l");
    }
    public static int _wcsicmp_l ( Addressable _String1,  Addressable _String2,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$28._wcsicmp_l$MH, "_wcsicmp_l");
        try {
            return (int)mh$.invokeExact(_String1, _String2, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsnicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$29._wcsnicmp$MH,"_wcsnicmp");
    }
    public static int _wcsnicmp ( Addressable _String1,  Addressable _String2,  long _MaxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29._wcsnicmp$MH, "_wcsnicmp");
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsnicmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$29._wcsnicmp_l$MH,"_wcsnicmp_l");
    }
    public static int _wcsnicmp_l ( Addressable _String1,  Addressable _String2,  long _MaxCount,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29._wcsnicmp_l$MH, "_wcsnicmp_l");
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsnset_s$MH() {
        return RuntimeHelper.requireNonNull(constants$29._wcsnset_s$MH,"_wcsnset_s");
    }
    public static int _wcsnset_s ( Addressable _Destination,  long _SizeInWords,  short _Value,  long _MaxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29._wcsnset_s$MH, "_wcsnset_s");
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInWords, _Value, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsnset$MH() {
        return RuntimeHelper.requireNonNull(constants$29._wcsnset$MH,"_wcsnset");
    }
    public static MemoryAddress _wcsnset ( Addressable _String,  short _Value,  long _MaxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29._wcsnset$MH, "_wcsnset");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String, _Value, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsrev$MH() {
        return RuntimeHelper.requireNonNull(constants$29._wcsrev$MH,"_wcsrev");
    }
    public static MemoryAddress _wcsrev ( Addressable _String) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29._wcsrev$MH, "_wcsrev");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsset_s$MH() {
        return RuntimeHelper.requireNonNull(constants$29._wcsset_s$MH,"_wcsset_s");
    }
    public static int _wcsset_s ( Addressable _Destination,  long _SizeInWords,  short _Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$29._wcsset_s$MH, "_wcsset_s");
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInWords, _Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsset$MH() {
        return RuntimeHelper.requireNonNull(constants$30._wcsset$MH,"_wcsset");
    }
    public static MemoryAddress _wcsset ( Addressable _String,  short _Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30._wcsset$MH, "_wcsset");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String, _Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcslwr_s$MH() {
        return RuntimeHelper.requireNonNull(constants$30._wcslwr_s$MH,"_wcslwr_s");
    }
    public static int _wcslwr_s ( Addressable _String,  long _SizeInWords) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30._wcslwr_s$MH, "_wcslwr_s");
        try {
            return (int)mh$.invokeExact(_String, _SizeInWords);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcslwr$MH() {
        return RuntimeHelper.requireNonNull(constants$30._wcslwr$MH,"_wcslwr");
    }
    public static MemoryAddress _wcslwr ( Addressable _String) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30._wcslwr$MH, "_wcslwr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcslwr_s_l$MH() {
        return RuntimeHelper.requireNonNull(constants$30._wcslwr_s_l$MH,"_wcslwr_s_l");
    }
    public static int _wcslwr_s_l ( Addressable _String,  long _SizeInWords,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30._wcslwr_s_l$MH, "_wcslwr_s_l");
        try {
            return (int)mh$.invokeExact(_String, _SizeInWords, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcslwr_l$MH() {
        return RuntimeHelper.requireNonNull(constants$30._wcslwr_l$MH,"_wcslwr_l");
    }
    public static MemoryAddress _wcslwr_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30._wcslwr_l$MH, "_wcslwr_l");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsupr_s$MH() {
        return RuntimeHelper.requireNonNull(constants$30._wcsupr_s$MH,"_wcsupr_s");
    }
    public static int _wcsupr_s ( Addressable _String,  long _Size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$30._wcsupr_s$MH, "_wcsupr_s");
        try {
            return (int)mh$.invokeExact(_String, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsupr$MH() {
        return RuntimeHelper.requireNonNull(constants$31._wcsupr$MH,"_wcsupr");
    }
    public static MemoryAddress _wcsupr ( Addressable _String) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31._wcsupr$MH, "_wcsupr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsupr_s_l$MH() {
        return RuntimeHelper.requireNonNull(constants$31._wcsupr_s_l$MH,"_wcsupr_s_l");
    }
    public static int _wcsupr_s_l ( Addressable _String,  long _Size,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31._wcsupr_s_l$MH, "_wcsupr_s_l");
        try {
            return (int)mh$.invokeExact(_String, _Size, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsupr_l$MH() {
        return RuntimeHelper.requireNonNull(constants$31._wcsupr_l$MH,"_wcsupr_l");
    }
    public static MemoryAddress _wcsupr_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31._wcsupr_l$MH, "_wcsupr_l");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsxfrm$MH() {
        return RuntimeHelper.requireNonNull(constants$31.wcsxfrm$MH,"wcsxfrm");
    }
    public static long wcsxfrm ( Addressable _Destination,  Addressable _Source,  long _MaxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.wcsxfrm$MH, "wcsxfrm");
        try {
            return (long)mh$.invokeExact(_Destination, _Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsxfrm_l$MH() {
        return RuntimeHelper.requireNonNull(constants$31._wcsxfrm_l$MH,"_wcsxfrm_l");
    }
    public static long _wcsxfrm_l ( Addressable _Destination,  Addressable _Source,  long _MaxCount,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31._wcsxfrm_l$MH, "_wcsxfrm_l");
        try {
            return (long)mh$.invokeExact(_Destination, _Source, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcscoll$MH() {
        return RuntimeHelper.requireNonNull(constants$31.wcscoll$MH,"wcscoll");
    }
    public static int wcscoll ( Addressable _String1,  Addressable _String2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$31.wcscoll$MH, "wcscoll");
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcscoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$32._wcscoll_l$MH,"_wcscoll_l");
    }
    public static int _wcscoll_l ( Addressable _String1,  Addressable _String2,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32._wcscoll_l$MH, "_wcscoll_l");
        try {
            return (int)mh$.invokeExact(_String1, _String2, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsicoll$MH() {
        return RuntimeHelper.requireNonNull(constants$32._wcsicoll$MH,"_wcsicoll");
    }
    public static int _wcsicoll ( Addressable _String1,  Addressable _String2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32._wcsicoll$MH, "_wcsicoll");
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsicoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$32._wcsicoll_l$MH,"_wcsicoll_l");
    }
    public static int _wcsicoll_l ( Addressable _String1,  Addressable _String2,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32._wcsicoll_l$MH, "_wcsicoll_l");
        try {
            return (int)mh$.invokeExact(_String1, _String2, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsncoll$MH() {
        return RuntimeHelper.requireNonNull(constants$32._wcsncoll$MH,"_wcsncoll");
    }
    public static int _wcsncoll ( Addressable _String1,  Addressable _String2,  long _MaxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32._wcsncoll$MH, "_wcsncoll");
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsncoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$32._wcsncoll_l$MH,"_wcsncoll_l");
    }
    public static int _wcsncoll_l ( Addressable _String1,  Addressable _String2,  long _MaxCount,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32._wcsncoll_l$MH, "_wcsncoll_l");
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsnicoll$MH() {
        return RuntimeHelper.requireNonNull(constants$32._wcsnicoll$MH,"_wcsnicoll");
    }
    public static int _wcsnicoll ( Addressable _String1,  Addressable _String2,  long _MaxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$32._wcsnicoll$MH, "_wcsnicoll");
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _wcsnicoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$33._wcsnicoll_l$MH,"_wcsnicoll_l");
    }
    public static int _wcsnicoll_l ( Addressable _String1,  Addressable _String2,  long _MaxCount,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33._wcsnicoll_l$MH, "_wcsnicoll_l");
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsdup$MH() {
        return RuntimeHelper.requireNonNull(constants$33.wcsdup$MH,"wcsdup");
    }
    public static MemoryAddress wcsdup ( Addressable _String) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.wcsdup$MH, "wcsdup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$33.wcsicmp$MH,"wcsicmp");
    }
    public static int wcsicmp ( Addressable _String1,  Addressable _String2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.wcsicmp$MH, "wcsicmp");
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsnicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$33.wcsnicmp$MH,"wcsnicmp");
    }
    public static int wcsnicmp ( Addressable _String1,  Addressable _String2,  long _MaxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.wcsnicmp$MH, "wcsnicmp");
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsnset$MH() {
        return RuntimeHelper.requireNonNull(constants$33.wcsnset$MH,"wcsnset");
    }
    public static MemoryAddress wcsnset ( Addressable _String,  short _Value,  long _MaxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.wcsnset$MH, "wcsnset");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String, _Value, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsrev$MH() {
        return RuntimeHelper.requireNonNull(constants$33.wcsrev$MH,"wcsrev");
    }
    public static MemoryAddress wcsrev ( Addressable _String) {
        var mh$ = RuntimeHelper.requireNonNull(constants$33.wcsrev$MH, "wcsrev");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsset$MH() {
        return RuntimeHelper.requireNonNull(constants$34.wcsset$MH,"wcsset");
    }
    public static MemoryAddress wcsset ( Addressable _String,  short _Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.wcsset$MH, "wcsset");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String, _Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcslwr$MH() {
        return RuntimeHelper.requireNonNull(constants$34.wcslwr$MH,"wcslwr");
    }
    public static MemoryAddress wcslwr ( Addressable _String) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.wcslwr$MH, "wcslwr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsupr$MH() {
        return RuntimeHelper.requireNonNull(constants$34.wcsupr$MH,"wcsupr");
    }
    public static MemoryAddress wcsupr ( Addressable _String) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.wcsupr$MH, "wcsupr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcsicoll$MH() {
        return RuntimeHelper.requireNonNull(constants$34.wcsicoll$MH,"wcsicoll");
    }
    public static int wcsicoll ( Addressable _String1,  Addressable _String2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.wcsicoll$MH, "wcsicoll");
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcpy_s$MH() {
        return RuntimeHelper.requireNonNull(constants$34.strcpy_s$MH,"strcpy_s");
    }
    public static int strcpy_s ( Addressable _Destination,  long _SizeInBytes,  Addressable _Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.strcpy_s$MH, "strcpy_s");
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInBytes, _Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcat_s$MH() {
        return RuntimeHelper.requireNonNull(constants$34.strcat_s$MH,"strcat_s");
    }
    public static int strcat_s ( Addressable _Destination,  long _SizeInBytes,  Addressable _Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$34.strcat_s$MH, "strcat_s");
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInBytes, _Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror_s$MH() {
        return RuntimeHelper.requireNonNull(constants$35.strerror_s$MH,"strerror_s");
    }
    public static int strerror_s ( Addressable _Buffer,  long _SizeInBytes,  int _ErrorNumber) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.strerror_s$MH, "strerror_s");
        try {
            return (int)mh$.invokeExact(_Buffer, _SizeInBytes, _ErrorNumber);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncat_s$MH() {
        return RuntimeHelper.requireNonNull(constants$35.strncat_s$MH,"strncat_s");
    }
    public static int strncat_s ( Addressable _Destination,  long _SizeInBytes,  Addressable _Source,  long _MaxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.strncat_s$MH, "strncat_s");
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInBytes, _Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncpy_s$MH() {
        return RuntimeHelper.requireNonNull(constants$35.strncpy_s$MH,"strncpy_s");
    }
    public static int strncpy_s ( Addressable _Destination,  long _SizeInBytes,  Addressable _Source,  long _MaxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.strncpy_s$MH, "strncpy_s");
        try {
            return (int)mh$.invokeExact(_Destination, _SizeInBytes, _Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtok_s$MH() {
        return RuntimeHelper.requireNonNull(constants$35.strtok_s$MH,"strtok_s");
    }
    public static MemoryAddress strtok_s ( Addressable _String,  Addressable _Delimiter,  Addressable _Context) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.strtok_s$MH, "strtok_s");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String, _Delimiter, _Context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _memccpy$MH() {
        return RuntimeHelper.requireNonNull(constants$35._memccpy$MH,"_memccpy");
    }
    public static MemoryAddress _memccpy ( Addressable _Dst,  Addressable _Src,  int _Val,  long _MaxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35._memccpy$MH, "_memccpy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_Dst, _Src, _Val, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcat$MH() {
        return RuntimeHelper.requireNonNull(constants$35.strcat$MH,"strcat");
    }
    public static MemoryAddress strcat ( Addressable _Destination,  Addressable _Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$35.strcat$MH, "strcat");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_Destination, _Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$36.strcmp$MH,"strcmp");
    }
    public static int strcmp ( Addressable _Str1,  Addressable _Str2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.strcmp$MH, "strcmp");
        try {
            return (int)mh$.invokeExact(_Str1, _Str2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strcmpi$MH() {
        return RuntimeHelper.requireNonNull(constants$36._strcmpi$MH,"_strcmpi");
    }
    public static int _strcmpi ( Addressable _String1,  Addressable _String2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36._strcmpi$MH, "_strcmpi");
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcoll$MH() {
        return RuntimeHelper.requireNonNull(constants$36.strcoll$MH,"strcoll");
    }
    public static int strcoll ( Addressable _String1,  Addressable _String2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.strcoll$MH, "strcoll");
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strcoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$36._strcoll_l$MH,"_strcoll_l");
    }
    public static int _strcoll_l ( Addressable _String1,  Addressable _String2,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36._strcoll_l$MH, "_strcoll_l");
        try {
            return (int)mh$.invokeExact(_String1, _String2, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$36.strcpy$MH,"strcpy");
    }
    public static MemoryAddress strcpy ( Addressable _Destination,  Addressable _Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.strcpy$MH, "strcpy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_Destination, _Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcspn$MH() {
        return RuntimeHelper.requireNonNull(constants$36.strcspn$MH,"strcspn");
    }
    public static long strcspn ( Addressable _Str,  Addressable _Control) {
        var mh$ = RuntimeHelper.requireNonNull(constants$36.strcspn$MH, "strcspn");
        try {
            return (long)mh$.invokeExact(_Str, _Control);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strdup$MH() {
        return RuntimeHelper.requireNonNull(constants$37._strdup$MH,"_strdup");
    }
    public static MemoryAddress _strdup ( Addressable _Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37._strdup$MH, "_strdup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$37._strerror$MH,"_strerror");
    }
    public static MemoryAddress _strerror ( Addressable _ErrorMessage) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37._strerror$MH, "_strerror");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_ErrorMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strerror_s$MH() {
        return RuntimeHelper.requireNonNull(constants$37._strerror_s$MH,"_strerror_s");
    }
    public static int _strerror_s ( Addressable _Buffer,  long _SizeInBytes,  Addressable _ErrorMessage) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37._strerror_s$MH, "_strerror_s");
        try {
            return (int)mh$.invokeExact(_Buffer, _SizeInBytes, _ErrorMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$37.strerror$MH,"strerror");
    }
    public static MemoryAddress strerror ( int _ErrorMessage) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37.strerror$MH, "strerror");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_ErrorMessage);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _stricmp$MH() {
        return RuntimeHelper.requireNonNull(constants$37._stricmp$MH,"_stricmp");
    }
    public static int _stricmp ( Addressable _String1,  Addressable _String2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37._stricmp$MH, "_stricmp");
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _stricoll$MH() {
        return RuntimeHelper.requireNonNull(constants$37._stricoll$MH,"_stricoll");
    }
    public static int _stricoll ( Addressable _String1,  Addressable _String2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$37._stricoll$MH, "_stricoll");
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _stricoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$38._stricoll_l$MH,"_stricoll_l");
    }
    public static int _stricoll_l ( Addressable _String1,  Addressable _String2,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38._stricoll_l$MH, "_stricoll_l");
        try {
            return (int)mh$.invokeExact(_String1, _String2, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _stricmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$38._stricmp_l$MH,"_stricmp_l");
    }
    public static int _stricmp_l ( Addressable _String1,  Addressable _String2,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38._stricmp_l$MH, "_stricmp_l");
        try {
            return (int)mh$.invokeExact(_String1, _String2, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strlen$MH() {
        return RuntimeHelper.requireNonNull(constants$38.strlen$MH,"strlen");
    }
    public static long strlen ( Addressable _Str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38.strlen$MH, "strlen");
        try {
            return (long)mh$.invokeExact(_Str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strlwr_s$MH() {
        return RuntimeHelper.requireNonNull(constants$38._strlwr_s$MH,"_strlwr_s");
    }
    public static int _strlwr_s ( Addressable _String,  long _Size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38._strlwr_s$MH, "_strlwr_s");
        try {
            return (int)mh$.invokeExact(_String, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strlwr$MH() {
        return RuntimeHelper.requireNonNull(constants$38._strlwr$MH,"_strlwr");
    }
    public static MemoryAddress _strlwr ( Addressable _String) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38._strlwr$MH, "_strlwr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strlwr_s_l$MH() {
        return RuntimeHelper.requireNonNull(constants$38._strlwr_s_l$MH,"_strlwr_s_l");
    }
    public static int _strlwr_s_l ( Addressable _String,  long _Size,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$38._strlwr_s_l$MH, "_strlwr_s_l");
        try {
            return (int)mh$.invokeExact(_String, _Size, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strlwr_l$MH() {
        return RuntimeHelper.requireNonNull(constants$39._strlwr_l$MH,"_strlwr_l");
    }
    public static MemoryAddress _strlwr_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39._strlwr_l$MH, "_strlwr_l");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncat$MH() {
        return RuntimeHelper.requireNonNull(constants$39.strncat$MH,"strncat");
    }
    public static MemoryAddress strncat ( Addressable _Destination,  Addressable _Source,  long _Count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.strncat$MH, "strncat");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_Destination, _Source, _Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncmp$MH() {
        return RuntimeHelper.requireNonNull(constants$39.strncmp$MH,"strncmp");
    }
    public static int strncmp ( Addressable _Str1,  Addressable _Str2,  long _MaxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39.strncmp$MH, "strncmp");
        try {
            return (int)mh$.invokeExact(_Str1, _Str2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strnicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$39._strnicmp$MH,"_strnicmp");
    }
    public static int _strnicmp ( Addressable _String1,  Addressable _String2,  long _MaxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39._strnicmp$MH, "_strnicmp");
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strnicmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$39._strnicmp_l$MH,"_strnicmp_l");
    }
    public static int _strnicmp_l ( Addressable _String1,  Addressable _String2,  long _MaxCount,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39._strnicmp_l$MH, "_strnicmp_l");
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strnicoll$MH() {
        return RuntimeHelper.requireNonNull(constants$39._strnicoll$MH,"_strnicoll");
    }
    public static int _strnicoll ( Addressable _String1,  Addressable _String2,  long _MaxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$39._strnicoll$MH, "_strnicoll");
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strnicoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$40._strnicoll_l$MH,"_strnicoll_l");
    }
    public static int _strnicoll_l ( Addressable _String1,  Addressable _String2,  long _MaxCount,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40._strnicoll_l$MH, "_strnicoll_l");
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strncoll$MH() {
        return RuntimeHelper.requireNonNull(constants$40._strncoll$MH,"_strncoll");
    }
    public static int _strncoll ( Addressable _String1,  Addressable _String2,  long _MaxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40._strncoll$MH, "_strncoll");
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strncoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$40._strncoll_l$MH,"_strncoll_l");
    }
    public static int _strncoll_l ( Addressable _String1,  Addressable _String2,  long _MaxCount,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40._strncoll_l$MH, "_strncoll_l");
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __strncnt$MH() {
        return RuntimeHelper.requireNonNull(constants$40.__strncnt$MH,"__strncnt");
    }
    public static long __strncnt ( Addressable _String,  long _Count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.__strncnt$MH, "__strncnt");
        try {
            return (long)mh$.invokeExact(_String, _Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$40.strncpy$MH,"strncpy");
    }
    public static MemoryAddress strncpy ( Addressable _Destination,  Addressable _Source,  long _Count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.strncpy$MH, "strncpy");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_Destination, _Source, _Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strnlen$MH() {
        return RuntimeHelper.requireNonNull(constants$40.strnlen$MH,"strnlen");
    }
    public static long strnlen ( Addressable _String,  long _MaxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$40.strnlen$MH, "strnlen");
        try {
            return (long)mh$.invokeExact(_String, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strnlen_s$MH() {
        return RuntimeHelper.requireNonNull(constants$41.strnlen_s$MH,"strnlen_s");
    }
    public static long strnlen_s ( Addressable _String,  long _MaxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.strnlen_s$MH, "strnlen_s");
        try {
            return (long)mh$.invokeExact(_String, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strnset_s$MH() {
        return RuntimeHelper.requireNonNull(constants$41._strnset_s$MH,"_strnset_s");
    }
    public static int _strnset_s ( Addressable _String,  long _SizeInBytes,  int _Value,  long _MaxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41._strnset_s$MH, "_strnset_s");
        try {
            return (int)mh$.invokeExact(_String, _SizeInBytes, _Value, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strnset$MH() {
        return RuntimeHelper.requireNonNull(constants$41._strnset$MH,"_strnset");
    }
    public static MemoryAddress _strnset ( Addressable _Destination,  int _Value,  long _Count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41._strnset$MH, "_strnset");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_Destination, _Value, _Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strpbrk$MH() {
        return RuntimeHelper.requireNonNull(constants$41.strpbrk$MH,"strpbrk");
    }
    public static MemoryAddress strpbrk ( Addressable _Str,  Addressable _Control) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41.strpbrk$MH, "strpbrk");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_Str, _Control);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strrev$MH() {
        return RuntimeHelper.requireNonNull(constants$41._strrev$MH,"_strrev");
    }
    public static MemoryAddress _strrev ( Addressable _Str) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41._strrev$MH, "_strrev");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_Str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strset_s$MH() {
        return RuntimeHelper.requireNonNull(constants$41._strset_s$MH,"_strset_s");
    }
    public static int _strset_s ( Addressable _Destination,  long _DestinationSize,  int _Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$41._strset_s$MH, "_strset_s");
        try {
            return (int)mh$.invokeExact(_Destination, _DestinationSize, _Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strset$MH() {
        return RuntimeHelper.requireNonNull(constants$42._strset$MH,"_strset");
    }
    public static MemoryAddress _strset ( Addressable _Destination,  int _Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42._strset$MH, "_strset");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_Destination, _Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strspn$MH() {
        return RuntimeHelper.requireNonNull(constants$42.strspn$MH,"strspn");
    }
    public static long strspn ( Addressable _Str,  Addressable _Control) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.strspn$MH, "strspn");
        try {
            return (long)mh$.invokeExact(_Str, _Control);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtok$MH() {
        return RuntimeHelper.requireNonNull(constants$42.strtok$MH,"strtok");
    }
    public static MemoryAddress strtok ( Addressable _String,  Addressable _Delimiter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42.strtok$MH, "strtok");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String, _Delimiter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strupr_s$MH() {
        return RuntimeHelper.requireNonNull(constants$42._strupr_s$MH,"_strupr_s");
    }
    public static int _strupr_s ( Addressable _String,  long _Size) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42._strupr_s$MH, "_strupr_s");
        try {
            return (int)mh$.invokeExact(_String, _Size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strupr$MH() {
        return RuntimeHelper.requireNonNull(constants$42._strupr$MH,"_strupr");
    }
    public static MemoryAddress _strupr ( Addressable _String) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42._strupr$MH, "_strupr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strupr_s_l$MH() {
        return RuntimeHelper.requireNonNull(constants$42._strupr_s_l$MH,"_strupr_s_l");
    }
    public static int _strupr_s_l ( Addressable _String,  long _Size,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$42._strupr_s_l$MH, "_strupr_s_l");
        try {
            return (int)mh$.invokeExact(_String, _Size, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strupr_l$MH() {
        return RuntimeHelper.requireNonNull(constants$43._strupr_l$MH,"_strupr_l");
    }
    public static MemoryAddress _strupr_l ( Addressable _String,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43._strupr_l$MH, "_strupr_l");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strxfrm$MH() {
        return RuntimeHelper.requireNonNull(constants$43.strxfrm$MH,"strxfrm");
    }
    public static long strxfrm ( Addressable _Destination,  Addressable _Source,  long _MaxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.strxfrm$MH, "strxfrm");
        try {
            return (long)mh$.invokeExact(_Destination, _Source, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _strxfrm_l$MH() {
        return RuntimeHelper.requireNonNull(constants$43._strxfrm_l$MH,"_strxfrm_l");
    }
    public static long _strxfrm_l ( Addressable _Destination,  Addressable _Source,  long _MaxCount,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43._strxfrm_l$MH, "_strxfrm_l");
        try {
            return (long)mh$.invokeExact(_Destination, _Source, _MaxCount, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strdup$MH() {
        return RuntimeHelper.requireNonNull(constants$43.strdup$MH,"strdup");
    }
    public static MemoryAddress strdup ( Addressable _String) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.strdup$MH, "strdup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcmpi$MH() {
        return RuntimeHelper.requireNonNull(constants$43.strcmpi$MH,"strcmpi");
    }
    public static int strcmpi ( Addressable _String1,  Addressable _String2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.strcmpi$MH, "strcmpi");
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stricmp$MH() {
        return RuntimeHelper.requireNonNull(constants$43.stricmp$MH,"stricmp");
    }
    public static int stricmp ( Addressable _String1,  Addressable _String2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$43.stricmp$MH, "stricmp");
        try {
            return (int)mh$.invokeExact(_String1, _String2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strlwr$MH() {
        return RuntimeHelper.requireNonNull(constants$44.strlwr$MH,"strlwr");
    }
    public static MemoryAddress strlwr ( Addressable _String) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.strlwr$MH, "strlwr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strnicmp$MH() {
        return RuntimeHelper.requireNonNull(constants$44.strnicmp$MH,"strnicmp");
    }
    public static int strnicmp ( Addressable _String1,  Addressable _String2,  long _MaxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.strnicmp$MH, "strnicmp");
        try {
            return (int)mh$.invokeExact(_String1, _String2, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strnset$MH() {
        return RuntimeHelper.requireNonNull(constants$44.strnset$MH,"strnset");
    }
    public static MemoryAddress strnset ( Addressable _String,  int _Value,  long _MaxCount) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.strnset$MH, "strnset");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String, _Value, _MaxCount);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strrev$MH() {
        return RuntimeHelper.requireNonNull(constants$44.strrev$MH,"strrev");
    }
    public static MemoryAddress strrev ( Addressable _String) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.strrev$MH, "strrev");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strset$MH() {
        return RuntimeHelper.requireNonNull(constants$44.strset$MH,"strset");
    }
    public static MemoryAddress strset ( Addressable _String,  int _Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.strset$MH, "strset");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String, _Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strupr$MH() {
        return RuntimeHelper.requireNonNull(constants$44.strupr$MH,"strupr");
    }
    public static MemoryAddress strupr ( Addressable _String) {
        var mh$ = RuntimeHelper.requireNonNull(constants$44.strupr$MH, "strupr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_String);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PKSPIN_LOCK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PM128A = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PXSAVE_FORMAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PXSAVE_CET_U_FORMAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PXSAVE_AREA_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PXSAVE_AREA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PXSTATE_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCOPE_TABLE_AMD64 = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle _bittest$MH() {
        return RuntimeHelper.requireNonNull(constants$45._bittest$MH,"_bittest");
    }
    public static byte _bittest ( Addressable Base,  int Offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45._bittest$MH, "_bittest");
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandcomplement$MH() {
        return RuntimeHelper.requireNonNull(constants$45._bittestandcomplement$MH,"_bittestandcomplement");
    }
    public static byte _bittestandcomplement ( Addressable Base,  int Offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$45._bittestandcomplement$MH, "_bittestandcomplement");
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandset$MH() {
        return RuntimeHelper.requireNonNull(constants$46._bittestandset$MH,"_bittestandset");
    }
    public static byte _bittestandset ( Addressable Base,  int Offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46._bittestandset$MH, "_bittestandset");
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandreset$MH() {
        return RuntimeHelper.requireNonNull(constants$46._bittestandreset$MH,"_bittestandreset");
    }
    public static byte _bittestandreset ( Addressable Base,  int Offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46._bittestandreset$MH, "_bittestandreset");
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _interlockedbittestandset$MH() {
        return RuntimeHelper.requireNonNull(constants$46._interlockedbittestandset$MH,"_interlockedbittestandset");
    }
    public static byte _interlockedbittestandset ( Addressable Base,  int Offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46._interlockedbittestandset$MH, "_interlockedbittestandset");
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _interlockedbittestandreset$MH() {
        return RuntimeHelper.requireNonNull(constants$46._interlockedbittestandreset$MH,"_interlockedbittestandreset");
    }
    public static byte _interlockedbittestandreset ( Addressable Base,  int Offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46._interlockedbittestandreset$MH, "_interlockedbittestandreset");
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittest64$MH() {
        return RuntimeHelper.requireNonNull(constants$46._bittest64$MH,"_bittest64");
    }
    public static byte _bittest64 ( Addressable Base,  long Offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46._bittest64$MH, "_bittest64");
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandcomplement64$MH() {
        return RuntimeHelper.requireNonNull(constants$46._bittestandcomplement64$MH,"_bittestandcomplement64");
    }
    public static byte _bittestandcomplement64 ( Addressable Base,  long Offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$46._bittestandcomplement64$MH, "_bittestandcomplement64");
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandset64$MH() {
        return RuntimeHelper.requireNonNull(constants$47._bittestandset64$MH,"_bittestandset64");
    }
    public static byte _bittestandset64 ( Addressable Base,  long Offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47._bittestandset64$MH, "_bittestandset64");
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _bittestandreset64$MH() {
        return RuntimeHelper.requireNonNull(constants$47._bittestandreset64$MH,"_bittestandreset64");
    }
    public static byte _bittestandreset64 ( Addressable Base,  long Offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47._bittestandreset64$MH, "_bittestandreset64");
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _interlockedbittestandset64$MH() {
        return RuntimeHelper.requireNonNull(constants$47._interlockedbittestandset64$MH,"_interlockedbittestandset64");
    }
    public static byte _interlockedbittestandset64 ( Addressable Base,  long Offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47._interlockedbittestandset64$MH, "_interlockedbittestandset64");
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _interlockedbittestandreset64$MH() {
        return RuntimeHelper.requireNonNull(constants$47._interlockedbittestandreset64$MH,"_interlockedbittestandreset64");
    }
    public static byte _interlockedbittestandreset64 ( Addressable Base,  long Offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47._interlockedbittestandreset64$MH, "_interlockedbittestandreset64");
        try {
            return (byte)mh$.invokeExact(Base, Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _BitScanForward$MH() {
        return RuntimeHelper.requireNonNull(constants$47._BitScanForward$MH,"_BitScanForward");
    }
    public static byte _BitScanForward ( Addressable Index,  int Mask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47._BitScanForward$MH, "_BitScanForward");
        try {
            return (byte)mh$.invokeExact(Index, Mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _BitScanReverse$MH() {
        return RuntimeHelper.requireNonNull(constants$47._BitScanReverse$MH,"_BitScanReverse");
    }
    public static byte _BitScanReverse ( Addressable Index,  int Mask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$47._BitScanReverse$MH, "_BitScanReverse");
        try {
            return (byte)mh$.invokeExact(Index, Mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _BitScanForward64$MH() {
        return RuntimeHelper.requireNonNull(constants$48._BitScanForward64$MH,"_BitScanForward64");
    }
    public static byte _BitScanForward64 ( Addressable Index,  long Mask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48._BitScanForward64$MH, "_BitScanForward64");
        try {
            return (byte)mh$.invokeExact(Index, Mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _BitScanReverse64$MH() {
        return RuntimeHelper.requireNonNull(constants$48._BitScanReverse64$MH,"_BitScanReverse64");
    }
    public static byte _BitScanReverse64 ( Addressable Index,  long Mask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48._BitScanReverse64$MH, "_BitScanReverse64");
        try {
            return (byte)mh$.invokeExact(Index, Mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedIncrement16$MH() {
        return RuntimeHelper.requireNonNull(constants$48._InterlockedIncrement16$MH,"_InterlockedIncrement16");
    }
    public static short _InterlockedIncrement16 ( Addressable Addend) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48._InterlockedIncrement16$MH, "_InterlockedIncrement16");
        try {
            return (short)mh$.invokeExact(Addend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedDecrement16$MH() {
        return RuntimeHelper.requireNonNull(constants$48._InterlockedDecrement16$MH,"_InterlockedDecrement16");
    }
    public static short _InterlockedDecrement16 ( Addressable Addend) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48._InterlockedDecrement16$MH, "_InterlockedDecrement16");
        try {
            return (short)mh$.invokeExact(Addend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedCompareExchange16$MH() {
        return RuntimeHelper.requireNonNull(constants$48._InterlockedCompareExchange16$MH,"_InterlockedCompareExchange16");
    }
    public static short _InterlockedCompareExchange16 ( Addressable Destination,  short ExChange,  short Comperand) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48._InterlockedCompareExchange16$MH, "_InterlockedCompareExchange16");
        try {
            return (short)mh$.invokeExact(Destination, ExChange, Comperand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedAnd$MH() {
        return RuntimeHelper.requireNonNull(constants$48._InterlockedAnd$MH,"_InterlockedAnd");
    }
    public static int _InterlockedAnd ( Addressable Destination,  int Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$48._InterlockedAnd$MH, "_InterlockedAnd");
        try {
            return (int)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedOr$MH() {
        return RuntimeHelper.requireNonNull(constants$49._InterlockedOr$MH,"_InterlockedOr");
    }
    public static int _InterlockedOr ( Addressable Destination,  int Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49._InterlockedOr$MH, "_InterlockedOr");
        try {
            return (int)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedXor$MH() {
        return RuntimeHelper.requireNonNull(constants$49._InterlockedXor$MH,"_InterlockedXor");
    }
    public static int _InterlockedXor ( Addressable Destination,  int Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49._InterlockedXor$MH, "_InterlockedXor");
        try {
            return (int)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedAnd64$MH() {
        return RuntimeHelper.requireNonNull(constants$49._InterlockedAnd64$MH,"_InterlockedAnd64");
    }
    public static long _InterlockedAnd64 ( Addressable Destination,  long Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49._InterlockedAnd64$MH, "_InterlockedAnd64");
        try {
            return (long)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedOr64$MH() {
        return RuntimeHelper.requireNonNull(constants$49._InterlockedOr64$MH,"_InterlockedOr64");
    }
    public static long _InterlockedOr64 ( Addressable Destination,  long Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49._InterlockedOr64$MH, "_InterlockedOr64");
        try {
            return (long)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedXor64$MH() {
        return RuntimeHelper.requireNonNull(constants$49._InterlockedXor64$MH,"_InterlockedXor64");
    }
    public static long _InterlockedXor64 ( Addressable Destination,  long Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49._InterlockedXor64$MH, "_InterlockedXor64");
        try {
            return (long)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedIncrement$MH() {
        return RuntimeHelper.requireNonNull(constants$49._InterlockedIncrement$MH,"_InterlockedIncrement");
    }
    public static int _InterlockedIncrement ( Addressable Addend) {
        var mh$ = RuntimeHelper.requireNonNull(constants$49._InterlockedIncrement$MH, "_InterlockedIncrement");
        try {
            return (int)mh$.invokeExact(Addend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedDecrement$MH() {
        return RuntimeHelper.requireNonNull(constants$50._InterlockedDecrement$MH,"_InterlockedDecrement");
    }
    public static int _InterlockedDecrement ( Addressable Addend) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50._InterlockedDecrement$MH, "_InterlockedDecrement");
        try {
            return (int)mh$.invokeExact(Addend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedExchange$MH() {
        return RuntimeHelper.requireNonNull(constants$50._InterlockedExchange$MH,"_InterlockedExchange");
    }
    public static int _InterlockedExchange ( Addressable Target,  int Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50._InterlockedExchange$MH, "_InterlockedExchange");
        try {
            return (int)mh$.invokeExact(Target, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedExchangeAdd$MH() {
        return RuntimeHelper.requireNonNull(constants$50._InterlockedExchangeAdd$MH,"_InterlockedExchangeAdd");
    }
    public static int _InterlockedExchangeAdd ( Addressable Addend,  int Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50._InterlockedExchangeAdd$MH, "_InterlockedExchangeAdd");
        try {
            return (int)mh$.invokeExact(Addend, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InlineInterlockedAdd$MH() {
        return RuntimeHelper.requireNonNull(constants$50._InlineInterlockedAdd$MH,"_InlineInterlockedAdd");
    }
    public static int _InlineInterlockedAdd ( Addressable Addend,  int Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50._InlineInterlockedAdd$MH, "_InlineInterlockedAdd");
        try {
            return (int)mh$.invokeExact(Addend, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedCompareExchange$MH() {
        return RuntimeHelper.requireNonNull(constants$50._InterlockedCompareExchange$MH,"_InterlockedCompareExchange");
    }
    public static int _InterlockedCompareExchange ( Addressable Destination,  int ExChange,  int Comperand) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50._InterlockedCompareExchange$MH, "_InterlockedCompareExchange");
        try {
            return (int)mh$.invokeExact(Destination, ExChange, Comperand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedIncrement64$MH() {
        return RuntimeHelper.requireNonNull(constants$50._InterlockedIncrement64$MH,"_InterlockedIncrement64");
    }
    public static long _InterlockedIncrement64 ( Addressable Addend) {
        var mh$ = RuntimeHelper.requireNonNull(constants$50._InterlockedIncrement64$MH, "_InterlockedIncrement64");
        try {
            return (long)mh$.invokeExact(Addend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedDecrement64$MH() {
        return RuntimeHelper.requireNonNull(constants$51._InterlockedDecrement64$MH,"_InterlockedDecrement64");
    }
    public static long _InterlockedDecrement64 ( Addressable Addend) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51._InterlockedDecrement64$MH, "_InterlockedDecrement64");
        try {
            return (long)mh$.invokeExact(Addend);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedExchange64$MH() {
        return RuntimeHelper.requireNonNull(constants$51._InterlockedExchange64$MH,"_InterlockedExchange64");
    }
    public static long _InterlockedExchange64 ( Addressable Target,  long Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51._InterlockedExchange64$MH, "_InterlockedExchange64");
        try {
            return (long)mh$.invokeExact(Target, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedExchangeAdd64$MH() {
        return RuntimeHelper.requireNonNull(constants$51._InterlockedExchangeAdd64$MH,"_InterlockedExchangeAdd64");
    }
    public static long _InterlockedExchangeAdd64 ( Addressable Addend,  long Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51._InterlockedExchangeAdd64$MH, "_InterlockedExchangeAdd64");
        try {
            return (long)mh$.invokeExact(Addend, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InlineInterlockedAdd64$MH() {
        return RuntimeHelper.requireNonNull(constants$51._InlineInterlockedAdd64$MH,"_InlineInterlockedAdd64");
    }
    public static long _InlineInterlockedAdd64 ( Addressable Addend,  long Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51._InlineInterlockedAdd64$MH, "_InlineInterlockedAdd64");
        try {
            return (long)mh$.invokeExact(Addend, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedCompareExchange64$MH() {
        return RuntimeHelper.requireNonNull(constants$51._InterlockedCompareExchange64$MH,"_InterlockedCompareExchange64");
    }
    public static long _InterlockedCompareExchange64 ( Addressable Destination,  long ExChange,  long Comperand) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51._InterlockedCompareExchange64$MH, "_InterlockedCompareExchange64");
        try {
            return (long)mh$.invokeExact(Destination, ExChange, Comperand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedCompareExchange128$MH() {
        return RuntimeHelper.requireNonNull(constants$51._InterlockedCompareExchange128$MH,"_InterlockedCompareExchange128");
    }
    public static byte _InterlockedCompareExchange128 ( Addressable Destination,  long ExchangeHigh,  long ExchangeLow,  Addressable ComparandResult) {
        var mh$ = RuntimeHelper.requireNonNull(constants$51._InterlockedCompareExchange128$MH, "_InterlockedCompareExchange128");
        try {
            return (byte)mh$.invokeExact(Destination, ExchangeHigh, ExchangeLow, ComparandResult);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedCompareExchangePointer$MH() {
        return RuntimeHelper.requireNonNull(constants$52._InterlockedCompareExchangePointer$MH,"_InterlockedCompareExchangePointer");
    }
    public static MemoryAddress _InterlockedCompareExchangePointer ( Addressable Destination,  Addressable Exchange,  Addressable Comperand) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52._InterlockedCompareExchangePointer$MH, "_InterlockedCompareExchangePointer");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Destination, Exchange, Comperand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedExchangePointer$MH() {
        return RuntimeHelper.requireNonNull(constants$52._InterlockedExchangePointer$MH,"_InterlockedExchangePointer");
    }
    public static MemoryAddress _InterlockedExchangePointer ( Addressable Target,  Addressable Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52._InterlockedExchangePointer$MH, "_InterlockedExchangePointer");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Target, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedExchange8$MH() {
        return RuntimeHelper.requireNonNull(constants$52._InterlockedExchange8$MH,"_InterlockedExchange8");
    }
    public static byte _InterlockedExchange8 ( Addressable Target,  byte Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52._InterlockedExchange8$MH, "_InterlockedExchange8");
        try {
            return (byte)mh$.invokeExact(Target, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedExchange16$MH() {
        return RuntimeHelper.requireNonNull(constants$52._InterlockedExchange16$MH,"_InterlockedExchange16");
    }
    public static short _InterlockedExchange16 ( Addressable Destination,  short ExChange) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52._InterlockedExchange16$MH, "_InterlockedExchange16");
        try {
            return (short)mh$.invokeExact(Destination, ExChange);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedExchangeAdd8$MH() {
        return RuntimeHelper.requireNonNull(constants$52._InterlockedExchangeAdd8$MH,"_InterlockedExchangeAdd8");
    }
    public static byte _InterlockedExchangeAdd8 ( Addressable _Addend,  byte _Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52._InterlockedExchangeAdd8$MH, "_InterlockedExchangeAdd8");
        try {
            return (byte)mh$.invokeExact(_Addend, _Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedAnd8$MH() {
        return RuntimeHelper.requireNonNull(constants$52._InterlockedAnd8$MH,"_InterlockedAnd8");
    }
    public static byte _InterlockedAnd8 ( Addressable Destination,  byte Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$52._InterlockedAnd8$MH, "_InterlockedAnd8");
        try {
            return (byte)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedOr8$MH() {
        return RuntimeHelper.requireNonNull(constants$53._InterlockedOr8$MH,"_InterlockedOr8");
    }
    public static byte _InterlockedOr8 ( Addressable Destination,  byte Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53._InterlockedOr8$MH, "_InterlockedOr8");
        try {
            return (byte)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedXor8$MH() {
        return RuntimeHelper.requireNonNull(constants$53._InterlockedXor8$MH,"_InterlockedXor8");
    }
    public static byte _InterlockedXor8 ( Addressable Destination,  byte Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53._InterlockedXor8$MH, "_InterlockedXor8");
        try {
            return (byte)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedAnd16$MH() {
        return RuntimeHelper.requireNonNull(constants$53._InterlockedAnd16$MH,"_InterlockedAnd16");
    }
    public static short _InterlockedAnd16 ( Addressable Destination,  short Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53._InterlockedAnd16$MH, "_InterlockedAnd16");
        try {
            return (short)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedOr16$MH() {
        return RuntimeHelper.requireNonNull(constants$53._InterlockedOr16$MH,"_InterlockedOr16");
    }
    public static short _InterlockedOr16 ( Addressable Destination,  short Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53._InterlockedOr16$MH, "_InterlockedOr16");
        try {
            return (short)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _InterlockedXor16$MH() {
        return RuntimeHelper.requireNonNull(constants$53._InterlockedXor16$MH,"_InterlockedXor16");
    }
    public static short _InterlockedXor16 ( Addressable Destination,  short Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53._InterlockedXor16$MH, "_InterlockedXor16");
        try {
            return (short)mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __cpuidex$MH() {
        return RuntimeHelper.requireNonNull(constants$53.__cpuidex$MH,"__cpuidex");
    }
    public static void __cpuidex ( Addressable CPUInfo,  int Function,  int SubLeaf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$53.__cpuidex$MH, "__cpuidex");
        try {
            mh$.invokeExact(CPUInfo, Function, SubLeaf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_clflush$MH() {
        return RuntimeHelper.requireNonNull(constants$54._mm_clflush$MH,"_mm_clflush");
    }
    public static void _mm_clflush ( Addressable Address) {
        var mh$ = RuntimeHelper.requireNonNull(constants$54._mm_clflush$MH, "_mm_clflush");
        try {
            mh$.invokeExact(Address);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ReadWriteBarrier$MH() {
        return RuntimeHelper.requireNonNull(constants$54._ReadWriteBarrier$MH,"_ReadWriteBarrier");
    }
    public static void _ReadWriteBarrier () {
        var mh$ = RuntimeHelper.requireNonNull(constants$54._ReadWriteBarrier$MH, "_ReadWriteBarrier");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __faststorefence$MH() {
        return RuntimeHelper.requireNonNull(constants$54.__faststorefence$MH,"__faststorefence");
    }
    public static void __faststorefence () {
        var mh$ = RuntimeHelper.requireNonNull(constants$54.__faststorefence$MH, "__faststorefence");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_lfence$MH() {
        return RuntimeHelper.requireNonNull(constants$54._mm_lfence$MH,"_mm_lfence");
    }
    public static void _mm_lfence () {
        var mh$ = RuntimeHelper.requireNonNull(constants$54._mm_lfence$MH, "_mm_lfence");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_mfence$MH() {
        return RuntimeHelper.requireNonNull(constants$54._mm_mfence$MH,"_mm_mfence");
    }
    public static void _mm_mfence () {
        var mh$ = RuntimeHelper.requireNonNull(constants$54._mm_mfence$MH, "_mm_mfence");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_sfence$MH() {
        return RuntimeHelper.requireNonNull(constants$54._mm_sfence$MH,"_mm_sfence");
    }
    public static void _mm_sfence () {
        var mh$ = RuntimeHelper.requireNonNull(constants$54._mm_sfence$MH, "_mm_sfence");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_pause$MH() {
        return RuntimeHelper.requireNonNull(constants$55._mm_pause$MH,"_mm_pause");
    }
    public static void _mm_pause () {
        var mh$ = RuntimeHelper.requireNonNull(constants$55._mm_pause$MH, "_mm_pause");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_prefetch$MH() {
        return RuntimeHelper.requireNonNull(constants$55._mm_prefetch$MH,"_mm_prefetch");
    }
    public static void _mm_prefetch ( Addressable a,  int sel) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55._mm_prefetch$MH, "_mm_prefetch");
        try {
            mh$.invokeExact(a, sel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _m_prefetchw$MH() {
        return RuntimeHelper.requireNonNull(constants$55._m_prefetchw$MH,"_m_prefetchw");
    }
    public static void _m_prefetchw ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55._m_prefetchw$MH, "_m_prefetchw");
        try {
            mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_getcsr$MH() {
        return RuntimeHelper.requireNonNull(constants$55._mm_getcsr$MH,"_mm_getcsr");
    }
    public static int _mm_getcsr () {
        var mh$ = RuntimeHelper.requireNonNull(constants$55._mm_getcsr$MH, "_mm_getcsr");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mm_setcsr$MH() {
        return RuntimeHelper.requireNonNull(constants$55._mm_setcsr$MH,"_mm_setcsr");
    }
    public static void _mm_setcsr ( int MxCsr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$55._mm_setcsr$MH, "_mm_setcsr");
        try {
            mh$.invokeExact(MxCsr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __getcallerseflags$MH() {
        return RuntimeHelper.requireNonNull(constants$55.__getcallerseflags$MH,"__getcallerseflags");
    }
    public static int __getcallerseflags () {
        var mh$ = RuntimeHelper.requireNonNull(constants$55.__getcallerseflags$MH, "__getcallerseflags");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __segmentlimit$MH() {
        return RuntimeHelper.requireNonNull(constants$56.__segmentlimit$MH,"__segmentlimit");
    }
    public static int __segmentlimit ( int Selector) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.__segmentlimit$MH, "__segmentlimit");
        try {
            return (int)mh$.invokeExact(Selector);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __readpmc$MH() {
        return RuntimeHelper.requireNonNull(constants$56.__readpmc$MH,"__readpmc");
    }
    public static long __readpmc ( int Counter) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.__readpmc$MH, "__readpmc");
        try {
            return (long)mh$.invokeExact(Counter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __rdtsc$MH() {
        return RuntimeHelper.requireNonNull(constants$56.__rdtsc$MH,"__rdtsc");
    }
    public static long __rdtsc () {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.__rdtsc$MH, "__rdtsc");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __movsb$MH() {
        return RuntimeHelper.requireNonNull(constants$56.__movsb$MH,"__movsb");
    }
    public static void __movsb ( Addressable Destination,  Addressable Source,  long Count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.__movsb$MH, "__movsb");
        try {
            mh$.invokeExact(Destination, Source, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __movsw$MH() {
        return RuntimeHelper.requireNonNull(constants$56.__movsw$MH,"__movsw");
    }
    public static void __movsw ( Addressable Destination,  Addressable Source,  long Count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.__movsw$MH, "__movsw");
        try {
            mh$.invokeExact(Destination, Source, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __movsd$MH() {
        return RuntimeHelper.requireNonNull(constants$56.__movsd$MH,"__movsd");
    }
    public static void __movsd ( Addressable Destination,  Addressable Source,  long Count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$56.__movsd$MH, "__movsd");
        try {
            mh$.invokeExact(Destination, Source, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __movsq$MH() {
        return RuntimeHelper.requireNonNull(constants$57.__movsq$MH,"__movsq");
    }
    public static void __movsq ( Addressable Destination,  Addressable Source,  long Count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.__movsq$MH, "__movsq");
        try {
            mh$.invokeExact(Destination, Source, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stosb$MH() {
        return RuntimeHelper.requireNonNull(constants$57.__stosb$MH,"__stosb");
    }
    public static void __stosb ( Addressable Destination,  byte Value,  long Count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.__stosb$MH, "__stosb");
        try {
            mh$.invokeExact(Destination, Value, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stosw$MH() {
        return RuntimeHelper.requireNonNull(constants$57.__stosw$MH,"__stosw");
    }
    public static void __stosw ( Addressable Destination,  short Value,  long Count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.__stosw$MH, "__stosw");
        try {
            mh$.invokeExact(Destination, Value, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stosd$MH() {
        return RuntimeHelper.requireNonNull(constants$57.__stosd$MH,"__stosd");
    }
    public static void __stosd ( Addressable Destination,  int Value,  long Count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.__stosd$MH, "__stosd");
        try {
            mh$.invokeExact(Destination, Value, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stosq$MH() {
        return RuntimeHelper.requireNonNull(constants$57.__stosq$MH,"__stosq");
    }
    public static void __stosq ( Addressable Destination,  long Value,  long Count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.__stosq$MH, "__stosq");
        try {
            mh$.invokeExact(Destination, Value, Count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __mulh$MH() {
        return RuntimeHelper.requireNonNull(constants$57.__mulh$MH,"__mulh");
    }
    public static long __mulh ( long Multiplier,  long Multiplicand) {
        var mh$ = RuntimeHelper.requireNonNull(constants$57.__mulh$MH, "__mulh");
        try {
            return (long)mh$.invokeExact(Multiplier, Multiplicand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __umulh$MH() {
        return RuntimeHelper.requireNonNull(constants$58.__umulh$MH,"__umulh");
    }
    public static long __umulh ( long Multiplier,  long Multiplicand) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.__umulh$MH, "__umulh");
        try {
            return (long)mh$.invokeExact(Multiplier, Multiplicand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __popcnt64$MH() {
        return RuntimeHelper.requireNonNull(constants$58.__popcnt64$MH,"__popcnt64");
    }
    public static long __popcnt64 ( long operand) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.__popcnt64$MH, "__popcnt64");
        try {
            return (long)mh$.invokeExact(operand);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __shiftleft128$MH() {
        return RuntimeHelper.requireNonNull(constants$58.__shiftleft128$MH,"__shiftleft128");
    }
    public static long __shiftleft128 ( long LowPart,  long HighPart,  byte Shift) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.__shiftleft128$MH, "__shiftleft128");
        try {
            return (long)mh$.invokeExact(LowPart, HighPart, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __shiftright128$MH() {
        return RuntimeHelper.requireNonNull(constants$58.__shiftright128$MH,"__shiftright128");
    }
    public static long __shiftright128 ( long LowPart,  long HighPart,  byte Shift) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58.__shiftright128$MH, "__shiftright128");
        try {
            return (long)mh$.invokeExact(LowPart, HighPart, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _mul128$MH() {
        return RuntimeHelper.requireNonNull(constants$58._mul128$MH,"_mul128");
    }
    public static long _mul128 ( long Multiplier,  long Multiplicand,  Addressable HighProduct) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58._mul128$MH, "_mul128");
        try {
            return (long)mh$.invokeExact(Multiplier, Multiplicand, HighProduct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _umul128$MH() {
        return RuntimeHelper.requireNonNull(constants$58._umul128$MH,"_umul128");
    }
    public static long _umul128 ( long Multiplier,  long Multiplicand,  Addressable HighProduct) {
        var mh$ = RuntimeHelper.requireNonNull(constants$58._umul128$MH, "_umul128");
        try {
            return (long)mh$.invokeExact(Multiplier, Multiplicand, HighProduct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle MultiplyExtract128$MH() {
        return RuntimeHelper.requireNonNull(constants$59.MultiplyExtract128$MH,"MultiplyExtract128");
    }
    public static long MultiplyExtract128 ( long Multiplier,  long Multiplicand,  byte Shift) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.MultiplyExtract128$MH, "MultiplyExtract128");
        try {
            return (long)mh$.invokeExact(Multiplier, Multiplicand, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UnsignedMultiplyExtract128$MH() {
        return RuntimeHelper.requireNonNull(constants$59.UnsignedMultiplyExtract128$MH,"UnsignedMultiplyExtract128");
    }
    public static long UnsignedMultiplyExtract128 ( long Multiplier,  long Multiplicand,  byte Shift) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.UnsignedMultiplyExtract128$MH, "UnsignedMultiplyExtract128");
        try {
            return (long)mh$.invokeExact(Multiplier, Multiplicand, Shift);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __readgsbyte$MH() {
        return RuntimeHelper.requireNonNull(constants$59.__readgsbyte$MH,"__readgsbyte");
    }
    public static byte __readgsbyte ( int Offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.__readgsbyte$MH, "__readgsbyte");
        try {
            return (byte)mh$.invokeExact(Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __readgsword$MH() {
        return RuntimeHelper.requireNonNull(constants$59.__readgsword$MH,"__readgsword");
    }
    public static short __readgsword ( int Offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.__readgsword$MH, "__readgsword");
        try {
            return (short)mh$.invokeExact(Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __readgsdword$MH() {
        return RuntimeHelper.requireNonNull(constants$59.__readgsdword$MH,"__readgsdword");
    }
    public static int __readgsdword ( int Offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.__readgsdword$MH, "__readgsdword");
        try {
            return (int)mh$.invokeExact(Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __readgsqword$MH() {
        return RuntimeHelper.requireNonNull(constants$59.__readgsqword$MH,"__readgsqword");
    }
    public static long __readgsqword ( int Offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$59.__readgsqword$MH, "__readgsqword");
        try {
            return (long)mh$.invokeExact(Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __writegsbyte$MH() {
        return RuntimeHelper.requireNonNull(constants$60.__writegsbyte$MH,"__writegsbyte");
    }
    public static void __writegsbyte ( int Offset,  byte Data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.__writegsbyte$MH, "__writegsbyte");
        try {
            mh$.invokeExact(Offset, Data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __writegsword$MH() {
        return RuntimeHelper.requireNonNull(constants$60.__writegsword$MH,"__writegsword");
    }
    public static void __writegsword ( int Offset,  short Data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.__writegsword$MH, "__writegsword");
        try {
            mh$.invokeExact(Offset, Data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __writegsdword$MH() {
        return RuntimeHelper.requireNonNull(constants$60.__writegsdword$MH,"__writegsdword");
    }
    public static void __writegsdword ( int Offset,  int Data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.__writegsdword$MH, "__writegsdword");
        try {
            mh$.invokeExact(Offset, Data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __writegsqword$MH() {
        return RuntimeHelper.requireNonNull(constants$60.__writegsqword$MH,"__writegsqword");
    }
    public static void __writegsqword ( int Offset,  long Data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.__writegsqword$MH, "__writegsqword");
        try {
            mh$.invokeExact(Offset, Data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __incgsbyte$MH() {
        return RuntimeHelper.requireNonNull(constants$60.__incgsbyte$MH,"__incgsbyte");
    }
    public static void __incgsbyte ( int Offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.__incgsbyte$MH, "__incgsbyte");
        try {
            mh$.invokeExact(Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __addgsbyte$MH() {
        return RuntimeHelper.requireNonNull(constants$60.__addgsbyte$MH,"__addgsbyte");
    }
    public static void __addgsbyte ( int Offset,  byte Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$60.__addgsbyte$MH, "__addgsbyte");
        try {
            mh$.invokeExact(Offset, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __incgsword$MH() {
        return RuntimeHelper.requireNonNull(constants$61.__incgsword$MH,"__incgsword");
    }
    public static void __incgsword ( int Offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.__incgsword$MH, "__incgsword");
        try {
            mh$.invokeExact(Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __addgsword$MH() {
        return RuntimeHelper.requireNonNull(constants$61.__addgsword$MH,"__addgsword");
    }
    public static void __addgsword ( int Offset,  short Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.__addgsword$MH, "__addgsword");
        try {
            mh$.invokeExact(Offset, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __incgsdword$MH() {
        return RuntimeHelper.requireNonNull(constants$61.__incgsdword$MH,"__incgsdword");
    }
    public static void __incgsdword ( int Offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.__incgsdword$MH, "__incgsdword");
        try {
            mh$.invokeExact(Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __addgsdword$MH() {
        return RuntimeHelper.requireNonNull(constants$61.__addgsdword$MH,"__addgsdword");
    }
    public static void __addgsdword ( int Offset,  int Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.__addgsdword$MH, "__addgsdword");
        try {
            mh$.invokeExact(Offset, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __incgsqword$MH() {
        return RuntimeHelper.requireNonNull(constants$61.__incgsqword$MH,"__incgsqword");
    }
    public static void __incgsqword ( int Offset) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.__incgsqword$MH, "__incgsqword");
        try {
            mh$.invokeExact(Offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __addgsqword$MH() {
        return RuntimeHelper.requireNonNull(constants$61.__addgsqword$MH,"__addgsqword");
    }
    public static void __addgsqword ( int Offset,  long Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$61.__addgsqword$MH, "__addgsqword");
        try {
            mh$.invokeExact(Offset, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PXMM_SAVE_AREA32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRUNTIME_FUNCTION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCOPE_TABLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUNWIND_HISTORY_TABLE_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUNWIND_HISTORY_TABLE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDISPATCHER_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PKNONVOLATILE_CONTEXT_POINTERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCOPE_TABLE_ARM = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCOPE_TABLE_ARM64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PKNONVOLATILE_CONTEXT_POINTERS_ARM64 = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle __int2c$MH() {
        return RuntimeHelper.requireNonNull(constants$64.__int2c$MH,"__int2c");
    }
    public static void __int2c () {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.__int2c$MH, "__int2c");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PLDT_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle ReadAcquire8$MH() {
        return RuntimeHelper.requireNonNull(constants$64.ReadAcquire8$MH,"ReadAcquire8");
    }
    public static byte ReadAcquire8 ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.ReadAcquire8$MH, "ReadAcquire8");
        try {
            return (byte)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadNoFence8$MH() {
        return RuntimeHelper.requireNonNull(constants$64.ReadNoFence8$MH,"ReadNoFence8");
    }
    public static byte ReadNoFence8 ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.ReadNoFence8$MH, "ReadNoFence8");
        try {
            return (byte)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteRelease8$MH() {
        return RuntimeHelper.requireNonNull(constants$64.WriteRelease8$MH,"WriteRelease8");
    }
    public static void WriteRelease8 ( Addressable Destination,  byte Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.WriteRelease8$MH, "WriteRelease8");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteNoFence8$MH() {
        return RuntimeHelper.requireNonNull(constants$64.WriteNoFence8$MH,"WriteNoFence8");
    }
    public static void WriteNoFence8 ( Addressable Destination,  byte Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.WriteNoFence8$MH, "WriteNoFence8");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadAcquire16$MH() {
        return RuntimeHelper.requireNonNull(constants$64.ReadAcquire16$MH,"ReadAcquire16");
    }
    public static short ReadAcquire16 ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$64.ReadAcquire16$MH, "ReadAcquire16");
        try {
            return (short)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadNoFence16$MH() {
        return RuntimeHelper.requireNonNull(constants$65.ReadNoFence16$MH,"ReadNoFence16");
    }
    public static short ReadNoFence16 ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.ReadNoFence16$MH, "ReadNoFence16");
        try {
            return (short)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteRelease16$MH() {
        return RuntimeHelper.requireNonNull(constants$65.WriteRelease16$MH,"WriteRelease16");
    }
    public static void WriteRelease16 ( Addressable Destination,  short Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.WriteRelease16$MH, "WriteRelease16");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteNoFence16$MH() {
        return RuntimeHelper.requireNonNull(constants$65.WriteNoFence16$MH,"WriteNoFence16");
    }
    public static void WriteNoFence16 ( Addressable Destination,  short Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.WriteNoFence16$MH, "WriteNoFence16");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadAcquire$MH() {
        return RuntimeHelper.requireNonNull(constants$65.ReadAcquire$MH,"ReadAcquire");
    }
    public static int ReadAcquire ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.ReadAcquire$MH, "ReadAcquire");
        try {
            return (int)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$65.ReadNoFence$MH,"ReadNoFence");
    }
    public static int ReadNoFence ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.ReadNoFence$MH, "ReadNoFence");
        try {
            return (int)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteRelease$MH() {
        return RuntimeHelper.requireNonNull(constants$65.WriteRelease$MH,"WriteRelease");
    }
    public static void WriteRelease ( Addressable Destination,  int Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$65.WriteRelease$MH, "WriteRelease");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$66.WriteNoFence$MH,"WriteNoFence");
    }
    public static void WriteNoFence ( Addressable Destination,  int Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.WriteNoFence$MH, "WriteNoFence");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadAcquire64$MH() {
        return RuntimeHelper.requireNonNull(constants$66.ReadAcquire64$MH,"ReadAcquire64");
    }
    public static long ReadAcquire64 ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.ReadAcquire64$MH, "ReadAcquire64");
        try {
            return (long)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadNoFence64$MH() {
        return RuntimeHelper.requireNonNull(constants$66.ReadNoFence64$MH,"ReadNoFence64");
    }
    public static long ReadNoFence64 ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.ReadNoFence64$MH, "ReadNoFence64");
        try {
            return (long)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteRelease64$MH() {
        return RuntimeHelper.requireNonNull(constants$66.WriteRelease64$MH,"WriteRelease64");
    }
    public static void WriteRelease64 ( Addressable Destination,  long Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.WriteRelease64$MH, "WriteRelease64");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteNoFence64$MH() {
        return RuntimeHelper.requireNonNull(constants$66.WriteNoFence64$MH,"WriteNoFence64");
    }
    public static void WriteNoFence64 ( Addressable Destination,  long Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.WriteNoFence64$MH, "WriteNoFence64");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadRaw8$MH() {
        return RuntimeHelper.requireNonNull(constants$66.ReadRaw8$MH,"ReadRaw8");
    }
    public static byte ReadRaw8 ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$66.ReadRaw8$MH, "ReadRaw8");
        try {
            return (byte)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteRaw8$MH() {
        return RuntimeHelper.requireNonNull(constants$67.WriteRaw8$MH,"WriteRaw8");
    }
    public static void WriteRaw8 ( Addressable Destination,  byte Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.WriteRaw8$MH, "WriteRaw8");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadRaw16$MH() {
        return RuntimeHelper.requireNonNull(constants$67.ReadRaw16$MH,"ReadRaw16");
    }
    public static short ReadRaw16 ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.ReadRaw16$MH, "ReadRaw16");
        try {
            return (short)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteRaw16$MH() {
        return RuntimeHelper.requireNonNull(constants$67.WriteRaw16$MH,"WriteRaw16");
    }
    public static void WriteRaw16 ( Addressable Destination,  short Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.WriteRaw16$MH, "WriteRaw16");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$67.ReadRaw$MH,"ReadRaw");
    }
    public static int ReadRaw ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.ReadRaw$MH, "ReadRaw");
        try {
            return (int)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$67.WriteRaw$MH,"WriteRaw");
    }
    public static void WriteRaw ( Addressable Destination,  int Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.WriteRaw$MH, "WriteRaw");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadRaw64$MH() {
        return RuntimeHelper.requireNonNull(constants$67.ReadRaw64$MH,"ReadRaw64");
    }
    public static long ReadRaw64 ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$67.ReadRaw64$MH, "ReadRaw64");
        try {
            return (long)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteRaw64$MH() {
        return RuntimeHelper.requireNonNull(constants$68.WriteRaw64$MH,"WriteRaw64");
    }
    public static void WriteRaw64 ( Addressable Destination,  long Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.WriteRaw64$MH, "WriteRaw64");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadUCharAcquire$MH() {
        return RuntimeHelper.requireNonNull(constants$68.ReadUCharAcquire$MH,"ReadUCharAcquire");
    }
    public static byte ReadUCharAcquire ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.ReadUCharAcquire$MH, "ReadUCharAcquire");
        try {
            return (byte)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadUCharNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$68.ReadUCharNoFence$MH,"ReadUCharNoFence");
    }
    public static byte ReadUCharNoFence ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.ReadUCharNoFence$MH, "ReadUCharNoFence");
        try {
            return (byte)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadBooleanAcquire$MH() {
        return RuntimeHelper.requireNonNull(constants$68.ReadBooleanAcquire$MH,"ReadBooleanAcquire");
    }
    public static byte ReadBooleanAcquire ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.ReadBooleanAcquire$MH, "ReadBooleanAcquire");
        try {
            return (byte)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadBooleanNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$68.ReadBooleanNoFence$MH,"ReadBooleanNoFence");
    }
    public static byte ReadBooleanNoFence ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.ReadBooleanNoFence$MH, "ReadBooleanNoFence");
        try {
            return (byte)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadUCharRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$68.ReadUCharRaw$MH,"ReadUCharRaw");
    }
    public static byte ReadUCharRaw ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$68.ReadUCharRaw$MH, "ReadUCharRaw");
        try {
            return (byte)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteUCharRelease$MH() {
        return RuntimeHelper.requireNonNull(constants$69.WriteUCharRelease$MH,"WriteUCharRelease");
    }
    public static void WriteUCharRelease ( Addressable Destination,  byte Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.WriteUCharRelease$MH, "WriteUCharRelease");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteUCharNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$69.WriteUCharNoFence$MH,"WriteUCharNoFence");
    }
    public static void WriteUCharNoFence ( Addressable Destination,  byte Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.WriteUCharNoFence$MH, "WriteUCharNoFence");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteBooleanRelease$MH() {
        return RuntimeHelper.requireNonNull(constants$69.WriteBooleanRelease$MH,"WriteBooleanRelease");
    }
    public static void WriteBooleanRelease ( Addressable Destination,  byte Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.WriteBooleanRelease$MH, "WriteBooleanRelease");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteBooleanNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$69.WriteBooleanNoFence$MH,"WriteBooleanNoFence");
    }
    public static void WriteBooleanNoFence ( Addressable Destination,  byte Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.WriteBooleanNoFence$MH, "WriteBooleanNoFence");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteUCharRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$69.WriteUCharRaw$MH,"WriteUCharRaw");
    }
    public static void WriteUCharRaw ( Addressable Destination,  byte Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.WriteUCharRaw$MH, "WriteUCharRaw");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadUShortAcquire$MH() {
        return RuntimeHelper.requireNonNull(constants$69.ReadUShortAcquire$MH,"ReadUShortAcquire");
    }
    public static short ReadUShortAcquire ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$69.ReadUShortAcquire$MH, "ReadUShortAcquire");
        try {
            return (short)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadUShortNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$70.ReadUShortNoFence$MH,"ReadUShortNoFence");
    }
    public static short ReadUShortNoFence ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.ReadUShortNoFence$MH, "ReadUShortNoFence");
        try {
            return (short)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadUShortRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$70.ReadUShortRaw$MH,"ReadUShortRaw");
    }
    public static short ReadUShortRaw ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.ReadUShortRaw$MH, "ReadUShortRaw");
        try {
            return (short)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteUShortRelease$MH() {
        return RuntimeHelper.requireNonNull(constants$70.WriteUShortRelease$MH,"WriteUShortRelease");
    }
    public static void WriteUShortRelease ( Addressable Destination,  short Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.WriteUShortRelease$MH, "WriteUShortRelease");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteUShortNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$70.WriteUShortNoFence$MH,"WriteUShortNoFence");
    }
    public static void WriteUShortNoFence ( Addressable Destination,  short Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.WriteUShortNoFence$MH, "WriteUShortNoFence");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteUShortRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$70.WriteUShortRaw$MH,"WriteUShortRaw");
    }
    public static void WriteUShortRaw ( Addressable Destination,  short Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.WriteUShortRaw$MH, "WriteUShortRaw");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadULongAcquire$MH() {
        return RuntimeHelper.requireNonNull(constants$70.ReadULongAcquire$MH,"ReadULongAcquire");
    }
    public static int ReadULongAcquire ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$70.ReadULongAcquire$MH, "ReadULongAcquire");
        try {
            return (int)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadULongNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$71.ReadULongNoFence$MH,"ReadULongNoFence");
    }
    public static int ReadULongNoFence ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.ReadULongNoFence$MH, "ReadULongNoFence");
        try {
            return (int)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadULongRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$71.ReadULongRaw$MH,"ReadULongRaw");
    }
    public static int ReadULongRaw ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.ReadULongRaw$MH, "ReadULongRaw");
        try {
            return (int)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteULongRelease$MH() {
        return RuntimeHelper.requireNonNull(constants$71.WriteULongRelease$MH,"WriteULongRelease");
    }
    public static void WriteULongRelease ( Addressable Destination,  int Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.WriteULongRelease$MH, "WriteULongRelease");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteULongNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$71.WriteULongNoFence$MH,"WriteULongNoFence");
    }
    public static void WriteULongNoFence ( Addressable Destination,  int Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.WriteULongNoFence$MH, "WriteULongNoFence");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteULongRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$71.WriteULongRaw$MH,"WriteULongRaw");
    }
    public static void WriteULongRaw ( Addressable Destination,  int Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.WriteULongRaw$MH, "WriteULongRaw");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadULong64Acquire$MH() {
        return RuntimeHelper.requireNonNull(constants$71.ReadULong64Acquire$MH,"ReadULong64Acquire");
    }
    public static long ReadULong64Acquire ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$71.ReadULong64Acquire$MH, "ReadULong64Acquire");
        try {
            return (long)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadULong64NoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$72.ReadULong64NoFence$MH,"ReadULong64NoFence");
    }
    public static long ReadULong64NoFence ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.ReadULong64NoFence$MH, "ReadULong64NoFence");
        try {
            return (long)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadULong64Raw$MH() {
        return RuntimeHelper.requireNonNull(constants$72.ReadULong64Raw$MH,"ReadULong64Raw");
    }
    public static long ReadULong64Raw ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.ReadULong64Raw$MH, "ReadULong64Raw");
        try {
            return (long)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteULong64Release$MH() {
        return RuntimeHelper.requireNonNull(constants$72.WriteULong64Release$MH,"WriteULong64Release");
    }
    public static void WriteULong64Release ( Addressable Destination,  long Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.WriteULong64Release$MH, "WriteULong64Release");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteULong64NoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$72.WriteULong64NoFence$MH,"WriteULong64NoFence");
    }
    public static void WriteULong64NoFence ( Addressable Destination,  long Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.WriteULong64NoFence$MH, "WriteULong64NoFence");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WriteULong64Raw$MH() {
        return RuntimeHelper.requireNonNull(constants$72.WriteULong64Raw$MH,"WriteULong64Raw");
    }
    public static void WriteULong64Raw ( Addressable Destination,  long Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.WriteULong64Raw$MH, "WriteULong64Raw");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadPointerAcquire$MH() {
        return RuntimeHelper.requireNonNull(constants$72.ReadPointerAcquire$MH,"ReadPointerAcquire");
    }
    public static MemoryAddress ReadPointerAcquire ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$72.ReadPointerAcquire$MH, "ReadPointerAcquire");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadPointerNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$73.ReadPointerNoFence$MH,"ReadPointerNoFence");
    }
    public static MemoryAddress ReadPointerNoFence ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.ReadPointerNoFence$MH, "ReadPointerNoFence");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ReadPointerRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$73.ReadPointerRaw$MH,"ReadPointerRaw");
    }
    public static MemoryAddress ReadPointerRaw ( Addressable Source) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.ReadPointerRaw$MH, "ReadPointerRaw");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(Source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WritePointerRelease$MH() {
        return RuntimeHelper.requireNonNull(constants$73.WritePointerRelease$MH,"WritePointerRelease");
    }
    public static void WritePointerRelease ( Addressable Destination,  Addressable Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.WritePointerRelease$MH, "WritePointerRelease");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WritePointerNoFence$MH() {
        return RuntimeHelper.requireNonNull(constants$73.WritePointerNoFence$MH,"WritePointerNoFence");
    }
    public static void WritePointerNoFence ( Addressable Destination,  Addressable Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.WritePointerNoFence$MH, "WritePointerNoFence");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle WritePointerRaw$MH() {
        return RuntimeHelper.requireNonNull(constants$73.WritePointerRaw$MH,"WritePointerRaw");
    }
    public static void WritePointerRaw ( Addressable Destination,  Addressable Value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$73.WritePointerRaw$MH, "WritePointerRaw");
        try {
            mh$.invokeExact(Destination, Value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PWOW64_FLOATING_SAVE_AREA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWOW64_CONTEXT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWOW64_LDT_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWOW64_DESCRIPTOR_TABLE_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXCEPTION_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXCEPTION_RECORD32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXCEPTION_RECORD64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXCEPTION_POINTERS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_TOKEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSECURITY_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCLAIMS_BLOB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_MASK = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGENERIC_MAPPING = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLUID_AND_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PLUID_AND_ATTRIBUTES_ARRAY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSID_IDENTIFIER_AUTHORITY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PISID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSE_SID = Constants$root.C_POINTER$LAYOUT;
    public static int SidTypeUser() {
        return (int)1L;
    }
    public static int SidTypeGroup() {
        return (int)2L;
    }
    public static int SidTypeDomain() {
        return (int)3L;
    }
    public static int SidTypeAlias() {
        return (int)4L;
    }
    public static int SidTypeWellKnownGroup() {
        return (int)5L;
    }
    public static int SidTypeDeletedAccount() {
        return (int)6L;
    }
    public static int SidTypeInvalid() {
        return (int)7L;
    }
    public static int SidTypeUnknown() {
        return (int)8L;
    }
    public static int SidTypeComputer() {
        return (int)9L;
    }
    public static int SidTypeLabel() {
        return (int)10L;
    }
    public static int SidTypeLogonSession() {
        return (int)11L;
    }
    public static OfAddress PSID_NAME_USE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSID_AND_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSID_AND_ATTRIBUTES_ARRAY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSID_HASH_ENTRY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSID_AND_ATTRIBUTES_HASH = Constants$root.C_POINTER$LAYOUT;
    public static int WinNullSid() {
        return (int)0L;
    }
    public static int WinWorldSid() {
        return (int)1L;
    }
    public static int WinLocalSid() {
        return (int)2L;
    }
    public static int WinCreatorOwnerSid() {
        return (int)3L;
    }
    public static int WinCreatorGroupSid() {
        return (int)4L;
    }
    public static int WinCreatorOwnerServerSid() {
        return (int)5L;
    }
    public static int WinCreatorGroupServerSid() {
        return (int)6L;
    }
    public static int WinNtAuthoritySid() {
        return (int)7L;
    }
    public static int WinDialupSid() {
        return (int)8L;
    }
    public static int WinNetworkSid() {
        return (int)9L;
    }
    public static int WinBatchSid() {
        return (int)10L;
    }
    public static int WinInteractiveSid() {
        return (int)11L;
    }
    public static int WinServiceSid() {
        return (int)12L;
    }
    public static int WinAnonymousSid() {
        return (int)13L;
    }
    public static int WinProxySid() {
        return (int)14L;
    }
    public static int WinEnterpriseControllersSid() {
        return (int)15L;
    }
    public static int WinSelfSid() {
        return (int)16L;
    }
    public static int WinAuthenticatedUserSid() {
        return (int)17L;
    }
    public static int WinRestrictedCodeSid() {
        return (int)18L;
    }
    public static int WinTerminalServerSid() {
        return (int)19L;
    }
    public static int WinRemoteLogonIdSid() {
        return (int)20L;
    }
    public static int WinLogonIdsSid() {
        return (int)21L;
    }
    public static int WinLocalSystemSid() {
        return (int)22L;
    }
    public static int WinLocalServiceSid() {
        return (int)23L;
    }
    public static int WinNetworkServiceSid() {
        return (int)24L;
    }
    public static int WinBuiltinDomainSid() {
        return (int)25L;
    }
    public static int WinBuiltinAdministratorsSid() {
        return (int)26L;
    }
    public static int WinBuiltinUsersSid() {
        return (int)27L;
    }
    public static int WinBuiltinGuestsSid() {
        return (int)28L;
    }
    public static int WinBuiltinPowerUsersSid() {
        return (int)29L;
    }
    public static int WinBuiltinAccountOperatorsSid() {
        return (int)30L;
    }
    public static int WinBuiltinSystemOperatorsSid() {
        return (int)31L;
    }
    public static int WinBuiltinPrintOperatorsSid() {
        return (int)32L;
    }
    public static int WinBuiltinBackupOperatorsSid() {
        return (int)33L;
    }
    public static int WinBuiltinReplicatorSid() {
        return (int)34L;
    }
    public static int WinBuiltinPreWindows2000CompatibleAccessSid() {
        return (int)35L;
    }
    public static int WinBuiltinRemoteDesktopUsersSid() {
        return (int)36L;
    }
    public static int WinBuiltinNetworkConfigurationOperatorsSid() {
        return (int)37L;
    }
    public static int WinAccountAdministratorSid() {
        return (int)38L;
    }
    public static int WinAccountGuestSid() {
        return (int)39L;
    }
    public static int WinAccountKrbtgtSid() {
        return (int)40L;
    }
    public static int WinAccountDomainAdminsSid() {
        return (int)41L;
    }
    public static int WinAccountDomainUsersSid() {
        return (int)42L;
    }
    public static int WinAccountDomainGuestsSid() {
        return (int)43L;
    }
    public static int WinAccountComputersSid() {
        return (int)44L;
    }
    public static int WinAccountControllersSid() {
        return (int)45L;
    }
    public static int WinAccountCertAdminsSid() {
        return (int)46L;
    }
    public static int WinAccountSchemaAdminsSid() {
        return (int)47L;
    }
    public static int WinAccountEnterpriseAdminsSid() {
        return (int)48L;
    }
    public static int WinAccountPolicyAdminsSid() {
        return (int)49L;
    }
    public static int WinAccountRasAndIasServersSid() {
        return (int)50L;
    }
    public static int WinNTLMAuthenticationSid() {
        return (int)51L;
    }
    public static int WinDigestAuthenticationSid() {
        return (int)52L;
    }
    public static int WinSChannelAuthenticationSid() {
        return (int)53L;
    }
    public static int WinThisOrganizationSid() {
        return (int)54L;
    }
    public static int WinOtherOrganizationSid() {
        return (int)55L;
    }
    public static int WinBuiltinIncomingForestTrustBuildersSid() {
        return (int)56L;
    }
    public static int WinBuiltinPerfMonitoringUsersSid() {
        return (int)57L;
    }
    public static int WinBuiltinPerfLoggingUsersSid() {
        return (int)58L;
    }
    public static int WinBuiltinAuthorizationAccessSid() {
        return (int)59L;
    }
    public static int WinBuiltinTerminalServerLicenseServersSid() {
        return (int)60L;
    }
    public static int WinBuiltinDCOMUsersSid() {
        return (int)61L;
    }
    public static int WinBuiltinIUsersSid() {
        return (int)62L;
    }
    public static int WinIUserSid() {
        return (int)63L;
    }
    public static int WinBuiltinCryptoOperatorsSid() {
        return (int)64L;
    }
    public static int WinUntrustedLabelSid() {
        return (int)65L;
    }
    public static int WinLowLabelSid() {
        return (int)66L;
    }
    public static int WinMediumLabelSid() {
        return (int)67L;
    }
    public static int WinHighLabelSid() {
        return (int)68L;
    }
    public static int WinSystemLabelSid() {
        return (int)69L;
    }
    public static int WinWriteRestrictedCodeSid() {
        return (int)70L;
    }
    public static int WinCreatorOwnerRightsSid() {
        return (int)71L;
    }
    public static int WinCacheablePrincipalsGroupSid() {
        return (int)72L;
    }
    public static int WinNonCacheablePrincipalsGroupSid() {
        return (int)73L;
    }
    public static int WinEnterpriseReadonlyControllersSid() {
        return (int)74L;
    }
    public static int WinAccountReadonlyControllersSid() {
        return (int)75L;
    }
    public static int WinBuiltinEventLogReadersGroup() {
        return (int)76L;
    }
    public static int WinNewEnterpriseReadonlyControllersSid() {
        return (int)77L;
    }
    public static int WinBuiltinCertSvcDComAccessGroup() {
        return (int)78L;
    }
    public static int WinMediumPlusLabelSid() {
        return (int)79L;
    }
    public static int WinLocalLogonSid() {
        return (int)80L;
    }
    public static int WinConsoleLogonSid() {
        return (int)81L;
    }
    public static int WinThisOrganizationCertificateSid() {
        return (int)82L;
    }
    public static int WinApplicationPackageAuthoritySid() {
        return (int)83L;
    }
    public static int WinBuiltinAnyPackageSid() {
        return (int)84L;
    }
    public static int WinCapabilityInternetClientSid() {
        return (int)85L;
    }
    public static int WinCapabilityInternetClientServerSid() {
        return (int)86L;
    }
    public static int WinCapabilityPrivateNetworkClientServerSid() {
        return (int)87L;
    }
    public static int WinCapabilityPicturesLibrarySid() {
        return (int)88L;
    }
    public static int WinCapabilityVideosLibrarySid() {
        return (int)89L;
    }
    public static int WinCapabilityMusicLibrarySid() {
        return (int)90L;
    }
    public static int WinCapabilityDocumentsLibrarySid() {
        return (int)91L;
    }
    public static int WinCapabilitySharedUserCertificatesSid() {
        return (int)92L;
    }
    public static int WinCapabilityEnterpriseAuthenticationSid() {
        return (int)93L;
    }
    public static int WinCapabilityRemovableStorageSid() {
        return (int)94L;
    }
    public static int WinBuiltinRDSRemoteAccessServersSid() {
        return (int)95L;
    }
    public static int WinBuiltinRDSEndpointServersSid() {
        return (int)96L;
    }
    public static int WinBuiltinRDSManagementServersSid() {
        return (int)97L;
    }
    public static int WinUserModeDriversSid() {
        return (int)98L;
    }
    public static int WinBuiltinHyperVAdminsSid() {
        return (int)99L;
    }
    public static int WinAccountCloneableControllersSid() {
        return (int)100L;
    }
    public static int WinBuiltinAccessControlAssistanceOperatorsSid() {
        return (int)101L;
    }
    public static int WinBuiltinRemoteManagementUsersSid() {
        return (int)102L;
    }
    public static int WinAuthenticationAuthorityAssertedSid() {
        return (int)103L;
    }
    public static int WinAuthenticationServiceAssertedSid() {
        return (int)104L;
    }
    public static int WinLocalAccountSid() {
        return (int)105L;
    }
    public static int WinLocalAccountAndAdministratorSid() {
        return (int)106L;
    }
    public static int WinAccountProtectedUsersSid() {
        return (int)107L;
    }
    public static int WinCapabilityAppointmentsSid() {
        return (int)108L;
    }
    public static int WinCapabilityContactsSid() {
        return (int)109L;
    }
    public static int WinAccountDefaultSystemManagedSid() {
        return (int)110L;
    }
    public static int WinBuiltinDefaultSystemManagedGroupSid() {
        return (int)111L;
    }
    public static int WinBuiltinStorageReplicaAdminsSid() {
        return (int)112L;
    }
    public static int WinAccountKeyAdminsSid() {
        return (int)113L;
    }
    public static int WinAccountEnterpriseKeyAdminsSid() {
        return (int)114L;
    }
    public static int WinAuthenticationKeyTrustSid() {
        return (int)115L;
    }
    public static int WinAuthenticationKeyPropertyMFASid() {
        return (int)116L;
    }
    public static int WinAuthenticationKeyPropertyAttestationSid() {
        return (int)117L;
    }
    public static int WinAuthenticationFreshKeyAuthSid() {
        return (int)118L;
    }
    public static int WinBuiltinDeviceOwnersSid() {
        return (int)119L;
    }
    public static OfAddress PACL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACE_HEADER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_ALLOWED_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_DENIED_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_AUDIT_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_ALARM_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_RESOURCE_ATTRIBUTE_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_SCOPED_POLICY_ID_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_MANDATORY_LABEL_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_PROCESS_TRUST_LABEL_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_ACCESS_FILTER_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_ALLOWED_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_DENIED_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_AUDIT_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_ALARM_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_ALLOWED_CALLBACK_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_DENIED_CALLBACK_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_AUDIT_CALLBACK_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_ALARM_CALLBACK_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_ALLOWED_CALLBACK_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACCESS_DENIED_CALLBACK_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_ALARM_CALLBACK_OBJECT_ACE = Constants$root.C_POINTER$LAYOUT;
    public static int AclRevisionInformation() {
        return (int)1L;
    }
    public static int AclSizeInformation() {
        return (int)2L;
    }
    public static OfAddress PACL_REVISION_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PACL_SIZE_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSECURITY_DESCRIPTOR_CONTROL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PISECURITY_DESCRIPTOR_RELATIVE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PISECURITY_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSECURITY_OBJECT_AI_PARAMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress POBJECT_TYPE_LIST = Constants$root.C_POINTER$LAYOUT;
    public static int AuditEventObjectAccess() {
        return (int)0L;
    }
    public static int AuditEventDirectoryServiceAccess() {
        return (int)1L;
    }
    public static OfAddress PAUDIT_EVENT_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPRIVILEGE_SET = Constants$root.C_POINTER$LAYOUT;
    public static int AccessReasonNone() {
        return (int)0L;
    }
    public static int AccessReasonAllowedAce() {
        return (int)65536L;
    }
    public static int AccessReasonDeniedAce() {
        return (int)131072L;
    }
    public static int AccessReasonAllowedParentAce() {
        return (int)196608L;
    }
    public static int AccessReasonDeniedParentAce() {
        return (int)262144L;
    }
    public static int AccessReasonNotGrantedByCape() {
        return (int)327680L;
    }
    public static int AccessReasonNotGrantedByParentCape() {
        return (int)393216L;
    }
    public static int AccessReasonNotGrantedToAppContainer() {
        return (int)458752L;
    }
    public static int AccessReasonMissingPrivilege() {
        return (int)1048576L;
    }
    public static int AccessReasonFromPrivilege() {
        return (int)2097152L;
    }
    public static int AccessReasonIntegrityLevel() {
        return (int)3145728L;
    }
    public static int AccessReasonOwnership() {
        return (int)4194304L;
    }
    public static int AccessReasonNullDacl() {
        return (int)5242880L;
    }
    public static int AccessReasonEmptyDacl() {
        return (int)6291456L;
    }
    public static int AccessReasonNoSD() {
        return (int)7340032L;
    }
    public static int AccessReasonNoGrant() {
        return (int)8388608L;
    }
    public static int AccessReasonTrustLabel() {
        return (int)9437184L;
    }
    public static int AccessReasonFilterAce() {
        return (int)10485760L;
    }
    public static OfAddress PACCESS_REASONS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSE_SECURITY_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSE_ACCESS_REQUEST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSE_ACCESS_REPLY = Constants$root.C_POINTER$LAYOUT;
    public static int SecurityAnonymous() {
        return (int)0L;
    }
    public static int SecurityIdentification() {
        return (int)1L;
    }
    public static int SecurityImpersonation() {
        return (int)2L;
    }
    public static int SecurityDelegation() {
        return (int)3L;
    }
    public static OfAddress PSECURITY_IMPERSONATION_LEVEL = Constants$root.C_POINTER$LAYOUT;
    public static int TokenPrimary() {
        return (int)1L;
    }
    public static int TokenImpersonation() {
        return (int)2L;
    }
    public static OfAddress PTOKEN_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int TokenElevationTypeDefault() {
        return (int)1L;
    }
    public static int TokenElevationTypeFull() {
        return (int)2L;
    }
    public static int TokenElevationTypeLimited() {
        return (int)3L;
    }
    public static OfAddress PTOKEN_ELEVATION_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int TokenUser() {
        return (int)1L;
    }
    public static int TokenGroups() {
        return (int)2L;
    }
    public static int TokenPrivileges() {
        return (int)3L;
    }
    public static int TokenOwner() {
        return (int)4L;
    }
    public static int TokenPrimaryGroup() {
        return (int)5L;
    }
    public static int TokenDefaultDacl() {
        return (int)6L;
    }
    public static int TokenSource() {
        return (int)7L;
    }
    public static int TokenType() {
        return (int)8L;
    }
    public static int TokenImpersonationLevel() {
        return (int)9L;
    }
    public static int TokenStatistics() {
        return (int)10L;
    }
    public static int TokenRestrictedSids() {
        return (int)11L;
    }
    public static int TokenSessionId() {
        return (int)12L;
    }
    public static int TokenGroupsAndPrivileges() {
        return (int)13L;
    }
    public static int TokenSessionReference() {
        return (int)14L;
    }
    public static int TokenSandBoxInert() {
        return (int)15L;
    }
    public static int TokenAuditPolicy() {
        return (int)16L;
    }
    public static int TokenOrigin() {
        return (int)17L;
    }
    public static int TokenElevationType() {
        return (int)18L;
    }
    public static int TokenLinkedToken() {
        return (int)19L;
    }
    public static int TokenElevation() {
        return (int)20L;
    }
    public static int TokenHasRestrictions() {
        return (int)21L;
    }
    public static int TokenAccessInformation() {
        return (int)22L;
    }
    public static int TokenVirtualizationAllowed() {
        return (int)23L;
    }
    public static int TokenVirtualizationEnabled() {
        return (int)24L;
    }
    public static int TokenIntegrityLevel() {
        return (int)25L;
    }
    public static int TokenUIAccess() {
        return (int)26L;
    }
    public static int TokenMandatoryPolicy() {
        return (int)27L;
    }
    public static int TokenLogonSid() {
        return (int)28L;
    }
    public static int TokenIsAppContainer() {
        return (int)29L;
    }
    public static int TokenCapabilities() {
        return (int)30L;
    }
    public static int TokenAppContainerSid() {
        return (int)31L;
    }
    public static int TokenAppContainerNumber() {
        return (int)32L;
    }
    public static int TokenUserClaimAttributes() {
        return (int)33L;
    }
    public static int TokenDeviceClaimAttributes() {
        return (int)34L;
    }
    public static int TokenRestrictedUserClaimAttributes() {
        return (int)35L;
    }
    public static int TokenRestrictedDeviceClaimAttributes() {
        return (int)36L;
    }
    public static int TokenDeviceGroups() {
        return (int)37L;
    }
    public static int TokenRestrictedDeviceGroups() {
        return (int)38L;
    }
    public static int TokenSecurityAttributes() {
        return (int)39L;
    }
    public static int TokenIsRestricted() {
        return (int)40L;
    }
    public static int TokenProcessTrustLevel() {
        return (int)41L;
    }
    public static int TokenPrivateNameSpace() {
        return (int)42L;
    }
    public static int TokenSingletonAttributes() {
        return (int)43L;
    }
    public static int TokenBnoIsolation() {
        return (int)44L;
    }
    public static int TokenChildProcessFlags() {
        return (int)45L;
    }
    public static int TokenIsLessPrivilegedAppContainer() {
        return (int)46L;
    }
    public static int TokenIsSandboxed() {
        return (int)47L;
    }
    public static int TokenOriginatingProcessTrustLevel() {
        return (int)48L;
    }
    public static int MaxTokenInfoClass() {
        return (int)49L;
    }
    public static OfAddress PTOKEN_INFORMATION_CLASS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_USER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_GROUPS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_PRIVILEGES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_OWNER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_PRIMARY_GROUP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_DEFAULT_DACL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_USER_CLAIMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_DEVICE_CLAIMS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_GROUPS_AND_PRIVILEGES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_LINKED_TOKEN = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_ELEVATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_MANDATORY_LABEL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_MANDATORY_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSECURITY_ATTRIBUTES_OPAQUE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_ACCESS_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_AUDIT_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_SOURCE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_STATISTICS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_CONTROL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_ORIGIN = Constants$root.C_POINTER$LAYOUT;
    public static int MandatoryLevelUntrusted() {
        return (int)0L;
    }
    public static int MandatoryLevelLow() {
        return (int)1L;
    }
    public static int MandatoryLevelMedium() {
        return (int)2L;
    }
    public static int MandatoryLevelHigh() {
        return (int)3L;
    }
    public static int MandatoryLevelSystem() {
        return (int)4L;
    }
    public static int MandatoryLevelSecureProcess() {
        return (int)5L;
    }
    public static int MandatoryLevelCount() {
        return (int)6L;
    }
    public static OfAddress PMANDATORY_LEVEL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_APPCONTAINER_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_SID_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PTOKEN_BNO_ISOLATION_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCLAIM_SECURITY_ATTRIBUTE_V1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCLAIM_SECURITY_ATTRIBUTES_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSECURITY_CONTEXT_TRACKING_MODE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSECURITY_QUALITY_OF_SERVICE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSE_IMPERSONATION_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSECURITY_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSE_SIGNING_LEVEL = Constants$root.C_POINTER$LAYOUT;
    public static int SeImageSignatureNone() {
        return (int)0L;
    }
    public static int SeImageSignatureEmbedded() {
        return (int)1L;
    }
    public static int SeImageSignatureCache() {
        return (int)2L;
    }
    public static int SeImageSignatureCatalogCached() {
        return (int)3L;
    }
    public static int SeImageSignatureCatalogNotCached() {
        return (int)4L;
    }
    public static int SeImageSignatureCatalogHint() {
        return (int)5L;
    }
    public static int SeImageSignaturePackageCatalog() {
        return (int)6L;
    }
    public static OfAddress PSE_IMAGE_SIGNATURE_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int SeLearningModeInvalidType() {
        return (int)0L;
    }
    public static int SeLearningModeSettings() {
        return (int)1L;
    }
    public static int SeLearningModeMax() {
        return (int)2L;
    }
    public static OfAddress PSECURITY_CAPABILITIES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPSECURITY_CAPABILITIES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOB_SET_ARRAY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PEXCEPTION_REGISTRATION_RECORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNT_TIB = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNT_TIB32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNT_TIB64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUMS_CREATE_THREAD_ATTRIBUTES = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PQUOTA_LIMITS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PRATE_QUOTA_LIMIT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PQUOTA_LIMITS_EX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PIO_COUNTERS = Constants$root.C_POINTER$LAYOUT;
    public static int PMCCounter() {
        return (int)0L;
    }
    public static int MaxHardwareCounterType() {
        return (int)1L;
    }
    public static OfAddress PHARDWARE_COUNTER_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int ProcessDEPPolicy() {
        return (int)0L;
    }
    public static int ProcessASLRPolicy() {
        return (int)1L;
    }
    public static int ProcessDynamicCodePolicy() {
        return (int)2L;
    }
    public static int ProcessStrictHandleCheckPolicy() {
        return (int)3L;
    }
    public static int ProcessSystemCallDisablePolicy() {
        return (int)4L;
    }
    public static int ProcessMitigationOptionsMask() {
        return (int)5L;
    }
    public static int ProcessExtensionPointDisablePolicy() {
        return (int)6L;
    }
    public static int ProcessControlFlowGuardPolicy() {
        return (int)7L;
    }
    public static int ProcessSignaturePolicy() {
        return (int)8L;
    }
    public static int ProcessFontDisablePolicy() {
        return (int)9L;
    }
    public static int ProcessImageLoadPolicy() {
        return (int)10L;
    }
    public static int ProcessSystemCallFilterPolicy() {
        return (int)11L;
    }
    public static int ProcessPayloadRestrictionPolicy() {
        return (int)12L;
    }
    public static int ProcessChildProcessPolicy() {
        return (int)13L;
    }
    public static int ProcessSideChannelIsolationPolicy() {
        return (int)14L;
    }
    public static int ProcessUserShadowStackPolicy() {
        return (int)15L;
    }
    public static int MaxProcessMitigationPolicy() {
        return (int)16L;
    }
    public static OfAddress PPROCESS_MITIGATION_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_ASLR_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_DEP_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_DYNAMIC_CODE_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_FONT_DISABLE_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_IMAGE_LOAD_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_CHILD_PROCESS_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESS_MITIGATION_USER_SHADOW_STACK_POLICY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_BASIC_LIMIT_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_EXTENDED_LIMIT_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_BASIC_PROCESS_ID_LIST = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_BASIC_UI_RESTRICTIONS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_SECURITY_LIMIT_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_END_OF_JOB_TIME_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_ASSOCIATE_COMPLETION_PORT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_JOBSET_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static int ToleranceLow() {
        return (int)1L;
    }
    public static int ToleranceMedium() {
        return (int)2L;
    }
    public static int ToleranceHigh() {
        return (int)3L;
    }
    public static OfAddress PJOBOBJECT_RATE_CONTROL_TOLERANCE = Constants$root.C_POINTER$LAYOUT;
    public static int ToleranceIntervalShort() {
        return (int)1L;
    }
    public static int ToleranceIntervalMedium() {
        return (int)2L;
    }
    public static int ToleranceIntervalLong() {
        return (int)3L;
    }
    public static OfAddress PJOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_LIMIT_VIOLATION_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static int JOB_OBJECT_NET_RATE_CONTROL_ENABLE() {
        return (int)1L;
    }
    public static int JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH() {
        return (int)2L;
    }
    public static int JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG() {
        return (int)4L;
    }
    public static int JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS() {
        return (int)7L;
    }
    public static int JOB_OBJECT_IO_RATE_CONTROL_ENABLE() {
        return (int)1L;
    }
    public static int JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME() {
        return (int)2L;
    }
    public static int JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL() {
        return (int)4L;
    }
    public static int JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP() {
        return (int)8L;
    }
    public static int JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS() {
        return (int)15L;
    }
    public static int JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE() {
        return (int)1L;
    }
    public static int JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE() {
        return (int)2L;
    }
    public static int JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS() {
        return (int)3L;
    }
    public static OfAddress PJOBOBJECT_IO_ATTRIBUTION_STATS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PJOBOBJECT_IO_ATTRIBUTION_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static int JobObjectBasicAccountingInformation() {
        return (int)1L;
    }
    public static int JobObjectBasicLimitInformation() {
        return (int)2L;
    }
    public static int JobObjectBasicProcessIdList() {
        return (int)3L;
    }
    public static int JobObjectBasicUIRestrictions() {
        return (int)4L;
    }
    public static int JobObjectSecurityLimitInformation() {
        return (int)5L;
    }
    public static int JobObjectEndOfJobTimeInformation() {
        return (int)6L;
    }
    public static int JobObjectAssociateCompletionPortInformation() {
        return (int)7L;
    }
    public static int JobObjectBasicAndIoAccountingInformation() {
        return (int)8L;
    }
    public static int JobObjectExtendedLimitInformation() {
        return (int)9L;
    }
    public static int JobObjectJobSetInformation() {
        return (int)10L;
    }
    public static int JobObjectGroupInformation() {
        return (int)11L;
    }
    public static int JobObjectNotificationLimitInformation() {
        return (int)12L;
    }
    public static int JobObjectLimitViolationInformation() {
        return (int)13L;
    }
    public static int JobObjectGroupInformationEx() {
        return (int)14L;
    }
    public static int JobObjectCpuRateControlInformation() {
        return (int)15L;
    }
    public static int JobObjectCompletionFilter() {
        return (int)16L;
    }
    public static int JobObjectCompletionCounter() {
        return (int)17L;
    }
    public static int JobObjectReserved1Information() {
        return (int)18L;
    }
    public static int JobObjectReserved2Information() {
        return (int)19L;
    }
    public static int JobObjectReserved3Information() {
        return (int)20L;
    }
    public static int JobObjectReserved4Information() {
        return (int)21L;
    }
    public static int JobObjectReserved5Information() {
        return (int)22L;
    }
    public static int JobObjectReserved6Information() {
        return (int)23L;
    }
    public static int JobObjectReserved7Information() {
        return (int)24L;
    }
    public static int JobObjectReserved8Information() {
        return (int)25L;
    }
    public static int JobObjectReserved9Information() {
        return (int)26L;
    }
    public static int JobObjectReserved10Information() {
        return (int)27L;
    }
    public static int JobObjectReserved11Information() {
        return (int)28L;
    }
    public static int JobObjectReserved12Information() {
        return (int)29L;
    }
    public static int JobObjectReserved13Information() {
        return (int)30L;
    }
    public static int JobObjectReserved14Information() {
        return (int)31L;
    }
    public static int JobObjectNetRateControlInformation() {
        return (int)32L;
    }
    public static int JobObjectNotificationLimitInformation2() {
        return (int)33L;
    }
    public static int JobObjectLimitViolationInformation2() {
        return (int)34L;
    }
    public static int JobObjectCreateSilo() {
        return (int)35L;
    }
    public static int JobObjectSiloBasicInformation() {
        return (int)36L;
    }
    public static int JobObjectReserved15Information() {
        return (int)37L;
    }
    public static int JobObjectReserved16Information() {
        return (int)38L;
    }
    public static int JobObjectReserved17Information() {
        return (int)39L;
    }
    public static int JobObjectReserved18Information() {
        return (int)40L;
    }
    public static int JobObjectReserved19Information() {
        return (int)41L;
    }
    public static int JobObjectReserved20Information() {
        return (int)42L;
    }
    public static int JobObjectReserved21Information() {
        return (int)43L;
    }
    public static int JobObjectReserved22Information() {
        return (int)44L;
    }
    public static int JobObjectReserved23Information() {
        return (int)45L;
    }
    public static int JobObjectReserved24Information() {
        return (int)46L;
    }
    public static int JobObjectReserved25Information() {
        return (int)47L;
    }
    public static int MaxJobObjectInfoClass() {
        return (int)48L;
    }
    public static OfAddress PSILOOBJECT_BASIC_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static int SERVERSILO_INITING() {
        return (int)0L;
    }
    public static int SERVERSILO_STARTED() {
        return (int)1L;
    }
    public static int SERVERSILO_SHUTTING_DOWN() {
        return (int)2L;
    }
    public static int SERVERSILO_TERMINATING() {
        return (int)3L;
    }
    public static int SERVERSILO_TERMINATED() {
        return (int)4L;
    }
    public static OfAddress PSERVERSILO_STATE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSERVERSILO_BASIC_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static int FirmwareTypeUnknown() {
        return (int)0L;
    }
    public static int FirmwareTypeBios() {
        return (int)1L;
    }
    public static int FirmwareTypeUefi() {
        return (int)2L;
    }
    public static int FirmwareTypeMax() {
        return (int)3L;
    }
    public static OfAddress PFIRMWARE_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static int RelationProcessorCore() {
        return (int)0L;
    }
    public static int RelationNumaNode() {
        return (int)1L;
    }
    public static int RelationCache() {
        return (int)2L;
    }
    public static int RelationProcessorPackage() {
        return (int)3L;
    }
    public static int RelationGroup() {
        return (int)4L;
    }
    public static int RelationAll() {
        return (int)65535L;
    }
    public static int CacheUnified() {
        return (int)0L;
    }
    public static int CacheInstruction() {
        return (int)1L;
    }
    public static int CacheData() {
        return (int)2L;
    }
    public static int CacheTrace() {
        return (int)3L;
    }
    public static OfAddress PCACHE_DESCRIPTOR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_LOGICAL_PROCESSOR_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESSOR_RELATIONSHIP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNUMA_NODE_RELATIONSHIP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCACHE_RELATIONSHIP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PPROCESSOR_GROUP_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PGROUP_RELATIONSHIP = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = Constants$root.C_POINTER$LAYOUT;
    public static int CpuSetInformation() {
        return (int)0L;
    }
    public static OfAddress PCPU_SET_INFORMATION_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_CPU_SET_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_POOL_ZEROING_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PXSTATE_FEATURE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PXSTATE_CONFIGURATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMEMORY_BASIC_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMEMORY_BASIC_INFORMATION32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMEMORY_BASIC_INFORMATION64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCFG_CALL_TARGET_INFO = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMEM_ADDRESS_REQUIREMENTS = Constants$root.C_POINTER$LAYOUT;
    public static int MemExtendedParameterInvalidType() {
        return (int)0L;
    }
    public static int MemExtendedParameterAddressRequirements() {
        return (int)1L;
    }
    public static int MemExtendedParameterNumaNode() {
        return (int)2L;
    }
    public static int MemExtendedParameterPartitionHandle() {
        return (int)3L;
    }
    public static int MemExtendedParameterUserPhysicalHandle() {
        return (int)4L;
    }
    public static int MemExtendedParameterAttributeFlags() {
        return (int)5L;
    }
    public static int MemExtendedParameterMax() {
        return (int)6L;
    }
    public static OfAddress PMEM_EXTENDED_PARAMETER_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PMEM_EXTENDED_PARAMETER = Constants$root.C_POINTER$LAYOUT;
    public static int MemSectionExtendedParameterInvalidType() {
        return (int)0L;
    }
    public static int MemSectionExtendedParameterUserPhysicalFlags() {
        return (int)1L;
    }
    public static int MemSectionExtendedParameterNumaNode() {
        return (int)2L;
    }
    public static int MemSectionExtendedParameterMax() {
        return (int)3L;
    }
    public static OfAddress PMEM_SECTION_EXTENDED_PARAMETER_TYPE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCLAVE_CREATE_INFO_SGX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCLAVE_INIT_INFO_SGX = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCLAVE_CREATE_INFO_VBS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCLAVE_CREATE_INFO_VBS_BASIC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCLAVE_LOAD_DATA_VBS_BASIC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCLAVE_INIT_INFO_VBS_BASIC = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PENCLAVE_INIT_INFO_VBS = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_ID_128 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_NOTIFY_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_NOTIFY_EXTENDED_INFORMATION = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PFILE_SEGMENT_ELEMENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREPARSE_GUID_DATA_BUFFER = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCRUB_DATA_INPUT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCRUB_PARITY_EXTENT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCRUB_PARITY_EXTENT_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSCRUB_DATA_OUTPUT = Constants$root.C_POINTER$LAYOUT;
    public static int SharedVirtualDisksUnsupported() {
        return (int)0L;
    }
    public static int SharedVirtualDisksSupported() {
        return (int)1L;
    }
    public static int SharedVirtualDiskSnapshotsSupported() {
        return (int)3L;
    }
    public static int SharedVirtualDiskCDPSnapshotsSupported() {
        return (int)7L;
    }
    public static int SharedVirtualDiskHandleStateNone() {
        return (int)0L;
    }
    public static int SharedVirtualDiskHandleStateFileShared() {
        return (int)1L;
    }
    public static int SharedVirtualDiskHandleStateHandleShared() {
        return (int)3L;
    }
    public static OfAddress PSHARED_VIRTUAL_DISK_SUPPORT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREARRANGE_FILE_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PREARRANGE_FILE_DATA32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSHUFFLE_FILE_DATA = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNETWORK_APP_INSTANCE_EA = Constants$root.C_POINTER$LAYOUT;
    public static MemorySegment GUID_MAX_POWER_SAVINGS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$74.GUID_MAX_POWER_SAVINGS$SEGMENT,"GUID_MAX_POWER_SAVINGS");
    }
    public static MemorySegment GUID_MIN_POWER_SAVINGS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$75.GUID_MIN_POWER_SAVINGS$SEGMENT,"GUID_MIN_POWER_SAVINGS");
    }
    public static MemorySegment GUID_TYPICAL_POWER_SAVINGS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$75.GUID_TYPICAL_POWER_SAVINGS$SEGMENT,"GUID_TYPICAL_POWER_SAVINGS");
    }
    public static MemorySegment NO_SUBGROUP_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$75.NO_SUBGROUP_GUID$SEGMENT,"NO_SUBGROUP_GUID");
    }
    public static MemorySegment ALL_POWERSCHEMES_GUID$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$75.ALL_POWERSCHEMES_GUID$SEGMENT,"ALL_POWERSCHEMES_GUID");
    }
    public static MemorySegment GUID_POWERSCHEME_PERSONALITY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$75.GUID_POWERSCHEME_PERSONALITY$SEGMENT,"GUID_POWERSCHEME_PERSONALITY");
    }
    public static MemorySegment GUID_ACTIVE_POWERSCHEME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$75.GUID_ACTIVE_POWERSCHEME$SEGMENT,"GUID_ACTIVE_POWERSCHEME");
    }
    public static MemorySegment GUID_IDLE_RESILIENCY_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$76.GUID_IDLE_RESILIENCY_SUBGROUP$SEGMENT,"GUID_IDLE_RESILIENCY_SUBGROUP");
    }
    public static MemorySegment GUID_IDLE_RESILIENCY_PERIOD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$76.GUID_IDLE_RESILIENCY_PERIOD$SEGMENT,"GUID_IDLE_RESILIENCY_PERIOD");
    }
    public static MemorySegment GUID_DEEP_SLEEP_ENABLED$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$76.GUID_DEEP_SLEEP_ENABLED$SEGMENT,"GUID_DEEP_SLEEP_ENABLED");
    }
    public static MemorySegment GUID_DEEP_SLEEP_PLATFORM_STATE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$76.GUID_DEEP_SLEEP_PLATFORM_STATE$SEGMENT,"GUID_DEEP_SLEEP_PLATFORM_STATE");
    }
    public static MemorySegment GUID_DISK_COALESCING_POWERDOWN_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$76.GUID_DISK_COALESCING_POWERDOWN_TIMEOUT$SEGMENT,"GUID_DISK_COALESCING_POWERDOWN_TIMEOUT");
    }
    public static MemorySegment GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$76.GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT$SEGMENT,"GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT");
    }
    public static MemorySegment GUID_VIDEO_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$77.GUID_VIDEO_SUBGROUP$SEGMENT,"GUID_VIDEO_SUBGROUP");
    }
    public static MemorySegment GUID_VIDEO_POWERDOWN_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$77.GUID_VIDEO_POWERDOWN_TIMEOUT$SEGMENT,"GUID_VIDEO_POWERDOWN_TIMEOUT");
    }
    public static MemorySegment GUID_VIDEO_ANNOYANCE_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$77.GUID_VIDEO_ANNOYANCE_TIMEOUT$SEGMENT,"GUID_VIDEO_ANNOYANCE_TIMEOUT");
    }
    public static MemorySegment GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$77.GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE$SEGMENT,"GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE");
    }
    public static MemorySegment GUID_VIDEO_DIM_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$77.GUID_VIDEO_DIM_TIMEOUT$SEGMENT,"GUID_VIDEO_DIM_TIMEOUT");
    }
    public static MemorySegment GUID_VIDEO_ADAPTIVE_POWERDOWN$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$77.GUID_VIDEO_ADAPTIVE_POWERDOWN$SEGMENT,"GUID_VIDEO_ADAPTIVE_POWERDOWN");
    }
    public static MemorySegment GUID_MONITOR_POWER_ON$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$78.GUID_MONITOR_POWER_ON$SEGMENT,"GUID_MONITOR_POWER_ON");
    }
    public static MemorySegment GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$78.GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS$SEGMENT,"GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS");
    }
    public static MemorySegment GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$78.GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS$SEGMENT,"GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS");
    }
    public static MemorySegment GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$78.GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS$SEGMENT,"GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS");
    }
    public static MemorySegment GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$78.GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS$SEGMENT,"GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS");
    }
    public static MemorySegment GUID_CONSOLE_DISPLAY_STATE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$78.GUID_CONSOLE_DISPLAY_STATE$SEGMENT,"GUID_CONSOLE_DISPLAY_STATE");
    }
    public static MemorySegment GUID_ALLOW_DISPLAY_REQUIRED$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$79.GUID_ALLOW_DISPLAY_REQUIRED$SEGMENT,"GUID_ALLOW_DISPLAY_REQUIRED");
    }
    public static MemorySegment GUID_VIDEO_CONSOLE_LOCK_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$79.GUID_VIDEO_CONSOLE_LOCK_TIMEOUT$SEGMENT,"GUID_VIDEO_CONSOLE_LOCK_TIMEOUT");
    }
    public static MemorySegment GUID_ADVANCED_COLOR_QUALITY_BIAS$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$79.GUID_ADVANCED_COLOR_QUALITY_BIAS$SEGMENT,"GUID_ADVANCED_COLOR_QUALITY_BIAS");
    }
    public static MemorySegment GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$79.GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP$SEGMENT,"GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP");
    }
    public static MemorySegment GUID_NON_ADAPTIVE_INPUT_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$79.GUID_NON_ADAPTIVE_INPUT_TIMEOUT$SEGMENT,"GUID_NON_ADAPTIVE_INPUT_TIMEOUT");
    }
    public static MemorySegment GUID_ADAPTIVE_INPUT_CONTROLLER_STATE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$79.GUID_ADAPTIVE_INPUT_CONTROLLER_STATE$SEGMENT,"GUID_ADAPTIVE_INPUT_CONTROLLER_STATE");
    }
    public static MemorySegment GUID_DISK_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$80.GUID_DISK_SUBGROUP$SEGMENT,"GUID_DISK_SUBGROUP");
    }
    public static MemorySegment GUID_DISK_MAX_POWER$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$80.GUID_DISK_MAX_POWER$SEGMENT,"GUID_DISK_MAX_POWER");
    }
    public static MemorySegment GUID_DISK_POWERDOWN_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$80.GUID_DISK_POWERDOWN_TIMEOUT$SEGMENT,"GUID_DISK_POWERDOWN_TIMEOUT");
    }
    public static MemorySegment GUID_DISK_IDLE_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$80.GUID_DISK_IDLE_TIMEOUT$SEGMENT,"GUID_DISK_IDLE_TIMEOUT");
    }
    public static MemorySegment GUID_DISK_BURST_IGNORE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$80.GUID_DISK_BURST_IGNORE_THRESHOLD$SEGMENT,"GUID_DISK_BURST_IGNORE_THRESHOLD");
    }
    public static MemorySegment GUID_DISK_ADAPTIVE_POWERDOWN$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$80.GUID_DISK_ADAPTIVE_POWERDOWN$SEGMENT,"GUID_DISK_ADAPTIVE_POWERDOWN");
    }
    public static MemorySegment GUID_DISK_NVME_NOPPME$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$81.GUID_DISK_NVME_NOPPME$SEGMENT,"GUID_DISK_NVME_NOPPME");
    }
    public static MemorySegment GUID_SLEEP_SUBGROUP$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$81.GUID_SLEEP_SUBGROUP$SEGMENT,"GUID_SLEEP_SUBGROUP");
    }
    public static MemorySegment GUID_SLEEP_IDLE_THRESHOLD$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$81.GUID_SLEEP_IDLE_THRESHOLD$SEGMENT,"GUID_SLEEP_IDLE_THRESHOLD");
    }
    public static MemorySegment GUID_STANDBY_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$81.GUID_STANDBY_TIMEOUT$SEGMENT,"GUID_STANDBY_TIMEOUT");
    }
    public static MemorySegment GUID_UNATTEND_SLEEP_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$81.GUID_UNATTEND_SLEEP_TIMEOUT$SEGMENT,"GUID_UNATTEND_SLEEP_TIMEOUT");
    }
    public static MemorySegment GUID_HIBERNATE_TIMEOUT$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$81.GUID_HIBERNATE_TIMEOUT$SEGMENT,"GUID_HIBERNATE_TIMEOUT");
    }
    public static MemorySegment GUID_HIBERNATE_FASTS4_POLICY$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$82.GUID_HIBERNATE_FASTS4_POLICY$SEGMENT,"GUID_HIBERNATE_FASTS4_POLICY");
    }
    public static MemorySegment GUID_CRITICAL_POWER_TRANSITION$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$82.GUID_CRITICAL_POWER_TRANSITION$SEGMENT,"GUID_CRITICAL_POWER_TRANSITION");
    }
    public static MemorySegment GUID_SYSTEM_AWAYMODE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$82.GUID_SYSTEM_AWAYMODE$SEGMENT,"GUID_SYSTEM_AWAYMODE");
    }
    public static MemorySegment GUID_ALLOW_AWAYMODE$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$82.GUID_ALLOW_AWAYMODE$SEGMENT,"GUID_ALLOW_AWAYMODE");
    }
    public static MemorySegment GUID_USER_PRESENCE_PREDICTION$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$82.GUID_USER_PRESENCE_PREDICTION$SEGMENT,"GUID_USER_PRESENCE_PREDICTION");
    }
}


