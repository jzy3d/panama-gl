// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class PPM_IDLE_ACCOUNTING {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("StateCount"),
        Constants$root.C_LONG$LAYOUT.withName("TotalTransitions"),
        Constants$root.C_LONG$LAYOUT.withName("ResetCount"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("StartTime"),
        MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
            Constants$root.C_LONG$LAYOUT.withName("IdleTransitions"),
            Constants$root.C_LONG$LAYOUT.withName("FailedTransitions"),
            Constants$root.C_LONG$LAYOUT.withName("InvalidBucketIndex"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_LONG_LONG$LAYOUT.withName("TotalTime"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_LONG$LAYOUT).withName("IdleTimeBuckets")
        )).withName("State")
    );
    public static MemoryLayout $LAYOUT() {
        return PPM_IDLE_ACCOUNTING.$struct$LAYOUT;
    }
    static final VarHandle StateCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("StateCount"));
    public static VarHandle StateCount$VH() {
        return PPM_IDLE_ACCOUNTING.StateCount$VH;
    }
    public static int StateCount$get(MemorySegment seg) {
        return (int)PPM_IDLE_ACCOUNTING.StateCount$VH.get(seg);
    }
    public static void StateCount$set( MemorySegment seg, int x) {
        PPM_IDLE_ACCOUNTING.StateCount$VH.set(seg, x);
    }
    public static int StateCount$get(MemorySegment seg, long index) {
        return (int)PPM_IDLE_ACCOUNTING.StateCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StateCount$set(MemorySegment seg, long index, int x) {
        PPM_IDLE_ACCOUNTING.StateCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle TotalTransitions$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("TotalTransitions"));
    public static VarHandle TotalTransitions$VH() {
        return PPM_IDLE_ACCOUNTING.TotalTransitions$VH;
    }
    public static int TotalTransitions$get(MemorySegment seg) {
        return (int)PPM_IDLE_ACCOUNTING.TotalTransitions$VH.get(seg);
    }
    public static void TotalTransitions$set( MemorySegment seg, int x) {
        PPM_IDLE_ACCOUNTING.TotalTransitions$VH.set(seg, x);
    }
    public static int TotalTransitions$get(MemorySegment seg, long index) {
        return (int)PPM_IDLE_ACCOUNTING.TotalTransitions$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TotalTransitions$set(MemorySegment seg, long index, int x) {
        PPM_IDLE_ACCOUNTING.TotalTransitions$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ResetCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ResetCount"));
    public static VarHandle ResetCount$VH() {
        return PPM_IDLE_ACCOUNTING.ResetCount$VH;
    }
    public static int ResetCount$get(MemorySegment seg) {
        return (int)PPM_IDLE_ACCOUNTING.ResetCount$VH.get(seg);
    }
    public static void ResetCount$set( MemorySegment seg, int x) {
        PPM_IDLE_ACCOUNTING.ResetCount$VH.set(seg, x);
    }
    public static int ResetCount$get(MemorySegment seg, long index) {
        return (int)PPM_IDLE_ACCOUNTING.ResetCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ResetCount$set(MemorySegment seg, long index, int x) {
        PPM_IDLE_ACCOUNTING.ResetCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle StartTime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("StartTime"));
    public static VarHandle StartTime$VH() {
        return PPM_IDLE_ACCOUNTING.StartTime$VH;
    }
    public static long StartTime$get(MemorySegment seg) {
        return (long)PPM_IDLE_ACCOUNTING.StartTime$VH.get(seg);
    }
    public static void StartTime$set( MemorySegment seg, long x) {
        PPM_IDLE_ACCOUNTING.StartTime$VH.set(seg, x);
    }
    public static long StartTime$get(MemorySegment seg, long index) {
        return (long)PPM_IDLE_ACCOUNTING.StartTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void StartTime$set(MemorySegment seg, long index, long x) {
        PPM_IDLE_ACCOUNTING.StartTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment State$slice(MemorySegment seg) {
        return seg.asSlice(24, 48);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


