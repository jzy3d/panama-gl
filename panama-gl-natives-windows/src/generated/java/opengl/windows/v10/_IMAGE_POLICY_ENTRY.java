// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _IMAGE_POLICY_ENTRY {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Type"),
        Constants$root.C_LONG$LAYOUT.withName("PolicyId"),
        MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("None"),
            Constants$root.C_CHAR$LAYOUT.withName("BoolValue"),
            Constants$root.C_CHAR$LAYOUT.withName("Int8Value"),
            Constants$root.C_CHAR$LAYOUT.withName("UInt8Value"),
            Constants$root.C_SHORT$LAYOUT.withName("Int16Value"),
            Constants$root.C_SHORT$LAYOUT.withName("UInt16Value"),
            Constants$root.C_LONG$LAYOUT.withName("Int32Value"),
            Constants$root.C_LONG$LAYOUT.withName("UInt32Value"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("Int64Value"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("UInt64Value"),
            Constants$root.C_POINTER$LAYOUT.withName("AnsiStringValue"),
            Constants$root.C_POINTER$LAYOUT.withName("UnicodeStringValue")
        ).withName("u")
    ).withName("_IMAGE_POLICY_ENTRY");
    public static MemoryLayout $LAYOUT() {
        return _IMAGE_POLICY_ENTRY.$struct$LAYOUT;
    }
    static final VarHandle Type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Type"));
    public static VarHandle Type$VH() {
        return _IMAGE_POLICY_ENTRY.Type$VH;
    }
    public static int Type$get(MemorySegment seg) {
        return (int)_IMAGE_POLICY_ENTRY.Type$VH.get(seg);
    }
    public static void Type$set( MemorySegment seg, int x) {
        _IMAGE_POLICY_ENTRY.Type$VH.set(seg, x);
    }
    public static int Type$get(MemorySegment seg, long index) {
        return (int)_IMAGE_POLICY_ENTRY.Type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Type$set(MemorySegment seg, long index, int x) {
        _IMAGE_POLICY_ENTRY.Type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle PolicyId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PolicyId"));
    public static VarHandle PolicyId$VH() {
        return _IMAGE_POLICY_ENTRY.PolicyId$VH;
    }
    public static int PolicyId$get(MemorySegment seg) {
        return (int)_IMAGE_POLICY_ENTRY.PolicyId$VH.get(seg);
    }
    public static void PolicyId$set( MemorySegment seg, int x) {
        _IMAGE_POLICY_ENTRY.PolicyId$VH.set(seg, x);
    }
    public static int PolicyId$get(MemorySegment seg, long index) {
        return (int)_IMAGE_POLICY_ENTRY.PolicyId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PolicyId$set(MemorySegment seg, long index, int x) {
        _IMAGE_POLICY_ENTRY.PolicyId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class u {

        static final  GroupLayout u$union$LAYOUT = MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("None"),
            Constants$root.C_CHAR$LAYOUT.withName("BoolValue"),
            Constants$root.C_CHAR$LAYOUT.withName("Int8Value"),
            Constants$root.C_CHAR$LAYOUT.withName("UInt8Value"),
            Constants$root.C_SHORT$LAYOUT.withName("Int16Value"),
            Constants$root.C_SHORT$LAYOUT.withName("UInt16Value"),
            Constants$root.C_LONG$LAYOUT.withName("Int32Value"),
            Constants$root.C_LONG$LAYOUT.withName("UInt32Value"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("Int64Value"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("UInt64Value"),
            Constants$root.C_POINTER$LAYOUT.withName("AnsiStringValue"),
            Constants$root.C_POINTER$LAYOUT.withName("UnicodeStringValue")
        );
        public static MemoryLayout $LAYOUT() {
            return u.u$union$LAYOUT;
        }
        static final VarHandle None$VH = u$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("None"));
        public static VarHandle None$VH() {
            return u.None$VH;
        }
        public static MemoryAddress None$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)u.None$VH.get(seg);
        }
        public static void None$set( MemorySegment seg, MemoryAddress x) {
            u.None$VH.set(seg, x);
        }
        public static MemoryAddress None$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)u.None$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void None$set(MemorySegment seg, long index, MemoryAddress x) {
            u.None$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle BoolValue$VH = u$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BoolValue"));
        public static VarHandle BoolValue$VH() {
            return u.BoolValue$VH;
        }
        public static byte BoolValue$get(MemorySegment seg) {
            return (byte)u.BoolValue$VH.get(seg);
        }
        public static void BoolValue$set( MemorySegment seg, byte x) {
            u.BoolValue$VH.set(seg, x);
        }
        public static byte BoolValue$get(MemorySegment seg, long index) {
            return (byte)u.BoolValue$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void BoolValue$set(MemorySegment seg, long index, byte x) {
            u.BoolValue$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle Int8Value$VH = u$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Int8Value"));
        public static VarHandle Int8Value$VH() {
            return u.Int8Value$VH;
        }
        public static byte Int8Value$get(MemorySegment seg) {
            return (byte)u.Int8Value$VH.get(seg);
        }
        public static void Int8Value$set( MemorySegment seg, byte x) {
            u.Int8Value$VH.set(seg, x);
        }
        public static byte Int8Value$get(MemorySegment seg, long index) {
            return (byte)u.Int8Value$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Int8Value$set(MemorySegment seg, long index, byte x) {
            u.Int8Value$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle UInt8Value$VH = u$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("UInt8Value"));
        public static VarHandle UInt8Value$VH() {
            return u.UInt8Value$VH;
        }
        public static byte UInt8Value$get(MemorySegment seg) {
            return (byte)u.UInt8Value$VH.get(seg);
        }
        public static void UInt8Value$set( MemorySegment seg, byte x) {
            u.UInt8Value$VH.set(seg, x);
        }
        public static byte UInt8Value$get(MemorySegment seg, long index) {
            return (byte)u.UInt8Value$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void UInt8Value$set(MemorySegment seg, long index, byte x) {
            u.UInt8Value$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle Int16Value$VH = u$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Int16Value"));
        public static VarHandle Int16Value$VH() {
            return u.Int16Value$VH;
        }
        public static short Int16Value$get(MemorySegment seg) {
            return (short)u.Int16Value$VH.get(seg);
        }
        public static void Int16Value$set( MemorySegment seg, short x) {
            u.Int16Value$VH.set(seg, x);
        }
        public static short Int16Value$get(MemorySegment seg, long index) {
            return (short)u.Int16Value$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Int16Value$set(MemorySegment seg, long index, short x) {
            u.Int16Value$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle UInt16Value$VH = u$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("UInt16Value"));
        public static VarHandle UInt16Value$VH() {
            return u.UInt16Value$VH;
        }
        public static short UInt16Value$get(MemorySegment seg) {
            return (short)u.UInt16Value$VH.get(seg);
        }
        public static void UInt16Value$set( MemorySegment seg, short x) {
            u.UInt16Value$VH.set(seg, x);
        }
        public static short UInt16Value$get(MemorySegment seg, long index) {
            return (short)u.UInt16Value$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void UInt16Value$set(MemorySegment seg, long index, short x) {
            u.UInt16Value$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle Int32Value$VH = u$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Int32Value"));
        public static VarHandle Int32Value$VH() {
            return u.Int32Value$VH;
        }
        public static int Int32Value$get(MemorySegment seg) {
            return (int)u.Int32Value$VH.get(seg);
        }
        public static void Int32Value$set( MemorySegment seg, int x) {
            u.Int32Value$VH.set(seg, x);
        }
        public static int Int32Value$get(MemorySegment seg, long index) {
            return (int)u.Int32Value$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Int32Value$set(MemorySegment seg, long index, int x) {
            u.Int32Value$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle UInt32Value$VH = u$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("UInt32Value"));
        public static VarHandle UInt32Value$VH() {
            return u.UInt32Value$VH;
        }
        public static int UInt32Value$get(MemorySegment seg) {
            return (int)u.UInt32Value$VH.get(seg);
        }
        public static void UInt32Value$set( MemorySegment seg, int x) {
            u.UInt32Value$VH.set(seg, x);
        }
        public static int UInt32Value$get(MemorySegment seg, long index) {
            return (int)u.UInt32Value$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void UInt32Value$set(MemorySegment seg, long index, int x) {
            u.UInt32Value$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle Int64Value$VH = u$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Int64Value"));
        public static VarHandle Int64Value$VH() {
            return u.Int64Value$VH;
        }
        public static long Int64Value$get(MemorySegment seg) {
            return (long)u.Int64Value$VH.get(seg);
        }
        public static void Int64Value$set( MemorySegment seg, long x) {
            u.Int64Value$VH.set(seg, x);
        }
        public static long Int64Value$get(MemorySegment seg, long index) {
            return (long)u.Int64Value$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void Int64Value$set(MemorySegment seg, long index, long x) {
            u.Int64Value$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle UInt64Value$VH = u$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("UInt64Value"));
        public static VarHandle UInt64Value$VH() {
            return u.UInt64Value$VH;
        }
        public static long UInt64Value$get(MemorySegment seg) {
            return (long)u.UInt64Value$VH.get(seg);
        }
        public static void UInt64Value$set( MemorySegment seg, long x) {
            u.UInt64Value$VH.set(seg, x);
        }
        public static long UInt64Value$get(MemorySegment seg, long index) {
            return (long)u.UInt64Value$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void UInt64Value$set(MemorySegment seg, long index, long x) {
            u.UInt64Value$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle AnsiStringValue$VH = u$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("AnsiStringValue"));
        public static VarHandle AnsiStringValue$VH() {
            return u.AnsiStringValue$VH;
        }
        public static MemoryAddress AnsiStringValue$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)u.AnsiStringValue$VH.get(seg);
        }
        public static void AnsiStringValue$set( MemorySegment seg, MemoryAddress x) {
            u.AnsiStringValue$VH.set(seg, x);
        }
        public static MemoryAddress AnsiStringValue$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)u.AnsiStringValue$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void AnsiStringValue$set(MemorySegment seg, long index, MemoryAddress x) {
            u.AnsiStringValue$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle UnicodeStringValue$VH = u$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("UnicodeStringValue"));
        public static VarHandle UnicodeStringValue$VH() {
            return u.UnicodeStringValue$VH;
        }
        public static MemoryAddress UnicodeStringValue$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)u.UnicodeStringValue$VH.get(seg);
        }
        public static void UnicodeStringValue$set( MemorySegment seg, MemoryAddress x) {
            u.UnicodeStringValue$VH.set(seg, x);
        }
        public static MemoryAddress UnicodeStringValue$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)u.UnicodeStringValue$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void UnicodeStringValue$set(MemorySegment seg, long index, MemoryAddress x) {
            u.UnicodeStringValue$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment u$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


