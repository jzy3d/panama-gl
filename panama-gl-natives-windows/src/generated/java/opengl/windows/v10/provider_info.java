// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class provider_info {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("pi_R0_1val"),
        Constants$root.C_POINTER$LAYOUT.withName("pi_R0_allvals"),
        Constants$root.C_POINTER$LAYOUT.withName("pi_R3_1val"),
        Constants$root.C_POINTER$LAYOUT.withName("pi_R3_allvals"),
        Constants$root.C_LONG$LAYOUT.withName("pi_flags"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("pi_key_context")
    ).withName("provider_info");
    public static MemoryLayout $LAYOUT() {
        return provider_info.$struct$LAYOUT;
    }
    static final VarHandle pi_R0_1val$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pi_R0_1val"));
    public static VarHandle pi_R0_1val$VH() {
        return provider_info.pi_R0_1val$VH;
    }
    public static MemoryAddress pi_R0_1val$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)provider_info.pi_R0_1val$VH.get(seg);
    }
    public static void pi_R0_1val$set( MemorySegment seg, MemoryAddress x) {
        provider_info.pi_R0_1val$VH.set(seg, x);
    }
    public static MemoryAddress pi_R0_1val$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)provider_info.pi_R0_1val$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pi_R0_1val$set(MemorySegment seg, long index, MemoryAddress x) {
        provider_info.pi_R0_1val$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PQUERYHANDLER pi_R0_1val (MemorySegment segment, ResourceScope scope) {
        return PQUERYHANDLER.ofAddress(pi_R0_1val$get(segment), scope);
    }
    static final VarHandle pi_R0_allvals$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pi_R0_allvals"));
    public static VarHandle pi_R0_allvals$VH() {
        return provider_info.pi_R0_allvals$VH;
    }
    public static MemoryAddress pi_R0_allvals$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)provider_info.pi_R0_allvals$VH.get(seg);
    }
    public static void pi_R0_allvals$set( MemorySegment seg, MemoryAddress x) {
        provider_info.pi_R0_allvals$VH.set(seg, x);
    }
    public static MemoryAddress pi_R0_allvals$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)provider_info.pi_R0_allvals$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pi_R0_allvals$set(MemorySegment seg, long index, MemoryAddress x) {
        provider_info.pi_R0_allvals$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PQUERYHANDLER pi_R0_allvals (MemorySegment segment, ResourceScope scope) {
        return PQUERYHANDLER.ofAddress(pi_R0_allvals$get(segment), scope);
    }
    static final VarHandle pi_R3_1val$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pi_R3_1val"));
    public static VarHandle pi_R3_1val$VH() {
        return provider_info.pi_R3_1val$VH;
    }
    public static MemoryAddress pi_R3_1val$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)provider_info.pi_R3_1val$VH.get(seg);
    }
    public static void pi_R3_1val$set( MemorySegment seg, MemoryAddress x) {
        provider_info.pi_R3_1val$VH.set(seg, x);
    }
    public static MemoryAddress pi_R3_1val$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)provider_info.pi_R3_1val$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pi_R3_1val$set(MemorySegment seg, long index, MemoryAddress x) {
        provider_info.pi_R3_1val$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PQUERYHANDLER pi_R3_1val (MemorySegment segment, ResourceScope scope) {
        return PQUERYHANDLER.ofAddress(pi_R3_1val$get(segment), scope);
    }
    static final VarHandle pi_R3_allvals$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pi_R3_allvals"));
    public static VarHandle pi_R3_allvals$VH() {
        return provider_info.pi_R3_allvals$VH;
    }
    public static MemoryAddress pi_R3_allvals$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)provider_info.pi_R3_allvals$VH.get(seg);
    }
    public static void pi_R3_allvals$set( MemorySegment seg, MemoryAddress x) {
        provider_info.pi_R3_allvals$VH.set(seg, x);
    }
    public static MemoryAddress pi_R3_allvals$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)provider_info.pi_R3_allvals$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pi_R3_allvals$set(MemorySegment seg, long index, MemoryAddress x) {
        provider_info.pi_R3_allvals$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static PQUERYHANDLER pi_R3_allvals (MemorySegment segment, ResourceScope scope) {
        return PQUERYHANDLER.ofAddress(pi_R3_allvals$get(segment), scope);
    }
    static final VarHandle pi_flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pi_flags"));
    public static VarHandle pi_flags$VH() {
        return provider_info.pi_flags$VH;
    }
    public static int pi_flags$get(MemorySegment seg) {
        return (int)provider_info.pi_flags$VH.get(seg);
    }
    public static void pi_flags$set( MemorySegment seg, int x) {
        provider_info.pi_flags$VH.set(seg, x);
    }
    public static int pi_flags$get(MemorySegment seg, long index) {
        return (int)provider_info.pi_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pi_flags$set(MemorySegment seg, long index, int x) {
        provider_info.pi_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle pi_key_context$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pi_key_context"));
    public static VarHandle pi_key_context$VH() {
        return provider_info.pi_key_context$VH;
    }
    public static MemoryAddress pi_key_context$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)provider_info.pi_key_context$VH.get(seg);
    }
    public static void pi_key_context$set( MemorySegment seg, MemoryAddress x) {
        provider_info.pi_key_context$VH.set(seg, x);
    }
    public static MemoryAddress pi_key_context$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)provider_info.pi_key_context$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pi_key_context$set(MemorySegment seg, long index, MemoryAddress x) {
        provider_info.pi_key_context$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


