// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("BaseAddress"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("Size"),
        Constants$root.C_LONG$LAYOUT.withName("Flags"),
        MemoryLayout.paddingLayout(32)
    ).withName("_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE");
    public static MemoryLayout $LAYOUT() {
        return _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE.$struct$LAYOUT;
    }
    static final VarHandle BaseAddress$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("BaseAddress"));
    public static VarHandle BaseAddress$VH() {
        return _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE.BaseAddress$VH;
    }
    public static long BaseAddress$get(MemorySegment seg) {
        return (long)_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE.BaseAddress$VH.get(seg);
    }
    public static void BaseAddress$set( MemorySegment seg, long x) {
        _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE.BaseAddress$VH.set(seg, x);
    }
    public static long BaseAddress$get(MemorySegment seg, long index) {
        return (long)_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE.BaseAddress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void BaseAddress$set(MemorySegment seg, long index, long x) {
        _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE.BaseAddress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE.Size$VH;
    }
    public static long Size$get(MemorySegment seg) {
        return (long)_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE.Size$VH.get(seg);
    }
    public static void Size$set( MemorySegment seg, long x) {
        _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE.Size$VH.set(seg, x);
    }
    public static long Size$get(MemorySegment seg, long index) {
        return (long)_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, long x) {
        _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Flags"));
    public static VarHandle Flags$VH() {
        return _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE.Flags$VH;
    }
    public static int Flags$get(MemorySegment seg) {
        return (int)_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE.Flags$VH.get(seg);
    }
    public static void Flags$set( MemorySegment seg, int x) {
        _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE.Flags$VH.set(seg, x);
    }
    public static int Flags$get(MemorySegment seg, long index) {
        return (int)_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE.Flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Flags$set(MemorySegment seg, long index, int x) {
        _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE.Flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


