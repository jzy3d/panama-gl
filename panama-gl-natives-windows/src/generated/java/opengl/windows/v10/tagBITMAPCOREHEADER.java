// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class tagBITMAPCOREHEADER {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("bcSize"),
        Constants$root.C_SHORT$LAYOUT.withName("bcWidth"),
        Constants$root.C_SHORT$LAYOUT.withName("bcHeight"),
        Constants$root.C_SHORT$LAYOUT.withName("bcPlanes"),
        Constants$root.C_SHORT$LAYOUT.withName("bcBitCount")
    ).withName("tagBITMAPCOREHEADER");
    public static MemoryLayout $LAYOUT() {
        return tagBITMAPCOREHEADER.$struct$LAYOUT;
    }
    static final VarHandle bcSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bcSize"));
    public static VarHandle bcSize$VH() {
        return tagBITMAPCOREHEADER.bcSize$VH;
    }
    public static int bcSize$get(MemorySegment seg) {
        return (int)tagBITMAPCOREHEADER.bcSize$VH.get(seg);
    }
    public static void bcSize$set( MemorySegment seg, int x) {
        tagBITMAPCOREHEADER.bcSize$VH.set(seg, x);
    }
    public static int bcSize$get(MemorySegment seg, long index) {
        return (int)tagBITMAPCOREHEADER.bcSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bcSize$set(MemorySegment seg, long index, int x) {
        tagBITMAPCOREHEADER.bcSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bcWidth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bcWidth"));
    public static VarHandle bcWidth$VH() {
        return tagBITMAPCOREHEADER.bcWidth$VH;
    }
    public static short bcWidth$get(MemorySegment seg) {
        return (short)tagBITMAPCOREHEADER.bcWidth$VH.get(seg);
    }
    public static void bcWidth$set( MemorySegment seg, short x) {
        tagBITMAPCOREHEADER.bcWidth$VH.set(seg, x);
    }
    public static short bcWidth$get(MemorySegment seg, long index) {
        return (short)tagBITMAPCOREHEADER.bcWidth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bcWidth$set(MemorySegment seg, long index, short x) {
        tagBITMAPCOREHEADER.bcWidth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bcHeight$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bcHeight"));
    public static VarHandle bcHeight$VH() {
        return tagBITMAPCOREHEADER.bcHeight$VH;
    }
    public static short bcHeight$get(MemorySegment seg) {
        return (short)tagBITMAPCOREHEADER.bcHeight$VH.get(seg);
    }
    public static void bcHeight$set( MemorySegment seg, short x) {
        tagBITMAPCOREHEADER.bcHeight$VH.set(seg, x);
    }
    public static short bcHeight$get(MemorySegment seg, long index) {
        return (short)tagBITMAPCOREHEADER.bcHeight$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bcHeight$set(MemorySegment seg, long index, short x) {
        tagBITMAPCOREHEADER.bcHeight$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bcPlanes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bcPlanes"));
    public static VarHandle bcPlanes$VH() {
        return tagBITMAPCOREHEADER.bcPlanes$VH;
    }
    public static short bcPlanes$get(MemorySegment seg) {
        return (short)tagBITMAPCOREHEADER.bcPlanes$VH.get(seg);
    }
    public static void bcPlanes$set( MemorySegment seg, short x) {
        tagBITMAPCOREHEADER.bcPlanes$VH.set(seg, x);
    }
    public static short bcPlanes$get(MemorySegment seg, long index) {
        return (short)tagBITMAPCOREHEADER.bcPlanes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bcPlanes$set(MemorySegment seg, long index, short x) {
        tagBITMAPCOREHEADER.bcPlanes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bcBitCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bcBitCount"));
    public static VarHandle bcBitCount$VH() {
        return tagBITMAPCOREHEADER.bcBitCount$VH;
    }
    public static short bcBitCount$get(MemorySegment seg) {
        return (short)tagBITMAPCOREHEADER.bcBitCount$VH.get(seg);
    }
    public static void bcBitCount$set( MemorySegment seg, short x) {
        tagBITMAPCOREHEADER.bcBitCount$VH.set(seg, x);
    }
    public static short bcBitCount$get(MemorySegment seg, long index) {
        return (short)tagBITMAPCOREHEADER.bcBitCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bcBitCount$set(MemorySegment seg, long index, short x) {
        tagBITMAPCOREHEADER.bcBitCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


