// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface GET_RUNTIME_FUNCTION_CALLBACK {

    jdk.incubator.foreign.Addressable apply(long x0, jdk.incubator.foreign.MemoryAddress x1);
    static NativeSymbol allocate(GET_RUNTIME_FUNCTION_CALLBACK fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(GET_RUNTIME_FUNCTION_CALLBACK.class, fi, constants$62.GET_RUNTIME_FUNCTION_CALLBACK$FUNC, "(JLjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/Addressable;", scope);
    }
    static GET_RUNTIME_FUNCTION_CALLBACK ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("GET_RUNTIME_FUNCTION_CALLBACK::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (long x0, jdk.incubator.foreign.MemoryAddress x1) -> {
            try {
                return (jdk.incubator.foreign.Addressable)(jdk.incubator.foreign.MemoryAddress)constants$62.GET_RUNTIME_FUNCTION_CALLBACK$MH.invokeExact(symbol, x0, (jdk.incubator.foreign.Addressable)x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


