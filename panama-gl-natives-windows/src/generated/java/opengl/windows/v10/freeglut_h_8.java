// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
 class freeglut_h_8 extends freeglut_h_7 {

    public static int GL_COLOR_MATERIAL() {
        return (int)2903L;
    }
    public static int GL_FOG() {
        return (int)2912L;
    }
    public static int GL_FOG_INDEX() {
        return (int)2913L;
    }
    public static int GL_FOG_DENSITY() {
        return (int)2914L;
    }
    public static int GL_FOG_START() {
        return (int)2915L;
    }
    public static int GL_FOG_END() {
        return (int)2916L;
    }
    public static int GL_FOG_MODE() {
        return (int)2917L;
    }
    public static int GL_FOG_COLOR() {
        return (int)2918L;
    }
    public static int GL_DEPTH_RANGE() {
        return (int)2928L;
    }
    public static int GL_DEPTH_TEST() {
        return (int)2929L;
    }
    public static int GL_DEPTH_WRITEMASK() {
        return (int)2930L;
    }
    public static int GL_DEPTH_CLEAR_VALUE() {
        return (int)2931L;
    }
    public static int GL_DEPTH_FUNC() {
        return (int)2932L;
    }
    public static int GL_ACCUM_CLEAR_VALUE() {
        return (int)2944L;
    }
    public static int GL_STENCIL_TEST() {
        return (int)2960L;
    }
    public static int GL_STENCIL_CLEAR_VALUE() {
        return (int)2961L;
    }
    public static int GL_STENCIL_FUNC() {
        return (int)2962L;
    }
    public static int GL_STENCIL_VALUE_MASK() {
        return (int)2963L;
    }
    public static int GL_STENCIL_FAIL() {
        return (int)2964L;
    }
    public static int GL_STENCIL_PASS_DEPTH_FAIL() {
        return (int)2965L;
    }
    public static int GL_STENCIL_PASS_DEPTH_PASS() {
        return (int)2966L;
    }
    public static int GL_STENCIL_REF() {
        return (int)2967L;
    }
    public static int GL_STENCIL_WRITEMASK() {
        return (int)2968L;
    }
    public static int GL_MATRIX_MODE() {
        return (int)2976L;
    }
    public static int GL_NORMALIZE() {
        return (int)2977L;
    }
    public static int GL_VIEWPORT() {
        return (int)2978L;
    }
    public static int GL_MODELVIEW_STACK_DEPTH() {
        return (int)2979L;
    }
    public static int GL_PROJECTION_STACK_DEPTH() {
        return (int)2980L;
    }
    public static int GL_TEXTURE_STACK_DEPTH() {
        return (int)2981L;
    }
    public static int GL_MODELVIEW_MATRIX() {
        return (int)2982L;
    }
    public static int GL_PROJECTION_MATRIX() {
        return (int)2983L;
    }
    public static int GL_TEXTURE_MATRIX() {
        return (int)2984L;
    }
    public static int GL_ATTRIB_STACK_DEPTH() {
        return (int)2992L;
    }
    public static int GL_CLIENT_ATTRIB_STACK_DEPTH() {
        return (int)2993L;
    }
    public static int GL_ALPHA_TEST() {
        return (int)3008L;
    }
    public static int GL_ALPHA_TEST_FUNC() {
        return (int)3009L;
    }
    public static int GL_ALPHA_TEST_REF() {
        return (int)3010L;
    }
    public static int GL_DITHER() {
        return (int)3024L;
    }
    public static int GL_BLEND_DST() {
        return (int)3040L;
    }
    public static int GL_BLEND_SRC() {
        return (int)3041L;
    }
    public static int GL_BLEND() {
        return (int)3042L;
    }
    public static int GL_LOGIC_OP_MODE() {
        return (int)3056L;
    }
    public static int GL_INDEX_LOGIC_OP() {
        return (int)3057L;
    }
    public static int GL_COLOR_LOGIC_OP() {
        return (int)3058L;
    }
    public static int GL_AUX_BUFFERS() {
        return (int)3072L;
    }
    public static int GL_DRAW_BUFFER() {
        return (int)3073L;
    }
    public static int GL_READ_BUFFER() {
        return (int)3074L;
    }
    public static int GL_SCISSOR_BOX() {
        return (int)3088L;
    }
    public static int GL_SCISSOR_TEST() {
        return (int)3089L;
    }
    public static int GL_INDEX_CLEAR_VALUE() {
        return (int)3104L;
    }
    public static int GL_INDEX_WRITEMASK() {
        return (int)3105L;
    }
    public static int GL_COLOR_CLEAR_VALUE() {
        return (int)3106L;
    }
    public static int GL_COLOR_WRITEMASK() {
        return (int)3107L;
    }
    public static int GL_INDEX_MODE() {
        return (int)3120L;
    }
    public static int GL_RGBA_MODE() {
        return (int)3121L;
    }
    public static int GL_DOUBLEBUFFER() {
        return (int)3122L;
    }
    public static int GL_STEREO() {
        return (int)3123L;
    }
    public static int GL_RENDER_MODE() {
        return (int)3136L;
    }
    public static int GL_PERSPECTIVE_CORRECTION_HINT() {
        return (int)3152L;
    }
    public static int GL_POINT_SMOOTH_HINT() {
        return (int)3153L;
    }
    public static int GL_LINE_SMOOTH_HINT() {
        return (int)3154L;
    }
    public static int GL_POLYGON_SMOOTH_HINT() {
        return (int)3155L;
    }
    public static int GL_FOG_HINT() {
        return (int)3156L;
    }
    public static int GL_TEXTURE_GEN_S() {
        return (int)3168L;
    }
    public static int GL_TEXTURE_GEN_T() {
        return (int)3169L;
    }
    public static int GL_TEXTURE_GEN_R() {
        return (int)3170L;
    }
    public static int GL_TEXTURE_GEN_Q() {
        return (int)3171L;
    }
    public static int GL_PIXEL_MAP_I_TO_I() {
        return (int)3184L;
    }
    public static int GL_PIXEL_MAP_S_TO_S() {
        return (int)3185L;
    }
    public static int GL_PIXEL_MAP_I_TO_R() {
        return (int)3186L;
    }
    public static int GL_PIXEL_MAP_I_TO_G() {
        return (int)3187L;
    }
    public static int GL_PIXEL_MAP_I_TO_B() {
        return (int)3188L;
    }
    public static int GL_PIXEL_MAP_I_TO_A() {
        return (int)3189L;
    }
    public static int GL_PIXEL_MAP_R_TO_R() {
        return (int)3190L;
    }
    public static int GL_PIXEL_MAP_G_TO_G() {
        return (int)3191L;
    }
    public static int GL_PIXEL_MAP_B_TO_B() {
        return (int)3192L;
    }
    public static int GL_PIXEL_MAP_A_TO_A() {
        return (int)3193L;
    }
    public static int GL_PIXEL_MAP_I_TO_I_SIZE() {
        return (int)3248L;
    }
    public static int GL_PIXEL_MAP_S_TO_S_SIZE() {
        return (int)3249L;
    }
    public static int GL_PIXEL_MAP_I_TO_R_SIZE() {
        return (int)3250L;
    }
    public static int GL_PIXEL_MAP_I_TO_G_SIZE() {
        return (int)3251L;
    }
    public static int GL_PIXEL_MAP_I_TO_B_SIZE() {
        return (int)3252L;
    }
    public static int GL_PIXEL_MAP_I_TO_A_SIZE() {
        return (int)3253L;
    }
    public static int GL_PIXEL_MAP_R_TO_R_SIZE() {
        return (int)3254L;
    }
    public static int GL_PIXEL_MAP_G_TO_G_SIZE() {
        return (int)3255L;
    }
    public static int GL_PIXEL_MAP_B_TO_B_SIZE() {
        return (int)3256L;
    }
    public static int GL_PIXEL_MAP_A_TO_A_SIZE() {
        return (int)3257L;
    }
    public static int GL_UNPACK_SWAP_BYTES() {
        return (int)3312L;
    }
    public static int GL_UNPACK_LSB_FIRST() {
        return (int)3313L;
    }
    public static int GL_UNPACK_ROW_LENGTH() {
        return (int)3314L;
    }
    public static int GL_UNPACK_SKIP_ROWS() {
        return (int)3315L;
    }
    public static int GL_UNPACK_SKIP_PIXELS() {
        return (int)3316L;
    }
    public static int GL_UNPACK_ALIGNMENT() {
        return (int)3317L;
    }
    public static int GL_PACK_SWAP_BYTES() {
        return (int)3328L;
    }
    public static int GL_PACK_LSB_FIRST() {
        return (int)3329L;
    }
    public static int GL_PACK_ROW_LENGTH() {
        return (int)3330L;
    }
    public static int GL_PACK_SKIP_ROWS() {
        return (int)3331L;
    }
    public static int GL_PACK_SKIP_PIXELS() {
        return (int)3332L;
    }
    public static int GL_PACK_ALIGNMENT() {
        return (int)3333L;
    }
    public static int GL_MAP_COLOR() {
        return (int)3344L;
    }
    public static int GL_MAP_STENCIL() {
        return (int)3345L;
    }
    public static int GL_INDEX_SHIFT() {
        return (int)3346L;
    }
    public static int GL_INDEX_OFFSET() {
        return (int)3347L;
    }
    public static int GL_RED_SCALE() {
        return (int)3348L;
    }
    public static int GL_RED_BIAS() {
        return (int)3349L;
    }
    public static int GL_ZOOM_X() {
        return (int)3350L;
    }
    public static int GL_ZOOM_Y() {
        return (int)3351L;
    }
    public static int GL_GREEN_SCALE() {
        return (int)3352L;
    }
    public static int GL_GREEN_BIAS() {
        return (int)3353L;
    }
    public static int GL_BLUE_SCALE() {
        return (int)3354L;
    }
    public static int GL_BLUE_BIAS() {
        return (int)3355L;
    }
    public static int GL_ALPHA_SCALE() {
        return (int)3356L;
    }
    public static int GL_ALPHA_BIAS() {
        return (int)3357L;
    }
    public static int GL_DEPTH_SCALE() {
        return (int)3358L;
    }
    public static int GL_DEPTH_BIAS() {
        return (int)3359L;
    }
    public static int GL_MAX_EVAL_ORDER() {
        return (int)3376L;
    }
    public static int GL_MAX_LIGHTS() {
        return (int)3377L;
    }
    public static int GL_MAX_CLIP_PLANES() {
        return (int)3378L;
    }
    public static int GL_MAX_TEXTURE_SIZE() {
        return (int)3379L;
    }
    public static int GL_MAX_PIXEL_MAP_TABLE() {
        return (int)3380L;
    }
    public static int GL_MAX_ATTRIB_STACK_DEPTH() {
        return (int)3381L;
    }
    public static int GL_MAX_MODELVIEW_STACK_DEPTH() {
        return (int)3382L;
    }
    public static int GL_MAX_NAME_STACK_DEPTH() {
        return (int)3383L;
    }
    public static int GL_MAX_PROJECTION_STACK_DEPTH() {
        return (int)3384L;
    }
    public static int GL_MAX_TEXTURE_STACK_DEPTH() {
        return (int)3385L;
    }
    public static int GL_MAX_VIEWPORT_DIMS() {
        return (int)3386L;
    }
    public static int GL_MAX_CLIENT_ATTRIB_STACK_DEPTH() {
        return (int)3387L;
    }
    public static int GL_SUBPIXEL_BITS() {
        return (int)3408L;
    }
    public static int GL_INDEX_BITS() {
        return (int)3409L;
    }
    public static int GL_RED_BITS() {
        return (int)3410L;
    }
    public static int GL_GREEN_BITS() {
        return (int)3411L;
    }
    public static int GL_BLUE_BITS() {
        return (int)3412L;
    }
    public static int GL_ALPHA_BITS() {
        return (int)3413L;
    }
    public static int GL_DEPTH_BITS() {
        return (int)3414L;
    }
    public static int GL_STENCIL_BITS() {
        return (int)3415L;
    }
    public static int GL_ACCUM_RED_BITS() {
        return (int)3416L;
    }
    public static int GL_ACCUM_GREEN_BITS() {
        return (int)3417L;
    }
    public static int GL_ACCUM_BLUE_BITS() {
        return (int)3418L;
    }
    public static int GL_ACCUM_ALPHA_BITS() {
        return (int)3419L;
    }
    public static int GL_NAME_STACK_DEPTH() {
        return (int)3440L;
    }
    public static int GL_AUTO_NORMAL() {
        return (int)3456L;
    }
    public static int GL_MAP1_COLOR_4() {
        return (int)3472L;
    }
    public static int GL_MAP1_INDEX() {
        return (int)3473L;
    }
    public static int GL_MAP1_NORMAL() {
        return (int)3474L;
    }
    public static int GL_MAP1_TEXTURE_COORD_1() {
        return (int)3475L;
    }
    public static int GL_MAP1_TEXTURE_COORD_2() {
        return (int)3476L;
    }
    public static int GL_MAP1_TEXTURE_COORD_3() {
        return (int)3477L;
    }
    public static int GL_MAP1_TEXTURE_COORD_4() {
        return (int)3478L;
    }
    public static int GL_MAP1_VERTEX_3() {
        return (int)3479L;
    }
    public static int GL_MAP1_VERTEX_4() {
        return (int)3480L;
    }
    public static int GL_MAP2_COLOR_4() {
        return (int)3504L;
    }
    public static int GL_MAP2_INDEX() {
        return (int)3505L;
    }
    public static int GL_MAP2_NORMAL() {
        return (int)3506L;
    }
    public static int GL_MAP2_TEXTURE_COORD_1() {
        return (int)3507L;
    }
    public static int GL_MAP2_TEXTURE_COORD_2() {
        return (int)3508L;
    }
    public static int GL_MAP2_TEXTURE_COORD_3() {
        return (int)3509L;
    }
    public static int GL_MAP2_TEXTURE_COORD_4() {
        return (int)3510L;
    }
    public static int GL_MAP2_VERTEX_3() {
        return (int)3511L;
    }
    public static int GL_MAP2_VERTEX_4() {
        return (int)3512L;
    }
    public static int GL_MAP1_GRID_DOMAIN() {
        return (int)3536L;
    }
    public static int GL_MAP1_GRID_SEGMENTS() {
        return (int)3537L;
    }
    public static int GL_MAP2_GRID_DOMAIN() {
        return (int)3538L;
    }
    public static int GL_MAP2_GRID_SEGMENTS() {
        return (int)3539L;
    }
    public static int GL_TEXTURE_1D() {
        return (int)3552L;
    }
    public static int GL_TEXTURE_2D() {
        return (int)3553L;
    }
    public static int GL_FEEDBACK_BUFFER_POINTER() {
        return (int)3568L;
    }
    public static int GL_FEEDBACK_BUFFER_SIZE() {
        return (int)3569L;
    }
    public static int GL_FEEDBACK_BUFFER_TYPE() {
        return (int)3570L;
    }
    public static int GL_SELECTION_BUFFER_POINTER() {
        return (int)3571L;
    }
    public static int GL_SELECTION_BUFFER_SIZE() {
        return (int)3572L;
    }
    public static int GL_TEXTURE_WIDTH() {
        return (int)4096L;
    }
    public static int GL_TEXTURE_HEIGHT() {
        return (int)4097L;
    }
    public static int GL_TEXTURE_INTERNAL_FORMAT() {
        return (int)4099L;
    }
    public static int GL_TEXTURE_BORDER_COLOR() {
        return (int)4100L;
    }
    public static int GL_TEXTURE_BORDER() {
        return (int)4101L;
    }
    public static int GL_DONT_CARE() {
        return (int)4352L;
    }
    public static int GL_FASTEST() {
        return (int)4353L;
    }
    public static int GL_NICEST() {
        return (int)4354L;
    }
    public static int GL_LIGHT0() {
        return (int)16384L;
    }
    public static int GL_LIGHT1() {
        return (int)16385L;
    }
    public static int GL_LIGHT2() {
        return (int)16386L;
    }
    public static int GL_LIGHT3() {
        return (int)16387L;
    }
    public static int GL_LIGHT4() {
        return (int)16388L;
    }
    public static int GL_LIGHT5() {
        return (int)16389L;
    }
    public static int GL_LIGHT6() {
        return (int)16390L;
    }
    public static int GL_LIGHT7() {
        return (int)16391L;
    }
    public static int GL_AMBIENT() {
        return (int)4608L;
    }
    public static int GL_DIFFUSE() {
        return (int)4609L;
    }
    public static int GL_SPECULAR() {
        return (int)4610L;
    }
    public static int GL_POSITION() {
        return (int)4611L;
    }
    public static int GL_SPOT_DIRECTION() {
        return (int)4612L;
    }
    public static int GL_SPOT_EXPONENT() {
        return (int)4613L;
    }
    public static int GL_SPOT_CUTOFF() {
        return (int)4614L;
    }
    public static int GL_CONSTANT_ATTENUATION() {
        return (int)4615L;
    }
    public static int GL_LINEAR_ATTENUATION() {
        return (int)4616L;
    }
    public static int GL_QUADRATIC_ATTENUATION() {
        return (int)4617L;
    }
    public static int GL_COMPILE() {
        return (int)4864L;
    }
    public static int GL_COMPILE_AND_EXECUTE() {
        return (int)4865L;
    }
    public static int GL_CLEAR() {
        return (int)5376L;
    }
    public static int GL_AND() {
        return (int)5377L;
    }
    public static int GL_AND_REVERSE() {
        return (int)5378L;
    }
    public static int GL_COPY() {
        return (int)5379L;
    }
    public static int GL_AND_INVERTED() {
        return (int)5380L;
    }
    public static int GL_NOOP() {
        return (int)5381L;
    }
    public static int GL_XOR() {
        return (int)5382L;
    }
    public static int GL_OR() {
        return (int)5383L;
    }
    public static int GL_NOR() {
        return (int)5384L;
    }
    public static int GL_EQUIV() {
        return (int)5385L;
    }
    public static int GL_INVERT() {
        return (int)5386L;
    }
    public static int GL_OR_REVERSE() {
        return (int)5387L;
    }
    public static int GL_COPY_INVERTED() {
        return (int)5388L;
    }
    public static int GL_OR_INVERTED() {
        return (int)5389L;
    }
    public static int GL_NAND() {
        return (int)5390L;
    }
    public static int GL_SET() {
        return (int)5391L;
    }
    public static int GL_EMISSION() {
        return (int)5632L;
    }
    public static int GL_SHININESS() {
        return (int)5633L;
    }
    public static int GL_AMBIENT_AND_DIFFUSE() {
        return (int)5634L;
    }
    public static int GL_COLOR_INDEXES() {
        return (int)5635L;
    }
    public static int GL_MODELVIEW() {
        return (int)5888L;
    }
    public static int GL_PROJECTION() {
        return (int)5889L;
    }
    public static int GL_TEXTURE() {
        return (int)5890L;
    }
    public static int GL_COLOR() {
        return (int)6144L;
    }
    public static int GL_DEPTH() {
        return (int)6145L;
    }
    public static int GL_STENCIL() {
        return (int)6146L;
    }
    public static int GL_COLOR_INDEX() {
        return (int)6400L;
    }
    public static int GL_STENCIL_INDEX() {
        return (int)6401L;
    }
    public static int GL_DEPTH_COMPONENT() {
        return (int)6402L;
    }
    public static int GL_RED() {
        return (int)6403L;
    }
    public static int GL_GREEN() {
        return (int)6404L;
    }
    public static int GL_BLUE() {
        return (int)6405L;
    }
    public static int GL_ALPHA() {
        return (int)6406L;
    }
    public static int GL_RGB() {
        return (int)6407L;
    }
    public static int GL_RGBA() {
        return (int)6408L;
    }
    public static int GL_LUMINANCE() {
        return (int)6409L;
    }
    public static int GL_LUMINANCE_ALPHA() {
        return (int)6410L;
    }
    public static int GL_BITMAP() {
        return (int)6656L;
    }
    public static int GL_POINT() {
        return (int)6912L;
    }
    public static int GL_LINE() {
        return (int)6913L;
    }
    public static int GL_FILL() {
        return (int)6914L;
    }
    public static int GL_RENDER() {
        return (int)7168L;
    }
    public static int GL_FEEDBACK() {
        return (int)7169L;
    }
    public static int GL_SELECT() {
        return (int)7170L;
    }
    public static int GL_FLAT() {
        return (int)7424L;
    }
    public static int GL_SMOOTH() {
        return (int)7425L;
    }
    public static int GL_KEEP() {
        return (int)7680L;
    }
    public static int GL_REPLACE() {
        return (int)7681L;
    }
    public static int GL_INCR() {
        return (int)7682L;
    }
    public static int GL_DECR() {
        return (int)7683L;
    }
    public static int GL_VENDOR() {
        return (int)7936L;
    }
    public static int GL_RENDERER() {
        return (int)7937L;
    }
    public static int GL_VERSION() {
        return (int)7938L;
    }
    public static int GL_EXTENSIONS() {
        return (int)7939L;
    }
    public static int GL_S() {
        return (int)8192L;
    }
    public static int GL_T() {
        return (int)8193L;
    }
    public static int GL_R() {
        return (int)8194L;
    }
    public static int GL_Q() {
        return (int)8195L;
    }
    public static int GL_MODULATE() {
        return (int)8448L;
    }
    public static int GL_DECAL() {
        return (int)8449L;
    }
    public static int GL_TEXTURE_ENV_MODE() {
        return (int)8704L;
    }
    public static int GL_TEXTURE_ENV_COLOR() {
        return (int)8705L;
    }
    public static int GL_TEXTURE_ENV() {
        return (int)8960L;
    }
    public static int GL_EYE_LINEAR() {
        return (int)9216L;
    }
    public static int GL_OBJECT_LINEAR() {
        return (int)9217L;
    }
    public static int GL_SPHERE_MAP() {
        return (int)9218L;
    }
    public static int GL_TEXTURE_GEN_MODE() {
        return (int)9472L;
    }
    public static int GL_OBJECT_PLANE() {
        return (int)9473L;
    }
    public static int GL_EYE_PLANE() {
        return (int)9474L;
    }
    public static int GL_NEAREST() {
        return (int)9728L;
    }
    public static int GL_LINEAR() {
        return (int)9729L;
    }
    public static int GL_NEAREST_MIPMAP_NEAREST() {
        return (int)9984L;
    }
    public static int GL_LINEAR_MIPMAP_NEAREST() {
        return (int)9985L;
    }
    public static int GL_NEAREST_MIPMAP_LINEAR() {
        return (int)9986L;
    }
    public static int GL_LINEAR_MIPMAP_LINEAR() {
        return (int)9987L;
    }
    public static int GL_TEXTURE_MAG_FILTER() {
        return (int)10240L;
    }
    public static int GL_TEXTURE_MIN_FILTER() {
        return (int)10241L;
    }
    public static int GL_TEXTURE_WRAP_S() {
        return (int)10242L;
    }
    public static int GL_TEXTURE_WRAP_T() {
        return (int)10243L;
    }
    public static int GL_CLAMP() {
        return (int)10496L;
    }
    public static int GL_REPEAT() {
        return (int)10497L;
    }
    public static int GL_CLIENT_PIXEL_STORE_BIT() {
        return (int)1L;
    }
    public static int GL_CLIENT_VERTEX_ARRAY_BIT() {
        return (int)2L;
    }
    public static int GL_POLYGON_OFFSET_FACTOR() {
        return (int)32824L;
    }
    public static int GL_POLYGON_OFFSET_UNITS() {
        return (int)10752L;
    }
    public static int GL_POLYGON_OFFSET_POINT() {
        return (int)10753L;
    }
    public static int GL_POLYGON_OFFSET_LINE() {
        return (int)10754L;
    }
    public static int GL_POLYGON_OFFSET_FILL() {
        return (int)32823L;
    }
    public static int GL_ALPHA4() {
        return (int)32827L;
    }
    public static int GL_ALPHA8() {
        return (int)32828L;
    }
    public static int GL_ALPHA12() {
        return (int)32829L;
    }
    public static int GL_ALPHA16() {
        return (int)32830L;
    }
    public static int GL_LUMINANCE4() {
        return (int)32831L;
    }
    public static int GL_LUMINANCE8() {
        return (int)32832L;
    }
    public static int GL_LUMINANCE12() {
        return (int)32833L;
    }
    public static int GL_LUMINANCE16() {
        return (int)32834L;
    }
    public static int GL_LUMINANCE4_ALPHA4() {
        return (int)32835L;
    }
    public static int GL_LUMINANCE6_ALPHA2() {
        return (int)32836L;
    }
    public static int GL_LUMINANCE8_ALPHA8() {
        return (int)32837L;
    }
    public static int GL_LUMINANCE12_ALPHA4() {
        return (int)32838L;
    }
    public static int GL_LUMINANCE12_ALPHA12() {
        return (int)32839L;
    }
    public static int GL_LUMINANCE16_ALPHA16() {
        return (int)32840L;
    }
    public static int GL_INTENSITY() {
        return (int)32841L;
    }
    public static int GL_INTENSITY4() {
        return (int)32842L;
    }
    public static int GL_INTENSITY8() {
        return (int)32843L;
    }
    public static int GL_INTENSITY12() {
        return (int)32844L;
    }
    public static int GL_INTENSITY16() {
        return (int)32845L;
    }
    public static int GL_R3_G3_B2() {
        return (int)10768L;
    }
    public static int GL_RGB4() {
        return (int)32847L;
    }
    public static int GL_RGB5() {
        return (int)32848L;
    }
    public static int GL_RGB8() {
        return (int)32849L;
    }
    public static int GL_RGB10() {
        return (int)32850L;
    }
    public static int GL_RGB12() {
        return (int)32851L;
    }
    public static int GL_RGB16() {
        return (int)32852L;
    }
    public static int GL_RGBA2() {
        return (int)32853L;
    }
    public static int GL_RGBA4() {
        return (int)32854L;
    }
    public static int GL_RGB5_A1() {
        return (int)32855L;
    }
    public static int GL_RGBA8() {
        return (int)32856L;
    }
    public static int GL_RGB10_A2() {
        return (int)32857L;
    }
    public static int GL_RGBA12() {
        return (int)32858L;
    }
    public static int GL_RGBA16() {
        return (int)32859L;
    }
    public static int GL_TEXTURE_RED_SIZE() {
        return (int)32860L;
    }
    public static int GL_TEXTURE_GREEN_SIZE() {
        return (int)32861L;
    }
    public static int GL_TEXTURE_BLUE_SIZE() {
        return (int)32862L;
    }
    public static int GL_TEXTURE_ALPHA_SIZE() {
        return (int)32863L;
    }
    public static int GL_TEXTURE_LUMINANCE_SIZE() {
        return (int)32864L;
    }
    public static int GL_TEXTURE_INTENSITY_SIZE() {
        return (int)32865L;
    }
    public static int GL_PROXY_TEXTURE_1D() {
        return (int)32867L;
    }
    public static int GL_PROXY_TEXTURE_2D() {
        return (int)32868L;
    }
    public static int GL_TEXTURE_PRIORITY() {
        return (int)32870L;
    }
    public static int GL_TEXTURE_RESIDENT() {
        return (int)32871L;
    }
    public static int GL_TEXTURE_BINDING_1D() {
        return (int)32872L;
    }
    public static int GL_TEXTURE_BINDING_2D() {
        return (int)32873L;
    }
    public static int GL_VERTEX_ARRAY() {
        return (int)32884L;
    }
    public static int GL_NORMAL_ARRAY() {
        return (int)32885L;
    }
    public static int GL_COLOR_ARRAY() {
        return (int)32886L;
    }
    public static int GL_INDEX_ARRAY() {
        return (int)32887L;
    }
    public static int GL_TEXTURE_COORD_ARRAY() {
        return (int)32888L;
    }
    public static int GL_EDGE_FLAG_ARRAY() {
        return (int)32889L;
    }
    public static int GL_VERTEX_ARRAY_SIZE() {
        return (int)32890L;
    }
    public static int GL_VERTEX_ARRAY_TYPE() {
        return (int)32891L;
    }
    public static int GL_VERTEX_ARRAY_STRIDE() {
        return (int)32892L;
    }
    public static int GL_NORMAL_ARRAY_TYPE() {
        return (int)32894L;
    }
    public static int GL_NORMAL_ARRAY_STRIDE() {
        return (int)32895L;
    }
    public static int GL_COLOR_ARRAY_SIZE() {
        return (int)32897L;
    }
    public static int GL_COLOR_ARRAY_TYPE() {
        return (int)32898L;
    }
    public static int GL_COLOR_ARRAY_STRIDE() {
        return (int)32899L;
    }
    public static int GL_INDEX_ARRAY_TYPE() {
        return (int)32901L;
    }
    public static int GL_INDEX_ARRAY_STRIDE() {
        return (int)32902L;
    }
    public static int GL_TEXTURE_COORD_ARRAY_SIZE() {
        return (int)32904L;
    }
    public static int GL_TEXTURE_COORD_ARRAY_TYPE() {
        return (int)32905L;
    }
    public static int GL_TEXTURE_COORD_ARRAY_STRIDE() {
        return (int)32906L;
    }
    public static int GL_EDGE_FLAG_ARRAY_STRIDE() {
        return (int)32908L;
    }
    public static int GL_VERTEX_ARRAY_POINTER() {
        return (int)32910L;
    }
    public static int GL_NORMAL_ARRAY_POINTER() {
        return (int)32911L;
    }
    public static int GL_COLOR_ARRAY_POINTER() {
        return (int)32912L;
    }
    public static int GL_INDEX_ARRAY_POINTER() {
        return (int)32913L;
    }
    public static int GL_TEXTURE_COORD_ARRAY_POINTER() {
        return (int)32914L;
    }
    public static int GL_EDGE_FLAG_ARRAY_POINTER() {
        return (int)32915L;
    }
    public static int GL_V2F() {
        return (int)10784L;
    }
    public static int GL_V3F() {
        return (int)10785L;
    }
    public static int GL_C4UB_V2F() {
        return (int)10786L;
    }
    public static int GL_C4UB_V3F() {
        return (int)10787L;
    }
    public static int GL_C3F_V3F() {
        return (int)10788L;
    }
    public static int GL_N3F_V3F() {
        return (int)10789L;
    }
    public static int GL_C4F_N3F_V3F() {
        return (int)10790L;
    }
    public static int GL_T2F_V3F() {
        return (int)10791L;
    }
    public static int GL_T4F_V4F() {
        return (int)10792L;
    }
    public static int GL_T2F_C4UB_V3F() {
        return (int)10793L;
    }
    public static int GL_T2F_C3F_V3F() {
        return (int)10794L;
    }
    public static int GL_T2F_N3F_V3F() {
        return (int)10795L;
    }
    public static int GL_T2F_C4F_N3F_V3F() {
        return (int)10796L;
    }
    public static int GL_T4F_C4F_N3F_V4F() {
        return (int)10797L;
    }
    public static int GL_EXT_vertex_array() {
        return (int)1L;
    }
    public static int GL_EXT_bgra() {
        return (int)1L;
    }
    public static int GL_EXT_paletted_texture() {
        return (int)1L;
    }
    public static int GL_WIN_swap_hint() {
        return (int)1L;
    }
    public static int GL_WIN_draw_range_elements() {
        return (int)1L;
    }
    public static int GL_VERTEX_ARRAY_EXT() {
        return (int)32884L;
    }
    public static int GL_NORMAL_ARRAY_EXT() {
        return (int)32885L;
    }
    public static int GL_COLOR_ARRAY_EXT() {
        return (int)32886L;
    }
    public static int GL_INDEX_ARRAY_EXT() {
        return (int)32887L;
    }
    public static int GL_TEXTURE_COORD_ARRAY_EXT() {
        return (int)32888L;
    }
    public static int GL_EDGE_FLAG_ARRAY_EXT() {
        return (int)32889L;
    }
    public static int GL_VERTEX_ARRAY_SIZE_EXT() {
        return (int)32890L;
    }
    public static int GL_VERTEX_ARRAY_TYPE_EXT() {
        return (int)32891L;
    }
    public static int GL_VERTEX_ARRAY_STRIDE_EXT() {
        return (int)32892L;
    }
    public static int GL_VERTEX_ARRAY_COUNT_EXT() {
        return (int)32893L;
    }
    public static int GL_NORMAL_ARRAY_TYPE_EXT() {
        return (int)32894L;
    }
    public static int GL_NORMAL_ARRAY_STRIDE_EXT() {
        return (int)32895L;
    }
    public static int GL_NORMAL_ARRAY_COUNT_EXT() {
        return (int)32896L;
    }
    public static int GL_COLOR_ARRAY_SIZE_EXT() {
        return (int)32897L;
    }
    public static int GL_COLOR_ARRAY_TYPE_EXT() {
        return (int)32898L;
    }
    public static int GL_COLOR_ARRAY_STRIDE_EXT() {
        return (int)32899L;
    }
    public static int GL_COLOR_ARRAY_COUNT_EXT() {
        return (int)32900L;
    }
    public static int GL_INDEX_ARRAY_TYPE_EXT() {
        return (int)32901L;
    }
    public static int GL_INDEX_ARRAY_STRIDE_EXT() {
        return (int)32902L;
    }
    public static int GL_INDEX_ARRAY_COUNT_EXT() {
        return (int)32903L;
    }
    public static int GL_TEXTURE_COORD_ARRAY_SIZE_EXT() {
        return (int)32904L;
    }
    public static int GL_TEXTURE_COORD_ARRAY_TYPE_EXT() {
        return (int)32905L;
    }
    public static int GL_TEXTURE_COORD_ARRAY_STRIDE_EXT() {
        return (int)32906L;
    }
    public static int GL_TEXTURE_COORD_ARRAY_COUNT_EXT() {
        return (int)32907L;
    }
    public static int GL_EDGE_FLAG_ARRAY_STRIDE_EXT() {
        return (int)32908L;
    }
    public static int GL_EDGE_FLAG_ARRAY_COUNT_EXT() {
        return (int)32909L;
    }
    public static int GL_VERTEX_ARRAY_POINTER_EXT() {
        return (int)32910L;
    }
    public static int GL_NORMAL_ARRAY_POINTER_EXT() {
        return (int)32911L;
    }
    public static int GL_COLOR_ARRAY_POINTER_EXT() {
        return (int)32912L;
    }
    public static int GL_INDEX_ARRAY_POINTER_EXT() {
        return (int)32913L;
    }
    public static int GL_TEXTURE_COORD_ARRAY_POINTER_EXT() {
        return (int)32914L;
    }
    public static int GL_EDGE_FLAG_ARRAY_POINTER_EXT() {
        return (int)32915L;
    }
    public static int GL_BGR_EXT() {
        return (int)32992L;
    }
    public static int GL_BGRA_EXT() {
        return (int)32993L;
    }
    public static int GL_COLOR_TABLE_FORMAT_EXT() {
        return (int)32984L;
    }
    public static int GL_COLOR_TABLE_WIDTH_EXT() {
        return (int)32985L;
    }
    public static int GL_COLOR_TABLE_RED_SIZE_EXT() {
        return (int)32986L;
    }
    public static int GL_COLOR_TABLE_GREEN_SIZE_EXT() {
        return (int)32987L;
    }
    public static int GL_COLOR_TABLE_BLUE_SIZE_EXT() {
        return (int)32988L;
    }
    public static int GL_COLOR_TABLE_ALPHA_SIZE_EXT() {
        return (int)32989L;
    }
    public static int GL_COLOR_TABLE_LUMINANCE_SIZE_EXT() {
        return (int)32990L;
    }
    public static int GL_COLOR_TABLE_INTENSITY_SIZE_EXT() {
        return (int)32991L;
    }
    public static int GL_COLOR_INDEX1_EXT() {
        return (int)32994L;
    }
    public static int GL_COLOR_INDEX2_EXT() {
        return (int)32995L;
    }
    public static int GL_COLOR_INDEX4_EXT() {
        return (int)32996L;
    }
    public static int GL_COLOR_INDEX8_EXT() {
        return (int)32997L;
    }
    public static int GL_COLOR_INDEX12_EXT() {
        return (int)32998L;
    }
    public static int GL_COLOR_INDEX16_EXT() {
        return (int)32999L;
    }
    public static int GL_MAX_ELEMENTS_VERTICES_WIN() {
        return (int)33000L;
    }
    public static int GL_MAX_ELEMENTS_INDICES_WIN() {
        return (int)33001L;
    }
    public static int GL_PHONG_WIN() {
        return (int)33002L;
    }
    public static int GL_PHONG_HINT_WIN() {
        return (int)33003L;
    }
    public static int GL_FOG_SPECULAR_TEXTURE_WIN() {
        return (int)33004L;
    }
    public static int GLU_VERSION_1_1() {
        return (int)1L;
    }
    public static int GLU_VERSION_1_2() {
        return (int)1L;
    }
    public static int GLU_INVALID_ENUM() {
        return (int)100900L;
    }
    public static int GLU_INVALID_VALUE() {
        return (int)100901L;
    }
    public static int GLU_OUT_OF_MEMORY() {
        return (int)100902L;
    }
    public static int GLU_INCOMPATIBLE_GL_VERSION() {
        return (int)100903L;
    }
    public static int GLU_VERSION() {
        return (int)100800L;
    }
    public static int GLU_EXTENSIONS() {
        return (int)100801L;
    }
    public static int GLU_SMOOTH() {
        return (int)100000L;
    }
    public static int GLU_FLAT() {
        return (int)100001L;
    }
    public static int GLU_NONE() {
        return (int)100002L;
    }
    public static int GLU_POINT() {
        return (int)100010L;
    }
    public static int GLU_LINE() {
        return (int)100011L;
    }
    public static int GLU_FILL() {
        return (int)100012L;
    }
    public static int GLU_SILHOUETTE() {
        return (int)100013L;
    }
    public static int GLU_OUTSIDE() {
        return (int)100020L;
    }
    public static int GLU_INSIDE() {
        return (int)100021L;
    }
    public static int GLU_TESS_WINDING_RULE() {
        return (int)100140L;
    }
    public static int GLU_TESS_BOUNDARY_ONLY() {
        return (int)100141L;
    }
    public static int GLU_TESS_TOLERANCE() {
        return (int)100142L;
    }
    public static int GLU_TESS_WINDING_ODD() {
        return (int)100130L;
    }
    public static int GLU_TESS_WINDING_NONZERO() {
        return (int)100131L;
    }
    public static int GLU_TESS_WINDING_POSITIVE() {
        return (int)100132L;
    }
    public static int GLU_TESS_WINDING_NEGATIVE() {
        return (int)100133L;
    }
    public static int GLU_TESS_WINDING_ABS_GEQ_TWO() {
        return (int)100134L;
    }
    public static int GLU_TESS_BEGIN() {
        return (int)100100L;
    }
    public static int GLU_TESS_VERTEX() {
        return (int)100101L;
    }
    public static int GLU_TESS_END() {
        return (int)100102L;
    }
    public static int GLU_TESS_ERROR() {
        return (int)100103L;
    }
    public static int GLU_TESS_EDGE_FLAG() {
        return (int)100104L;
    }
    public static int GLU_TESS_COMBINE() {
        return (int)100105L;
    }
    public static int GLU_TESS_BEGIN_DATA() {
        return (int)100106L;
    }
    public static int GLU_TESS_VERTEX_DATA() {
        return (int)100107L;
    }
    public static int GLU_TESS_END_DATA() {
        return (int)100108L;
    }
    public static int GLU_TESS_ERROR_DATA() {
        return (int)100109L;
    }
    public static int GLU_TESS_EDGE_FLAG_DATA() {
        return (int)100110L;
    }
    public static int GLU_TESS_COMBINE_DATA() {
        return (int)100111L;
    }
    public static int GLU_TESS_ERROR1() {
        return (int)100151L;
    }
    public static int GLU_TESS_ERROR2() {
        return (int)100152L;
    }
    public static int GLU_TESS_ERROR3() {
        return (int)100153L;
    }
    public static int GLU_TESS_ERROR4() {
        return (int)100154L;
    }
    public static int GLU_TESS_ERROR5() {
        return (int)100155L;
    }
    public static int GLU_TESS_ERROR6() {
        return (int)100156L;
    }
    public static int GLU_TESS_ERROR7() {
        return (int)100157L;
    }
    public static int GLU_TESS_ERROR8() {
        return (int)100158L;
    }
    public static int GLU_AUTO_LOAD_MATRIX() {
        return (int)100200L;
    }
    public static int GLU_CULLING() {
        return (int)100201L;
    }
    public static int GLU_SAMPLING_TOLERANCE() {
        return (int)100203L;
    }
    public static int GLU_DISPLAY_MODE() {
        return (int)100204L;
    }
    public static int GLU_PARAMETRIC_TOLERANCE() {
        return (int)100202L;
    }
    public static int GLU_SAMPLING_METHOD() {
        return (int)100205L;
    }
    public static int GLU_U_STEP() {
        return (int)100206L;
    }
    public static int GLU_V_STEP() {
        return (int)100207L;
    }
    public static int GLU_PATH_LENGTH() {
        return (int)100215L;
    }
    public static int GLU_PARAMETRIC_ERROR() {
        return (int)100216L;
    }
    public static int GLU_DOMAIN_DISTANCE() {
        return (int)100217L;
    }
    public static int GLU_MAP1_TRIM_2() {
        return (int)100210L;
    }
    public static int GLU_MAP1_TRIM_3() {
        return (int)100211L;
    }
    public static int GLU_OUTLINE_POLYGON() {
        return (int)100240L;
    }
    public static int GLU_OUTLINE_PATCH() {
        return (int)100241L;
    }
    public static int GLU_NURBS_ERROR1() {
        return (int)100251L;
    }
    public static int GLU_NURBS_ERROR2() {
        return (int)100252L;
    }
    public static int GLU_NURBS_ERROR3() {
        return (int)100253L;
    }
    public static int GLU_NURBS_ERROR4() {
        return (int)100254L;
    }
    public static int GLU_NURBS_ERROR5() {
        return (int)100255L;
    }
    public static int GLU_NURBS_ERROR6() {
        return (int)100256L;
    }
    public static int GLU_NURBS_ERROR7() {
        return (int)100257L;
    }
    public static int GLU_NURBS_ERROR8() {
        return (int)100258L;
    }
    public static int GLU_NURBS_ERROR9() {
        return (int)100259L;
    }
    public static int GLU_NURBS_ERROR10() {
        return (int)100260L;
    }
    public static int GLU_NURBS_ERROR11() {
        return (int)100261L;
    }
    public static int GLU_NURBS_ERROR12() {
        return (int)100262L;
    }
    public static int GLU_NURBS_ERROR13() {
        return (int)100263L;
    }
    public static int GLU_NURBS_ERROR14() {
        return (int)100264L;
    }
    public static int GLU_NURBS_ERROR15() {
        return (int)100265L;
    }
    public static int GLU_NURBS_ERROR16() {
        return (int)100266L;
    }
    public static int GLU_NURBS_ERROR17() {
        return (int)100267L;
    }
    public static int GLU_NURBS_ERROR18() {
        return (int)100268L;
    }
    public static int GLU_NURBS_ERROR19() {
        return (int)100269L;
    }
    public static int GLU_NURBS_ERROR20() {
        return (int)100270L;
    }
    public static int GLU_NURBS_ERROR21() {
        return (int)100271L;
    }
    public static int GLU_NURBS_ERROR22() {
        return (int)100272L;
    }
    public static int GLU_NURBS_ERROR23() {
        return (int)100273L;
    }
    public static int GLU_NURBS_ERROR24() {
        return (int)100274L;
    }
    public static int GLU_NURBS_ERROR25() {
        return (int)100275L;
    }
    public static int GLU_NURBS_ERROR26() {
        return (int)100276L;
    }
    public static int GLU_NURBS_ERROR27() {
        return (int)100277L;
    }
    public static int GLU_NURBS_ERROR28() {
        return (int)100278L;
    }
    public static int GLU_NURBS_ERROR29() {
        return (int)100279L;
    }
    public static int GLU_NURBS_ERROR30() {
        return (int)100280L;
    }
    public static int GLU_NURBS_ERROR31() {
        return (int)100281L;
    }
    public static int GLU_NURBS_ERROR32() {
        return (int)100282L;
    }
    public static int GLU_NURBS_ERROR33() {
        return (int)100283L;
    }
    public static int GLU_NURBS_ERROR34() {
        return (int)100284L;
    }
    public static int GLU_NURBS_ERROR35() {
        return (int)100285L;
    }
    public static int GLU_NURBS_ERROR36() {
        return (int)100286L;
    }
    public static int GLU_NURBS_ERROR37() {
        return (int)100287L;
    }
    public static int GLU_CW() {
        return (int)100120L;
    }
    public static int GLU_CCW() {
        return (int)100121L;
    }
    public static int GLU_INTERIOR() {
        return (int)100122L;
    }
    public static int GLU_EXTERIOR() {
        return (int)100123L;
    }
    public static int GLU_UNKNOWN() {
        return (int)100124L;
    }
    public static int GLUT_KEY_F1() {
        return (int)1L;
    }
    public static int GLUT_KEY_F2() {
        return (int)2L;
    }
    public static int GLUT_KEY_F3() {
        return (int)3L;
    }
    public static int GLUT_KEY_F4() {
        return (int)4L;
    }
    public static int GLUT_KEY_F5() {
        return (int)5L;
    }
    public static int GLUT_KEY_F6() {
        return (int)6L;
    }
    public static int GLUT_KEY_F7() {
        return (int)7L;
    }
    public static int GLUT_KEY_F8() {
        return (int)8L;
    }
    public static int GLUT_KEY_F9() {
        return (int)9L;
    }
    public static int GLUT_KEY_F10() {
        return (int)10L;
    }
    public static int GLUT_KEY_F11() {
        return (int)11L;
    }
    public static int GLUT_KEY_F12() {
        return (int)12L;
    }
    public static int GLUT_KEY_LEFT() {
        return (int)100L;
    }
    public static int GLUT_KEY_UP() {
        return (int)101L;
    }
    public static int GLUT_KEY_RIGHT() {
        return (int)102L;
    }
    public static int GLUT_KEY_DOWN() {
        return (int)103L;
    }
    public static int GLUT_KEY_PAGE_UP() {
        return (int)104L;
    }
    public static int GLUT_KEY_PAGE_DOWN() {
        return (int)105L;
    }
    public static int GLUT_KEY_HOME() {
        return (int)106L;
    }
    public static int GLUT_KEY_END() {
        return (int)107L;
    }
    public static int GLUT_KEY_INSERT() {
        return (int)108L;
    }
    public static int GLUT_LEFT_BUTTON() {
        return (int)0L;
    }
    public static int GLUT_MIDDLE_BUTTON() {
        return (int)1L;
    }
    public static int GLUT_RIGHT_BUTTON() {
        return (int)2L;
    }
    public static int GLUT_DOWN() {
        return (int)0L;
    }
    public static int GLUT_UP() {
        return (int)1L;
    }
    public static int GLUT_LEFT() {
        return (int)0L;
    }
    public static int GLUT_ENTERED() {
        return (int)1L;
    }
    public static int GLUT_RGB() {
        return (int)0L;
    }
    public static int GLUT_RGBA() {
        return (int)0L;
    }
    public static int GLUT_INDEX() {
        return (int)1L;
    }
    public static int GLUT_SINGLE() {
        return (int)0L;
    }
    public static int GLUT_DOUBLE() {
        return (int)2L;
    }
    public static int GLUT_ACCUM() {
        return (int)4L;
    }
    public static int GLUT_ALPHA() {
        return (int)8L;
    }
    public static int GLUT_DEPTH() {
        return (int)16L;
    }
    public static int GLUT_STENCIL() {
        return (int)32L;
    }
    public static int GLUT_MULTISAMPLE() {
        return (int)128L;
    }
    public static int GLUT_STEREO() {
        return (int)256L;
    }
    public static int GLUT_LUMINANCE() {
        return (int)512L;
    }
    public static int GLUT_MENU_NOT_IN_USE() {
        return (int)0L;
    }
    public static int GLUT_MENU_IN_USE() {
        return (int)1L;
    }
    public static int GLUT_NOT_VISIBLE() {
        return (int)0L;
    }
    public static int GLUT_VISIBLE() {
        return (int)1L;
    }
    public static int GLUT_HIDDEN() {
        return (int)0L;
    }
    public static int GLUT_FULLY_RETAINED() {
        return (int)1L;
    }
    public static int GLUT_PARTIALLY_RETAINED() {
        return (int)2L;
    }
    public static int GLUT_FULLY_COVERED() {
        return (int)3L;
    }
    public static int GLUT_WINDOW_X() {
        return (int)100L;
    }
    public static int GLUT_WINDOW_Y() {
        return (int)101L;
    }
    public static int GLUT_WINDOW_WIDTH() {
        return (int)102L;
    }
    public static int GLUT_WINDOW_HEIGHT() {
        return (int)103L;
    }
    public static int GLUT_WINDOW_BUFFER_SIZE() {
        return (int)104L;
    }
    public static int GLUT_WINDOW_STENCIL_SIZE() {
        return (int)105L;
    }
    public static int GLUT_WINDOW_DEPTH_SIZE() {
        return (int)106L;
    }
    public static int GLUT_WINDOW_RED_SIZE() {
        return (int)107L;
    }
    public static int GLUT_WINDOW_GREEN_SIZE() {
        return (int)108L;
    }
    public static int GLUT_WINDOW_BLUE_SIZE() {
        return (int)109L;
    }
    public static int GLUT_WINDOW_ALPHA_SIZE() {
        return (int)110L;
    }
    public static int GLUT_WINDOW_ACCUM_RED_SIZE() {
        return (int)111L;
    }
    public static int GLUT_WINDOW_ACCUM_GREEN_SIZE() {
        return (int)112L;
    }
    public static int GLUT_WINDOW_ACCUM_BLUE_SIZE() {
        return (int)113L;
    }
    public static int GLUT_WINDOW_ACCUM_ALPHA_SIZE() {
        return (int)114L;
    }
    public static int GLUT_WINDOW_DOUBLEBUFFER() {
        return (int)115L;
    }
    public static int GLUT_WINDOW_RGBA() {
        return (int)116L;
    }
    public static int GLUT_WINDOW_PARENT() {
        return (int)117L;
    }
    public static int GLUT_WINDOW_NUM_CHILDREN() {
        return (int)118L;
    }
    public static int GLUT_WINDOW_COLORMAP_SIZE() {
        return (int)119L;
    }
    public static int GLUT_WINDOW_NUM_SAMPLES() {
        return (int)120L;
    }
    public static int GLUT_WINDOW_STEREO() {
        return (int)121L;
    }
    public static int GLUT_WINDOW_CURSOR() {
        return (int)122L;
    }
    public static int GLUT_SCREEN_WIDTH() {
        return (int)200L;
    }
    public static int GLUT_SCREEN_HEIGHT() {
        return (int)201L;
    }
    public static int GLUT_SCREEN_WIDTH_MM() {
        return (int)202L;
    }
    public static int GLUT_SCREEN_HEIGHT_MM() {
        return (int)203L;
    }
    public static int GLUT_MENU_NUM_ITEMS() {
        return (int)300L;
    }
    public static int GLUT_DISPLAY_MODE_POSSIBLE() {
        return (int)400L;
    }
    public static int GLUT_INIT_WINDOW_X() {
        return (int)500L;
    }
    public static int GLUT_INIT_WINDOW_Y() {
        return (int)501L;
    }
    public static int GLUT_INIT_WINDOW_WIDTH() {
        return (int)502L;
    }
    public static int GLUT_INIT_WINDOW_HEIGHT() {
        return (int)503L;
    }
    public static int GLUT_INIT_DISPLAY_MODE() {
        return (int)504L;
    }
    public static int GLUT_ELAPSED_TIME() {
        return (int)700L;
    }
    public static int GLUT_WINDOW_FORMAT_ID() {
        return (int)123L;
    }
    public static int GLUT_HAS_KEYBOARD() {
        return (int)600L;
    }
    public static int GLUT_HAS_MOUSE() {
        return (int)601L;
    }
    public static int GLUT_HAS_SPACEBALL() {
        return (int)602L;
    }
    public static int GLUT_HAS_DIAL_AND_BUTTON_BOX() {
        return (int)603L;
    }
    public static int GLUT_HAS_TABLET() {
        return (int)604L;
    }
    public static int GLUT_NUM_MOUSE_BUTTONS() {
        return (int)605L;
    }
    public static int GLUT_NUM_SPACEBALL_BUTTONS() {
        return (int)606L;
    }
    public static int GLUT_NUM_BUTTON_BOX_BUTTONS() {
        return (int)607L;
    }
    public static int GLUT_NUM_DIALS() {
        return (int)608L;
    }
    public static int GLUT_NUM_TABLET_BUTTONS() {
        return (int)609L;
    }
    public static int GLUT_DEVICE_IGNORE_KEY_REPEAT() {
        return (int)610L;
    }
    public static int GLUT_DEVICE_KEY_REPEAT() {
        return (int)611L;
    }
    public static int GLUT_HAS_JOYSTICK() {
        return (int)612L;
    }
    public static int GLUT_OWNS_JOYSTICK() {
        return (int)613L;
    }
    public static int GLUT_JOYSTICK_BUTTONS() {
        return (int)614L;
    }
    public static int GLUT_JOYSTICK_AXES() {
        return (int)615L;
    }
    public static int GLUT_JOYSTICK_POLL_RATE() {
        return (int)616L;
    }
    public static int GLUT_OVERLAY_POSSIBLE() {
        return (int)800L;
    }
    public static int GLUT_LAYER_IN_USE() {
        return (int)801L;
    }
    public static int GLUT_HAS_OVERLAY() {
        return (int)802L;
    }
    public static int GLUT_TRANSPARENT_INDEX() {
        return (int)803L;
    }
    public static int GLUT_NORMAL_DAMAGED() {
        return (int)804L;
    }
    public static int GLUT_OVERLAY_DAMAGED() {
        return (int)805L;
    }
    public static int GLUT_VIDEO_RESIZE_POSSIBLE() {
        return (int)900L;
    }
    public static int GLUT_VIDEO_RESIZE_IN_USE() {
        return (int)901L;
    }
    public static int GLUT_VIDEO_RESIZE_X_DELTA() {
        return (int)902L;
    }
    public static int GLUT_VIDEO_RESIZE_Y_DELTA() {
        return (int)903L;
    }
    public static int GLUT_VIDEO_RESIZE_WIDTH_DELTA() {
        return (int)904L;
    }
    public static int GLUT_VIDEO_RESIZE_HEIGHT_DELTA() {
        return (int)905L;
    }
    public static int GLUT_VIDEO_RESIZE_X() {
        return (int)906L;
    }
    public static int GLUT_VIDEO_RESIZE_Y() {
        return (int)907L;
    }
    public static int GLUT_VIDEO_RESIZE_WIDTH() {
        return (int)908L;
    }
    public static int GLUT_VIDEO_RESIZE_HEIGHT() {
        return (int)909L;
    }
    public static int GLUT_NORMAL() {
        return (int)0L;
    }
    public static int GLUT_OVERLAY() {
        return (int)1L;
    }
    public static int GLUT_ACTIVE_SHIFT() {
        return (int)1L;
    }
    public static int GLUT_ACTIVE_CTRL() {
        return (int)2L;
    }
    public static int GLUT_ACTIVE_ALT() {
        return (int)4L;
    }
    public static int GLUT_CURSOR_RIGHT_ARROW() {
        return (int)0L;
    }
    public static int GLUT_CURSOR_LEFT_ARROW() {
        return (int)1L;
    }
    public static int GLUT_CURSOR_INFO() {
        return (int)2L;
    }
    public static int GLUT_CURSOR_DESTROY() {
        return (int)3L;
    }
    public static int GLUT_CURSOR_HELP() {
        return (int)4L;
    }
    public static int GLUT_CURSOR_CYCLE() {
        return (int)5L;
    }
    public static int GLUT_CURSOR_SPRAY() {
        return (int)6L;
    }
    public static int GLUT_CURSOR_WAIT() {
        return (int)7L;
    }
    public static int GLUT_CURSOR_TEXT() {
        return (int)8L;
    }
    public static int GLUT_CURSOR_CROSSHAIR() {
        return (int)9L;
    }
    public static int GLUT_CURSOR_UP_DOWN() {
        return (int)10L;
    }
    public static int GLUT_CURSOR_LEFT_RIGHT() {
        return (int)11L;
    }
    public static int GLUT_CURSOR_TOP_SIDE() {
        return (int)12L;
    }
    public static int GLUT_CURSOR_BOTTOM_SIDE() {
        return (int)13L;
    }
    public static int GLUT_CURSOR_LEFT_SIDE() {
        return (int)14L;
    }
    public static int GLUT_CURSOR_RIGHT_SIDE() {
        return (int)15L;
    }
    public static int GLUT_CURSOR_TOP_LEFT_CORNER() {
        return (int)16L;
    }
    public static int GLUT_CURSOR_TOP_RIGHT_CORNER() {
        return (int)17L;
    }
    public static int GLUT_CURSOR_BOTTOM_RIGHT_CORNER() {
        return (int)18L;
    }
    public static int GLUT_CURSOR_BOTTOM_LEFT_CORNER() {
        return (int)19L;
    }
    public static int GLUT_CURSOR_INHERIT() {
        return (int)100L;
    }
    public static int GLUT_CURSOR_NONE() {
        return (int)101L;
    }
    public static int GLUT_CURSOR_FULL_CROSSHAIR() {
        return (int)102L;
    }
    public static int GLUT_RED() {
        return (int)0L;
    }
    public static int GLUT_GREEN() {
        return (int)1L;
    }
    public static int GLUT_BLUE() {
        return (int)2L;
    }
    public static int GLUT_KEY_REPEAT_OFF() {
        return (int)0L;
    }
    public static int GLUT_KEY_REPEAT_ON() {
        return (int)1L;
    }
    public static int GLUT_KEY_REPEAT_DEFAULT() {
        return (int)2L;
    }
    public static int GLUT_JOYSTICK_BUTTON_A() {
        return (int)1L;
    }
    public static int GLUT_JOYSTICK_BUTTON_B() {
        return (int)2L;
    }
    public static int GLUT_JOYSTICK_BUTTON_C() {
        return (int)4L;
    }
    public static int GLUT_JOYSTICK_BUTTON_D() {
        return (int)8L;
    }
    public static int GLUT_GAME_MODE_ACTIVE() {
        return (int)0L;
    }
    public static int GLUT_GAME_MODE_POSSIBLE() {
        return (int)1L;
    }
    public static int GLUT_GAME_MODE_WIDTH() {
        return (int)2L;
    }
    public static int GLUT_GAME_MODE_HEIGHT() {
        return (int)3L;
    }
    public static int GLUT_GAME_MODE_PIXEL_DEPTH() {
        return (int)4L;
    }
    public static int GLUT_GAME_MODE_REFRESH_RATE() {
        return (int)5L;
    }
    public static int GLUT_GAME_MODE_DISPLAY_CHANGED() {
        return (int)6L;
    }
    public static int CHAR_BIT() {
        return (int)8L;
    }
    public static int SCHAR_MAX() {
        return (int)127L;
    }
    public static int UCHAR_MAX() {
        return (int)255L;
    }
    public static int MB_LEN_MAX() {
        return (int)5L;
    }
    public static int SHRT_MAX() {
        return (int)32767L;
    }
    public static int USHRT_MAX() {
        return (int)65535L;
    }
    public static int INT_MAX() {
        return (int)2147483647L;
    }
    public static int EXIT_SUCCESS() {
        return (int)0L;
    }
    public static int EXIT_FAILURE() {
        return (int)1L;
    }
    public static int _WRITE_ABORT_MSG() {
        return (int)1L;
    }
    public static int _CALL_REPORTFAULT() {
        return (int)2L;
    }
    public static int _OUT_TO_DEFAULT() {
        return (int)0L;
    }
    public static int _OUT_TO_STDERR() {
        return (int)1L;
    }
    public static int _OUT_TO_MSGBOX() {
        return (int)2L;
    }
    public static int _REPORT_ERRMODE() {
        return (int)3L;
    }
    public static int RAND_MAX() {
        return (int)32767L;
    }
    public static int _MAX_PATH() {
        return (int)260L;
    }
    public static int _MAX_DRIVE() {
        return (int)3L;
    }
    public static int _MAX_DIR() {
        return (int)256L;
    }
    public static int _MAX_FNAME() {
        return (int)256L;
    }
    public static int _MAX_EXT() {
        return (int)256L;
    }
    public static int _MAX_ENV() {
        return (int)32767L;
    }
    public static int GLUT_KEY_NUM_LOCK() {
        return (int)109L;
    }
    public static int GLUT_KEY_BEGIN() {
        return (int)110L;
    }
    public static int GLUT_KEY_DELETE() {
        return (int)111L;
    }
    public static int GLUT_KEY_SHIFT_L() {
        return (int)112L;
    }
    public static int GLUT_KEY_SHIFT_R() {
        return (int)113L;
    }
    public static int GLUT_KEY_CTRL_L() {
        return (int)114L;
    }
    public static int GLUT_KEY_CTRL_R() {
        return (int)115L;
    }
    public static int GLUT_KEY_ALT_L() {
        return (int)116L;
    }
    public static int GLUT_KEY_ALT_R() {
        return (int)117L;
    }
    public static int GLUT_ACTION_EXIT() {
        return (int)0L;
    }
    public static int GLUT_ACTION_GLUTMAINLOOP_RETURNS() {
        return (int)1L;
    }
    public static int GLUT_ACTION_CONTINUE_EXECUTION() {
        return (int)2L;
    }
    public static int GLUT_CREATE_NEW_CONTEXT() {
        return (int)0L;
    }
    public static int GLUT_USE_CURRENT_CONTEXT() {
        return (int)1L;
    }
    public static int GLUT_FORCE_INDIRECT_CONTEXT() {
        return (int)0L;
    }
    public static int GLUT_ALLOW_DIRECT_CONTEXT() {
        return (int)1L;
    }
    public static int GLUT_TRY_DIRECT_CONTEXT() {
        return (int)2L;
    }
    public static int GLUT_FORCE_DIRECT_CONTEXT() {
        return (int)3L;
    }
    public static int GLUT_INIT_STATE() {
        return (int)124L;
    }
    public static int GLUT_ACTION_ON_WINDOW_CLOSE() {
        return (int)505L;
    }
    public static int GLUT_WINDOW_BORDER_WIDTH() {
        return (int)506L;
    }
    public static int GLUT_WINDOW_BORDER_HEIGHT() {
        return (int)507L;
    }
    public static int GLUT_WINDOW_HEADER_HEIGHT() {
        return (int)507L;
    }
    public static int GLUT_VERSION() {
        return (int)508L;
    }
    public static int GLUT_RENDERING_CONTEXT() {
        return (int)509L;
    }
    public static int GLUT_DIRECT_RENDERING() {
        return (int)510L;
    }
    public static int GLUT_FULL_SCREEN() {
        return (int)511L;
    }
    public static int GLUT_SKIP_STALE_MOTION_EVENTS() {
        return (int)516L;
    }
    public static int GLUT_GEOMETRY_VISUALIZE_NORMALS() {
        return (int)517L;
    }
    public static int GLUT_STROKE_FONT_DRAW_JOIN_DOTS() {
        return (int)518L;
    }
    public static int GLUT_AUX() {
        return (int)4096L;
    }
    public static int GLUT_AUX1() {
        return (int)4096L;
    }
    public static int GLUT_AUX2() {
        return (int)8192L;
    }
    public static int GLUT_AUX3() {
        return (int)16384L;
    }
    public static int GLUT_AUX4() {
        return (int)32768L;
    }
    public static int GLUT_INIT_MAJOR_VERSION() {
        return (int)512L;
    }
    public static int GLUT_INIT_MINOR_VERSION() {
        return (int)513L;
    }
    public static int GLUT_INIT_FLAGS() {
        return (int)514L;
    }
    public static int GLUT_INIT_PROFILE() {
        return (int)515L;
    }
    public static int GLUT_DEBUG() {
        return (int)1L;
    }
    public static int GLUT_FORWARD_COMPATIBLE() {
        return (int)2L;
    }
    public static int GLUT_CORE_PROFILE() {
        return (int)1L;
    }
    public static int GLUT_COMPATIBILITY_PROFILE() {
        return (int)2L;
    }
    public static int GLUT_HAS_MULTI() {
        return (int)1L;
    }
    public static int GLUT_APPSTATUS_PAUSE() {
        return (int)1L;
    }
    public static int GLUT_APPSTATUS_RESUME() {
        return (int)2L;
    }
    public static int GLUT_CAPTIONLESS() {
        return (int)1024L;
    }
    public static int GLUT_BORDERLESS() {
        return (int)2048L;
    }
    public static int GLUT_SRGB() {
        return (int)4096L;
    }
    public static OfAddress va_list = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle __va_start$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__va_start$MH,"__va_start");
    }
    public static void __va_start ( Addressable x0, Object... x1) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.__va_start$MH, "__va_start");
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfLong ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle __security_init_cookie$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__security_init_cookie$MH,"__security_init_cookie");
    }
    public static void __security_init_cookie () {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.__security_init_cookie$MH, "__security_init_cookie");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __security_check_cookie$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__security_check_cookie$MH,"__security_check_cookie");
    }
    public static void __security_check_cookie ( long _StackCookie) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.__security_check_cookie$MH, "__security_check_cookie");
        try {
            mh$.invokeExact(_StackCookie);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __report_gsfailure$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__report_gsfailure$MH,"__report_gsfailure");
    }
    public static void __report_gsfailure ( long _StackCookie) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.__report_gsfailure$MH, "__report_gsfailure");
        try {
            mh$.invokeExact(_StackCookie);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout __security_cookie$LAYOUT() {
        return constants$0.__security_cookie$LAYOUT;
    }
    public static VarHandle __security_cookie$VH() {
        return constants$0.__security_cookie$VH;
    }
    public static MemorySegment __security_cookie$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$0.__security_cookie$SEGMENT,"__security_cookie");
    }
    public static long __security_cookie$get() {
        return (long) constants$0.__security_cookie$VH.get(RuntimeHelper.requireNonNull(constants$0.__security_cookie$SEGMENT, "__security_cookie"));
    }
    public static void __security_cookie$set( long x) {
        constants$0.__security_cookie$VH.set(RuntimeHelper.requireNonNull(constants$0.__security_cookie$SEGMENT, "__security_cookie"), x);
    }
    public static int ExceptionContinueExecution() {
        return (int)0L;
    }
    public static int ExceptionContinueSearch() {
        return (int)1L;
    }
    public static int ExceptionNestedException() {
        return (int)2L;
    }
    public static int ExceptionCollidedUnwind() {
        return (int)3L;
    }
    public static MethodHandle __C_specific_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__C_specific_handler$MH,"__C_specific_handler");
    }
    public static int __C_specific_handler ( Addressable ExceptionRecord,  Addressable EstablisherFrame,  Addressable ContextRecord,  Addressable DispatcherContext) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.__C_specific_handler$MH, "__C_specific_handler");
        try {
            return (int)mh$.invokeExact(ExceptionRecord, EstablisherFrame, ContextRecord, DispatcherContext);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _exception_code$MH() {
        return RuntimeHelper.requireNonNull(constants$1._exception_code$MH,"_exception_code");
    }
    public static int _exception_code () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1._exception_code$MH, "_exception_code");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _exception_info$MH() {
        return RuntimeHelper.requireNonNull(constants$1._exception_info$MH,"_exception_info");
    }
    public static MemoryAddress _exception_info () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1._exception_info$MH, "_exception_info");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _abnormal_termination$MH() {
        return RuntimeHelper.requireNonNull(constants$1._abnormal_termination$MH,"_abnormal_termination");
    }
    public static int _abnormal_termination () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1._abnormal_termination$MH, "_abnormal_termination");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress va_list$0 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress __gnuc_va_list = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PULONG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUSHORT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PSZ = Constants$root.C_POINTER$LAYOUT;
    public static OfInt BOOL = Constants$root.C_LONG$LAYOUT;
    public static OfFloat FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfAddress PFLOAT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBOOL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPBOOL = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PBYTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPBYTE = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPINT = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPLONG = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDWORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPDWORD = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPVOID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCVOID = Constants$root.C_POINTER$LAYOUT;
    public static OfInt INT = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PUINT = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle _invalid_parameter_noinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$1._invalid_parameter_noinfo$MH,"_invalid_parameter_noinfo");
    }
    public static void _invalid_parameter_noinfo () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1._invalid_parameter_noinfo$MH, "_invalid_parameter_noinfo");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _invalid_parameter_noinfo_noreturn$MH() {
        return RuntimeHelper.requireNonNull(constants$1._invalid_parameter_noinfo_noreturn$MH,"_invalid_parameter_noinfo_noreturn");
    }
    public static void _invalid_parameter_noinfo_noreturn () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1._invalid_parameter_noinfo_noreturn$MH, "_invalid_parameter_noinfo_noreturn");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _invoke_watson$MH() {
        return RuntimeHelper.requireNonNull(constants$1._invoke_watson$MH,"_invoke_watson");
    }
    public static void _invoke_watson ( Addressable _Expression,  Addressable _FunctionName,  Addressable _FileName,  int _LineNo,  long _Reserved) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1._invoke_watson$MH, "_invoke_watson");
        try {
            mh$.invokeExact(_Expression, _FunctionName, _FileName, _LineNo, _Reserved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfInt errno_t = Constants$root.C_LONG$LAYOUT;
    public static OfInt __time32_t = Constants$root.C_LONG$LAYOUT;
    public static OfLong __time64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress _locale_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle __pctype_func$MH() {
        return RuntimeHelper.requireNonNull(constants$2.__pctype_func$MH,"__pctype_func");
    }
    public static MemoryAddress __pctype_func () {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.__pctype_func$MH, "__pctype_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __pwctype_func$MH() {
        return RuntimeHelper.requireNonNull(constants$2.__pwctype_func$MH,"__pwctype_func");
    }
    public static MemoryAddress __pwctype_func () {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.__pwctype_func$MH, "__pwctype_func");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswalnum$MH() {
        return RuntimeHelper.requireNonNull(constants$2.iswalnum$MH,"iswalnum");
    }
    public static int iswalnum ( short _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.iswalnum$MH, "iswalnum");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswalpha$MH() {
        return RuntimeHelper.requireNonNull(constants$2.iswalpha$MH,"iswalpha");
    }
    public static int iswalpha ( short _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.iswalpha$MH, "iswalpha");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswascii$MH() {
        return RuntimeHelper.requireNonNull(constants$2.iswascii$MH,"iswascii");
    }
    public static int iswascii ( short _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.iswascii$MH, "iswascii");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswblank$MH() {
        return RuntimeHelper.requireNonNull(constants$2.iswblank$MH,"iswblank");
    }
    public static int iswblank ( short _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$2.iswblank$MH, "iswblank");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswcntrl$MH() {
        return RuntimeHelper.requireNonNull(constants$3.iswcntrl$MH,"iswcntrl");
    }
    public static int iswcntrl ( short _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.iswcntrl$MH, "iswcntrl");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswdigit$MH() {
        return RuntimeHelper.requireNonNull(constants$3.iswdigit$MH,"iswdigit");
    }
    public static int iswdigit ( short _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.iswdigit$MH, "iswdigit");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswgraph$MH() {
        return RuntimeHelper.requireNonNull(constants$3.iswgraph$MH,"iswgraph");
    }
    public static int iswgraph ( short _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.iswgraph$MH, "iswgraph");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswlower$MH() {
        return RuntimeHelper.requireNonNull(constants$3.iswlower$MH,"iswlower");
    }
    public static int iswlower ( short _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.iswlower$MH, "iswlower");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswprint$MH() {
        return RuntimeHelper.requireNonNull(constants$3.iswprint$MH,"iswprint");
    }
    public static int iswprint ( short _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.iswprint$MH, "iswprint");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswpunct$MH() {
        return RuntimeHelper.requireNonNull(constants$3.iswpunct$MH,"iswpunct");
    }
    public static int iswpunct ( short _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$3.iswpunct$MH, "iswpunct");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswspace$MH() {
        return RuntimeHelper.requireNonNull(constants$4.iswspace$MH,"iswspace");
    }
    public static int iswspace ( short _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.iswspace$MH, "iswspace");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswupper$MH() {
        return RuntimeHelper.requireNonNull(constants$4.iswupper$MH,"iswupper");
    }
    public static int iswupper ( short _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.iswupper$MH, "iswupper");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswxdigit$MH() {
        return RuntimeHelper.requireNonNull(constants$4.iswxdigit$MH,"iswxdigit");
    }
    public static int iswxdigit ( short _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.iswxdigit$MH, "iswxdigit");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __iswcsymf$MH() {
        return RuntimeHelper.requireNonNull(constants$4.__iswcsymf$MH,"__iswcsymf");
    }
    public static int __iswcsymf ( short _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.__iswcsymf$MH, "__iswcsymf");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __iswcsym$MH() {
        return RuntimeHelper.requireNonNull(constants$4.__iswcsym$MH,"__iswcsym");
    }
    public static int __iswcsym ( short _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4.__iswcsym$MH, "__iswcsym");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswalnum_l$MH() {
        return RuntimeHelper.requireNonNull(constants$4._iswalnum_l$MH,"_iswalnum_l");
    }
    public static int _iswalnum_l ( short _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$4._iswalnum_l$MH, "_iswalnum_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswalpha_l$MH() {
        return RuntimeHelper.requireNonNull(constants$5._iswalpha_l$MH,"_iswalpha_l");
    }
    public static int _iswalpha_l ( short _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5._iswalpha_l$MH, "_iswalpha_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswblank_l$MH() {
        return RuntimeHelper.requireNonNull(constants$5._iswblank_l$MH,"_iswblank_l");
    }
    public static int _iswblank_l ( short _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5._iswblank_l$MH, "_iswblank_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswcntrl_l$MH() {
        return RuntimeHelper.requireNonNull(constants$5._iswcntrl_l$MH,"_iswcntrl_l");
    }
    public static int _iswcntrl_l ( short _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5._iswcntrl_l$MH, "_iswcntrl_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswdigit_l$MH() {
        return RuntimeHelper.requireNonNull(constants$5._iswdigit_l$MH,"_iswdigit_l");
    }
    public static int _iswdigit_l ( short _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5._iswdigit_l$MH, "_iswdigit_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswgraph_l$MH() {
        return RuntimeHelper.requireNonNull(constants$5._iswgraph_l$MH,"_iswgraph_l");
    }
    public static int _iswgraph_l ( short _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5._iswgraph_l$MH, "_iswgraph_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswlower_l$MH() {
        return RuntimeHelper.requireNonNull(constants$5._iswlower_l$MH,"_iswlower_l");
    }
    public static int _iswlower_l ( short _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$5._iswlower_l$MH, "_iswlower_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswprint_l$MH() {
        return RuntimeHelper.requireNonNull(constants$6._iswprint_l$MH,"_iswprint_l");
    }
    public static int _iswprint_l ( short _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6._iswprint_l$MH, "_iswprint_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswpunct_l$MH() {
        return RuntimeHelper.requireNonNull(constants$6._iswpunct_l$MH,"_iswpunct_l");
    }
    public static int _iswpunct_l ( short _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6._iswpunct_l$MH, "_iswpunct_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswspace_l$MH() {
        return RuntimeHelper.requireNonNull(constants$6._iswspace_l$MH,"_iswspace_l");
    }
    public static int _iswspace_l ( short _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6._iswspace_l$MH, "_iswspace_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswupper_l$MH() {
        return RuntimeHelper.requireNonNull(constants$6._iswupper_l$MH,"_iswupper_l");
    }
    public static int _iswupper_l ( short _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6._iswupper_l$MH, "_iswupper_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswxdigit_l$MH() {
        return RuntimeHelper.requireNonNull(constants$6._iswxdigit_l$MH,"_iswxdigit_l");
    }
    public static int _iswxdigit_l ( short _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6._iswxdigit_l$MH, "_iswxdigit_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswcsymf_l$MH() {
        return RuntimeHelper.requireNonNull(constants$6._iswcsymf_l$MH,"_iswcsymf_l");
    }
    public static int _iswcsymf_l ( short _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$6._iswcsymf_l$MH, "_iswcsymf_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswcsym_l$MH() {
        return RuntimeHelper.requireNonNull(constants$7._iswcsym_l$MH,"_iswcsym_l");
    }
    public static int _iswcsym_l ( short _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7._iswcsym_l$MH, "_iswcsym_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle towupper$MH() {
        return RuntimeHelper.requireNonNull(constants$7.towupper$MH,"towupper");
    }
    public static short towupper ( short _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.towupper$MH, "towupper");
        try {
            return (short)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle towlower$MH() {
        return RuntimeHelper.requireNonNull(constants$7.towlower$MH,"towlower");
    }
    public static short towlower ( short _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.towlower$MH, "towlower");
        try {
            return (short)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iswctype$MH() {
        return RuntimeHelper.requireNonNull(constants$7.iswctype$MH,"iswctype");
    }
    public static int iswctype ( short _C,  short _Type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7.iswctype$MH, "iswctype");
        try {
            return (int)mh$.invokeExact(_C, _Type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _towupper_l$MH() {
        return RuntimeHelper.requireNonNull(constants$7._towupper_l$MH,"_towupper_l");
    }
    public static short _towupper_l ( short _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7._towupper_l$MH, "_towupper_l");
        try {
            return (short)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _towlower_l$MH() {
        return RuntimeHelper.requireNonNull(constants$7._towlower_l$MH,"_towlower_l");
    }
    public static short _towlower_l ( short _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$7._towlower_l$MH, "_towlower_l");
        try {
            return (short)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iswctype_l$MH() {
        return RuntimeHelper.requireNonNull(constants$8._iswctype_l$MH,"_iswctype_l");
    }
    public static int _iswctype_l ( short _C,  short _Type,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8._iswctype_l$MH, "_iswctype_l");
        try {
            return (int)mh$.invokeExact(_C, _Type, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isleadbyte$MH() {
        return RuntimeHelper.requireNonNull(constants$8.isleadbyte$MH,"isleadbyte");
    }
    public static int isleadbyte ( int _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.isleadbyte$MH, "isleadbyte");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isleadbyte_l$MH() {
        return RuntimeHelper.requireNonNull(constants$8._isleadbyte_l$MH,"_isleadbyte_l");
    }
    public static int _isleadbyte_l ( int _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8._isleadbyte_l$MH, "_isleadbyte_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle is_wctype$MH() {
        return RuntimeHelper.requireNonNull(constants$8.is_wctype$MH,"is_wctype");
    }
    public static int is_wctype ( short _C,  short _Type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8.is_wctype$MH, "is_wctype");
        try {
            return (int)mh$.invokeExact(_C, _Type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isctype$MH() {
        return RuntimeHelper.requireNonNull(constants$8._isctype$MH,"_isctype");
    }
    public static int _isctype ( int _C,  int _Type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8._isctype$MH, "_isctype");
        try {
            return (int)mh$.invokeExact(_C, _Type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isctype_l$MH() {
        return RuntimeHelper.requireNonNull(constants$8._isctype_l$MH,"_isctype_l");
    }
    public static int _isctype_l ( int _C,  int _Type,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$8._isctype_l$MH, "_isctype_l");
        try {
            return (int)mh$.invokeExact(_C, _Type, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isalpha$MH() {
        return RuntimeHelper.requireNonNull(constants$9.isalpha$MH,"isalpha");
    }
    public static int isalpha ( int _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.isalpha$MH, "isalpha");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isalpha_l$MH() {
        return RuntimeHelper.requireNonNull(constants$9._isalpha_l$MH,"_isalpha_l");
    }
    public static int _isalpha_l ( int _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9._isalpha_l$MH, "_isalpha_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isupper$MH() {
        return RuntimeHelper.requireNonNull(constants$9.isupper$MH,"isupper");
    }
    public static int isupper ( int _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.isupper$MH, "isupper");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isupper_l$MH() {
        return RuntimeHelper.requireNonNull(constants$9._isupper_l$MH,"_isupper_l");
    }
    public static int _isupper_l ( int _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9._isupper_l$MH, "_isupper_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle islower$MH() {
        return RuntimeHelper.requireNonNull(constants$9.islower$MH,"islower");
    }
    public static int islower ( int _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9.islower$MH, "islower");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _islower_l$MH() {
        return RuntimeHelper.requireNonNull(constants$9._islower_l$MH,"_islower_l");
    }
    public static int _islower_l ( int _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$9._islower_l$MH, "_islower_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isdigit$MH() {
        return RuntimeHelper.requireNonNull(constants$10.isdigit$MH,"isdigit");
    }
    public static int isdigit ( int _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.isdigit$MH, "isdigit");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isdigit_l$MH() {
        return RuntimeHelper.requireNonNull(constants$10._isdigit_l$MH,"_isdigit_l");
    }
    public static int _isdigit_l ( int _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10._isdigit_l$MH, "_isdigit_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isxdigit$MH() {
        return RuntimeHelper.requireNonNull(constants$10.isxdigit$MH,"isxdigit");
    }
    public static int isxdigit ( int _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.isxdigit$MH, "isxdigit");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isxdigit_l$MH() {
        return RuntimeHelper.requireNonNull(constants$10._isxdigit_l$MH,"_isxdigit_l");
    }
    public static int _isxdigit_l ( int _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10._isxdigit_l$MH, "_isxdigit_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isspace$MH() {
        return RuntimeHelper.requireNonNull(constants$10.isspace$MH,"isspace");
    }
    public static int isspace ( int _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10.isspace$MH, "isspace");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isspace_l$MH() {
        return RuntimeHelper.requireNonNull(constants$10._isspace_l$MH,"_isspace_l");
    }
    public static int _isspace_l ( int _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$10._isspace_l$MH, "_isspace_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ispunct$MH() {
        return RuntimeHelper.requireNonNull(constants$11.ispunct$MH,"ispunct");
    }
    public static int ispunct ( int _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.ispunct$MH, "ispunct");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ispunct_l$MH() {
        return RuntimeHelper.requireNonNull(constants$11._ispunct_l$MH,"_ispunct_l");
    }
    public static int _ispunct_l ( int _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11._ispunct_l$MH, "_ispunct_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isblank$MH() {
        return RuntimeHelper.requireNonNull(constants$11.isblank$MH,"isblank");
    }
    public static int isblank ( int _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.isblank$MH, "isblank");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isblank_l$MH() {
        return RuntimeHelper.requireNonNull(constants$11._isblank_l$MH,"_isblank_l");
    }
    public static int _isblank_l ( int _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11._isblank_l$MH, "_isblank_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isalnum$MH() {
        return RuntimeHelper.requireNonNull(constants$11.isalnum$MH,"isalnum");
    }
    public static int isalnum ( int _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11.isalnum$MH, "isalnum");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isalnum_l$MH() {
        return RuntimeHelper.requireNonNull(constants$11._isalnum_l$MH,"_isalnum_l");
    }
    public static int _isalnum_l ( int _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$11._isalnum_l$MH, "_isalnum_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isprint$MH() {
        return RuntimeHelper.requireNonNull(constants$12.isprint$MH,"isprint");
    }
    public static int isprint ( int _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.isprint$MH, "isprint");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isprint_l$MH() {
        return RuntimeHelper.requireNonNull(constants$12._isprint_l$MH,"_isprint_l");
    }
    public static int _isprint_l ( int _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12._isprint_l$MH, "_isprint_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isgraph$MH() {
        return RuntimeHelper.requireNonNull(constants$12.isgraph$MH,"isgraph");
    }
    public static int isgraph ( int _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.isgraph$MH, "isgraph");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _isgraph_l$MH() {
        return RuntimeHelper.requireNonNull(constants$12._isgraph_l$MH,"_isgraph_l");
    }
    public static int _isgraph_l ( int _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12._isgraph_l$MH, "_isgraph_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iscntrl$MH() {
        return RuntimeHelper.requireNonNull(constants$12.iscntrl$MH,"iscntrl");
    }
    public static int iscntrl ( int _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12.iscntrl$MH, "iscntrl");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _iscntrl_l$MH() {
        return RuntimeHelper.requireNonNull(constants$12._iscntrl_l$MH,"_iscntrl_l");
    }
    public static int _iscntrl_l ( int _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$12._iscntrl_l$MH, "_iscntrl_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle toupper$MH() {
        return RuntimeHelper.requireNonNull(constants$13.toupper$MH,"toupper");
    }
    public static int toupper ( int _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.toupper$MH, "toupper");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tolower$MH() {
        return RuntimeHelper.requireNonNull(constants$13.tolower$MH,"tolower");
    }
    public static int tolower ( int _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13.tolower$MH, "tolower");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _tolower$MH() {
        return RuntimeHelper.requireNonNull(constants$13._tolower$MH,"_tolower");
    }
    public static int _tolower ( int _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13._tolower$MH, "_tolower");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _tolower_l$MH() {
        return RuntimeHelper.requireNonNull(constants$13._tolower_l$MH,"_tolower_l");
    }
    public static int _tolower_l ( int _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13._tolower_l$MH, "_tolower_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _toupper$MH() {
        return RuntimeHelper.requireNonNull(constants$13._toupper$MH,"_toupper");
    }
    public static int _toupper ( int _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13._toupper$MH, "_toupper");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _toupper_l$MH() {
        return RuntimeHelper.requireNonNull(constants$13._toupper_l$MH,"_toupper_l");
    }
    public static int _toupper_l ( int _C,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$13._toupper_l$MH, "_toupper_l");
        try {
            return (int)mh$.invokeExact(_C, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __isascii$MH() {
        return RuntimeHelper.requireNonNull(constants$14.__isascii$MH,"__isascii");
    }
    public static int __isascii ( int _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.__isascii$MH, "__isascii");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __toascii$MH() {
        return RuntimeHelper.requireNonNull(constants$14.__toascii$MH,"__toascii");
    }
    public static int __toascii ( int _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.__toascii$MH, "__toascii");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __iscsymf$MH() {
        return RuntimeHelper.requireNonNull(constants$14.__iscsymf$MH,"__iscsymf");
    }
    public static int __iscsymf ( int _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.__iscsymf$MH, "__iscsymf");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __iscsym$MH() {
        return RuntimeHelper.requireNonNull(constants$14.__iscsym$MH,"__iscsym");
    }
    public static int __iscsym ( int _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.__iscsym$MH, "__iscsym");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __acrt_locale_get_ctype_array_value$MH() {
        return RuntimeHelper.requireNonNull(constants$14.__acrt_locale_get_ctype_array_value$MH,"__acrt_locale_get_ctype_array_value");
    }
    public static int __acrt_locale_get_ctype_array_value ( Addressable _Locale_pctype_array,  int _Char_value,  int _Mask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.__acrt_locale_get_ctype_array_value$MH, "__acrt_locale_get_ctype_array_value");
        try {
            return (int)mh$.invokeExact(_Locale_pctype_array, _Char_value, _Mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ___mb_cur_max_func$MH() {
        return RuntimeHelper.requireNonNull(constants$14.___mb_cur_max_func$MH,"___mb_cur_max_func");
    }
    public static int ___mb_cur_max_func () {
        var mh$ = RuntimeHelper.requireNonNull(constants$14.___mb_cur_max_func$MH, "___mb_cur_max_func");
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ___mb_cur_max_l_func$MH() {
        return RuntimeHelper.requireNonNull(constants$15.___mb_cur_max_l_func$MH,"___mb_cur_max_l_func");
    }
    public static int ___mb_cur_max_l_func ( Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.___mb_cur_max_l_func$MH, "___mb_cur_max_l_func");
        try {
            return (int)mh$.invokeExact(_Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ascii_tolower$MH() {
        return RuntimeHelper.requireNonNull(constants$15.__ascii_tolower$MH,"__ascii_tolower");
    }
    public static int __ascii_tolower ( int _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.__ascii_tolower$MH, "__ascii_tolower");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ascii_toupper$MH() {
        return RuntimeHelper.requireNonNull(constants$15.__ascii_toupper$MH,"__ascii_toupper");
    }
    public static int __ascii_toupper ( int _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.__ascii_toupper$MH, "__ascii_toupper");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ascii_iswalpha$MH() {
        return RuntimeHelper.requireNonNull(constants$15.__ascii_iswalpha$MH,"__ascii_iswalpha");
    }
    public static int __ascii_iswalpha ( int _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.__ascii_iswalpha$MH, "__ascii_iswalpha");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ascii_iswdigit$MH() {
        return RuntimeHelper.requireNonNull(constants$15.__ascii_iswdigit$MH,"__ascii_iswdigit");
    }
    public static int __ascii_iswdigit ( int _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.__ascii_iswdigit$MH, "__ascii_iswdigit");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ascii_towlower$MH() {
        return RuntimeHelper.requireNonNull(constants$15.__ascii_towlower$MH,"__ascii_towlower");
    }
    public static int __ascii_towlower ( int _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$15.__ascii_towlower$MH, "__ascii_towlower");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ascii_towupper$MH() {
        return RuntimeHelper.requireNonNull(constants$16.__ascii_towupper$MH,"__ascii_towupper");
    }
    public static int __ascii_towupper ( int _C) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.__ascii_towupper$MH, "__ascii_towupper");
        try {
            return (int)mh$.invokeExact(_C);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __acrt_get_locale_data_prefix$MH() {
        return RuntimeHelper.requireNonNull(constants$16.__acrt_get_locale_data_prefix$MH,"__acrt_get_locale_data_prefix");
    }
    public static MemoryAddress __acrt_get_locale_data_prefix ( Addressable _LocalePointers) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.__acrt_get_locale_data_prefix$MH, "__acrt_get_locale_data_prefix");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(_LocalePointers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _chvalidchk_l$MH() {
        return RuntimeHelper.requireNonNull(constants$16._chvalidchk_l$MH,"_chvalidchk_l");
    }
    public static int _chvalidchk_l ( int _C,  int _Mask,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16._chvalidchk_l$MH, "_chvalidchk_l");
        try {
            return (int)mh$.invokeExact(_C, _Mask, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _ischartype_l$MH() {
        return RuntimeHelper.requireNonNull(constants$16._ischartype_l$MH,"_ischartype_l");
    }
    public static int _ischartype_l ( int _C,  int _Mask,  Addressable _Locale) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16._ischartype_l$MH, "_ischartype_l");
        try {
            return (int)mh$.invokeExact(_C, _Mask, _Locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PINT8 = Constants$root.C_POINTER$LAYOUT;
    public static OfShort INT16 = Constants$root.C_SHORT$LAYOUT;
    public static OfAddress PINT16 = Constants$root.C_POINTER$LAYOUT;
    public static OfInt INT32 = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PINT32 = Constants$root.C_POINTER$LAYOUT;
    public static OfLong INT64 = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress PINT64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUINT8 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUINT16 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUINT32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUINT64 = Constants$root.C_POINTER$LAYOUT;
    public static OfInt LONG32 = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PLONG32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PULONG32 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDWORD32 = Constants$root.C_POINTER$LAYOUT;
    public static OfLong INT_PTR = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress PINT_PTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUINT_PTR = Constants$root.C_POINTER$LAYOUT;
    public static OfLong LONG_PTR = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress PLONG_PTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PULONG_PTR = Constants$root.C_POINTER$LAYOUT;
    public static OfLong SHANDLE_PTR = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress PUHALF_PTR = Constants$root.C_POINTER$LAYOUT;
    public static OfInt HALF_PTR = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PHALF_PTR = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle HandleToULong$MH() {
        return RuntimeHelper.requireNonNull(constants$16.HandleToULong$MH,"HandleToULong");
    }
    public static int HandleToULong ( Addressable h) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.HandleToULong$MH, "HandleToULong");
        try {
            return (int)mh$.invokeExact(h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle HandleToLong$MH() {
        return RuntimeHelper.requireNonNull(constants$16.HandleToLong$MH,"HandleToLong");
    }
    public static int HandleToLong ( Addressable h) {
        var mh$ = RuntimeHelper.requireNonNull(constants$16.HandleToLong$MH, "HandleToLong");
        try {
            return (int)mh$.invokeExact(h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ULongToHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$17.ULongToHandle$MH,"ULongToHandle");
    }
    public static MemoryAddress ULongToHandle ( int h) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.ULongToHandle$MH, "ULongToHandle");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LongToHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$17.LongToHandle$MH,"LongToHandle");
    }
    public static MemoryAddress LongToHandle ( int h) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.LongToHandle$MH, "LongToHandle");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PtrToUlong$MH() {
        return RuntimeHelper.requireNonNull(constants$17.PtrToUlong$MH,"PtrToUlong");
    }
    public static int PtrToUlong ( Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.PtrToUlong$MH, "PtrToUlong");
        try {
            return (int)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PtrToUint$MH() {
        return RuntimeHelper.requireNonNull(constants$17.PtrToUint$MH,"PtrToUint");
    }
    public static int PtrToUint ( Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.PtrToUint$MH, "PtrToUint");
        try {
            return (int)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PtrToUshort$MH() {
        return RuntimeHelper.requireNonNull(constants$17.PtrToUshort$MH,"PtrToUshort");
    }
    public static short PtrToUshort ( Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.PtrToUshort$MH, "PtrToUshort");
        try {
            return (short)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PtrToLong$MH() {
        return RuntimeHelper.requireNonNull(constants$17.PtrToLong$MH,"PtrToLong");
    }
    public static int PtrToLong ( Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$17.PtrToLong$MH, "PtrToLong");
        try {
            return (int)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PtrToInt$MH() {
        return RuntimeHelper.requireNonNull(constants$18.PtrToInt$MH,"PtrToInt");
    }
    public static int PtrToInt ( Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.PtrToInt$MH, "PtrToInt");
        try {
            return (int)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PtrToShort$MH() {
        return RuntimeHelper.requireNonNull(constants$18.PtrToShort$MH,"PtrToShort");
    }
    public static short PtrToShort ( Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.PtrToShort$MH, "PtrToShort");
        try {
            return (short)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle IntToPtr$MH() {
        return RuntimeHelper.requireNonNull(constants$18.IntToPtr$MH,"IntToPtr");
    }
    public static MemoryAddress IntToPtr ( int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.IntToPtr$MH, "IntToPtr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle UIntToPtr$MH() {
        return RuntimeHelper.requireNonNull(constants$18.UIntToPtr$MH,"UIntToPtr");
    }
    public static MemoryAddress UIntToPtr ( int ui) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.UIntToPtr$MH, "UIntToPtr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ui);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle LongToPtr$MH() {
        return RuntimeHelper.requireNonNull(constants$18.LongToPtr$MH,"LongToPtr");
    }
    public static MemoryAddress LongToPtr ( int l) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.LongToPtr$MH, "LongToPtr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ULongToPtr$MH() {
        return RuntimeHelper.requireNonNull(constants$18.ULongToPtr$MH,"ULongToPtr");
    }
    public static MemoryAddress ULongToPtr ( int ul) {
        var mh$ = RuntimeHelper.requireNonNull(constants$18.ULongToPtr$MH, "ULongToPtr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(ul);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Ptr32ToPtr$MH() {
        return RuntimeHelper.requireNonNull(constants$19.Ptr32ToPtr$MH,"Ptr32ToPtr");
    }
    public static MemoryAddress Ptr32ToPtr ( Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.Ptr32ToPtr$MH, "Ptr32ToPtr");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle Handle32ToHandle$MH() {
        return RuntimeHelper.requireNonNull(constants$19.Handle32ToHandle$MH,"Handle32ToHandle");
    }
    public static MemoryAddress Handle32ToHandle ( Addressable h) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.Handle32ToHandle$MH, "Handle32ToHandle");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(h);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle PtrToPtr32$MH() {
        return RuntimeHelper.requireNonNull(constants$19.PtrToPtr32$MH,"PtrToPtr32");
    }
    public static MemoryAddress PtrToPtr32 ( Addressable p) {
        var mh$ = RuntimeHelper.requireNonNull(constants$19.PtrToPtr32$MH, "PtrToPtr32");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress PSIZE_T = Constants$root.C_POINTER$LAYOUT;
    public static OfLong SSIZE_T = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress PSSIZE_T = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDWORD_PTR = Constants$root.C_POINTER$LAYOUT;
    public static OfLong LONG64 = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress PLONG64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PULONG64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PDWORD64 = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PKAFFINITY = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVOID = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PVOID64 = Constants$root.C_POINTER$LAYOUT;
    public static OfByte CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt LONG = Constants$root.C_LONG$LAYOUT;
    public static OfInt INT$1 = Constants$root.C_LONG$LAYOUT;
    public static OfAddress PWCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress NWPSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZPWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCZPWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPUWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZPCWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCZPCWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCUWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PZZWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCZZWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUZZWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUZZWSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PNZWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCNZWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUNZWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUNZWCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCWCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCWCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCUWCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUWCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUCSCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUCSCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUCSSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUUCSSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUCSSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUUCSSTR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PUUCSCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCUUCSCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCHAR = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress LPCH = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress PCH = Constants$root.C_POINTER$LAYOUT;
}


