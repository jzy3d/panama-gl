// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public interface PFLS_CALLBACK_FUNCTION {

    void apply(jdk.incubator.foreign.MemoryAddress x0);
    static NativeSymbol allocate(PFLS_CALLBACK_FUNCTION fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(PFLS_CALLBACK_FUNCTION.class, fi, constants$120.PFLS_CALLBACK_FUNCTION$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
    }
    static PFLS_CALLBACK_FUNCTION ofAddress(MemoryAddress addr, ResourceScope scope) {
        NativeSymbol symbol = NativeSymbol.ofAddress("PFLS_CALLBACK_FUNCTION::" + Long.toHexString(addr.toRawLongValue()), addr, scope);
return (jdk.incubator.foreign.MemoryAddress x0) -> {
            try {
                constants$121.PFLS_CALLBACK_FUNCTION$MH.invokeExact(symbol, (jdk.incubator.foreign.Addressable)x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


