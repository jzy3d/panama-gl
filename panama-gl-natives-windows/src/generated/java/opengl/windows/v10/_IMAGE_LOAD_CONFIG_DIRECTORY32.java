// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _IMAGE_LOAD_CONFIG_DIRECTORY32 {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("Size"),
        Constants$root.C_LONG$LAYOUT.withName("TimeDateStamp"),
        Constants$root.C_SHORT$LAYOUT.withName("MajorVersion"),
        Constants$root.C_SHORT$LAYOUT.withName("MinorVersion"),
        Constants$root.C_LONG$LAYOUT.withName("GlobalFlagsClear"),
        Constants$root.C_LONG$LAYOUT.withName("GlobalFlagsSet"),
        Constants$root.C_LONG$LAYOUT.withName("CriticalSectionDefaultTimeout"),
        Constants$root.C_LONG$LAYOUT.withName("DeCommitFreeBlockThreshold"),
        Constants$root.C_LONG$LAYOUT.withName("DeCommitTotalFreeThreshold"),
        Constants$root.C_LONG$LAYOUT.withName("LockPrefixTable"),
        Constants$root.C_LONG$LAYOUT.withName("MaximumAllocationSize"),
        Constants$root.C_LONG$LAYOUT.withName("VirtualMemoryThreshold"),
        Constants$root.C_LONG$LAYOUT.withName("ProcessHeapFlags"),
        Constants$root.C_LONG$LAYOUT.withName("ProcessAffinityMask"),
        Constants$root.C_SHORT$LAYOUT.withName("CSDVersion"),
        Constants$root.C_SHORT$LAYOUT.withName("DependentLoadFlags"),
        Constants$root.C_LONG$LAYOUT.withName("EditList"),
        Constants$root.C_LONG$LAYOUT.withName("SecurityCookie"),
        Constants$root.C_LONG$LAYOUT.withName("SEHandlerTable"),
        Constants$root.C_LONG$LAYOUT.withName("SEHandlerCount"),
        Constants$root.C_LONG$LAYOUT.withName("GuardCFCheckFunctionPointer"),
        Constants$root.C_LONG$LAYOUT.withName("GuardCFDispatchFunctionPointer"),
        Constants$root.C_LONG$LAYOUT.withName("GuardCFFunctionTable"),
        Constants$root.C_LONG$LAYOUT.withName("GuardCFFunctionCount"),
        Constants$root.C_LONG$LAYOUT.withName("GuardFlags"),
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("Flags"),
            Constants$root.C_SHORT$LAYOUT.withName("Catalog"),
            Constants$root.C_LONG$LAYOUT.withName("CatalogOffset"),
            Constants$root.C_LONG$LAYOUT.withName("Reserved")
        ).withName("CodeIntegrity"),
        Constants$root.C_LONG$LAYOUT.withName("GuardAddressTakenIatEntryTable"),
        Constants$root.C_LONG$LAYOUT.withName("GuardAddressTakenIatEntryCount"),
        Constants$root.C_LONG$LAYOUT.withName("GuardLongJumpTargetTable"),
        Constants$root.C_LONG$LAYOUT.withName("GuardLongJumpTargetCount"),
        Constants$root.C_LONG$LAYOUT.withName("DynamicValueRelocTable"),
        Constants$root.C_LONG$LAYOUT.withName("CHPEMetadataPointer"),
        Constants$root.C_LONG$LAYOUT.withName("GuardRFFailureRoutine"),
        Constants$root.C_LONG$LAYOUT.withName("GuardRFFailureRoutineFunctionPointer"),
        Constants$root.C_LONG$LAYOUT.withName("DynamicValueRelocTableOffset"),
        Constants$root.C_SHORT$LAYOUT.withName("DynamicValueRelocTableSection"),
        Constants$root.C_SHORT$LAYOUT.withName("Reserved2"),
        Constants$root.C_LONG$LAYOUT.withName("GuardRFVerifyStackPointerFunctionPointer"),
        Constants$root.C_LONG$LAYOUT.withName("HotPatchTableOffset"),
        Constants$root.C_LONG$LAYOUT.withName("Reserved3"),
        Constants$root.C_LONG$LAYOUT.withName("EnclaveConfigurationPointer"),
        Constants$root.C_LONG$LAYOUT.withName("VolatileMetadataPointer"),
        Constants$root.C_LONG$LAYOUT.withName("GuardEHContinuationTable"),
        Constants$root.C_LONG$LAYOUT.withName("GuardEHContinuationCount")
    ).withName("_IMAGE_LOAD_CONFIG_DIRECTORY32");
    public static MemoryLayout $LAYOUT() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.$struct$LAYOUT;
    }
    static final VarHandle Size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Size"));
    public static VarHandle Size$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.Size$VH;
    }
    public static int Size$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.Size$VH.get(seg);
    }
    public static void Size$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.Size$VH.set(seg, x);
    }
    public static int Size$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.Size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Size$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.Size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle TimeDateStamp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("TimeDateStamp"));
    public static VarHandle TimeDateStamp$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.TimeDateStamp$VH;
    }
    public static int TimeDateStamp$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.TimeDateStamp$VH.get(seg);
    }
    public static void TimeDateStamp$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.TimeDateStamp$VH.set(seg, x);
    }
    public static int TimeDateStamp$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.TimeDateStamp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void TimeDateStamp$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.TimeDateStamp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MajorVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MajorVersion"));
    public static VarHandle MajorVersion$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.MajorVersion$VH;
    }
    public static short MajorVersion$get(MemorySegment seg) {
        return (short)_IMAGE_LOAD_CONFIG_DIRECTORY32.MajorVersion$VH.get(seg);
    }
    public static void MajorVersion$set( MemorySegment seg, short x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.MajorVersion$VH.set(seg, x);
    }
    public static short MajorVersion$get(MemorySegment seg, long index) {
        return (short)_IMAGE_LOAD_CONFIG_DIRECTORY32.MajorVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MajorVersion$set(MemorySegment seg, long index, short x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.MajorVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MinorVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MinorVersion"));
    public static VarHandle MinorVersion$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.MinorVersion$VH;
    }
    public static short MinorVersion$get(MemorySegment seg) {
        return (short)_IMAGE_LOAD_CONFIG_DIRECTORY32.MinorVersion$VH.get(seg);
    }
    public static void MinorVersion$set( MemorySegment seg, short x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.MinorVersion$VH.set(seg, x);
    }
    public static short MinorVersion$get(MemorySegment seg, long index) {
        return (short)_IMAGE_LOAD_CONFIG_DIRECTORY32.MinorVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MinorVersion$set(MemorySegment seg, long index, short x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.MinorVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle GlobalFlagsClear$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GlobalFlagsClear"));
    public static VarHandle GlobalFlagsClear$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.GlobalFlagsClear$VH;
    }
    public static int GlobalFlagsClear$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GlobalFlagsClear$VH.get(seg);
    }
    public static void GlobalFlagsClear$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GlobalFlagsClear$VH.set(seg, x);
    }
    public static int GlobalFlagsClear$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GlobalFlagsClear$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GlobalFlagsClear$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GlobalFlagsClear$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle GlobalFlagsSet$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GlobalFlagsSet"));
    public static VarHandle GlobalFlagsSet$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.GlobalFlagsSet$VH;
    }
    public static int GlobalFlagsSet$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GlobalFlagsSet$VH.get(seg);
    }
    public static void GlobalFlagsSet$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GlobalFlagsSet$VH.set(seg, x);
    }
    public static int GlobalFlagsSet$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GlobalFlagsSet$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GlobalFlagsSet$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GlobalFlagsSet$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CriticalSectionDefaultTimeout$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CriticalSectionDefaultTimeout"));
    public static VarHandle CriticalSectionDefaultTimeout$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.CriticalSectionDefaultTimeout$VH;
    }
    public static int CriticalSectionDefaultTimeout$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.CriticalSectionDefaultTimeout$VH.get(seg);
    }
    public static void CriticalSectionDefaultTimeout$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.CriticalSectionDefaultTimeout$VH.set(seg, x);
    }
    public static int CriticalSectionDefaultTimeout$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.CriticalSectionDefaultTimeout$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CriticalSectionDefaultTimeout$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.CriticalSectionDefaultTimeout$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DeCommitFreeBlockThreshold$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeCommitFreeBlockThreshold"));
    public static VarHandle DeCommitFreeBlockThreshold$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.DeCommitFreeBlockThreshold$VH;
    }
    public static int DeCommitFreeBlockThreshold$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.DeCommitFreeBlockThreshold$VH.get(seg);
    }
    public static void DeCommitFreeBlockThreshold$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.DeCommitFreeBlockThreshold$VH.set(seg, x);
    }
    public static int DeCommitFreeBlockThreshold$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.DeCommitFreeBlockThreshold$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeCommitFreeBlockThreshold$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.DeCommitFreeBlockThreshold$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DeCommitTotalFreeThreshold$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DeCommitTotalFreeThreshold"));
    public static VarHandle DeCommitTotalFreeThreshold$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.DeCommitTotalFreeThreshold$VH;
    }
    public static int DeCommitTotalFreeThreshold$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.DeCommitTotalFreeThreshold$VH.get(seg);
    }
    public static void DeCommitTotalFreeThreshold$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.DeCommitTotalFreeThreshold$VH.set(seg, x);
    }
    public static int DeCommitTotalFreeThreshold$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.DeCommitTotalFreeThreshold$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DeCommitTotalFreeThreshold$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.DeCommitTotalFreeThreshold$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LockPrefixTable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LockPrefixTable"));
    public static VarHandle LockPrefixTable$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.LockPrefixTable$VH;
    }
    public static int LockPrefixTable$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.LockPrefixTable$VH.get(seg);
    }
    public static void LockPrefixTable$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.LockPrefixTable$VH.set(seg, x);
    }
    public static int LockPrefixTable$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.LockPrefixTable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LockPrefixTable$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.LockPrefixTable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle MaximumAllocationSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("MaximumAllocationSize"));
    public static VarHandle MaximumAllocationSize$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.MaximumAllocationSize$VH;
    }
    public static int MaximumAllocationSize$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.MaximumAllocationSize$VH.get(seg);
    }
    public static void MaximumAllocationSize$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.MaximumAllocationSize$VH.set(seg, x);
    }
    public static int MaximumAllocationSize$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.MaximumAllocationSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void MaximumAllocationSize$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.MaximumAllocationSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle VirtualMemoryThreshold$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("VirtualMemoryThreshold"));
    public static VarHandle VirtualMemoryThreshold$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.VirtualMemoryThreshold$VH;
    }
    public static int VirtualMemoryThreshold$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.VirtualMemoryThreshold$VH.get(seg);
    }
    public static void VirtualMemoryThreshold$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.VirtualMemoryThreshold$VH.set(seg, x);
    }
    public static int VirtualMemoryThreshold$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.VirtualMemoryThreshold$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void VirtualMemoryThreshold$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.VirtualMemoryThreshold$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ProcessHeapFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ProcessHeapFlags"));
    public static VarHandle ProcessHeapFlags$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.ProcessHeapFlags$VH;
    }
    public static int ProcessHeapFlags$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.ProcessHeapFlags$VH.get(seg);
    }
    public static void ProcessHeapFlags$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.ProcessHeapFlags$VH.set(seg, x);
    }
    public static int ProcessHeapFlags$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.ProcessHeapFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ProcessHeapFlags$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.ProcessHeapFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ProcessAffinityMask$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ProcessAffinityMask"));
    public static VarHandle ProcessAffinityMask$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.ProcessAffinityMask$VH;
    }
    public static int ProcessAffinityMask$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.ProcessAffinityMask$VH.get(seg);
    }
    public static void ProcessAffinityMask$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.ProcessAffinityMask$VH.set(seg, x);
    }
    public static int ProcessAffinityMask$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.ProcessAffinityMask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ProcessAffinityMask$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.ProcessAffinityMask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CSDVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CSDVersion"));
    public static VarHandle CSDVersion$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.CSDVersion$VH;
    }
    public static short CSDVersion$get(MemorySegment seg) {
        return (short)_IMAGE_LOAD_CONFIG_DIRECTORY32.CSDVersion$VH.get(seg);
    }
    public static void CSDVersion$set( MemorySegment seg, short x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.CSDVersion$VH.set(seg, x);
    }
    public static short CSDVersion$get(MemorySegment seg, long index) {
        return (short)_IMAGE_LOAD_CONFIG_DIRECTORY32.CSDVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CSDVersion$set(MemorySegment seg, long index, short x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.CSDVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DependentLoadFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DependentLoadFlags"));
    public static VarHandle DependentLoadFlags$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.DependentLoadFlags$VH;
    }
    public static short DependentLoadFlags$get(MemorySegment seg) {
        return (short)_IMAGE_LOAD_CONFIG_DIRECTORY32.DependentLoadFlags$VH.get(seg);
    }
    public static void DependentLoadFlags$set( MemorySegment seg, short x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.DependentLoadFlags$VH.set(seg, x);
    }
    public static short DependentLoadFlags$get(MemorySegment seg, long index) {
        return (short)_IMAGE_LOAD_CONFIG_DIRECTORY32.DependentLoadFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DependentLoadFlags$set(MemorySegment seg, long index, short x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.DependentLoadFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle EditList$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EditList"));
    public static VarHandle EditList$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.EditList$VH;
    }
    public static int EditList$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.EditList$VH.get(seg);
    }
    public static void EditList$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.EditList$VH.set(seg, x);
    }
    public static int EditList$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.EditList$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EditList$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.EditList$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SecurityCookie$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SecurityCookie"));
    public static VarHandle SecurityCookie$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.SecurityCookie$VH;
    }
    public static int SecurityCookie$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.SecurityCookie$VH.get(seg);
    }
    public static void SecurityCookie$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.SecurityCookie$VH.set(seg, x);
    }
    public static int SecurityCookie$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.SecurityCookie$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SecurityCookie$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.SecurityCookie$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SEHandlerTable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SEHandlerTable"));
    public static VarHandle SEHandlerTable$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.SEHandlerTable$VH;
    }
    public static int SEHandlerTable$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.SEHandlerTable$VH.get(seg);
    }
    public static void SEHandlerTable$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.SEHandlerTable$VH.set(seg, x);
    }
    public static int SEHandlerTable$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.SEHandlerTable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SEHandlerTable$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.SEHandlerTable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle SEHandlerCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("SEHandlerCount"));
    public static VarHandle SEHandlerCount$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.SEHandlerCount$VH;
    }
    public static int SEHandlerCount$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.SEHandlerCount$VH.get(seg);
    }
    public static void SEHandlerCount$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.SEHandlerCount$VH.set(seg, x);
    }
    public static int SEHandlerCount$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.SEHandlerCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void SEHandlerCount$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.SEHandlerCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle GuardCFCheckFunctionPointer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GuardCFCheckFunctionPointer"));
    public static VarHandle GuardCFCheckFunctionPointer$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFCheckFunctionPointer$VH;
    }
    public static int GuardCFCheckFunctionPointer$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFCheckFunctionPointer$VH.get(seg);
    }
    public static void GuardCFCheckFunctionPointer$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFCheckFunctionPointer$VH.set(seg, x);
    }
    public static int GuardCFCheckFunctionPointer$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFCheckFunctionPointer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardCFCheckFunctionPointer$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFCheckFunctionPointer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle GuardCFDispatchFunctionPointer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GuardCFDispatchFunctionPointer"));
    public static VarHandle GuardCFDispatchFunctionPointer$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFDispatchFunctionPointer$VH;
    }
    public static int GuardCFDispatchFunctionPointer$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFDispatchFunctionPointer$VH.get(seg);
    }
    public static void GuardCFDispatchFunctionPointer$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFDispatchFunctionPointer$VH.set(seg, x);
    }
    public static int GuardCFDispatchFunctionPointer$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFDispatchFunctionPointer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardCFDispatchFunctionPointer$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFDispatchFunctionPointer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle GuardCFFunctionTable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GuardCFFunctionTable"));
    public static VarHandle GuardCFFunctionTable$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFFunctionTable$VH;
    }
    public static int GuardCFFunctionTable$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFFunctionTable$VH.get(seg);
    }
    public static void GuardCFFunctionTable$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFFunctionTable$VH.set(seg, x);
    }
    public static int GuardCFFunctionTable$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFFunctionTable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardCFFunctionTable$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFFunctionTable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle GuardCFFunctionCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GuardCFFunctionCount"));
    public static VarHandle GuardCFFunctionCount$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFFunctionCount$VH;
    }
    public static int GuardCFFunctionCount$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFFunctionCount$VH.get(seg);
    }
    public static void GuardCFFunctionCount$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFFunctionCount$VH.set(seg, x);
    }
    public static int GuardCFFunctionCount$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFFunctionCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardCFFunctionCount$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFFunctionCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle GuardFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GuardFlags"));
    public static VarHandle GuardFlags$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardFlags$VH;
    }
    public static int GuardFlags$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GuardFlags$VH.get(seg);
    }
    public static void GuardFlags$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardFlags$VH.set(seg, x);
    }
    public static int GuardFlags$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GuardFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardFlags$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment CodeIntegrity$slice(MemorySegment seg) {
        return seg.asSlice(92, 12);
    }
    static final VarHandle GuardAddressTakenIatEntryTable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GuardAddressTakenIatEntryTable"));
    public static VarHandle GuardAddressTakenIatEntryTable$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardAddressTakenIatEntryTable$VH;
    }
    public static int GuardAddressTakenIatEntryTable$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GuardAddressTakenIatEntryTable$VH.get(seg);
    }
    public static void GuardAddressTakenIatEntryTable$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardAddressTakenIatEntryTable$VH.set(seg, x);
    }
    public static int GuardAddressTakenIatEntryTable$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GuardAddressTakenIatEntryTable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardAddressTakenIatEntryTable$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardAddressTakenIatEntryTable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle GuardAddressTakenIatEntryCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GuardAddressTakenIatEntryCount"));
    public static VarHandle GuardAddressTakenIatEntryCount$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardAddressTakenIatEntryCount$VH;
    }
    public static int GuardAddressTakenIatEntryCount$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GuardAddressTakenIatEntryCount$VH.get(seg);
    }
    public static void GuardAddressTakenIatEntryCount$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardAddressTakenIatEntryCount$VH.set(seg, x);
    }
    public static int GuardAddressTakenIatEntryCount$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GuardAddressTakenIatEntryCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardAddressTakenIatEntryCount$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardAddressTakenIatEntryCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle GuardLongJumpTargetTable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GuardLongJumpTargetTable"));
    public static VarHandle GuardLongJumpTargetTable$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardLongJumpTargetTable$VH;
    }
    public static int GuardLongJumpTargetTable$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GuardLongJumpTargetTable$VH.get(seg);
    }
    public static void GuardLongJumpTargetTable$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardLongJumpTargetTable$VH.set(seg, x);
    }
    public static int GuardLongJumpTargetTable$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GuardLongJumpTargetTable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardLongJumpTargetTable$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardLongJumpTargetTable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle GuardLongJumpTargetCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GuardLongJumpTargetCount"));
    public static VarHandle GuardLongJumpTargetCount$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardLongJumpTargetCount$VH;
    }
    public static int GuardLongJumpTargetCount$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GuardLongJumpTargetCount$VH.get(seg);
    }
    public static void GuardLongJumpTargetCount$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardLongJumpTargetCount$VH.set(seg, x);
    }
    public static int GuardLongJumpTargetCount$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GuardLongJumpTargetCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardLongJumpTargetCount$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardLongJumpTargetCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DynamicValueRelocTable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DynamicValueRelocTable"));
    public static VarHandle DynamicValueRelocTable$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTable$VH;
    }
    public static int DynamicValueRelocTable$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTable$VH.get(seg);
    }
    public static void DynamicValueRelocTable$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTable$VH.set(seg, x);
    }
    public static int DynamicValueRelocTable$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DynamicValueRelocTable$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle CHPEMetadataPointer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("CHPEMetadataPointer"));
    public static VarHandle CHPEMetadataPointer$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.CHPEMetadataPointer$VH;
    }
    public static int CHPEMetadataPointer$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.CHPEMetadataPointer$VH.get(seg);
    }
    public static void CHPEMetadataPointer$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.CHPEMetadataPointer$VH.set(seg, x);
    }
    public static int CHPEMetadataPointer$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.CHPEMetadataPointer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void CHPEMetadataPointer$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.CHPEMetadataPointer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle GuardRFFailureRoutine$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GuardRFFailureRoutine"));
    public static VarHandle GuardRFFailureRoutine$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFFailureRoutine$VH;
    }
    public static int GuardRFFailureRoutine$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFFailureRoutine$VH.get(seg);
    }
    public static void GuardRFFailureRoutine$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFFailureRoutine$VH.set(seg, x);
    }
    public static int GuardRFFailureRoutine$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFFailureRoutine$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardRFFailureRoutine$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFFailureRoutine$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle GuardRFFailureRoutineFunctionPointer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GuardRFFailureRoutineFunctionPointer"));
    public static VarHandle GuardRFFailureRoutineFunctionPointer$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFFailureRoutineFunctionPointer$VH;
    }
    public static int GuardRFFailureRoutineFunctionPointer$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFFailureRoutineFunctionPointer$VH.get(seg);
    }
    public static void GuardRFFailureRoutineFunctionPointer$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFFailureRoutineFunctionPointer$VH.set(seg, x);
    }
    public static int GuardRFFailureRoutineFunctionPointer$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFFailureRoutineFunctionPointer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardRFFailureRoutineFunctionPointer$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFFailureRoutineFunctionPointer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DynamicValueRelocTableOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DynamicValueRelocTableOffset"));
    public static VarHandle DynamicValueRelocTableOffset$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTableOffset$VH;
    }
    public static int DynamicValueRelocTableOffset$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTableOffset$VH.get(seg);
    }
    public static void DynamicValueRelocTableOffset$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTableOffset$VH.set(seg, x);
    }
    public static int DynamicValueRelocTableOffset$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTableOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DynamicValueRelocTableOffset$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTableOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle DynamicValueRelocTableSection$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("DynamicValueRelocTableSection"));
    public static VarHandle DynamicValueRelocTableSection$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTableSection$VH;
    }
    public static short DynamicValueRelocTableSection$get(MemorySegment seg) {
        return (short)_IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTableSection$VH.get(seg);
    }
    public static void DynamicValueRelocTableSection$set( MemorySegment seg, short x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTableSection$VH.set(seg, x);
    }
    public static short DynamicValueRelocTableSection$get(MemorySegment seg, long index) {
        return (short)_IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTableSection$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void DynamicValueRelocTableSection$set(MemorySegment seg, long index, short x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTableSection$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Reserved2"));
    public static VarHandle Reserved2$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.Reserved2$VH;
    }
    public static short Reserved2$get(MemorySegment seg) {
        return (short)_IMAGE_LOAD_CONFIG_DIRECTORY32.Reserved2$VH.get(seg);
    }
    public static void Reserved2$set( MemorySegment seg, short x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.Reserved2$VH.set(seg, x);
    }
    public static short Reserved2$get(MemorySegment seg, long index) {
        return (short)_IMAGE_LOAD_CONFIG_DIRECTORY32.Reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved2$set(MemorySegment seg, long index, short x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.Reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle GuardRFVerifyStackPointerFunctionPointer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GuardRFVerifyStackPointerFunctionPointer"));
    public static VarHandle GuardRFVerifyStackPointerFunctionPointer$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFVerifyStackPointerFunctionPointer$VH;
    }
    public static int GuardRFVerifyStackPointerFunctionPointer$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFVerifyStackPointerFunctionPointer$VH.get(seg);
    }
    public static void GuardRFVerifyStackPointerFunctionPointer$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFVerifyStackPointerFunctionPointer$VH.set(seg, x);
    }
    public static int GuardRFVerifyStackPointerFunctionPointer$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFVerifyStackPointerFunctionPointer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardRFVerifyStackPointerFunctionPointer$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFVerifyStackPointerFunctionPointer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle HotPatchTableOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("HotPatchTableOffset"));
    public static VarHandle HotPatchTableOffset$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.HotPatchTableOffset$VH;
    }
    public static int HotPatchTableOffset$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.HotPatchTableOffset$VH.get(seg);
    }
    public static void HotPatchTableOffset$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.HotPatchTableOffset$VH.set(seg, x);
    }
    public static int HotPatchTableOffset$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.HotPatchTableOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void HotPatchTableOffset$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.HotPatchTableOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Reserved3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Reserved3"));
    public static VarHandle Reserved3$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.Reserved3$VH;
    }
    public static int Reserved3$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.Reserved3$VH.get(seg);
    }
    public static void Reserved3$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.Reserved3$VH.set(seg, x);
    }
    public static int Reserved3$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.Reserved3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Reserved3$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.Reserved3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle EnclaveConfigurationPointer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("EnclaveConfigurationPointer"));
    public static VarHandle EnclaveConfigurationPointer$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.EnclaveConfigurationPointer$VH;
    }
    public static int EnclaveConfigurationPointer$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.EnclaveConfigurationPointer$VH.get(seg);
    }
    public static void EnclaveConfigurationPointer$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.EnclaveConfigurationPointer$VH.set(seg, x);
    }
    public static int EnclaveConfigurationPointer$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.EnclaveConfigurationPointer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void EnclaveConfigurationPointer$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.EnclaveConfigurationPointer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle VolatileMetadataPointer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("VolatileMetadataPointer"));
    public static VarHandle VolatileMetadataPointer$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.VolatileMetadataPointer$VH;
    }
    public static int VolatileMetadataPointer$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.VolatileMetadataPointer$VH.get(seg);
    }
    public static void VolatileMetadataPointer$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.VolatileMetadataPointer$VH.set(seg, x);
    }
    public static int VolatileMetadataPointer$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.VolatileMetadataPointer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void VolatileMetadataPointer$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.VolatileMetadataPointer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle GuardEHContinuationTable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GuardEHContinuationTable"));
    public static VarHandle GuardEHContinuationTable$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardEHContinuationTable$VH;
    }
    public static int GuardEHContinuationTable$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GuardEHContinuationTable$VH.get(seg);
    }
    public static void GuardEHContinuationTable$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardEHContinuationTable$VH.set(seg, x);
    }
    public static int GuardEHContinuationTable$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GuardEHContinuationTable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardEHContinuationTable$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardEHContinuationTable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle GuardEHContinuationCount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("GuardEHContinuationCount"));
    public static VarHandle GuardEHContinuationCount$VH() {
        return _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardEHContinuationCount$VH;
    }
    public static int GuardEHContinuationCount$get(MemorySegment seg) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GuardEHContinuationCount$VH.get(seg);
    }
    public static void GuardEHContinuationCount$set( MemorySegment seg, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardEHContinuationCount$VH.set(seg, x);
    }
    public static int GuardEHContinuationCount$get(MemorySegment seg, long index) {
        return (int)_IMAGE_LOAD_CONFIG_DIRECTORY32.GuardEHContinuationCount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GuardEHContinuationCount$set(MemorySegment seg, long index, int x) {
        _IMAGE_LOAD_CONFIG_DIRECTORY32.GuardEHContinuationCount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


