// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class tagMENUITEMINFOW {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("cbSize"),
        Constants$root.C_LONG$LAYOUT.withName("fMask"),
        Constants$root.C_LONG$LAYOUT.withName("fType"),
        Constants$root.C_LONG$LAYOUT.withName("fState"),
        Constants$root.C_LONG$LAYOUT.withName("wID"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("hSubMenu"),
        Constants$root.C_POINTER$LAYOUT.withName("hbmpChecked"),
        Constants$root.C_POINTER$LAYOUT.withName("hbmpUnchecked"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("dwItemData"),
        Constants$root.C_POINTER$LAYOUT.withName("dwTypeData"),
        Constants$root.C_LONG$LAYOUT.withName("cch"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("hbmpItem")
    ).withName("tagMENUITEMINFOW");
    public static MemoryLayout $LAYOUT() {
        return tagMENUITEMINFOW.$struct$LAYOUT;
    }
    static final VarHandle cbSize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cbSize"));
    public static VarHandle cbSize$VH() {
        return tagMENUITEMINFOW.cbSize$VH;
    }
    public static int cbSize$get(MemorySegment seg) {
        return (int)tagMENUITEMINFOW.cbSize$VH.get(seg);
    }
    public static void cbSize$set( MemorySegment seg, int x) {
        tagMENUITEMINFOW.cbSize$VH.set(seg, x);
    }
    public static int cbSize$get(MemorySegment seg, long index) {
        return (int)tagMENUITEMINFOW.cbSize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cbSize$set(MemorySegment seg, long index, int x) {
        tagMENUITEMINFOW.cbSize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fMask$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fMask"));
    public static VarHandle fMask$VH() {
        return tagMENUITEMINFOW.fMask$VH;
    }
    public static int fMask$get(MemorySegment seg) {
        return (int)tagMENUITEMINFOW.fMask$VH.get(seg);
    }
    public static void fMask$set( MemorySegment seg, int x) {
        tagMENUITEMINFOW.fMask$VH.set(seg, x);
    }
    public static int fMask$get(MemorySegment seg, long index) {
        return (int)tagMENUITEMINFOW.fMask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fMask$set(MemorySegment seg, long index, int x) {
        tagMENUITEMINFOW.fMask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fType"));
    public static VarHandle fType$VH() {
        return tagMENUITEMINFOW.fType$VH;
    }
    public static int fType$get(MemorySegment seg) {
        return (int)tagMENUITEMINFOW.fType$VH.get(seg);
    }
    public static void fType$set( MemorySegment seg, int x) {
        tagMENUITEMINFOW.fType$VH.set(seg, x);
    }
    public static int fType$get(MemorySegment seg, long index) {
        return (int)tagMENUITEMINFOW.fType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fType$set(MemorySegment seg, long index, int x) {
        tagMENUITEMINFOW.fType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fState$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fState"));
    public static VarHandle fState$VH() {
        return tagMENUITEMINFOW.fState$VH;
    }
    public static int fState$get(MemorySegment seg) {
        return (int)tagMENUITEMINFOW.fState$VH.get(seg);
    }
    public static void fState$set( MemorySegment seg, int x) {
        tagMENUITEMINFOW.fState$VH.set(seg, x);
    }
    public static int fState$get(MemorySegment seg, long index) {
        return (int)tagMENUITEMINFOW.fState$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fState$set(MemorySegment seg, long index, int x) {
        tagMENUITEMINFOW.fState$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wID"));
    public static VarHandle wID$VH() {
        return tagMENUITEMINFOW.wID$VH;
    }
    public static int wID$get(MemorySegment seg) {
        return (int)tagMENUITEMINFOW.wID$VH.get(seg);
    }
    public static void wID$set( MemorySegment seg, int x) {
        tagMENUITEMINFOW.wID$VH.set(seg, x);
    }
    public static int wID$get(MemorySegment seg, long index) {
        return (int)tagMENUITEMINFOW.wID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wID$set(MemorySegment seg, long index, int x) {
        tagMENUITEMINFOW.wID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hSubMenu$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hSubMenu"));
    public static VarHandle hSubMenu$VH() {
        return tagMENUITEMINFOW.hSubMenu$VH;
    }
    public static MemoryAddress hSubMenu$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagMENUITEMINFOW.hSubMenu$VH.get(seg);
    }
    public static void hSubMenu$set( MemorySegment seg, MemoryAddress x) {
        tagMENUITEMINFOW.hSubMenu$VH.set(seg, x);
    }
    public static MemoryAddress hSubMenu$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagMENUITEMINFOW.hSubMenu$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hSubMenu$set(MemorySegment seg, long index, MemoryAddress x) {
        tagMENUITEMINFOW.hSubMenu$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hbmpChecked$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hbmpChecked"));
    public static VarHandle hbmpChecked$VH() {
        return tagMENUITEMINFOW.hbmpChecked$VH;
    }
    public static MemoryAddress hbmpChecked$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagMENUITEMINFOW.hbmpChecked$VH.get(seg);
    }
    public static void hbmpChecked$set( MemorySegment seg, MemoryAddress x) {
        tagMENUITEMINFOW.hbmpChecked$VH.set(seg, x);
    }
    public static MemoryAddress hbmpChecked$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagMENUITEMINFOW.hbmpChecked$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hbmpChecked$set(MemorySegment seg, long index, MemoryAddress x) {
        tagMENUITEMINFOW.hbmpChecked$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hbmpUnchecked$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hbmpUnchecked"));
    public static VarHandle hbmpUnchecked$VH() {
        return tagMENUITEMINFOW.hbmpUnchecked$VH;
    }
    public static MemoryAddress hbmpUnchecked$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagMENUITEMINFOW.hbmpUnchecked$VH.get(seg);
    }
    public static void hbmpUnchecked$set( MemorySegment seg, MemoryAddress x) {
        tagMENUITEMINFOW.hbmpUnchecked$VH.set(seg, x);
    }
    public static MemoryAddress hbmpUnchecked$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagMENUITEMINFOW.hbmpUnchecked$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hbmpUnchecked$set(MemorySegment seg, long index, MemoryAddress x) {
        tagMENUITEMINFOW.hbmpUnchecked$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwItemData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwItemData"));
    public static VarHandle dwItemData$VH() {
        return tagMENUITEMINFOW.dwItemData$VH;
    }
    public static long dwItemData$get(MemorySegment seg) {
        return (long)tagMENUITEMINFOW.dwItemData$VH.get(seg);
    }
    public static void dwItemData$set( MemorySegment seg, long x) {
        tagMENUITEMINFOW.dwItemData$VH.set(seg, x);
    }
    public static long dwItemData$get(MemorySegment seg, long index) {
        return (long)tagMENUITEMINFOW.dwItemData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwItemData$set(MemorySegment seg, long index, long x) {
        tagMENUITEMINFOW.dwItemData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwTypeData$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwTypeData"));
    public static VarHandle dwTypeData$VH() {
        return tagMENUITEMINFOW.dwTypeData$VH;
    }
    public static MemoryAddress dwTypeData$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagMENUITEMINFOW.dwTypeData$VH.get(seg);
    }
    public static void dwTypeData$set( MemorySegment seg, MemoryAddress x) {
        tagMENUITEMINFOW.dwTypeData$VH.set(seg, x);
    }
    public static MemoryAddress dwTypeData$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagMENUITEMINFOW.dwTypeData$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwTypeData$set(MemorySegment seg, long index, MemoryAddress x) {
        tagMENUITEMINFOW.dwTypeData$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cch$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cch"));
    public static VarHandle cch$VH() {
        return tagMENUITEMINFOW.cch$VH;
    }
    public static int cch$get(MemorySegment seg) {
        return (int)tagMENUITEMINFOW.cch$VH.get(seg);
    }
    public static void cch$set( MemorySegment seg, int x) {
        tagMENUITEMINFOW.cch$VH.set(seg, x);
    }
    public static int cch$get(MemorySegment seg, long index) {
        return (int)tagMENUITEMINFOW.cch$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cch$set(MemorySegment seg, long index, int x) {
        tagMENUITEMINFOW.cch$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hbmpItem$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hbmpItem"));
    public static VarHandle hbmpItem$VH() {
        return tagMENUITEMINFOW.hbmpItem$VH;
    }
    public static MemoryAddress hbmpItem$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagMENUITEMINFOW.hbmpItem$VH.get(seg);
    }
    public static void hbmpItem$set( MemorySegment seg, MemoryAddress x) {
        tagMENUITEMINFOW.hbmpItem$VH.set(seg, x);
    }
    public static MemoryAddress hbmpItem$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagMENUITEMINFOW.hbmpItem$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hbmpItem$set(MemorySegment seg, long index, MemoryAddress x) {
        tagMENUITEMINFOW.hbmpItem$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


