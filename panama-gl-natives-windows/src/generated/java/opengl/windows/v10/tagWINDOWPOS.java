// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class tagWINDOWPOS {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("hwnd"),
        Constants$root.C_POINTER$LAYOUT.withName("hwndInsertAfter"),
        Constants$root.C_LONG$LAYOUT.withName("x"),
        Constants$root.C_LONG$LAYOUT.withName("y"),
        Constants$root.C_LONG$LAYOUT.withName("cx"),
        Constants$root.C_LONG$LAYOUT.withName("cy"),
        Constants$root.C_LONG$LAYOUT.withName("flags"),
        MemoryLayout.paddingLayout(32)
    ).withName("tagWINDOWPOS");
    public static MemoryLayout $LAYOUT() {
        return tagWINDOWPOS.$struct$LAYOUT;
    }
    static final VarHandle hwnd$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hwnd"));
    public static VarHandle hwnd$VH() {
        return tagWINDOWPOS.hwnd$VH;
    }
    public static MemoryAddress hwnd$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagWINDOWPOS.hwnd$VH.get(seg);
    }
    public static void hwnd$set( MemorySegment seg, MemoryAddress x) {
        tagWINDOWPOS.hwnd$VH.set(seg, x);
    }
    public static MemoryAddress hwnd$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagWINDOWPOS.hwnd$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hwnd$set(MemorySegment seg, long index, MemoryAddress x) {
        tagWINDOWPOS.hwnd$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hwndInsertAfter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hwndInsertAfter"));
    public static VarHandle hwndInsertAfter$VH() {
        return tagWINDOWPOS.hwndInsertAfter$VH;
    }
    public static MemoryAddress hwndInsertAfter$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)tagWINDOWPOS.hwndInsertAfter$VH.get(seg);
    }
    public static void hwndInsertAfter$set( MemorySegment seg, MemoryAddress x) {
        tagWINDOWPOS.hwndInsertAfter$VH.set(seg, x);
    }
    public static MemoryAddress hwndInsertAfter$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)tagWINDOWPOS.hwndInsertAfter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hwndInsertAfter$set(MemorySegment seg, long index, MemoryAddress x) {
        tagWINDOWPOS.hwndInsertAfter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle x$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("x"));
    public static VarHandle x$VH() {
        return tagWINDOWPOS.x$VH;
    }
    public static int x$get(MemorySegment seg) {
        return (int)tagWINDOWPOS.x$VH.get(seg);
    }
    public static void x$set( MemorySegment seg, int x) {
        tagWINDOWPOS.x$VH.set(seg, x);
    }
    public static int x$get(MemorySegment seg, long index) {
        return (int)tagWINDOWPOS.x$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void x$set(MemorySegment seg, long index, int x) {
        tagWINDOWPOS.x$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle y$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("y"));
    public static VarHandle y$VH() {
        return tagWINDOWPOS.y$VH;
    }
    public static int y$get(MemorySegment seg) {
        return (int)tagWINDOWPOS.y$VH.get(seg);
    }
    public static void y$set( MemorySegment seg, int x) {
        tagWINDOWPOS.y$VH.set(seg, x);
    }
    public static int y$get(MemorySegment seg, long index) {
        return (int)tagWINDOWPOS.y$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void y$set(MemorySegment seg, long index, int x) {
        tagWINDOWPOS.y$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cx"));
    public static VarHandle cx$VH() {
        return tagWINDOWPOS.cx$VH;
    }
    public static int cx$get(MemorySegment seg) {
        return (int)tagWINDOWPOS.cx$VH.get(seg);
    }
    public static void cx$set( MemorySegment seg, int x) {
        tagWINDOWPOS.cx$VH.set(seg, x);
    }
    public static int cx$get(MemorySegment seg, long index) {
        return (int)tagWINDOWPOS.cx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cx$set(MemorySegment seg, long index, int x) {
        tagWINDOWPOS.cx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cy$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cy"));
    public static VarHandle cy$VH() {
        return tagWINDOWPOS.cy$VH;
    }
    public static int cy$get(MemorySegment seg) {
        return (int)tagWINDOWPOS.cy$VH.get(seg);
    }
    public static void cy$set( MemorySegment seg, int x) {
        tagWINDOWPOS.cy$VH.set(seg, x);
    }
    public static int cy$get(MemorySegment seg, long index) {
        return (int)tagWINDOWPOS.cy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cy$set(MemorySegment seg, long index, int x) {
        tagWINDOWPOS.cy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return tagWINDOWPOS.flags$VH;
    }
    public static int flags$get(MemorySegment seg) {
        return (int)tagWINDOWPOS.flags$VH.get(seg);
    }
    public static void flags$set( MemorySegment seg, int x) {
        tagWINDOWPOS.flags$VH.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)tagWINDOWPOS.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        tagWINDOWPOS.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


