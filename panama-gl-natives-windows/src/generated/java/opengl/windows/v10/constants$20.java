// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
class constants$20 {

    static final FunctionDescriptor _rotr16$FUNC = FunctionDescriptor.of(Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_SHORT$LAYOUT,
        Constants$root.C_CHAR$LAYOUT
    );
    static final MethodHandle _rotr16$MH = RuntimeHelper.downcallHandle(
        "_rotr16",
        constants$20._rotr16$FUNC, false
    );
    static final FunctionDescriptor _rotl$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle _rotl$MH = RuntimeHelper.downcallHandle(
        "_rotl",
        constants$20._rotl$FUNC, false
    );
    static final FunctionDescriptor _rotl64$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle _rotl64$MH = RuntimeHelper.downcallHandle(
        "_rotl64",
        constants$20._rotl64$FUNC, false
    );
    static final FunctionDescriptor _rotr$FUNC = FunctionDescriptor.of(Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle _rotr$MH = RuntimeHelper.downcallHandle(
        "_rotr",
        constants$20._rotr$FUNC, false
    );
    static final FunctionDescriptor _rotr64$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG$LAYOUT
    );
    static final MethodHandle _rotr64$MH = RuntimeHelper.downcallHandle(
        "_rotr64",
        constants$20._rotr64$FUNC, false
    );
    static final FunctionDescriptor _errno$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT);
    static final MethodHandle _errno$MH = RuntimeHelper.downcallHandle(
        "_errno",
        constants$20._errno$FUNC, false
    );
}


