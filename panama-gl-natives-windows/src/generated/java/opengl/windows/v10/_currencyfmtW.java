// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _currencyfmtW {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG$LAYOUT.withName("NumDigits"),
        Constants$root.C_LONG$LAYOUT.withName("LeadingZero"),
        Constants$root.C_LONG$LAYOUT.withName("Grouping"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("lpDecimalSep"),
        Constants$root.C_POINTER$LAYOUT.withName("lpThousandSep"),
        Constants$root.C_LONG$LAYOUT.withName("NegativeOrder"),
        Constants$root.C_LONG$LAYOUT.withName("PositiveOrder"),
        Constants$root.C_POINTER$LAYOUT.withName("lpCurrencySymbol")
    ).withName("_currencyfmtW");
    public static MemoryLayout $LAYOUT() {
        return _currencyfmtW.$struct$LAYOUT;
    }
    static final VarHandle NumDigits$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NumDigits"));
    public static VarHandle NumDigits$VH() {
        return _currencyfmtW.NumDigits$VH;
    }
    public static int NumDigits$get(MemorySegment seg) {
        return (int)_currencyfmtW.NumDigits$VH.get(seg);
    }
    public static void NumDigits$set( MemorySegment seg, int x) {
        _currencyfmtW.NumDigits$VH.set(seg, x);
    }
    public static int NumDigits$get(MemorySegment seg, long index) {
        return (int)_currencyfmtW.NumDigits$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NumDigits$set(MemorySegment seg, long index, int x) {
        _currencyfmtW.NumDigits$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle LeadingZero$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("LeadingZero"));
    public static VarHandle LeadingZero$VH() {
        return _currencyfmtW.LeadingZero$VH;
    }
    public static int LeadingZero$get(MemorySegment seg) {
        return (int)_currencyfmtW.LeadingZero$VH.get(seg);
    }
    public static void LeadingZero$set( MemorySegment seg, int x) {
        _currencyfmtW.LeadingZero$VH.set(seg, x);
    }
    public static int LeadingZero$get(MemorySegment seg, long index) {
        return (int)_currencyfmtW.LeadingZero$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void LeadingZero$set(MemorySegment seg, long index, int x) {
        _currencyfmtW.LeadingZero$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Grouping$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Grouping"));
    public static VarHandle Grouping$VH() {
        return _currencyfmtW.Grouping$VH;
    }
    public static int Grouping$get(MemorySegment seg) {
        return (int)_currencyfmtW.Grouping$VH.get(seg);
    }
    public static void Grouping$set( MemorySegment seg, int x) {
        _currencyfmtW.Grouping$VH.set(seg, x);
    }
    public static int Grouping$get(MemorySegment seg, long index) {
        return (int)_currencyfmtW.Grouping$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Grouping$set(MemorySegment seg, long index, int x) {
        _currencyfmtW.Grouping$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpDecimalSep$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpDecimalSep"));
    public static VarHandle lpDecimalSep$VH() {
        return _currencyfmtW.lpDecimalSep$VH;
    }
    public static MemoryAddress lpDecimalSep$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_currencyfmtW.lpDecimalSep$VH.get(seg);
    }
    public static void lpDecimalSep$set( MemorySegment seg, MemoryAddress x) {
        _currencyfmtW.lpDecimalSep$VH.set(seg, x);
    }
    public static MemoryAddress lpDecimalSep$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_currencyfmtW.lpDecimalSep$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpDecimalSep$set(MemorySegment seg, long index, MemoryAddress x) {
        _currencyfmtW.lpDecimalSep$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpThousandSep$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpThousandSep"));
    public static VarHandle lpThousandSep$VH() {
        return _currencyfmtW.lpThousandSep$VH;
    }
    public static MemoryAddress lpThousandSep$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_currencyfmtW.lpThousandSep$VH.get(seg);
    }
    public static void lpThousandSep$set( MemorySegment seg, MemoryAddress x) {
        _currencyfmtW.lpThousandSep$VH.set(seg, x);
    }
    public static MemoryAddress lpThousandSep$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_currencyfmtW.lpThousandSep$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpThousandSep$set(MemorySegment seg, long index, MemoryAddress x) {
        _currencyfmtW.lpThousandSep$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle NegativeOrder$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("NegativeOrder"));
    public static VarHandle NegativeOrder$VH() {
        return _currencyfmtW.NegativeOrder$VH;
    }
    public static int NegativeOrder$get(MemorySegment seg) {
        return (int)_currencyfmtW.NegativeOrder$VH.get(seg);
    }
    public static void NegativeOrder$set( MemorySegment seg, int x) {
        _currencyfmtW.NegativeOrder$VH.set(seg, x);
    }
    public static int NegativeOrder$get(MemorySegment seg, long index) {
        return (int)_currencyfmtW.NegativeOrder$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void NegativeOrder$set(MemorySegment seg, long index, int x) {
        _currencyfmtW.NegativeOrder$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle PositiveOrder$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("PositiveOrder"));
    public static VarHandle PositiveOrder$VH() {
        return _currencyfmtW.PositiveOrder$VH;
    }
    public static int PositiveOrder$get(MemorySegment seg) {
        return (int)_currencyfmtW.PositiveOrder$VH.get(seg);
    }
    public static void PositiveOrder$set( MemorySegment seg, int x) {
        _currencyfmtW.PositiveOrder$VH.set(seg, x);
    }
    public static int PositiveOrder$get(MemorySegment seg, long index) {
        return (int)_currencyfmtW.PositiveOrder$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void PositiveOrder$set(MemorySegment seg, long index, int x) {
        _currencyfmtW.PositiveOrder$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpCurrencySymbol$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpCurrencySymbol"));
    public static VarHandle lpCurrencySymbol$VH() {
        return _currencyfmtW.lpCurrencySymbol$VH;
    }
    public static MemoryAddress lpCurrencySymbol$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_currencyfmtW.lpCurrencySymbol$VH.get(seg);
    }
    public static void lpCurrencySymbol$set( MemorySegment seg, MemoryAddress x) {
        _currencyfmtW.lpCurrencySymbol$VH.set(seg, x);
    }
    public static MemoryAddress lpCurrencySymbol$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_currencyfmtW.lpCurrencySymbol$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpCurrencySymbol$set(MemorySegment seg, long index, MemoryAddress x) {
        _currencyfmtW.lpCurrencySymbol$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


