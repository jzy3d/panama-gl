// Generated by jextract

package opengl.windows.v10;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.ValueLayout.*;
public class _OVERLAPPED_ENTRY {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("lpCompletionKey"),
        Constants$root.C_POINTER$LAYOUT.withName("lpOverlapped"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("Internal"),
        Constants$root.C_LONG$LAYOUT.withName("dwNumberOfBytesTransferred"),
        MemoryLayout.paddingLayout(32)
    ).withName("_OVERLAPPED_ENTRY");
    public static MemoryLayout $LAYOUT() {
        return _OVERLAPPED_ENTRY.$struct$LAYOUT;
    }
    static final VarHandle lpCompletionKey$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpCompletionKey"));
    public static VarHandle lpCompletionKey$VH() {
        return _OVERLAPPED_ENTRY.lpCompletionKey$VH;
    }
    public static long lpCompletionKey$get(MemorySegment seg) {
        return (long)_OVERLAPPED_ENTRY.lpCompletionKey$VH.get(seg);
    }
    public static void lpCompletionKey$set( MemorySegment seg, long x) {
        _OVERLAPPED_ENTRY.lpCompletionKey$VH.set(seg, x);
    }
    public static long lpCompletionKey$get(MemorySegment seg, long index) {
        return (long)_OVERLAPPED_ENTRY.lpCompletionKey$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpCompletionKey$set(MemorySegment seg, long index, long x) {
        _OVERLAPPED_ENTRY.lpCompletionKey$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lpOverlapped$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lpOverlapped"));
    public static VarHandle lpOverlapped$VH() {
        return _OVERLAPPED_ENTRY.lpOverlapped$VH;
    }
    public static MemoryAddress lpOverlapped$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_OVERLAPPED_ENTRY.lpOverlapped$VH.get(seg);
    }
    public static void lpOverlapped$set( MemorySegment seg, MemoryAddress x) {
        _OVERLAPPED_ENTRY.lpOverlapped$VH.set(seg, x);
    }
    public static MemoryAddress lpOverlapped$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_OVERLAPPED_ENTRY.lpOverlapped$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lpOverlapped$set(MemorySegment seg, long index, MemoryAddress x) {
        _OVERLAPPED_ENTRY.lpOverlapped$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Internal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("Internal"));
    public static VarHandle Internal$VH() {
        return _OVERLAPPED_ENTRY.Internal$VH;
    }
    public static long Internal$get(MemorySegment seg) {
        return (long)_OVERLAPPED_ENTRY.Internal$VH.get(seg);
    }
    public static void Internal$set( MemorySegment seg, long x) {
        _OVERLAPPED_ENTRY.Internal$VH.set(seg, x);
    }
    public static long Internal$get(MemorySegment seg, long index) {
        return (long)_OVERLAPPED_ENTRY.Internal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Internal$set(MemorySegment seg, long index, long x) {
        _OVERLAPPED_ENTRY.Internal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dwNumberOfBytesTransferred$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dwNumberOfBytesTransferred"));
    public static VarHandle dwNumberOfBytesTransferred$VH() {
        return _OVERLAPPED_ENTRY.dwNumberOfBytesTransferred$VH;
    }
    public static int dwNumberOfBytesTransferred$get(MemorySegment seg) {
        return (int)_OVERLAPPED_ENTRY.dwNumberOfBytesTransferred$VH.get(seg);
    }
    public static void dwNumberOfBytesTransferred$set( MemorySegment seg, int x) {
        _OVERLAPPED_ENTRY.dwNumberOfBytesTransferred$VH.set(seg, x);
    }
    public static int dwNumberOfBytesTransferred$get(MemorySegment seg, long index) {
        return (int)_OVERLAPPED_ENTRY.dwNumberOfBytesTransferred$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dwNumberOfBytesTransferred$set(MemorySegment seg, long index, int x) {
        _OVERLAPPED_ENTRY.dwNumberOfBytesTransferred$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.nativeAllocator(scope)); }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.nativeAllocator(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


