// Generated by jextract

package opengl.glx.ubuntu.v20;

import static jdk.incubator.foreign.CLinker.C_LONG;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.MemoryLayout;
import jdk.incubator.foreign.MemorySegment;
import jdk.incubator.foreign.ResourceScope;
import jdk.incubator.foreign.SegmentAllocator;
public class _XIMPreeditStateNotifyCallbackStruct {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("state")
    ).withName("_XIMPreeditStateNotifyCallbackStruct");
    public static MemoryLayout $LAYOUT() {
        return _XIMPreeditStateNotifyCallbackStruct.$struct$LAYOUT;
    }
    static final VarHandle state$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("state"));
    public static VarHandle state$VH() {
        return _XIMPreeditStateNotifyCallbackStruct.state$VH;
    }
    public static long state$get(MemorySegment seg) {
        return (long)_XIMPreeditStateNotifyCallbackStruct.state$VH.get(seg);
    }
    public static void state$set( MemorySegment seg, long x) {
        _XIMPreeditStateNotifyCallbackStruct.state$VH.set(seg, x);
    }
    public static long state$get(MemorySegment seg, long index) {
        return (long)_XIMPreeditStateNotifyCallbackStruct.state$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void state$set(MemorySegment seg, long index, long x) {
        _XIMPreeditStateNotifyCallbackStruct.state$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


