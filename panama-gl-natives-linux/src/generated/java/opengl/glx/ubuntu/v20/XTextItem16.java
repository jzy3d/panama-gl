// Generated by jextract

package opengl.glx.ubuntu.v20;

import static jdk.incubator.foreign.CLinker.C_INT;
import static jdk.incubator.foreign.CLinker.C_LONG;
import static jdk.incubator.foreign.CLinker.C_POINTER;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.MemoryHandles;
import jdk.incubator.foreign.MemoryLayout;
import jdk.incubator.foreign.MemorySegment;
import jdk.incubator.foreign.ResourceScope;
import jdk.incubator.foreign.SegmentAllocator;
public class XTextItem16 {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_POINTER.withName("chars"),
        C_INT.withName("nchars"),
        C_INT.withName("delta"),
        C_LONG.withName("font")
    );
    public static MemoryLayout $LAYOUT() {
        return XTextItem16.$struct$LAYOUT;
    }
    static final VarHandle chars$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("chars")));
    public static VarHandle chars$VH() {
        return XTextItem16.chars$VH;
    }
    public static MemoryAddress chars$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)XTextItem16.chars$VH.get(seg);
    }
    public static void chars$set( MemorySegment seg, MemoryAddress x) {
        XTextItem16.chars$VH.set(seg, x);
    }
    public static MemoryAddress chars$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)XTextItem16.chars$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void chars$set(MemorySegment seg, long index, MemoryAddress x) {
        XTextItem16.chars$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nchars$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("nchars"));
    public static VarHandle nchars$VH() {
        return XTextItem16.nchars$VH;
    }
    public static int nchars$get(MemorySegment seg) {
        return (int)XTextItem16.nchars$VH.get(seg);
    }
    public static void nchars$set( MemorySegment seg, int x) {
        XTextItem16.nchars$VH.set(seg, x);
    }
    public static int nchars$get(MemorySegment seg, long index) {
        return (int)XTextItem16.nchars$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nchars$set(MemorySegment seg, long index, int x) {
        XTextItem16.nchars$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle delta$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("delta"));
    public static VarHandle delta$VH() {
        return XTextItem16.delta$VH;
    }
    public static int delta$get(MemorySegment seg) {
        return (int)XTextItem16.delta$VH.get(seg);
    }
    public static void delta$set( MemorySegment seg, int x) {
        XTextItem16.delta$VH.set(seg, x);
    }
    public static int delta$get(MemorySegment seg, long index) {
        return (int)XTextItem16.delta$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void delta$set(MemorySegment seg, long index, int x) {
        XTextItem16.delta$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle font$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("font"));
    public static VarHandle font$VH() {
        return XTextItem16.font$VH;
    }
    public static long font$get(MemorySegment seg) {
        return (long)XTextItem16.font$VH.get(seg);
    }
    public static void font$set( MemorySegment seg, long x) {
        XTextItem16.font$VH.set(seg, x);
    }
    public static long font$get(MemorySegment seg, long index) {
        return (long)XTextItem16.font$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void font$set(MemorySegment seg, long index, long x) {
        XTextItem16.font$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


