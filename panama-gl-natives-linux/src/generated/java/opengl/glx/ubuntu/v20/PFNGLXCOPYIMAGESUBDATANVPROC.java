// Generated by jextract

package opengl.glx.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public interface PFNGLXCOPYIMAGESUBDATANVPROC {

    void apply(jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, int x3, int x4, int x5, int x6, int x7, jdk.incubator.foreign.MemoryAddress x8, int x9, int x10, int x11, int x12, int x13, int x14, int x15, int x16, int x17);
    static MemoryAddress allocate(PFNGLXCOPYIMAGESUBDATANVPROC fi) {
        return RuntimeHelper.upcallStub(PFNGLXCOPYIMAGESUBDATANVPROC.class, fi, constants$1038.PFNGLXCOPYIMAGESUBDATANVPROC$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIIIIILjdk/incubator/foreign/MemoryAddress;IIIIIIIII)V");
    }
    static MemoryAddress allocate(PFNGLXCOPYIMAGESUBDATANVPROC fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(PFNGLXCOPYIMAGESUBDATANVPROC.class, fi, constants$1038.PFNGLXCOPYIMAGESUBDATANVPROC$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIIIIILjdk/incubator/foreign/MemoryAddress;IIIIIIIII)V", scope);
    }
    static PFNGLXCOPYIMAGESUBDATANVPROC ofAddress(MemoryAddress addr) {
        return (jdk.incubator.foreign.MemoryAddress x0, jdk.incubator.foreign.MemoryAddress x1, int x2, int x3, int x4, int x5, int x6, int x7, jdk.incubator.foreign.MemoryAddress x8, int x9, int x10, int x11, int x12, int x13, int x14, int x15, int x16, int x17) -> {
            try {
                constants$1039.PFNGLXCOPYIMAGESUBDATANVPROC$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


