// Generated by jextract

package opengl.glx.ubuntu.v20;

import static jdk.incubator.foreign.CLinker.C_FLOAT;
import static jdk.incubator.foreign.CLinker.C_INT;
import static jdk.incubator.foreign.CLinker.C_LONG;
import static jdk.incubator.foreign.CLinker.C_POINTER;
import java.lang.invoke.MethodHandle;
import jdk.incubator.foreign.FunctionDescriptor;
class constants$1059 {

    static final FunctionDescriptor PFNGLXGETVIDEOSYNCSGIPROC$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle PFNGLXGETVIDEOSYNCSGIPROC$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$1059.PFNGLXGETVIDEOSYNCSGIPROC$FUNC, false
    );
    static final FunctionDescriptor PFNGLXWAITVIDEOSYNCSGIPROC$FUNC = FunctionDescriptor.of(C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final MethodHandle PFNGLXWAITVIDEOSYNCSGIPROC$MH = RuntimeHelper.downcallHandle(
        "(IILjdk/incubator/foreign/MemoryAddress;)I",
        constants$1059.PFNGLXWAITVIDEOSYNCSGIPROC$FUNC, false
    );
    static final FunctionDescriptor PFNGLXGETTRANSPARENTINDEXSUNPROC$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_LONG,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle PFNGLXGETTRANSPARENTINDEXSUNPROC$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;JJLjdk/incubator/foreign/MemoryAddress;)I",
        constants$1059.PFNGLXGETTRANSPARENTINDEXSUNPROC$FUNC, false
    );
    static final FunctionDescriptor glXAllocateMemoryNV$FUNC = FunctionDescriptor.of(C_POINTER,
        C_INT,
        C_FLOAT,
        C_FLOAT,
        C_FLOAT
    );
    static final MethodHandle glXAllocateMemoryNV$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glXAllocateMemoryNV",
        "(IFFF)Ljdk/incubator/foreign/MemoryAddress;",
        constants$1059.glXAllocateMemoryNV$FUNC, false
    );
}


