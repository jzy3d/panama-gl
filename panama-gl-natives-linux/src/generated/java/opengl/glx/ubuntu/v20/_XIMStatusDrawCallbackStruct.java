// Generated by jextract

package opengl.glx.ubuntu.v20;

import static jdk.incubator.foreign.CLinker.C_INT;
import static jdk.incubator.foreign.CLinker.C_LONG;
import static jdk.incubator.foreign.CLinker.C_POINTER;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.MemoryHandles;
import jdk.incubator.foreign.MemoryLayout;
import jdk.incubator.foreign.MemorySegment;
import jdk.incubator.foreign.ResourceScope;
import jdk.incubator.foreign.SegmentAllocator;
public class _XIMStatusDrawCallbackStruct {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("type"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.unionLayout(
            C_POINTER.withName("text"),
            C_LONG.withName("bitmap")
        ).withName("data")
    ).withName("_XIMStatusDrawCallbackStruct");
    public static MemoryLayout $LAYOUT() {
        return _XIMStatusDrawCallbackStruct.$struct$LAYOUT;
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return _XIMStatusDrawCallbackStruct.type$VH;
    }
    public static int type$get(MemorySegment seg) {
        return (int)_XIMStatusDrawCallbackStruct.type$VH.get(seg);
    }
    public static void type$set( MemorySegment seg, int x) {
        _XIMStatusDrawCallbackStruct.type$VH.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)_XIMStatusDrawCallbackStruct.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        _XIMStatusDrawCallbackStruct.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class data {

        static final MemoryLayout data$union$LAYOUT = MemoryLayout.unionLayout(
            C_POINTER.withName("text"),
            C_LONG.withName("bitmap")
        );
        public static MemoryLayout $LAYOUT() {
            return data.data$union$LAYOUT;
        }
        static final VarHandle text$VH = MemoryHandles.asAddressVarHandle(data$union$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("text")));
        public static VarHandle text$VH() {
            return data.text$VH;
        }
        public static MemoryAddress text$get(MemorySegment seg) {
            return (jdk.incubator.foreign.MemoryAddress)data.text$VH.get(seg);
        }
        public static void text$set( MemorySegment seg, MemoryAddress x) {
            data.text$VH.set(seg, x);
        }
        public static MemoryAddress text$get(MemorySegment seg, long index) {
            return (jdk.incubator.foreign.MemoryAddress)data.text$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void text$set(MemorySegment seg, long index, MemoryAddress x) {
            data.text$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle bitmap$VH = data$union$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("bitmap"));
        public static VarHandle bitmap$VH() {
            return data.bitmap$VH;
        }
        public static long bitmap$get(MemorySegment seg) {
            return (long)data.bitmap$VH.get(seg);
        }
        public static void bitmap$set( MemorySegment seg, long x) {
            data.bitmap$VH.set(seg, x);
        }
        public static long bitmap$get(MemorySegment seg, long index) {
            return (long)data.bitmap$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void bitmap$set(MemorySegment seg, long index, long x) {
            data.bitmap$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment allocateArray(int len, ResourceScope scope) {
            return allocateArray(len, SegmentAllocator.ofScope(scope));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment data$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


