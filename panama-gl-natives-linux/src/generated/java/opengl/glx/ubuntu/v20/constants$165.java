// Generated by jextract

package opengl.glx.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$165 {

    static final FunctionDescriptor glMultiTexCoord4sARB$FUNC = FunctionDescriptor.ofVoid(
        C_INT,
        C_SHORT,
        C_SHORT,
        C_SHORT,
        C_SHORT
    );
    static final MethodHandle glMultiTexCoord4sARB$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glMultiTexCoord4sARB",
        "(ISSSS)V",
        constants$165.glMultiTexCoord4sARB$FUNC, false
    );
    static final FunctionDescriptor glMultiTexCoord4svARB$FUNC = FunctionDescriptor.ofVoid(
        C_INT,
        C_POINTER
    );
    static final MethodHandle glMultiTexCoord4svARB$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glMultiTexCoord4svARB",
        "(ILjdk/incubator/foreign/MemoryAddress;)V",
        constants$165.glMultiTexCoord4svARB$FUNC, false
    );
    static final FunctionDescriptor PFNGLACTIVETEXTUREARBPROC$FUNC = FunctionDescriptor.ofVoid(
        C_INT
    );
    static final MethodHandle PFNGLACTIVETEXTUREARBPROC$MH = RuntimeHelper.downcallHandle(
        "(I)V",
        constants$165.PFNGLACTIVETEXTUREARBPROC$FUNC, false
    );
    static final FunctionDescriptor PFNGLCLIENTACTIVETEXTUREARBPROC$FUNC = FunctionDescriptor.ofVoid(
        C_INT
    );
    static final MethodHandle PFNGLCLIENTACTIVETEXTUREARBPROC$MH = RuntimeHelper.downcallHandle(
        "(I)V",
        constants$165.PFNGLCLIENTACTIVETEXTUREARBPROC$FUNC, false
    );
}


