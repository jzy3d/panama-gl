// Generated by jextract

package opengl.glx.ubuntu.v20;

import static jdk.incubator.foreign.CLinker.C_INT;
import static jdk.incubator.foreign.CLinker.C_LONG;
import static jdk.incubator.foreign.CLinker.C_POINTER;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.MemoryLayout;
import jdk.incubator.foreign.MemorySegment;
import jdk.incubator.foreign.ResourceScope;
import jdk.incubator.foreign.SegmentAllocator;
public class __GLXEvent {

    static final MemoryLayout $union$LAYOUT = MemoryLayout.unionLayout(
        MemoryLayout.structLayout(
            C_INT.withName("event_type"),
            C_INT.withName("draw_type"),
            C_LONG.withName("serial"),
            C_INT.withName("send_event"),
            MemoryLayout.paddingLayout(32),
            C_POINTER.withName("display"),
            C_LONG.withName("drawable"),
            C_INT.withName("buffer_mask"),
            C_INT.withName("aux_buffer"),
            C_INT.withName("x"),
            C_INT.withName("y"),
            C_INT.withName("width"),
            C_INT.withName("height"),
            C_INT.withName("count"),
            MemoryLayout.paddingLayout(32)
        ).withName("glxpbufferclobber"),
        MemoryLayout.structLayout(
            C_INT.withName("type"),
            MemoryLayout.paddingLayout(32),
            C_LONG.withName("serial"),
            C_INT.withName("send_event"),
            MemoryLayout.paddingLayout(32),
            C_POINTER.withName("display"),
            C_LONG.withName("drawable"),
            C_INT.withName("event_type"),
            MemoryLayout.paddingLayout(32),
            C_LONG.withName("ust"),
            C_LONG.withName("msc"),
            C_LONG.withName("sbc")
        ).withName("glxbufferswapcomplete"),
        MemoryLayout.sequenceLayout(24, C_LONG).withName("pad")
    ).withName("__GLXEvent");
    public static MemoryLayout $LAYOUT() {
        return __GLXEvent.$union$LAYOUT;
    }
    public static MemorySegment glxpbufferclobber$slice(MemorySegment seg) {
        return seg.asSlice(0, 72);
    }
    public static MemorySegment glxbufferswapcomplete$slice(MemorySegment seg) {
        return seg.asSlice(0, 72);
    }
    public static MemorySegment pad$slice(MemorySegment seg) {
        return seg.asSlice(0, 192);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


