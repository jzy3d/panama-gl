// Generated by jextract

package opengl.glx.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$94 {

    static final FunctionDescriptor glViewport$FUNC = FunctionDescriptor.ofVoid(
        C_INT,
        C_INT,
        C_INT,
        C_INT
    );
    static final MethodHandle glViewport$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glViewport",
        "(IIII)V",
        constants$94.glViewport$FUNC, false
    );
    static final FunctionDescriptor glPushMatrix$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle glPushMatrix$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glPushMatrix",
        "()V",
        constants$94.glPushMatrix$FUNC, false
    );
    static final FunctionDescriptor glPopMatrix$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle glPopMatrix$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glPopMatrix",
        "()V",
        constants$94.glPopMatrix$FUNC, false
    );
    static final FunctionDescriptor glLoadIdentity$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle glLoadIdentity$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glLoadIdentity",
        "()V",
        constants$94.glLoadIdentity$FUNC, false
    );
    static final FunctionDescriptor glLoadMatrixd$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle glLoadMatrixd$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glLoadMatrixd",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$94.glLoadMatrixd$FUNC, false
    );
    static final FunctionDescriptor glLoadMatrixf$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle glLoadMatrixf$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glLoadMatrixf",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$94.glLoadMatrixf$FUNC, false
    );
}


