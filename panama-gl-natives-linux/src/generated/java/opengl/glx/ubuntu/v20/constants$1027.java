// Generated by jextract

package opengl.glx.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$1027 {

    static final FunctionDescriptor PFNGLXSELECTEVENTPROC$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final MethodHandle PFNGLXSELECTEVENTPROC$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;JJ)V",
        constants$1027.PFNGLXSELECTEVENTPROC$FUNC, false
    );
    static final FunctionDescriptor PFNGLXGETSELECTEDEVENTPROC$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle PFNGLXGETSELECTEDEVENTPROC$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)V",
        constants$1027.PFNGLXGETSELECTEDEVENTPROC$FUNC, false
    );
    static final FunctionDescriptor __GLXextFuncPtr$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle __GLXextFuncPtr$MH = RuntimeHelper.downcallHandle(
        "()V",
        constants$1027.__GLXextFuncPtr$FUNC, false
    );
    static final FunctionDescriptor glXGetProcAddressARB$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final MethodHandle glXGetProcAddressARB$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glXGetProcAddressARB",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$1027.glXGetProcAddressARB$FUNC, false
    );
}


