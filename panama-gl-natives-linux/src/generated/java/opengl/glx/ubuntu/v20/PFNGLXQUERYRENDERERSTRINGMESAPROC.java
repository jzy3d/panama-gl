// Generated by jextract

package opengl.glx.ubuntu.v20;

import jdk.incubator.foreign.Addressable;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.ResourceScope;
public interface PFNGLXQUERYRENDERERSTRINGMESAPROC {

    jdk.incubator.foreign.MemoryAddress apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, int x3);
    static MemoryAddress allocate(PFNGLXQUERYRENDERERSTRINGMESAPROC fi) {
        return RuntimeHelper.upcallStub(PFNGLXQUERYRENDERERSTRINGMESAPROC.class, fi, constants$1036.PFNGLXQUERYRENDERERSTRINGMESAPROC$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;III)Ljdk/incubator/foreign/MemoryAddress;");
    }
    static MemoryAddress allocate(PFNGLXQUERYRENDERERSTRINGMESAPROC fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(PFNGLXQUERYRENDERERSTRINGMESAPROC.class, fi, constants$1036.PFNGLXQUERYRENDERERSTRINGMESAPROC$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;III)Ljdk/incubator/foreign/MemoryAddress;", scope);
    }
    static PFNGLXQUERYRENDERERSTRINGMESAPROC ofAddress(MemoryAddress addr) {
        return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2, int x3) -> {
            try {
                return (jdk.incubator.foreign.MemoryAddress)constants$1036.PFNGLXQUERYRENDERERSTRINGMESAPROC$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


