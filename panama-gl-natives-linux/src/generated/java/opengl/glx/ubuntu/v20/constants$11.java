// Generated by jextract

package opengl.glx.ubuntu.v20;

import static jdk.incubator.foreign.CLinker.C_CHAR;
import static jdk.incubator.foreign.CLinker.C_INT;
import static jdk.incubator.foreign.CLinker.C_LONG;
import static jdk.incubator.foreign.CLinker.C_POINTER;
import java.lang.invoke.MethodHandle;
import jdk.incubator.foreign.FunctionDescriptor;
class constants$11 {

    static final FunctionDescriptor XGetKeyboardMapping$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_CHAR,
        C_INT,
        C_POINTER
    );
    static final MethodHandle XGetKeyboardMapping$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "XGetKeyboardMapping",
        "(Ljdk/incubator/foreign/MemoryAddress;BILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$11.XGetKeyboardMapping$FUNC, false
    );
    static final FunctionDescriptor XStringToKeysym$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle XStringToKeysym$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "XStringToKeysym",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        constants$11.XStringToKeysym$FUNC, false
    );
    static final FunctionDescriptor XMaxRequestSize$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle XMaxRequestSize$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "XMaxRequestSize",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        constants$11.XMaxRequestSize$FUNC, false
    );
    static final FunctionDescriptor XExtendedMaxRequestSize$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle XExtendedMaxRequestSize$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "XExtendedMaxRequestSize",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        constants$11.XExtendedMaxRequestSize$FUNC, false
    );
    static final FunctionDescriptor XResourceManagerString$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final MethodHandle XResourceManagerString$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "XResourceManagerString",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$11.XResourceManagerString$FUNC, false
    );
    static final FunctionDescriptor XScreenResourceString$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final MethodHandle XScreenResourceString$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "XScreenResourceString",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$11.XScreenResourceString$FUNC, false
    );
}


