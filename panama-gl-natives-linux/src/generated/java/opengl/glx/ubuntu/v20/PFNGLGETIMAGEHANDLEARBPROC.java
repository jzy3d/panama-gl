// Generated by jextract

package opengl.glx.ubuntu.v20;

import jdk.incubator.foreign.Addressable;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.ResourceScope;
public interface PFNGLGETIMAGEHANDLEARBPROC {

    long apply(int x0, int x1, byte x2, int x3, int x4);
    static MemoryAddress allocate(PFNGLGETIMAGEHANDLEARBPROC fi) {
        return RuntimeHelper.upcallStub(PFNGLGETIMAGEHANDLEARBPROC.class, fi, constants$399.PFNGLGETIMAGEHANDLEARBPROC$FUNC, "(IIBII)J");
    }
    static MemoryAddress allocate(PFNGLGETIMAGEHANDLEARBPROC fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(PFNGLGETIMAGEHANDLEARBPROC.class, fi, constants$399.PFNGLGETIMAGEHANDLEARBPROC$FUNC, "(IIBII)J", scope);
    }
    static PFNGLGETIMAGEHANDLEARBPROC ofAddress(MemoryAddress addr) {
        return (int x0, int x1, byte x2, int x3, int x4) -> {
            try {
                return (long)constants$399.PFNGLGETIMAGEHANDLEARBPROC$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


