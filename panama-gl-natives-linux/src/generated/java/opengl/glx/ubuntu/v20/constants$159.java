// Generated by jextract

package opengl.glx.ubuntu.v20;

import static jdk.incubator.foreign.CLinker.C_INT;
import static jdk.incubator.foreign.CLinker.C_POINTER;
import java.lang.invoke.MethodHandle;
import jdk.incubator.foreign.FunctionDescriptor;
class constants$159 {

    static final FunctionDescriptor PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC$FUNC = FunctionDescriptor.ofVoid(
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final MethodHandle PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC$MH = RuntimeHelper.downcallHandle(
        "(IIIIIILjdk/incubator/foreign/MemoryAddress;)V",
        constants$159.PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC$FUNC, false
    );
    static final FunctionDescriptor PFNGLGETCOMPRESSEDTEXIMAGEPROC$FUNC = FunctionDescriptor.ofVoid(
        C_INT,
        C_INT,
        C_POINTER
    );
    static final MethodHandle PFNGLGETCOMPRESSEDTEXIMAGEPROC$MH = RuntimeHelper.downcallHandle(
        "(IILjdk/incubator/foreign/MemoryAddress;)V",
        constants$159.PFNGLGETCOMPRESSEDTEXIMAGEPROC$FUNC, false
    );
    static final FunctionDescriptor glActiveTextureARB$FUNC = FunctionDescriptor.ofVoid(
        C_INT
    );
    static final MethodHandle glActiveTextureARB$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glActiveTextureARB",
        "(I)V",
        constants$159.glActiveTextureARB$FUNC, false
    );
    static final FunctionDescriptor glClientActiveTextureARB$FUNC = FunctionDescriptor.ofVoid(
        C_INT
    );
    static final MethodHandle glClientActiveTextureARB$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glClientActiveTextureARB",
        "(I)V",
        constants$159.glClientActiveTextureARB$FUNC, false
    );
}


