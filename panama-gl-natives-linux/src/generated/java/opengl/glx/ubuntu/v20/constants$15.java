// Generated by jextract

package opengl.glx.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$15 {

    static final FunctionDescriptor XAllPlanes$FUNC = FunctionDescriptor.of(C_LONG);
    static final MethodHandle XAllPlanes$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "XAllPlanes",
        "()J",
        constants$15.XAllPlanes$FUNC, false
    );
    static final FunctionDescriptor XBlackPixelOfScreen$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle XBlackPixelOfScreen$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "XBlackPixelOfScreen",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        constants$15.XBlackPixelOfScreen$FUNC, false
    );
    static final FunctionDescriptor XWhitePixelOfScreen$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle XWhitePixelOfScreen$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "XWhitePixelOfScreen",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        constants$15.XWhitePixelOfScreen$FUNC, false
    );
    static final FunctionDescriptor XNextRequest$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle XNextRequest$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "XNextRequest",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        constants$15.XNextRequest$FUNC, false
    );
    static final FunctionDescriptor XLastKnownRequestProcessed$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER
    );
    static final MethodHandle XLastKnownRequestProcessed$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "XLastKnownRequestProcessed",
        "(Ljdk/incubator/foreign/MemoryAddress;)J",
        constants$15.XLastKnownRequestProcessed$FUNC, false
    );
    static final FunctionDescriptor XServerVendor$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final MethodHandle XServerVendor$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "XServerVendor",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$15.XServerVendor$FUNC, false
    );
}


