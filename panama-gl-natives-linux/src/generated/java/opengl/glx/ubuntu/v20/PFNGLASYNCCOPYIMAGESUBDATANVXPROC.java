// Generated by jextract

package opengl.glx.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public interface PFNGLASYNCCOPYIMAGESUBDATANVXPROC {

    int apply(int x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, int x4, int x5, int x6, int x7, int x8, int x9, int x10, int x11, int x12, int x13, int x14, int x15, int x16, int x17, int x18, int x19, int x20, jdk.incubator.foreign.MemoryAddress x21, jdk.incubator.foreign.MemoryAddress x22);
    static MemoryAddress allocate(PFNGLASYNCCOPYIMAGESUBDATANVXPROC fi) {
        return RuntimeHelper.upcallStub(PFNGLASYNCCOPYIMAGESUBDATANVXPROC.class, fi, constants$807.PFNGLASYNCCOPYIMAGESUBDATANVXPROC$FUNC, "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIIIIIIIIIIIIIIIIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
    }
    static MemoryAddress allocate(PFNGLASYNCCOPYIMAGESUBDATANVXPROC fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(PFNGLASYNCCOPYIMAGESUBDATANVXPROC.class, fi, constants$807.PFNGLASYNCCOPYIMAGESUBDATANVXPROC$FUNC, "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIIIIIIIIIIIIIIIIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
    }
    static PFNGLASYNCCOPYIMAGESUBDATANVXPROC ofAddress(MemoryAddress addr) {
        return (int x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, int x4, int x5, int x6, int x7, int x8, int x9, int x10, int x11, int x12, int x13, int x14, int x15, int x16, int x17, int x18, int x19, int x20, jdk.incubator.foreign.MemoryAddress x21, jdk.incubator.foreign.MemoryAddress x22) -> {
            try {
                return (int)constants$807.PFNGLASYNCCOPYIMAGESUBDATANVXPROC$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


