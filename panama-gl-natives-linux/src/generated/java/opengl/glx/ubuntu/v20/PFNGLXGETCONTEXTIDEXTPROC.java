// Generated by jextract

package opengl.glx.ubuntu.v20;

import jdk.incubator.foreign.Addressable;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.ResourceScope;
public interface PFNGLXGETCONTEXTIDEXTPROC {

    long apply(jdk.incubator.foreign.MemoryAddress x0);
    static MemoryAddress allocate(PFNGLXGETCONTEXTIDEXTPROC fi) {
        return RuntimeHelper.upcallStub(PFNGLXGETCONTEXTIDEXTPROC.class, fi, constants$1032.PFNGLXGETCONTEXTIDEXTPROC$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)J");
    }
    static MemoryAddress allocate(PFNGLXGETCONTEXTIDEXTPROC fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(PFNGLXGETCONTEXTIDEXTPROC.class, fi, constants$1032.PFNGLXGETCONTEXTIDEXTPROC$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)J", scope);
    }
    static PFNGLXGETCONTEXTIDEXTPROC ofAddress(MemoryAddress addr) {
        return (jdk.incubator.foreign.MemoryAddress x0) -> {
            try {
                return (long)constants$1032.PFNGLXGETCONTEXTIDEXTPROC$MH.invokeExact((Addressable)addr, x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


