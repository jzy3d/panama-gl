// Generated by jextract

package opengl.glx.ubuntu.v20;

import static jdk.incubator.foreign.CLinker.C_INT;
import static jdk.incubator.foreign.CLinker.C_LONG;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.MemoryLayout;
import jdk.incubator.foreign.MemorySegment;
import jdk.incubator.foreign.ResourceScope;
import jdk.incubator.foreign.SegmentAllocator;
public class XSetWindowAttributes {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG.withName("background_pixmap"),
        C_LONG.withName("background_pixel"),
        C_LONG.withName("border_pixmap"),
        C_LONG.withName("border_pixel"),
        C_INT.withName("bit_gravity"),
        C_INT.withName("win_gravity"),
        C_INT.withName("backing_store"),
        MemoryLayout.paddingLayout(32),
        C_LONG.withName("backing_planes"),
        C_LONG.withName("backing_pixel"),
        C_INT.withName("save_under"),
        MemoryLayout.paddingLayout(32),
        C_LONG.withName("event_mask"),
        C_LONG.withName("do_not_propagate_mask"),
        C_INT.withName("override_redirect"),
        MemoryLayout.paddingLayout(32),
        C_LONG.withName("colormap"),
        C_LONG.withName("cursor")
    );
    public static MemoryLayout $LAYOUT() {
        return XSetWindowAttributes.$struct$LAYOUT;
    }
    static final VarHandle background_pixmap$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("background_pixmap"));
    public static VarHandle background_pixmap$VH() {
        return XSetWindowAttributes.background_pixmap$VH;
    }
    public static long background_pixmap$get(MemorySegment seg) {
        return (long)XSetWindowAttributes.background_pixmap$VH.get(seg);
    }
    public static void background_pixmap$set( MemorySegment seg, long x) {
        XSetWindowAttributes.background_pixmap$VH.set(seg, x);
    }
    public static long background_pixmap$get(MemorySegment seg, long index) {
        return (long)XSetWindowAttributes.background_pixmap$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void background_pixmap$set(MemorySegment seg, long index, long x) {
        XSetWindowAttributes.background_pixmap$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle background_pixel$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("background_pixel"));
    public static VarHandle background_pixel$VH() {
        return XSetWindowAttributes.background_pixel$VH;
    }
    public static long background_pixel$get(MemorySegment seg) {
        return (long)XSetWindowAttributes.background_pixel$VH.get(seg);
    }
    public static void background_pixel$set( MemorySegment seg, long x) {
        XSetWindowAttributes.background_pixel$VH.set(seg, x);
    }
    public static long background_pixel$get(MemorySegment seg, long index) {
        return (long)XSetWindowAttributes.background_pixel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void background_pixel$set(MemorySegment seg, long index, long x) {
        XSetWindowAttributes.background_pixel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle border_pixmap$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("border_pixmap"));
    public static VarHandle border_pixmap$VH() {
        return XSetWindowAttributes.border_pixmap$VH;
    }
    public static long border_pixmap$get(MemorySegment seg) {
        return (long)XSetWindowAttributes.border_pixmap$VH.get(seg);
    }
    public static void border_pixmap$set( MemorySegment seg, long x) {
        XSetWindowAttributes.border_pixmap$VH.set(seg, x);
    }
    public static long border_pixmap$get(MemorySegment seg, long index) {
        return (long)XSetWindowAttributes.border_pixmap$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void border_pixmap$set(MemorySegment seg, long index, long x) {
        XSetWindowAttributes.border_pixmap$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle border_pixel$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("border_pixel"));
    public static VarHandle border_pixel$VH() {
        return XSetWindowAttributes.border_pixel$VH;
    }
    public static long border_pixel$get(MemorySegment seg) {
        return (long)XSetWindowAttributes.border_pixel$VH.get(seg);
    }
    public static void border_pixel$set( MemorySegment seg, long x) {
        XSetWindowAttributes.border_pixel$VH.set(seg, x);
    }
    public static long border_pixel$get(MemorySegment seg, long index) {
        return (long)XSetWindowAttributes.border_pixel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void border_pixel$set(MemorySegment seg, long index, long x) {
        XSetWindowAttributes.border_pixel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle bit_gravity$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("bit_gravity"));
    public static VarHandle bit_gravity$VH() {
        return XSetWindowAttributes.bit_gravity$VH;
    }
    public static int bit_gravity$get(MemorySegment seg) {
        return (int)XSetWindowAttributes.bit_gravity$VH.get(seg);
    }
    public static void bit_gravity$set( MemorySegment seg, int x) {
        XSetWindowAttributes.bit_gravity$VH.set(seg, x);
    }
    public static int bit_gravity$get(MemorySegment seg, long index) {
        return (int)XSetWindowAttributes.bit_gravity$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bit_gravity$set(MemorySegment seg, long index, int x) {
        XSetWindowAttributes.bit_gravity$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle win_gravity$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("win_gravity"));
    public static VarHandle win_gravity$VH() {
        return XSetWindowAttributes.win_gravity$VH;
    }
    public static int win_gravity$get(MemorySegment seg) {
        return (int)XSetWindowAttributes.win_gravity$VH.get(seg);
    }
    public static void win_gravity$set( MemorySegment seg, int x) {
        XSetWindowAttributes.win_gravity$VH.set(seg, x);
    }
    public static int win_gravity$get(MemorySegment seg, long index) {
        return (int)XSetWindowAttributes.win_gravity$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void win_gravity$set(MemorySegment seg, long index, int x) {
        XSetWindowAttributes.win_gravity$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle backing_store$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("backing_store"));
    public static VarHandle backing_store$VH() {
        return XSetWindowAttributes.backing_store$VH;
    }
    public static int backing_store$get(MemorySegment seg) {
        return (int)XSetWindowAttributes.backing_store$VH.get(seg);
    }
    public static void backing_store$set( MemorySegment seg, int x) {
        XSetWindowAttributes.backing_store$VH.set(seg, x);
    }
    public static int backing_store$get(MemorySegment seg, long index) {
        return (int)XSetWindowAttributes.backing_store$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void backing_store$set(MemorySegment seg, long index, int x) {
        XSetWindowAttributes.backing_store$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle backing_planes$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("backing_planes"));
    public static VarHandle backing_planes$VH() {
        return XSetWindowAttributes.backing_planes$VH;
    }
    public static long backing_planes$get(MemorySegment seg) {
        return (long)XSetWindowAttributes.backing_planes$VH.get(seg);
    }
    public static void backing_planes$set( MemorySegment seg, long x) {
        XSetWindowAttributes.backing_planes$VH.set(seg, x);
    }
    public static long backing_planes$get(MemorySegment seg, long index) {
        return (long)XSetWindowAttributes.backing_planes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void backing_planes$set(MemorySegment seg, long index, long x) {
        XSetWindowAttributes.backing_planes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle backing_pixel$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("backing_pixel"));
    public static VarHandle backing_pixel$VH() {
        return XSetWindowAttributes.backing_pixel$VH;
    }
    public static long backing_pixel$get(MemorySegment seg) {
        return (long)XSetWindowAttributes.backing_pixel$VH.get(seg);
    }
    public static void backing_pixel$set( MemorySegment seg, long x) {
        XSetWindowAttributes.backing_pixel$VH.set(seg, x);
    }
    public static long backing_pixel$get(MemorySegment seg, long index) {
        return (long)XSetWindowAttributes.backing_pixel$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void backing_pixel$set(MemorySegment seg, long index, long x) {
        XSetWindowAttributes.backing_pixel$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle save_under$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("save_under"));
    public static VarHandle save_under$VH() {
        return XSetWindowAttributes.save_under$VH;
    }
    public static int save_under$get(MemorySegment seg) {
        return (int)XSetWindowAttributes.save_under$VH.get(seg);
    }
    public static void save_under$set( MemorySegment seg, int x) {
        XSetWindowAttributes.save_under$VH.set(seg, x);
    }
    public static int save_under$get(MemorySegment seg, long index) {
        return (int)XSetWindowAttributes.save_under$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void save_under$set(MemorySegment seg, long index, int x) {
        XSetWindowAttributes.save_under$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle event_mask$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("event_mask"));
    public static VarHandle event_mask$VH() {
        return XSetWindowAttributes.event_mask$VH;
    }
    public static long event_mask$get(MemorySegment seg) {
        return (long)XSetWindowAttributes.event_mask$VH.get(seg);
    }
    public static void event_mask$set( MemorySegment seg, long x) {
        XSetWindowAttributes.event_mask$VH.set(seg, x);
    }
    public static long event_mask$get(MemorySegment seg, long index) {
        return (long)XSetWindowAttributes.event_mask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void event_mask$set(MemorySegment seg, long index, long x) {
        XSetWindowAttributes.event_mask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle do_not_propagate_mask$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("do_not_propagate_mask"));
    public static VarHandle do_not_propagate_mask$VH() {
        return XSetWindowAttributes.do_not_propagate_mask$VH;
    }
    public static long do_not_propagate_mask$get(MemorySegment seg) {
        return (long)XSetWindowAttributes.do_not_propagate_mask$VH.get(seg);
    }
    public static void do_not_propagate_mask$set( MemorySegment seg, long x) {
        XSetWindowAttributes.do_not_propagate_mask$VH.set(seg, x);
    }
    public static long do_not_propagate_mask$get(MemorySegment seg, long index) {
        return (long)XSetWindowAttributes.do_not_propagate_mask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void do_not_propagate_mask$set(MemorySegment seg, long index, long x) {
        XSetWindowAttributes.do_not_propagate_mask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle override_redirect$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("override_redirect"));
    public static VarHandle override_redirect$VH() {
        return XSetWindowAttributes.override_redirect$VH;
    }
    public static int override_redirect$get(MemorySegment seg) {
        return (int)XSetWindowAttributes.override_redirect$VH.get(seg);
    }
    public static void override_redirect$set( MemorySegment seg, int x) {
        XSetWindowAttributes.override_redirect$VH.set(seg, x);
    }
    public static int override_redirect$get(MemorySegment seg, long index) {
        return (int)XSetWindowAttributes.override_redirect$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void override_redirect$set(MemorySegment seg, long index, int x) {
        XSetWindowAttributes.override_redirect$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle colormap$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("colormap"));
    public static VarHandle colormap$VH() {
        return XSetWindowAttributes.colormap$VH;
    }
    public static long colormap$get(MemorySegment seg) {
        return (long)XSetWindowAttributes.colormap$VH.get(seg);
    }
    public static void colormap$set( MemorySegment seg, long x) {
        XSetWindowAttributes.colormap$VH.set(seg, x);
    }
    public static long colormap$get(MemorySegment seg, long index) {
        return (long)XSetWindowAttributes.colormap$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void colormap$set(MemorySegment seg, long index, long x) {
        XSetWindowAttributes.colormap$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cursor$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("cursor"));
    public static VarHandle cursor$VH() {
        return XSetWindowAttributes.cursor$VH;
    }
    public static long cursor$get(MemorySegment seg) {
        return (long)XSetWindowAttributes.cursor$VH.get(seg);
    }
    public static void cursor$set( MemorySegment seg, long x) {
        XSetWindowAttributes.cursor$VH.set(seg, x);
    }
    public static long cursor$get(MemorySegment seg, long index) {
        return (long)XSetWindowAttributes.cursor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cursor$set(MemorySegment seg, long index, long x) {
        XSetWindowAttributes.cursor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


