// Generated by jextract

package opengl.glx.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$1021 {

    static final FunctionDescriptor glXQueryContext$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final MethodHandle glXQueryContext$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glXQueryContext",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)I",
        constants$1021.glXQueryContext$FUNC, false
    );
    static final FunctionDescriptor glXSelectEvent$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONG,
        C_LONG
    );
    static final MethodHandle glXSelectEvent$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glXSelectEvent",
        "(Ljdk/incubator/foreign/MemoryAddress;JJ)V",
        constants$1021.glXSelectEvent$FUNC, false
    );
    static final FunctionDescriptor glXGetSelectedEvent$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle glXGetSelectedEvent$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glXGetSelectedEvent",
        "(Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)V",
        constants$1021.glXGetSelectedEvent$FUNC, false
    );
    static final FunctionDescriptor PFNGLXGETFBCONFIGSPROC$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final MethodHandle PFNGLXGETFBCONFIGSPROC$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$1021.PFNGLXGETFBCONFIGSPROC$FUNC, false
    );
    static final FunctionDescriptor PFNGLXCHOOSEFBCONFIGPROC$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER,
        C_POINTER
    );
}


