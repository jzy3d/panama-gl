// Generated by jextract

package opengl.glx.ubuntu.v20;

import jdk.incubator.foreign.Addressable;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.ResourceScope;
public interface PFNGLMAPTEXTURE2DINTELPROC {

    jdk.incubator.foreign.MemoryAddress apply(int x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4);
    static MemoryAddress allocate(PFNGLMAPTEXTURE2DINTELPROC fi) {
        return RuntimeHelper.upcallStub(PFNGLMAPTEXTURE2DINTELPROC.class, fi, constants$791.PFNGLMAPTEXTURE2DINTELPROC$FUNC, "(IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;");
    }
    static MemoryAddress allocate(PFNGLMAPTEXTURE2DINTELPROC fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(PFNGLMAPTEXTURE2DINTELPROC.class, fi, constants$791.PFNGLMAPTEXTURE2DINTELPROC$FUNC, "(IIILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;", scope);
    }
    static PFNGLMAPTEXTURE2DINTELPROC ofAddress(MemoryAddress addr) {
        return (int x0, int x1, int x2, jdk.incubator.foreign.MemoryAddress x3, jdk.incubator.foreign.MemoryAddress x4) -> {
            try {
                return (jdk.incubator.foreign.MemoryAddress)constants$791.PFNGLMAPTEXTURE2DINTELPROC$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


