// Generated by jextract

package opengl.glx.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public interface PFNGLXRELEASEVIDEODEVICENVPROC {

    int apply(jdk.incubator.foreign.MemoryAddress x0, int x1, int x2);
    static MemoryAddress allocate(PFNGLXRELEASEVIDEODEVICENVPROC fi) {
        return RuntimeHelper.upcallStub(PFNGLXRELEASEVIDEODEVICENVPROC.class, fi, constants$1044.PFNGLXRELEASEVIDEODEVICENVPROC$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)I");
    }
    static MemoryAddress allocate(PFNGLXRELEASEVIDEODEVICENVPROC fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(PFNGLXRELEASEVIDEODEVICENVPROC.class, fi, constants$1044.PFNGLXRELEASEVIDEODEVICENVPROC$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;II)I", scope);
    }
    static PFNGLXRELEASEVIDEODEVICENVPROC ofAddress(MemoryAddress addr) {
        return (jdk.incubator.foreign.MemoryAddress x0, int x1, int x2) -> {
            try {
                return (int)constants$1044.PFNGLXRELEASEVIDEODEVICENVPROC$MH.invokeExact((Addressable)addr, x0, x1, x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


