// Generated by jextract

package opengl.glx.ubuntu.v20;

import static jdk.incubator.foreign.CLinker.C_INT;
import static jdk.incubator.foreign.CLinker.C_LONG;
import static jdk.incubator.foreign.CLinker.C_POINTER;
import java.lang.invoke.MethodHandle;
import jdk.incubator.foreign.FunctionDescriptor;
class constants$4 {

    static final FunctionDescriptor XInitImage$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle XInitImage$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "XInitImage",
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        constants$4.XInitImage$FUNC, false
    );
    static final FunctionDescriptor XGetImage$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_LONG,
        C_INT
    );
    static final MethodHandle XGetImage$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "XGetImage",
        "(Ljdk/incubator/foreign/MemoryAddress;JIIIIJI)Ljdk/incubator/foreign/MemoryAddress;",
        constants$4.XGetImage$FUNC, false
    );
    static final FunctionDescriptor XGetSubImage$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_LONG,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_LONG,
        C_INT,
        C_POINTER,
        C_INT,
        C_INT
    );
    static final MethodHandle XGetSubImage$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "XGetSubImage",
        "(Ljdk/incubator/foreign/MemoryAddress;JIIIIJILjdk/incubator/foreign/MemoryAddress;II)Ljdk/incubator/foreign/MemoryAddress;",
        constants$4.XGetSubImage$FUNC, false
    );
    static final FunctionDescriptor XOpenDisplay$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER
    );
    static final MethodHandle XOpenDisplay$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "XOpenDisplay",
        "(Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$4.XOpenDisplay$FUNC, false
    );
    static final FunctionDescriptor XrmInitialize$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle XrmInitialize$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "XrmInitialize",
        "()V",
        constants$4.XrmInitialize$FUNC, false
    );
    static final FunctionDescriptor XFetchBytes$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle XFetchBytes$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "XFetchBytes",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$4.XFetchBytes$FUNC, false
    );
}


