// Generated by jextract

package opengl.glx.ubuntu.v20;

import jdk.incubator.foreign.Addressable;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.ResourceScope;
public interface PFNGLVERTEXATTRIB4SNVPROC {

    void apply(int x0, short x1, short x2, short x3, short x4);
    static MemoryAddress allocate(PFNGLVERTEXATTRIB4SNVPROC fi) {
        return RuntimeHelper.upcallStub(PFNGLVERTEXATTRIB4SNVPROC.class, fi, constants$950.PFNGLVERTEXATTRIB4SNVPROC$FUNC, "(ISSSS)V");
    }
    static MemoryAddress allocate(PFNGLVERTEXATTRIB4SNVPROC fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(PFNGLVERTEXATTRIB4SNVPROC.class, fi, constants$950.PFNGLVERTEXATTRIB4SNVPROC$FUNC, "(ISSSS)V", scope);
    }
    static PFNGLVERTEXATTRIB4SNVPROC ofAddress(MemoryAddress addr) {
        return (int x0, short x1, short x2, short x3, short x4) -> {
            try {
                constants$950.PFNGLVERTEXATTRIB4SNVPROC$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


