// Generated by jextract

package opengl.glx.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$104 {

    static final FunctionDescriptor glIndexi$FUNC = FunctionDescriptor.ofVoid(
        C_INT
    );
    static final MethodHandle glIndexi$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glIndexi",
        "(I)V",
        constants$104.glIndexi$FUNC, false
    );
    static final FunctionDescriptor glIndexs$FUNC = FunctionDescriptor.ofVoid(
        C_SHORT
    );
    static final MethodHandle glIndexs$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glIndexs",
        "(S)V",
        constants$104.glIndexs$FUNC, false
    );
    static final FunctionDescriptor glIndexub$FUNC = FunctionDescriptor.ofVoid(
        C_CHAR
    );
    static final MethodHandle glIndexub$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glIndexub",
        "(B)V",
        constants$104.glIndexub$FUNC, false
    );
    static final FunctionDescriptor glIndexdv$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle glIndexdv$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glIndexdv",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$104.glIndexdv$FUNC, false
    );
    static final FunctionDescriptor glIndexfv$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle glIndexfv$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glIndexfv",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$104.glIndexfv$FUNC, false
    );
    static final FunctionDescriptor glIndexiv$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle glIndexiv$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glIndexiv",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$104.glIndexiv$FUNC, false
    );
}


