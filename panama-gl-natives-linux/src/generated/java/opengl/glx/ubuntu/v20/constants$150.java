// Generated by jextract

package opengl.glx.ubuntu.v20;

import static jdk.incubator.foreign.CLinker.C_DOUBLE;
import static jdk.incubator.foreign.CLinker.C_FLOAT;
import static jdk.incubator.foreign.CLinker.C_INT;
import static jdk.incubator.foreign.CLinker.C_POINTER;
import java.lang.invoke.MethodHandle;
import jdk.incubator.foreign.FunctionDescriptor;
class constants$150 {

    static final FunctionDescriptor glCompressedTexSubImage2D$FUNC = FunctionDescriptor.ofVoid(
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final MethodHandle glCompressedTexSubImage2D$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glCompressedTexSubImage2D",
        "(IIIIIIIILjdk/incubator/foreign/MemoryAddress;)V",
        constants$150.glCompressedTexSubImage2D$FUNC, false
    );
    static final FunctionDescriptor glCompressedTexSubImage3D$FUNC = FunctionDescriptor.ofVoid(
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final MethodHandle glCompressedTexSubImage3D$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glCompressedTexSubImage3D",
        "(IIIIIIIIIILjdk/incubator/foreign/MemoryAddress;)V",
        constants$150.glCompressedTexSubImage3D$FUNC, false
    );
    static final FunctionDescriptor glGetCompressedTexImage$FUNC = FunctionDescriptor.ofVoid(
        C_INT,
        C_INT,
        C_POINTER
    );
    static final MethodHandle glGetCompressedTexImage$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glGetCompressedTexImage",
        "(IILjdk/incubator/foreign/MemoryAddress;)V",
        constants$150.glGetCompressedTexImage$FUNC, false
    );
    static final FunctionDescriptor glMultiTexCoord1d$FUNC = FunctionDescriptor.ofVoid(
        C_INT,
        C_DOUBLE
    );
    static final MethodHandle glMultiTexCoord1d$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glMultiTexCoord1d",
        "(ID)V",
        constants$150.glMultiTexCoord1d$FUNC, false
    );
    static final FunctionDescriptor glMultiTexCoord1dv$FUNC = FunctionDescriptor.ofVoid(
        C_INT,
        C_POINTER
    );
    static final MethodHandle glMultiTexCoord1dv$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glMultiTexCoord1dv",
        "(ILjdk/incubator/foreign/MemoryAddress;)V",
        constants$150.glMultiTexCoord1dv$FUNC, false
    );
    static final FunctionDescriptor glMultiTexCoord1f$FUNC = FunctionDescriptor.ofVoid(
        C_INT,
        C_FLOAT
    );
    static final MethodHandle glMultiTexCoord1f$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glMultiTexCoord1f",
        "(IF)V",
        constants$150.glMultiTexCoord1f$FUNC, false
    );
}


