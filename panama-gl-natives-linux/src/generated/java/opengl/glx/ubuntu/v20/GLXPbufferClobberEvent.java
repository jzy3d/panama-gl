// Generated by jextract

package opengl.glx.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class GLXPbufferClobberEvent {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("event_type"),
        C_INT.withName("draw_type"),
        C_LONG.withName("serial"),
        C_INT.withName("send_event"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("display"),
        C_LONG.withName("drawable"),
        C_INT.withName("buffer_mask"),
        C_INT.withName("aux_buffer"),
        C_INT.withName("x"),
        C_INT.withName("y"),
        C_INT.withName("width"),
        C_INT.withName("height"),
        C_INT.withName("count"),
        MemoryLayout.paddingLayout(32)
    );
    public static MemoryLayout $LAYOUT() {
        return GLXPbufferClobberEvent.$struct$LAYOUT;
    }
    static final VarHandle event_type$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("event_type"));
    public static VarHandle event_type$VH() {
        return GLXPbufferClobberEvent.event_type$VH;
    }
    public static int event_type$get(MemorySegment seg) {
        return (int)GLXPbufferClobberEvent.event_type$VH.get(seg);
    }
    public static void event_type$set( MemorySegment seg, int x) {
        GLXPbufferClobberEvent.event_type$VH.set(seg, x);
    }
    public static int event_type$get(MemorySegment seg, long index) {
        return (int)GLXPbufferClobberEvent.event_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void event_type$set(MemorySegment seg, long index, int x) {
        GLXPbufferClobberEvent.event_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle draw_type$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("draw_type"));
    public static VarHandle draw_type$VH() {
        return GLXPbufferClobberEvent.draw_type$VH;
    }
    public static int draw_type$get(MemorySegment seg) {
        return (int)GLXPbufferClobberEvent.draw_type$VH.get(seg);
    }
    public static void draw_type$set( MemorySegment seg, int x) {
        GLXPbufferClobberEvent.draw_type$VH.set(seg, x);
    }
    public static int draw_type$get(MemorySegment seg, long index) {
        return (int)GLXPbufferClobberEvent.draw_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_type$set(MemorySegment seg, long index, int x) {
        GLXPbufferClobberEvent.draw_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle serial$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("serial"));
    public static VarHandle serial$VH() {
        return GLXPbufferClobberEvent.serial$VH;
    }
    public static long serial$get(MemorySegment seg) {
        return (long)GLXPbufferClobberEvent.serial$VH.get(seg);
    }
    public static void serial$set( MemorySegment seg, long x) {
        GLXPbufferClobberEvent.serial$VH.set(seg, x);
    }
    public static long serial$get(MemorySegment seg, long index) {
        return (long)GLXPbufferClobberEvent.serial$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void serial$set(MemorySegment seg, long index, long x) {
        GLXPbufferClobberEvent.serial$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle send_event$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("send_event"));
    public static VarHandle send_event$VH() {
        return GLXPbufferClobberEvent.send_event$VH;
    }
    public static int send_event$get(MemorySegment seg) {
        return (int)GLXPbufferClobberEvent.send_event$VH.get(seg);
    }
    public static void send_event$set( MemorySegment seg, int x) {
        GLXPbufferClobberEvent.send_event$VH.set(seg, x);
    }
    public static int send_event$get(MemorySegment seg, long index) {
        return (int)GLXPbufferClobberEvent.send_event$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void send_event$set(MemorySegment seg, long index, int x) {
        GLXPbufferClobberEvent.send_event$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle display$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("display")));
    public static VarHandle display$VH() {
        return GLXPbufferClobberEvent.display$VH;
    }
    public static MemoryAddress display$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)GLXPbufferClobberEvent.display$VH.get(seg);
    }
    public static void display$set( MemorySegment seg, MemoryAddress x) {
        GLXPbufferClobberEvent.display$VH.set(seg, x);
    }
    public static MemoryAddress display$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)GLXPbufferClobberEvent.display$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void display$set(MemorySegment seg, long index, MemoryAddress x) {
        GLXPbufferClobberEvent.display$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle drawable$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("drawable"));
    public static VarHandle drawable$VH() {
        return GLXPbufferClobberEvent.drawable$VH;
    }
    public static long drawable$get(MemorySegment seg) {
        return (long)GLXPbufferClobberEvent.drawable$VH.get(seg);
    }
    public static void drawable$set( MemorySegment seg, long x) {
        GLXPbufferClobberEvent.drawable$VH.set(seg, x);
    }
    public static long drawable$get(MemorySegment seg, long index) {
        return (long)GLXPbufferClobberEvent.drawable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void drawable$set(MemorySegment seg, long index, long x) {
        GLXPbufferClobberEvent.drawable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle buffer_mask$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("buffer_mask"));
    public static VarHandle buffer_mask$VH() {
        return GLXPbufferClobberEvent.buffer_mask$VH;
    }
    public static int buffer_mask$get(MemorySegment seg) {
        return (int)GLXPbufferClobberEvent.buffer_mask$VH.get(seg);
    }
    public static void buffer_mask$set( MemorySegment seg, int x) {
        GLXPbufferClobberEvent.buffer_mask$VH.set(seg, x);
    }
    public static int buffer_mask$get(MemorySegment seg, long index) {
        return (int)GLXPbufferClobberEvent.buffer_mask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void buffer_mask$set(MemorySegment seg, long index, int x) {
        GLXPbufferClobberEvent.buffer_mask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle aux_buffer$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("aux_buffer"));
    public static VarHandle aux_buffer$VH() {
        return GLXPbufferClobberEvent.aux_buffer$VH;
    }
    public static int aux_buffer$get(MemorySegment seg) {
        return (int)GLXPbufferClobberEvent.aux_buffer$VH.get(seg);
    }
    public static void aux_buffer$set( MemorySegment seg, int x) {
        GLXPbufferClobberEvent.aux_buffer$VH.set(seg, x);
    }
    public static int aux_buffer$get(MemorySegment seg, long index) {
        return (int)GLXPbufferClobberEvent.aux_buffer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void aux_buffer$set(MemorySegment seg, long index, int x) {
        GLXPbufferClobberEvent.aux_buffer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle x$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("x"));
    public static VarHandle x$VH() {
        return GLXPbufferClobberEvent.x$VH;
    }
    public static int x$get(MemorySegment seg) {
        return (int)GLXPbufferClobberEvent.x$VH.get(seg);
    }
    public static void x$set( MemorySegment seg, int x) {
        GLXPbufferClobberEvent.x$VH.set(seg, x);
    }
    public static int x$get(MemorySegment seg, long index) {
        return (int)GLXPbufferClobberEvent.x$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void x$set(MemorySegment seg, long index, int x) {
        GLXPbufferClobberEvent.x$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle y$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("y"));
    public static VarHandle y$VH() {
        return GLXPbufferClobberEvent.y$VH;
    }
    public static int y$get(MemorySegment seg) {
        return (int)GLXPbufferClobberEvent.y$VH.get(seg);
    }
    public static void y$set( MemorySegment seg, int x) {
        GLXPbufferClobberEvent.y$VH.set(seg, x);
    }
    public static int y$get(MemorySegment seg, long index) {
        return (int)GLXPbufferClobberEvent.y$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void y$set(MemorySegment seg, long index, int x) {
        GLXPbufferClobberEvent.y$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle width$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("width"));
    public static VarHandle width$VH() {
        return GLXPbufferClobberEvent.width$VH;
    }
    public static int width$get(MemorySegment seg) {
        return (int)GLXPbufferClobberEvent.width$VH.get(seg);
    }
    public static void width$set( MemorySegment seg, int x) {
        GLXPbufferClobberEvent.width$VH.set(seg, x);
    }
    public static int width$get(MemorySegment seg, long index) {
        return (int)GLXPbufferClobberEvent.width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void width$set(MemorySegment seg, long index, int x) {
        GLXPbufferClobberEvent.width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle height$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("height"));
    public static VarHandle height$VH() {
        return GLXPbufferClobberEvent.height$VH;
    }
    public static int height$get(MemorySegment seg) {
        return (int)GLXPbufferClobberEvent.height$VH.get(seg);
    }
    public static void height$set( MemorySegment seg, int x) {
        GLXPbufferClobberEvent.height$VH.set(seg, x);
    }
    public static int height$get(MemorySegment seg, long index) {
        return (int)GLXPbufferClobberEvent.height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, int x) {
        GLXPbufferClobberEvent.height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle count$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("count"));
    public static VarHandle count$VH() {
        return GLXPbufferClobberEvent.count$VH;
    }
    public static int count$get(MemorySegment seg) {
        return (int)GLXPbufferClobberEvent.count$VH.get(seg);
    }
    public static void count$set( MemorySegment seg, int x) {
        GLXPbufferClobberEvent.count$VH.set(seg, x);
    }
    public static int count$get(MemorySegment seg, long index) {
        return (int)GLXPbufferClobberEvent.count$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void count$set(MemorySegment seg, long index, int x) {
        GLXPbufferClobberEvent.count$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


