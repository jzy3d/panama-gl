// Generated by jextract

package opengl.glx.ubuntu.v20;

import static jdk.incubator.foreign.CLinker.C_INT;
import static jdk.incubator.foreign.CLinker.C_LONG;
import static jdk.incubator.foreign.CLinker.C_POINTER;
import java.lang.invoke.MethodHandle;
import jdk.incubator.foreign.FunctionDescriptor;
class constants$1019 {

    static final FunctionDescriptor glXGetFBConfigs$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_INT,
        C_POINTER
    );
    static final MethodHandle glXGetFBConfigs$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glXGetFBConfigs",
        "(Ljdk/incubator/foreign/MemoryAddress;ILjdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$1019.glXGetFBConfigs$FUNC, false
    );
    static final FunctionDescriptor glXGetVisualFromFBConfig$FUNC = FunctionDescriptor.of(C_POINTER,
        C_POINTER,
        C_POINTER
    );
    static final MethodHandle glXGetVisualFromFBConfig$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glXGetVisualFromFBConfig",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)Ljdk/incubator/foreign/MemoryAddress;",
        constants$1019.glXGetVisualFromFBConfig$FUNC, false
    );
    static final FunctionDescriptor glXCreateWindow$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle glXCreateWindow$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glXCreateWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)J",
        constants$1019.glXCreateWindow$FUNC, false
    );
    static final FunctionDescriptor glXDestroyWindow$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONG
    );
    static final MethodHandle glXDestroyWindow$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glXDestroyWindow",
        "(Ljdk/incubator/foreign/MemoryAddress;J)V",
        constants$1019.glXDestroyWindow$FUNC, false
    );
    static final FunctionDescriptor glXCreatePixmap$FUNC = FunctionDescriptor.of(C_LONG,
        C_POINTER,
        C_POINTER,
        C_LONG,
        C_POINTER
    );
    static final MethodHandle glXCreatePixmap$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glXCreatePixmap",
        "(Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;JLjdk/incubator/foreign/MemoryAddress;)J",
        constants$1019.glXCreatePixmap$FUNC, false
    );
    static final FunctionDescriptor glXDestroyPixmap$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER,
        C_LONG
    );
    static final MethodHandle glXDestroyPixmap$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glXDestroyPixmap",
        "(Ljdk/incubator/foreign/MemoryAddress;J)V",
        constants$1019.glXDestroyPixmap$FUNC, false
    );
}


