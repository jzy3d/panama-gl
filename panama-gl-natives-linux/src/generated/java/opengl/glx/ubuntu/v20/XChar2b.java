// Generated by jextract

package opengl.glx.ubuntu.v20;

import static jdk.incubator.foreign.CLinker.C_CHAR;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.MemoryLayout;
import jdk.incubator.foreign.MemorySegment;
import jdk.incubator.foreign.ResourceScope;
import jdk.incubator.foreign.SegmentAllocator;
public class XChar2b {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_CHAR.withName("byte1"),
        C_CHAR.withName("byte2")
    );
    public static MemoryLayout $LAYOUT() {
        return XChar2b.$struct$LAYOUT;
    }
    static final VarHandle byte1$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("byte1"));
    public static VarHandle byte1$VH() {
        return XChar2b.byte1$VH;
    }
    public static byte byte1$get(MemorySegment seg) {
        return (byte)XChar2b.byte1$VH.get(seg);
    }
    public static void byte1$set( MemorySegment seg, byte x) {
        XChar2b.byte1$VH.set(seg, x);
    }
    public static byte byte1$get(MemorySegment seg, long index) {
        return (byte)XChar2b.byte1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void byte1$set(MemorySegment seg, long index, byte x) {
        XChar2b.byte1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle byte2$VH = $struct$LAYOUT.varHandle(byte.class, MemoryLayout.PathElement.groupElement("byte2"));
    public static VarHandle byte2$VH() {
        return XChar2b.byte2$VH;
    }
    public static byte byte2$get(MemorySegment seg) {
        return (byte)XChar2b.byte2$VH.get(seg);
    }
    public static void byte2$set( MemorySegment seg, byte x) {
        XChar2b.byte2$VH.set(seg, x);
    }
    public static byte byte2$get(MemorySegment seg, long index) {
        return (byte)XChar2b.byte2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void byte2$set(MemorySegment seg, long index, byte x) {
        XChar2b.byte2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


