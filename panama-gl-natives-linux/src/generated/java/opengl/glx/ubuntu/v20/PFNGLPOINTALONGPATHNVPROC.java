// Generated by jextract

package opengl.glx.ubuntu.v20;

import jdk.incubator.foreign.Addressable;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.ResourceScope;
public interface PFNGLPOINTALONGPATHNVPROC {

    byte apply(int x0, int x1, int x2, float x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7);
    static MemoryAddress allocate(PFNGLPOINTALONGPATHNVPROC fi) {
        return RuntimeHelper.upcallStub(PFNGLPOINTALONGPATHNVPROC.class, fi, constants$885.PFNGLPOINTALONGPATHNVPROC$FUNC, "(IIIFLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)B");
    }
    static MemoryAddress allocate(PFNGLPOINTALONGPATHNVPROC fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(PFNGLPOINTALONGPATHNVPROC.class, fi, constants$885.PFNGLPOINTALONGPATHNVPROC$FUNC, "(IIIFLjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)B", scope);
    }
    static PFNGLPOINTALONGPATHNVPROC ofAddress(MemoryAddress addr) {
        return (int x0, int x1, int x2, float x3, jdk.incubator.foreign.MemoryAddress x4, jdk.incubator.foreign.MemoryAddress x5, jdk.incubator.foreign.MemoryAddress x6, jdk.incubator.foreign.MemoryAddress x7) -> {
            try {
                return (byte)constants$885.PFNGLPOINTALONGPATHNVPROC$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6, x7);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


