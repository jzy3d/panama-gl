// Generated by jextract

package opengl.glx.ubuntu.v20;

import static jdk.incubator.foreign.CLinker.C_CHAR;
import static jdk.incubator.foreign.CLinker.C_INT;
import java.lang.invoke.MethodHandle;
import jdk.incubator.foreign.FunctionDescriptor;
class constants$89 {

    static final FunctionDescriptor glDrawBuffer$FUNC = FunctionDescriptor.ofVoid(
        C_INT
    );
    static final MethodHandle glDrawBuffer$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glDrawBuffer",
        "(I)V",
        constants$89.glDrawBuffer$FUNC, false
    );
    static final FunctionDescriptor glReadBuffer$FUNC = FunctionDescriptor.ofVoid(
        C_INT
    );
    static final MethodHandle glReadBuffer$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glReadBuffer",
        "(I)V",
        constants$89.glReadBuffer$FUNC, false
    );
    static final FunctionDescriptor glEnable$FUNC = FunctionDescriptor.ofVoid(
        C_INT
    );
    static final MethodHandle glEnable$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glEnable",
        "(I)V",
        constants$89.glEnable$FUNC, false
    );
    static final FunctionDescriptor glDisable$FUNC = FunctionDescriptor.ofVoid(
        C_INT
    );
    static final MethodHandle glDisable$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glDisable",
        "(I)V",
        constants$89.glDisable$FUNC, false
    );
    static final FunctionDescriptor glIsEnabled$FUNC = FunctionDescriptor.of(C_CHAR,
        C_INT
    );
    static final MethodHandle glIsEnabled$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glIsEnabled",
        "(I)B",
        constants$89.glIsEnabled$FUNC, false
    );
    static final FunctionDescriptor glEnableClientState$FUNC = FunctionDescriptor.ofVoid(
        C_INT
    );
    static final MethodHandle glEnableClientState$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glEnableClientState",
        "(I)V",
        constants$89.glEnableClientState$FUNC, false
    );
}


