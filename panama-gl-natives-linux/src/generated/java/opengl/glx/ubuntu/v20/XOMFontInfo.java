// Generated by jextract

package opengl.glx.ubuntu.v20;

import static jdk.incubator.foreign.CLinker.C_INT;
import static jdk.incubator.foreign.CLinker.C_POINTER;
import java.lang.invoke.VarHandle;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.MemoryHandles;
import jdk.incubator.foreign.MemoryLayout;
import jdk.incubator.foreign.MemorySegment;
import jdk.incubator.foreign.ResourceScope;
import jdk.incubator.foreign.SegmentAllocator;
public class XOMFontInfo {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("num_font"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("font_struct_list"),
        C_POINTER.withName("font_name_list")
    );
    public static MemoryLayout $LAYOUT() {
        return XOMFontInfo.$struct$LAYOUT;
    }
    static final VarHandle num_font$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("num_font"));
    public static VarHandle num_font$VH() {
        return XOMFontInfo.num_font$VH;
    }
    public static int num_font$get(MemorySegment seg) {
        return (int)XOMFontInfo.num_font$VH.get(seg);
    }
    public static void num_font$set( MemorySegment seg, int x) {
        XOMFontInfo.num_font$VH.set(seg, x);
    }
    public static int num_font$get(MemorySegment seg, long index) {
        return (int)XOMFontInfo.num_font$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_font$set(MemorySegment seg, long index, int x) {
        XOMFontInfo.num_font$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle font_struct_list$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("font_struct_list")));
    public static VarHandle font_struct_list$VH() {
        return XOMFontInfo.font_struct_list$VH;
    }
    public static MemoryAddress font_struct_list$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)XOMFontInfo.font_struct_list$VH.get(seg);
    }
    public static void font_struct_list$set( MemorySegment seg, MemoryAddress x) {
        XOMFontInfo.font_struct_list$VH.set(seg, x);
    }
    public static MemoryAddress font_struct_list$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)XOMFontInfo.font_struct_list$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void font_struct_list$set(MemorySegment seg, long index, MemoryAddress x) {
        XOMFontInfo.font_struct_list$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle font_name_list$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("font_name_list")));
    public static VarHandle font_name_list$VH() {
        return XOMFontInfo.font_name_list$VH;
    }
    public static MemoryAddress font_name_list$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)XOMFontInfo.font_name_list$VH.get(seg);
    }
    public static void font_name_list$set( MemorySegment seg, MemoryAddress x) {
        XOMFontInfo.font_name_list$VH.set(seg, x);
    }
    public static MemoryAddress font_name_list$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)XOMFontInfo.font_name_list$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void font_name_list$set(MemorySegment seg, long index, MemoryAddress x) {
        XOMFontInfo.font_name_list$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


