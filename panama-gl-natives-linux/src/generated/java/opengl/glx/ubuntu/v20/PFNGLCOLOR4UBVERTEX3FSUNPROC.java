// Generated by jextract

package opengl.glx.ubuntu.v20;

import jdk.incubator.foreign.Addressable;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.ResourceScope;
public interface PFNGLCOLOR4UBVERTEX3FSUNPROC {

    void apply(byte x0, byte x1, byte x2, byte x3, float x4, float x5, float x6);
    static MemoryAddress allocate(PFNGLCOLOR4UBVERTEX3FSUNPROC fi) {
        return RuntimeHelper.upcallStub(PFNGLCOLOR4UBVERTEX3FSUNPROC.class, fi, constants$1001.PFNGLCOLOR4UBVERTEX3FSUNPROC$FUNC, "(BBBBFFF)V");
    }
    static MemoryAddress allocate(PFNGLCOLOR4UBVERTEX3FSUNPROC fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(PFNGLCOLOR4UBVERTEX3FSUNPROC.class, fi, constants$1001.PFNGLCOLOR4UBVERTEX3FSUNPROC$FUNC, "(BBBBFFF)V", scope);
    }
    static PFNGLCOLOR4UBVERTEX3FSUNPROC ofAddress(MemoryAddress addr) {
        return (byte x0, byte x1, byte x2, byte x3, float x4, float x5, float x6) -> {
            try {
                constants$1001.PFNGLCOLOR4UBVERTEX3FSUNPROC$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


