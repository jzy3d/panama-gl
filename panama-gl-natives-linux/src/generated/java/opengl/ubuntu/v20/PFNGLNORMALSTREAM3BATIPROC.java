// Generated by jextract

package opengl.ubuntu.v20;

import jdk.incubator.foreign.Addressable;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.ResourceScope;
public interface PFNGLNORMALSTREAM3BATIPROC {

    void apply(int x0, byte x1, byte x2, byte x3);
    static MemoryAddress allocate(PFNGLNORMALSTREAM3BATIPROC fi) {
        return RuntimeHelper.upcallStub(PFNGLNORMALSTREAM3BATIPROC.class, fi, constants$511.PFNGLNORMALSTREAM3BATIPROC$FUNC, "(IBBB)V");
    }
    static MemoryAddress allocate(PFNGLNORMALSTREAM3BATIPROC fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(PFNGLNORMALSTREAM3BATIPROC.class, fi, constants$511.PFNGLNORMALSTREAM3BATIPROC$FUNC, "(IBBB)V", scope);
    }
    static PFNGLNORMALSTREAM3BATIPROC ofAddress(MemoryAddress addr) {
        return (int x0, byte x1, byte x2, byte x3) -> {
            try {
                constants$511.PFNGLNORMALSTREAM3BATIPROC$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


