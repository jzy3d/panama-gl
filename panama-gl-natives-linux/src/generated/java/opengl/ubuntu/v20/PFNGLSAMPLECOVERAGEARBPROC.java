// Generated by jextract

package opengl.ubuntu.v20;

import jdk.incubator.foreign.Addressable;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.ResourceScope;
public interface PFNGLSAMPLECOVERAGEARBPROC {

    void apply(float x0, byte x1);
    static MemoryAddress allocate(PFNGLSAMPLECOVERAGEARBPROC fi) {
        return RuntimeHelper.upcallStub(PFNGLSAMPLECOVERAGEARBPROC.class, fi, constants$345.PFNGLSAMPLECOVERAGEARBPROC$FUNC, "(FB)V");
    }
    static MemoryAddress allocate(PFNGLSAMPLECOVERAGEARBPROC fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(PFNGLSAMPLECOVERAGEARBPROC.class, fi, constants$345.PFNGLSAMPLECOVERAGEARBPROC$FUNC, "(FB)V", scope);
    }
    static PFNGLSAMPLECOVERAGEARBPROC ofAddress(MemoryAddress addr) {
        return (float x0, byte x1) -> {
            try {
                constants$345.PFNGLSAMPLECOVERAGEARBPROC$MH.invokeExact((Addressable)addr, x0, x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


