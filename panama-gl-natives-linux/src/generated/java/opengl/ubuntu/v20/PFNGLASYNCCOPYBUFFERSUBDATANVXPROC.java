// Generated by jextract

package opengl.ubuntu.v20;

import jdk.incubator.foreign.Addressable;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.ResourceScope;
public interface PFNGLASYNCCOPYBUFFERSUBDATANVXPROC {

    int apply(int x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, int x4, int x5, int x6, long x7, long x8, long x9, int x10, jdk.incubator.foreign.MemoryAddress x11, jdk.incubator.foreign.MemoryAddress x12);
    static MemoryAddress allocate(PFNGLASYNCCOPYBUFFERSUBDATANVXPROC fi) {
        return RuntimeHelper.upcallStub(PFNGLASYNCCOPYBUFFERSUBDATANVXPROC.class, fi, constants$722.PFNGLASYNCCOPYBUFFERSUBDATANVXPROC$FUNC, "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIIIJJJILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I");
    }
    static MemoryAddress allocate(PFNGLASYNCCOPYBUFFERSUBDATANVXPROC fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(PFNGLASYNCCOPYBUFFERSUBDATANVXPROC.class, fi, constants$722.PFNGLASYNCCOPYBUFFERSUBDATANVXPROC$FUNC, "(ILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;IIIIJJJILjdk/incubator/foreign/MemoryAddress;Ljdk/incubator/foreign/MemoryAddress;)I", scope);
    }
    static PFNGLASYNCCOPYBUFFERSUBDATANVXPROC ofAddress(MemoryAddress addr) {
        return (int x0, jdk.incubator.foreign.MemoryAddress x1, jdk.incubator.foreign.MemoryAddress x2, int x3, int x4, int x5, int x6, long x7, long x8, long x9, int x10, jdk.incubator.foreign.MemoryAddress x11, jdk.incubator.foreign.MemoryAddress x12) -> {
            try {
                return (int)constants$722.PFNGLASYNCCOPYBUFFERSUBDATANVXPROC$MH.invokeExact((Addressable)addr, x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


