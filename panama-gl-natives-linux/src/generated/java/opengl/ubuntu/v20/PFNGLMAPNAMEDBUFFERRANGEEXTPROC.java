// Generated by jextract

package opengl.ubuntu.v20;

import jdk.incubator.foreign.Addressable;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.ResourceScope;
public interface PFNGLMAPNAMEDBUFFERRANGEEXTPROC {

    jdk.incubator.foreign.MemoryAddress apply(int x0, long x1, long x2, int x3);
    static MemoryAddress allocate(PFNGLMAPNAMEDBUFFERRANGEEXTPROC fi) {
        return RuntimeHelper.upcallStub(PFNGLMAPNAMEDBUFFERRANGEEXTPROC.class, fi, constants$608.PFNGLMAPNAMEDBUFFERRANGEEXTPROC$FUNC, "(IJJI)Ljdk/incubator/foreign/MemoryAddress;");
    }
    static MemoryAddress allocate(PFNGLMAPNAMEDBUFFERRANGEEXTPROC fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(PFNGLMAPNAMEDBUFFERRANGEEXTPROC.class, fi, constants$608.PFNGLMAPNAMEDBUFFERRANGEEXTPROC$FUNC, "(IJJI)Ljdk/incubator/foreign/MemoryAddress;", scope);
    }
    static PFNGLMAPNAMEDBUFFERRANGEEXTPROC ofAddress(MemoryAddress addr) {
        return (int x0, long x1, long x2, int x3) -> {
            try {
                return (jdk.incubator.foreign.MemoryAddress)constants$608.PFNGLMAPNAMEDBUFFERRANGEEXTPROC$MH.invokeExact((Addressable)addr, x0, x1, x2, x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


