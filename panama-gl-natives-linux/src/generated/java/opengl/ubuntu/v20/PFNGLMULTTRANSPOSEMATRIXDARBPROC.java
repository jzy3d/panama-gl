// Generated by jextract

package opengl.ubuntu.v20;

import jdk.incubator.foreign.Addressable;
import jdk.incubator.foreign.MemoryAddress;
import jdk.incubator.foreign.ResourceScope;
public interface PFNGLMULTTRANSPOSEMATRIXDARBPROC {

    void apply(jdk.incubator.foreign.MemoryAddress x0);
    static MemoryAddress allocate(PFNGLMULTTRANSPOSEMATRIXDARBPROC fi) {
        return RuntimeHelper.upcallStub(PFNGLMULTTRANSPOSEMATRIXDARBPROC.class, fi, constants$377.PFNGLMULTTRANSPOSEMATRIXDARBPROC$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V");
    }
    static MemoryAddress allocate(PFNGLMULTTRANSPOSEMATRIXDARBPROC fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(PFNGLMULTTRANSPOSEMATRIXDARBPROC.class, fi, constants$377.PFNGLMULTTRANSPOSEMATRIXDARBPROC$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)V", scope);
    }
    static PFNGLMULTTRANSPOSEMATRIXDARBPROC ofAddress(MemoryAddress addr) {
        return (jdk.incubator.foreign.MemoryAddress x0) -> {
            try {
                constants$377.PFNGLMULTTRANSPOSEMATRIXDARBPROC$MH.invokeExact((Addressable)addr, x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


