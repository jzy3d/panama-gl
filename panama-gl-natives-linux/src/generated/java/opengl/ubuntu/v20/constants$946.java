// Generated by jextract

package opengl.ubuntu.v20;

import static jdk.incubator.foreign.CLinker.C_INT;
import java.lang.invoke.MethodHandle;
import jdk.incubator.foreign.FunctionDescriptor;
class constants$946 {

    static final FunctionDescriptor glutRemoveOverlay$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle glutRemoveOverlay$MH = RuntimeHelper.downcallHandle(
        glut_h.LIBRARIES, "glutRemoveOverlay",
        "()V",
        constants$946.glutRemoveOverlay$FUNC, false
    );
    static final FunctionDescriptor glutUseLayer$FUNC = FunctionDescriptor.ofVoid(
        C_INT
    );
    static final MethodHandle glutUseLayer$MH = RuntimeHelper.downcallHandle(
        glut_h.LIBRARIES, "glutUseLayer",
        "(I)V",
        constants$946.glutUseLayer$FUNC, false
    );
    static final FunctionDescriptor glutPostOverlayRedisplay$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle glutPostOverlayRedisplay$MH = RuntimeHelper.downcallHandle(
        glut_h.LIBRARIES, "glutPostOverlayRedisplay",
        "()V",
        constants$946.glutPostOverlayRedisplay$FUNC, false
    );
    static final FunctionDescriptor glutPostWindowOverlayRedisplay$FUNC = FunctionDescriptor.ofVoid(
        C_INT
    );
    static final MethodHandle glutPostWindowOverlayRedisplay$MH = RuntimeHelper.downcallHandle(
        glut_h.LIBRARIES, "glutPostWindowOverlayRedisplay",
        "(I)V",
        constants$946.glutPostWindowOverlayRedisplay$FUNC, false
    );
    static final FunctionDescriptor glutShowOverlay$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle glutShowOverlay$MH = RuntimeHelper.downcallHandle(
        glut_h.LIBRARIES, "glutShowOverlay",
        "()V",
        constants$946.glutShowOverlay$FUNC, false
    );
    static final FunctionDescriptor glutHideOverlay$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle glutHideOverlay$MH = RuntimeHelper.downcallHandle(
        glut_h.LIBRARIES, "glutHideOverlay",
        "()V",
        constants$946.glutHideOverlay$FUNC, false
    );
}


