// Generated by jextract

package opengl.macos.v11_4;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$95 {

    static final FunctionDescriptor glIndexiv$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle glIndexiv$MH = RuntimeHelper.downcallHandle(
        glut_h.LIBRARIES, "glIndexiv",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$95.glIndexiv$FUNC, false
    );
    static final FunctionDescriptor glIndexs$FUNC = FunctionDescriptor.ofVoid(
        C_SHORT
    );
    static final MethodHandle glIndexs$MH = RuntimeHelper.downcallHandle(
        glut_h.LIBRARIES, "glIndexs",
        "(S)V",
        constants$95.glIndexs$FUNC, false
    );
    static final FunctionDescriptor glIndexsv$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle glIndexsv$MH = RuntimeHelper.downcallHandle(
        glut_h.LIBRARIES, "glIndexsv",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$95.glIndexsv$FUNC, false
    );
    static final FunctionDescriptor glIndexub$FUNC = FunctionDescriptor.ofVoid(
        C_CHAR
    );
    static final MethodHandle glIndexub$MH = RuntimeHelper.downcallHandle(
        glut_h.LIBRARIES, "glIndexub",
        "(B)V",
        constants$95.glIndexub$FUNC, false
    );
    static final FunctionDescriptor glIndexubv$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle glIndexubv$MH = RuntimeHelper.downcallHandle(
        glut_h.LIBRARIES, "glIndexubv",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$95.glIndexubv$FUNC, false
    );
    static final FunctionDescriptor glInitNames$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle glInitNames$MH = RuntimeHelper.downcallHandle(
        glut_h.LIBRARIES, "glInitNames",
        "()V",
        constants$95.glInitNames$FUNC, false
    );
}


