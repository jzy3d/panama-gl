// Generated by jextract

package opengl.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public interface PFNGLREPLACEMENTCODEUBSUNPROC {

    void apply(byte x0);
    static MemoryAddress allocate(PFNGLREPLACEMENTCODEUBSUNPROC fi) {
        return RuntimeHelper.upcallStub(PFNGLREPLACEMENTCODEUBSUNPROC.class, fi, constants$913.PFNGLREPLACEMENTCODEUBSUNPROC$FUNC, "(B)V");
    }
    static MemoryAddress allocate(PFNGLREPLACEMENTCODEUBSUNPROC fi, ResourceScope scope) {
        return RuntimeHelper.upcallStub(PFNGLREPLACEMENTCODEUBSUNPROC.class, fi, constants$913.PFNGLREPLACEMENTCODEUBSUNPROC$FUNC, "(B)V", scope);
    }
    static PFNGLREPLACEMENTCODEUBSUNPROC ofAddress(MemoryAddress addr) {
        return (byte x0) -> {
            try {
                constants$913.PFNGLREPLACEMENTCODEUBSUNPROC$MH.invokeExact((Addressable)addr, x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


