// Generated by jextract

package opengl;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$106 {

    static final FunctionDescriptor glPolygonOffset$FUNC = FunctionDescriptor.ofVoid(
        C_FLOAT,
        C_FLOAT
    );
    static final MethodHandle glPolygonOffset$MH = RuntimeHelper.downcallHandle(
        glut_h.LIBRARIES, "glPolygonOffset",
        "(FF)V",
        constants$106.glPolygonOffset$FUNC, false
    );
    static final FunctionDescriptor glPolygonStipple$FUNC = FunctionDescriptor.ofVoid(
        C_POINTER
    );
    static final MethodHandle glPolygonStipple$MH = RuntimeHelper.downcallHandle(
        glut_h.LIBRARIES, "glPolygonStipple",
        "(Ljdk/incubator/foreign/MemoryAddress;)V",
        constants$106.glPolygonStipple$FUNC, false
    );
    static final FunctionDescriptor glPopAttrib$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle glPopAttrib$MH = RuntimeHelper.downcallHandle(
        glut_h.LIBRARIES, "glPopAttrib",
        "()V",
        constants$106.glPopAttrib$FUNC, false
    );
    static final FunctionDescriptor glPopClientAttrib$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle glPopClientAttrib$MH = RuntimeHelper.downcallHandle(
        glut_h.LIBRARIES, "glPopClientAttrib",
        "()V",
        constants$106.glPopClientAttrib$FUNC, false
    );
    static final FunctionDescriptor glPopMatrix$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle glPopMatrix$MH = RuntimeHelper.downcallHandle(
        glut_h.LIBRARIES, "glPopMatrix",
        "()V",
        constants$106.glPopMatrix$FUNC, false
    );
    static final FunctionDescriptor glPopName$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle glPopName$MH = RuntimeHelper.downcallHandle(
        glut_h.LIBRARIES, "glPopName",
        "()V",
        constants$106.glPopName$FUNC, false
    );
}


