// Generated by jextract

package opengl.glx.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class XWindowChanges {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("x"),
        C_INT.withName("y"),
        C_INT.withName("width"),
        C_INT.withName("height"),
        C_INT.withName("border_width"),
        MemoryLayout.paddingLayout(32),
        C_LONG.withName("sibling"),
        C_INT.withName("stack_mode"),
        MemoryLayout.paddingLayout(32)
    );
    public static MemoryLayout $LAYOUT() {
        return XWindowChanges.$struct$LAYOUT;
    }
    static final VarHandle x$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("x"));
    public static VarHandle x$VH() {
        return XWindowChanges.x$VH;
    }
    public static int x$get(MemorySegment seg) {
        return (int)XWindowChanges.x$VH.get(seg);
    }
    public static void x$set( MemorySegment seg, int x) {
        XWindowChanges.x$VH.set(seg, x);
    }
    public static int x$get(MemorySegment seg, long index) {
        return (int)XWindowChanges.x$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void x$set(MemorySegment seg, long index, int x) {
        XWindowChanges.x$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle y$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("y"));
    public static VarHandle y$VH() {
        return XWindowChanges.y$VH;
    }
    public static int y$get(MemorySegment seg) {
        return (int)XWindowChanges.y$VH.get(seg);
    }
    public static void y$set( MemorySegment seg, int x) {
        XWindowChanges.y$VH.set(seg, x);
    }
    public static int y$get(MemorySegment seg, long index) {
        return (int)XWindowChanges.y$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void y$set(MemorySegment seg, long index, int x) {
        XWindowChanges.y$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle width$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("width"));
    public static VarHandle width$VH() {
        return XWindowChanges.width$VH;
    }
    public static int width$get(MemorySegment seg) {
        return (int)XWindowChanges.width$VH.get(seg);
    }
    public static void width$set( MemorySegment seg, int x) {
        XWindowChanges.width$VH.set(seg, x);
    }
    public static int width$get(MemorySegment seg, long index) {
        return (int)XWindowChanges.width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void width$set(MemorySegment seg, long index, int x) {
        XWindowChanges.width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle height$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("height"));
    public static VarHandle height$VH() {
        return XWindowChanges.height$VH;
    }
    public static int height$get(MemorySegment seg) {
        return (int)XWindowChanges.height$VH.get(seg);
    }
    public static void height$set( MemorySegment seg, int x) {
        XWindowChanges.height$VH.set(seg, x);
    }
    public static int height$get(MemorySegment seg, long index) {
        return (int)XWindowChanges.height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, int x) {
        XWindowChanges.height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle border_width$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("border_width"));
    public static VarHandle border_width$VH() {
        return XWindowChanges.border_width$VH;
    }
    public static int border_width$get(MemorySegment seg) {
        return (int)XWindowChanges.border_width$VH.get(seg);
    }
    public static void border_width$set( MemorySegment seg, int x) {
        XWindowChanges.border_width$VH.set(seg, x);
    }
    public static int border_width$get(MemorySegment seg, long index) {
        return (int)XWindowChanges.border_width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void border_width$set(MemorySegment seg, long index, int x) {
        XWindowChanges.border_width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sibling$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("sibling"));
    public static VarHandle sibling$VH() {
        return XWindowChanges.sibling$VH;
    }
    public static long sibling$get(MemorySegment seg) {
        return (long)XWindowChanges.sibling$VH.get(seg);
    }
    public static void sibling$set( MemorySegment seg, long x) {
        XWindowChanges.sibling$VH.set(seg, x);
    }
    public static long sibling$get(MemorySegment seg, long index) {
        return (long)XWindowChanges.sibling$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sibling$set(MemorySegment seg, long index, long x) {
        XWindowChanges.sibling$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle stack_mode$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("stack_mode"));
    public static VarHandle stack_mode$VH() {
        return XWindowChanges.stack_mode$VH;
    }
    public static int stack_mode$get(MemorySegment seg) {
        return (int)XWindowChanges.stack_mode$VH.get(seg);
    }
    public static void stack_mode$set( MemorySegment seg, int x) {
        XWindowChanges.stack_mode$VH.set(seg, x);
    }
    public static int stack_mode$get(MemorySegment seg, long index) {
        return (int)XWindowChanges.stack_mode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stack_mode$set(MemorySegment seg, long index, int x) {
        XWindowChanges.stack_mode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


