// Generated by jextract

package opengl.glx.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class _XExtData {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("number"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("next"),
        C_POINTER.withName("free_private"),
        C_POINTER.withName("private_data")
    ).withName("_XExtData");
    public static MemoryLayout $LAYOUT() {
        return _XExtData.$struct$LAYOUT;
    }
    static final VarHandle number$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("number"));
    public static VarHandle number$VH() {
        return _XExtData.number$VH;
    }
    public static int number$get(MemorySegment seg) {
        return (int)_XExtData.number$VH.get(seg);
    }
    public static void number$set( MemorySegment seg, int x) {
        _XExtData.number$VH.set(seg, x);
    }
    public static int number$get(MemorySegment seg, long index) {
        return (int)_XExtData.number$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void number$set(MemorySegment seg, long index, int x) {
        _XExtData.number$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle next$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("next")));
    public static VarHandle next$VH() {
        return _XExtData.next$VH;
    }
    public static MemoryAddress next$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_XExtData.next$VH.get(seg);
    }
    public static void next$set( MemorySegment seg, MemoryAddress x) {
        _XExtData.next$VH.set(seg, x);
    }
    public static MemoryAddress next$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_XExtData.next$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void next$set(MemorySegment seg, long index, MemoryAddress x) {
        _XExtData.next$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor free_private$FUNC = FunctionDescriptor.of(C_INT,
        C_POINTER
    );
    static final MethodHandle free_private$MH = RuntimeHelper.downcallHandle(
        "(Ljdk/incubator/foreign/MemoryAddress;)I",
        _XExtData.free_private$FUNC, false
    );
    public interface free_private {

        int apply(jdk.incubator.foreign.MemoryAddress x0);
        static MemoryAddress allocate(free_private fi) {
            return RuntimeHelper.upcallStub(free_private.class, fi, _XExtData.free_private$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I");
        }
        static MemoryAddress allocate(free_private fi, ResourceScope scope) {
            return RuntimeHelper.upcallStub(free_private.class, fi, _XExtData.free_private$FUNC, "(Ljdk/incubator/foreign/MemoryAddress;)I", scope);
        }
        static free_private ofAddress(MemoryAddress addr) {
            return (jdk.incubator.foreign.MemoryAddress x0) -> {
                try {
                    return (int)_XExtData.free_private$MH.invokeExact((Addressable)addr, x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle free_private$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("free_private")));
    public static VarHandle free_private$VH() {
        return _XExtData.free_private$VH;
    }
    public static MemoryAddress free_private$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_XExtData.free_private$VH.get(seg);
    }
    public static void free_private$set( MemorySegment seg, MemoryAddress x) {
        _XExtData.free_private$VH.set(seg, x);
    }
    public static MemoryAddress free_private$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_XExtData.free_private$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void free_private$set(MemorySegment seg, long index, MemoryAddress x) {
        _XExtData.free_private$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static free_private free_private (MemorySegment segment) {
        return free_private.ofAddress(free_private$get(segment));
    }
    static final VarHandle private_data$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("private_data")));
    public static VarHandle private_data$VH() {
        return _XExtData.private_data$VH;
    }
    public static MemoryAddress private_data$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)_XExtData.private_data$VH.get(seg);
    }
    public static void private_data$set( MemorySegment seg, MemoryAddress x) {
        _XExtData.private_data$VH.set(seg, x);
    }
    public static MemoryAddress private_data$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)_XExtData.private_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void private_data$set(MemorySegment seg, long index, MemoryAddress x) {
        _XExtData.private_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


