// Generated by jextract

package opengl.glx.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
class constants$146 {

    static final FunctionDescriptor glMinmax$FUNC = FunctionDescriptor.ofVoid(
        C_INT,
        C_INT,
        C_CHAR
    );
    static final MethodHandle glMinmax$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glMinmax",
        "(IIB)V",
        constants$146.glMinmax$FUNC, false
    );
    static final FunctionDescriptor glResetMinmax$FUNC = FunctionDescriptor.ofVoid(
        C_INT
    );
    static final MethodHandle glResetMinmax$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glResetMinmax",
        "(I)V",
        constants$146.glResetMinmax$FUNC, false
    );
    static final FunctionDescriptor glGetMinmax$FUNC = FunctionDescriptor.ofVoid(
        C_INT,
        C_CHAR,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final MethodHandle glGetMinmax$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glGetMinmax",
        "(IBIILjdk/incubator/foreign/MemoryAddress;)V",
        constants$146.glGetMinmax$FUNC, false
    );
    static final FunctionDescriptor glGetMinmaxParameterfv$FUNC = FunctionDescriptor.ofVoid(
        C_INT,
        C_INT,
        C_POINTER
    );
    static final MethodHandle glGetMinmaxParameterfv$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glGetMinmaxParameterfv",
        "(IILjdk/incubator/foreign/MemoryAddress;)V",
        constants$146.glGetMinmaxParameterfv$FUNC, false
    );
    static final FunctionDescriptor glGetMinmaxParameteriv$FUNC = FunctionDescriptor.ofVoid(
        C_INT,
        C_INT,
        C_POINTER
    );
    static final MethodHandle glGetMinmaxParameteriv$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glGetMinmaxParameteriv",
        "(IILjdk/incubator/foreign/MemoryAddress;)V",
        constants$146.glGetMinmaxParameteriv$FUNC, false
    );
    static final FunctionDescriptor glConvolutionFilter1D$FUNC = FunctionDescriptor.ofVoid(
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_INT,
        C_POINTER
    );
    static final MethodHandle glConvolutionFilter1D$MH = RuntimeHelper.downcallHandle(
        glx_h.LIBRARIES, "glConvolutionFilter1D",
        "(IIIIILjdk/incubator/foreign/MemoryAddress;)V",
        constants$146.glConvolutionFilter1D$FUNC, false
    );
}


