// Generated by jextract

package opengl.glx.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
 class glx_h_9 extends glx_h_8 {

    public static MethodHandle glRasterPos3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$118.glRasterPos3dv$MH,"glRasterPos3dv");
    }
    public static void glRasterPos3dv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$118.glRasterPos3dv$MH, "glRasterPos3dv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$118.glRasterPos3fv$MH,"glRasterPos3fv");
    }
    public static void glRasterPos3fv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$118.glRasterPos3fv$MH, "glRasterPos3fv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$119.glRasterPos3iv$MH,"glRasterPos3iv");
    }
    public static void glRasterPos3iv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$119.glRasterPos3iv$MH, "glRasterPos3iv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$119.glRasterPos3sv$MH,"glRasterPos3sv");
    }
    public static void glRasterPos3sv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$119.glRasterPos3sv$MH, "glRasterPos3sv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$119.glRasterPos4dv$MH,"glRasterPos4dv");
    }
    public static void glRasterPos4dv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$119.glRasterPos4dv$MH, "glRasterPos4dv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$119.glRasterPos4fv$MH,"glRasterPos4fv");
    }
    public static void glRasterPos4fv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$119.glRasterPos4fv$MH, "glRasterPos4fv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$119.glRasterPos4iv$MH,"glRasterPos4iv");
    }
    public static void glRasterPos4iv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$119.glRasterPos4iv$MH, "glRasterPos4iv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRasterPos4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$119.glRasterPos4sv$MH,"glRasterPos4sv");
    }
    public static void glRasterPos4sv ( Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$119.glRasterPos4sv$MH, "glRasterPos4sv");
        try {
            mh$.invokeExact(v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectd$MH() {
        return RuntimeHelper.requireNonNull(constants$120.glRectd$MH,"glRectd");
    }
    public static void glRectd ( double x1,  double y1,  double x2,  double y2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$120.glRectd$MH, "glRectd");
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectf$MH() {
        return RuntimeHelper.requireNonNull(constants$120.glRectf$MH,"glRectf");
    }
    public static void glRectf ( float x1,  float y1,  float x2,  float y2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$120.glRectf$MH, "glRectf");
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRecti$MH() {
        return RuntimeHelper.requireNonNull(constants$120.glRecti$MH,"glRecti");
    }
    public static void glRecti ( int x1,  int y1,  int x2,  int y2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$120.glRecti$MH, "glRecti");
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRects$MH() {
        return RuntimeHelper.requireNonNull(constants$120.glRects$MH,"glRects");
    }
    public static void glRects ( short x1,  short y1,  short x2,  short y2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$120.glRects$MH, "glRects");
        try {
            mh$.invokeExact(x1, y1, x2, y2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectdv$MH() {
        return RuntimeHelper.requireNonNull(constants$120.glRectdv$MH,"glRectdv");
    }
    public static void glRectdv ( Addressable v1,  Addressable v2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$120.glRectdv$MH, "glRectdv");
        try {
            mh$.invokeExact(v1.address(), v2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectfv$MH() {
        return RuntimeHelper.requireNonNull(constants$120.glRectfv$MH,"glRectfv");
    }
    public static void glRectfv ( Addressable v1,  Addressable v2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$120.glRectfv$MH, "glRectfv");
        try {
            mh$.invokeExact(v1.address(), v2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectiv$MH() {
        return RuntimeHelper.requireNonNull(constants$121.glRectiv$MH,"glRectiv");
    }
    public static void glRectiv ( Addressable v1,  Addressable v2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$121.glRectiv$MH, "glRectiv");
        try {
            mh$.invokeExact(v1.address(), v2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glRectsv$MH() {
        return RuntimeHelper.requireNonNull(constants$121.glRectsv$MH,"glRectsv");
    }
    public static void glRectsv ( Addressable v1,  Addressable v2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$121.glRectsv$MH, "glRectsv");
        try {
            mh$.invokeExact(v1.address(), v2.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glVertexPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$121.glVertexPointer$MH,"glVertexPointer");
    }
    public static void glVertexPointer ( int size,  int type,  int stride,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$121.glVertexPointer$MH, "glVertexPointer");
        try {
            mh$.invokeExact(size, type, stride, ptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glNormalPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$121.glNormalPointer$MH,"glNormalPointer");
    }
    public static void glNormalPointer ( int type,  int stride,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$121.glNormalPointer$MH, "glNormalPointer");
        try {
            mh$.invokeExact(type, stride, ptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$121.glColorPointer$MH,"glColorPointer");
    }
    public static void glColorPointer ( int size,  int type,  int stride,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$121.glColorPointer$MH, "glColorPointer");
        try {
            mh$.invokeExact(size, type, stride, ptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIndexPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$121.glIndexPointer$MH,"glIndexPointer");
    }
    public static void glIndexPointer ( int type,  int stride,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$121.glIndexPointer$MH, "glIndexPointer");
        try {
            mh$.invokeExact(type, stride, ptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexCoordPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$122.glTexCoordPointer$MH,"glTexCoordPointer");
    }
    public static void glTexCoordPointer ( int size,  int type,  int stride,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$122.glTexCoordPointer$MH, "glTexCoordPointer");
        try {
            mh$.invokeExact(size, type, stride, ptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEdgeFlagPointer$MH() {
        return RuntimeHelper.requireNonNull(constants$122.glEdgeFlagPointer$MH,"glEdgeFlagPointer");
    }
    public static void glEdgeFlagPointer ( int stride,  Addressable ptr) {
        var mh$ = RuntimeHelper.requireNonNull(constants$122.glEdgeFlagPointer$MH, "glEdgeFlagPointer");
        try {
            mh$.invokeExact(stride, ptr.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPointerv$MH() {
        return RuntimeHelper.requireNonNull(constants$122.glGetPointerv$MH,"glGetPointerv");
    }
    public static void glGetPointerv ( int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$122.glGetPointerv$MH, "glGetPointerv");
        try {
            mh$.invokeExact(pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glArrayElement$MH() {
        return RuntimeHelper.requireNonNull(constants$122.glArrayElement$MH,"glArrayElement");
    }
    public static void glArrayElement ( int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$122.glArrayElement$MH, "glArrayElement");
        try {
            mh$.invokeExact(i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawArrays$MH() {
        return RuntimeHelper.requireNonNull(constants$122.glDrawArrays$MH,"glDrawArrays");
    }
    public static void glDrawArrays ( int mode,  int first,  int count) {
        var mh$ = RuntimeHelper.requireNonNull(constants$122.glDrawArrays$MH, "glDrawArrays");
        try {
            mh$.invokeExact(mode, first, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawElements$MH() {
        return RuntimeHelper.requireNonNull(constants$122.glDrawElements$MH,"glDrawElements");
    }
    public static void glDrawElements ( int mode,  int count,  int type,  Addressable indices) {
        var mh$ = RuntimeHelper.requireNonNull(constants$122.glDrawElements$MH, "glDrawElements");
        try {
            mh$.invokeExact(mode, count, type, indices.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glInterleavedArrays$MH() {
        return RuntimeHelper.requireNonNull(constants$123.glInterleavedArrays$MH,"glInterleavedArrays");
    }
    public static void glInterleavedArrays ( int format,  int stride,  Addressable pointer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$123.glInterleavedArrays$MH, "glInterleavedArrays");
        try {
            mh$.invokeExact(format, stride, pointer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glShadeModel$MH() {
        return RuntimeHelper.requireNonNull(constants$123.glShadeModel$MH,"glShadeModel");
    }
    public static void glShadeModel ( int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$123.glShadeModel$MH, "glShadeModel");
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightf$MH() {
        return RuntimeHelper.requireNonNull(constants$123.glLightf$MH,"glLightf");
    }
    public static void glLightf ( int light,  int pname,  float param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$123.glLightf$MH, "glLightf");
        try {
            mh$.invokeExact(light, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLighti$MH() {
        return RuntimeHelper.requireNonNull(constants$123.glLighti$MH,"glLighti");
    }
    public static void glLighti ( int light,  int pname,  int param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$123.glLighti$MH, "glLighti");
        try {
            mh$.invokeExact(light, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightfv$MH() {
        return RuntimeHelper.requireNonNull(constants$123.glLightfv$MH,"glLightfv");
    }
    public static void glLightfv ( int light,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$123.glLightfv$MH, "glLightfv");
        try {
            mh$.invokeExact(light, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightiv$MH() {
        return RuntimeHelper.requireNonNull(constants$123.glLightiv$MH,"glLightiv");
    }
    public static void glLightiv ( int light,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$123.glLightiv$MH, "glLightiv");
        try {
            mh$.invokeExact(light, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetLightfv$MH() {
        return RuntimeHelper.requireNonNull(constants$124.glGetLightfv$MH,"glGetLightfv");
    }
    public static void glGetLightfv ( int light,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$124.glGetLightfv$MH, "glGetLightfv");
        try {
            mh$.invokeExact(light, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetLightiv$MH() {
        return RuntimeHelper.requireNonNull(constants$124.glGetLightiv$MH,"glGetLightiv");
    }
    public static void glGetLightiv ( int light,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$124.glGetLightiv$MH, "glGetLightiv");
        try {
            mh$.invokeExact(light, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModelf$MH() {
        return RuntimeHelper.requireNonNull(constants$124.glLightModelf$MH,"glLightModelf");
    }
    public static void glLightModelf ( int pname,  float param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$124.glLightModelf$MH, "glLightModelf");
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModeli$MH() {
        return RuntimeHelper.requireNonNull(constants$124.glLightModeli$MH,"glLightModeli");
    }
    public static void glLightModeli ( int pname,  int param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$124.glLightModeli$MH, "glLightModeli");
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModelfv$MH() {
        return RuntimeHelper.requireNonNull(constants$124.glLightModelfv$MH,"glLightModelfv");
    }
    public static void glLightModelfv ( int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$124.glLightModelfv$MH, "glLightModelfv");
        try {
            mh$.invokeExact(pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLightModeliv$MH() {
        return RuntimeHelper.requireNonNull(constants$124.glLightModeliv$MH,"glLightModeliv");
    }
    public static void glLightModeliv ( int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$124.glLightModeliv$MH, "glLightModeliv");
        try {
            mh$.invokeExact(pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMaterialf$MH() {
        return RuntimeHelper.requireNonNull(constants$125.glMaterialf$MH,"glMaterialf");
    }
    public static void glMaterialf ( int face,  int pname,  float param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$125.glMaterialf$MH, "glMaterialf");
        try {
            mh$.invokeExact(face, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMateriali$MH() {
        return RuntimeHelper.requireNonNull(constants$125.glMateriali$MH,"glMateriali");
    }
    public static void glMateriali ( int face,  int pname,  int param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$125.glMateriali$MH, "glMateriali");
        try {
            mh$.invokeExact(face, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMaterialfv$MH() {
        return RuntimeHelper.requireNonNull(constants$125.glMaterialfv$MH,"glMaterialfv");
    }
    public static void glMaterialfv ( int face,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$125.glMaterialfv$MH, "glMaterialfv");
        try {
            mh$.invokeExact(face, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMaterialiv$MH() {
        return RuntimeHelper.requireNonNull(constants$125.glMaterialiv$MH,"glMaterialiv");
    }
    public static void glMaterialiv ( int face,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$125.glMaterialiv$MH, "glMaterialiv");
        try {
            mh$.invokeExact(face, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMaterialfv$MH() {
        return RuntimeHelper.requireNonNull(constants$125.glGetMaterialfv$MH,"glGetMaterialfv");
    }
    public static void glGetMaterialfv ( int face,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$125.glGetMaterialfv$MH, "glGetMaterialfv");
        try {
            mh$.invokeExact(face, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMaterialiv$MH() {
        return RuntimeHelper.requireNonNull(constants$125.glGetMaterialiv$MH,"glGetMaterialiv");
    }
    public static void glGetMaterialiv ( int face,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$125.glGetMaterialiv$MH, "glGetMaterialiv");
        try {
            mh$.invokeExact(face, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorMaterial$MH() {
        return RuntimeHelper.requireNonNull(constants$126.glColorMaterial$MH,"glColorMaterial");
    }
    public static void glColorMaterial ( int face,  int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$126.glColorMaterial$MH, "glColorMaterial");
        try {
            mh$.invokeExact(face, mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelZoom$MH() {
        return RuntimeHelper.requireNonNull(constants$126.glPixelZoom$MH,"glPixelZoom");
    }
    public static void glPixelZoom ( float xfactor,  float yfactor) {
        var mh$ = RuntimeHelper.requireNonNull(constants$126.glPixelZoom$MH, "glPixelZoom");
        try {
            mh$.invokeExact(xfactor, yfactor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelStoref$MH() {
        return RuntimeHelper.requireNonNull(constants$126.glPixelStoref$MH,"glPixelStoref");
    }
    public static void glPixelStoref ( int pname,  float param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$126.glPixelStoref$MH, "glPixelStoref");
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelStorei$MH() {
        return RuntimeHelper.requireNonNull(constants$126.glPixelStorei$MH,"glPixelStorei");
    }
    public static void glPixelStorei ( int pname,  int param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$126.glPixelStorei$MH, "glPixelStorei");
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelTransferf$MH() {
        return RuntimeHelper.requireNonNull(constants$126.glPixelTransferf$MH,"glPixelTransferf");
    }
    public static void glPixelTransferf ( int pname,  float param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$126.glPixelTransferf$MH, "glPixelTransferf");
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelTransferi$MH() {
        return RuntimeHelper.requireNonNull(constants$126.glPixelTransferi$MH,"glPixelTransferi");
    }
    public static void glPixelTransferi ( int pname,  int param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$126.glPixelTransferi$MH, "glPixelTransferi");
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelMapfv$MH() {
        return RuntimeHelper.requireNonNull(constants$127.glPixelMapfv$MH,"glPixelMapfv");
    }
    public static void glPixelMapfv ( int map,  int mapsize,  Addressable values) {
        var mh$ = RuntimeHelper.requireNonNull(constants$127.glPixelMapfv$MH, "glPixelMapfv");
        try {
            mh$.invokeExact(map, mapsize, values.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelMapuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$127.glPixelMapuiv$MH,"glPixelMapuiv");
    }
    public static void glPixelMapuiv ( int map,  int mapsize,  Addressable values) {
        var mh$ = RuntimeHelper.requireNonNull(constants$127.glPixelMapuiv$MH, "glPixelMapuiv");
        try {
            mh$.invokeExact(map, mapsize, values.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPixelMapusv$MH() {
        return RuntimeHelper.requireNonNull(constants$127.glPixelMapusv$MH,"glPixelMapusv");
    }
    public static void glPixelMapusv ( int map,  int mapsize,  Addressable values) {
        var mh$ = RuntimeHelper.requireNonNull(constants$127.glPixelMapusv$MH, "glPixelMapusv");
        try {
            mh$.invokeExact(map, mapsize, values.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelMapfv$MH() {
        return RuntimeHelper.requireNonNull(constants$127.glGetPixelMapfv$MH,"glGetPixelMapfv");
    }
    public static void glGetPixelMapfv ( int map,  Addressable values) {
        var mh$ = RuntimeHelper.requireNonNull(constants$127.glGetPixelMapfv$MH, "glGetPixelMapfv");
        try {
            mh$.invokeExact(map, values.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelMapuiv$MH() {
        return RuntimeHelper.requireNonNull(constants$127.glGetPixelMapuiv$MH,"glGetPixelMapuiv");
    }
    public static void glGetPixelMapuiv ( int map,  Addressable values) {
        var mh$ = RuntimeHelper.requireNonNull(constants$127.glGetPixelMapuiv$MH, "glGetPixelMapuiv");
        try {
            mh$.invokeExact(map, values.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetPixelMapusv$MH() {
        return RuntimeHelper.requireNonNull(constants$127.glGetPixelMapusv$MH,"glGetPixelMapusv");
    }
    public static void glGetPixelMapusv ( int map,  Addressable values) {
        var mh$ = RuntimeHelper.requireNonNull(constants$127.glGetPixelMapusv$MH, "glGetPixelMapusv");
        try {
            mh$.invokeExact(map, values.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBitmap$MH() {
        return RuntimeHelper.requireNonNull(constants$128.glBitmap$MH,"glBitmap");
    }
    public static void glBitmap ( int width,  int height,  float xorig,  float yorig,  float xmove,  float ymove,  Addressable bitmap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$128.glBitmap$MH, "glBitmap");
        try {
            mh$.invokeExact(width, height, xorig, yorig, xmove, ymove, bitmap.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glReadPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$128.glReadPixels$MH,"glReadPixels");
    }
    public static void glReadPixels ( int x,  int y,  int width,  int height,  int format,  int type,  Addressable pixels) {
        var mh$ = RuntimeHelper.requireNonNull(constants$128.glReadPixels$MH, "glReadPixels");
        try {
            mh$.invokeExact(x, y, width, height, format, type, pixels.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$128.glDrawPixels$MH,"glDrawPixels");
    }
    public static void glDrawPixels ( int width,  int height,  int format,  int type,  Addressable pixels) {
        var mh$ = RuntimeHelper.requireNonNull(constants$128.glDrawPixels$MH, "glDrawPixels");
        try {
            mh$.invokeExact(width, height, format, type, pixels.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyPixels$MH() {
        return RuntimeHelper.requireNonNull(constants$128.glCopyPixels$MH,"glCopyPixels");
    }
    public static void glCopyPixels ( int x,  int y,  int width,  int height,  int type) {
        var mh$ = RuntimeHelper.requireNonNull(constants$128.glCopyPixels$MH, "glCopyPixels");
        try {
            mh$.invokeExact(x, y, width, height, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilFunc$MH() {
        return RuntimeHelper.requireNonNull(constants$128.glStencilFunc$MH,"glStencilFunc");
    }
    public static void glStencilFunc ( int func,  int ref,  int mask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$128.glStencilFunc$MH, "glStencilFunc");
        try {
            mh$.invokeExact(func, ref, mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilMask$MH() {
        return RuntimeHelper.requireNonNull(constants$128.glStencilMask$MH,"glStencilMask");
    }
    public static void glStencilMask ( int mask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$128.glStencilMask$MH, "glStencilMask");
        try {
            mh$.invokeExact(mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glStencilOp$MH() {
        return RuntimeHelper.requireNonNull(constants$129.glStencilOp$MH,"glStencilOp");
    }
    public static void glStencilOp ( int fail,  int zfail,  int zpass) {
        var mh$ = RuntimeHelper.requireNonNull(constants$129.glStencilOp$MH, "glStencilOp");
        try {
            mh$.invokeExact(fail, zfail, zpass);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClearStencil$MH() {
        return RuntimeHelper.requireNonNull(constants$129.glClearStencil$MH,"glClearStencil");
    }
    public static void glClearStencil ( int s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$129.glClearStencil$MH, "glClearStencil");
        try {
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGend$MH() {
        return RuntimeHelper.requireNonNull(constants$129.glTexGend$MH,"glTexGend");
    }
    public static void glTexGend ( int coord,  int pname,  double param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$129.glTexGend$MH, "glTexGend");
        try {
            mh$.invokeExact(coord, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGenf$MH() {
        return RuntimeHelper.requireNonNull(constants$129.glTexGenf$MH,"glTexGenf");
    }
    public static void glTexGenf ( int coord,  int pname,  float param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$129.glTexGenf$MH, "glTexGenf");
        try {
            mh$.invokeExact(coord, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGeni$MH() {
        return RuntimeHelper.requireNonNull(constants$129.glTexGeni$MH,"glTexGeni");
    }
    public static void glTexGeni ( int coord,  int pname,  int param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$129.glTexGeni$MH, "glTexGeni");
        try {
            mh$.invokeExact(coord, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGendv$MH() {
        return RuntimeHelper.requireNonNull(constants$129.glTexGendv$MH,"glTexGendv");
    }
    public static void glTexGendv ( int coord,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$129.glTexGendv$MH, "glTexGendv");
        try {
            mh$.invokeExact(coord, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGenfv$MH() {
        return RuntimeHelper.requireNonNull(constants$130.glTexGenfv$MH,"glTexGenfv");
    }
    public static void glTexGenfv ( int coord,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$130.glTexGenfv$MH, "glTexGenfv");
        try {
            mh$.invokeExact(coord, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexGeniv$MH() {
        return RuntimeHelper.requireNonNull(constants$130.glTexGeniv$MH,"glTexGeniv");
    }
    public static void glTexGeniv ( int coord,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$130.glTexGeniv$MH, "glTexGeniv");
        try {
            mh$.invokeExact(coord, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexGendv$MH() {
        return RuntimeHelper.requireNonNull(constants$130.glGetTexGendv$MH,"glGetTexGendv");
    }
    public static void glGetTexGendv ( int coord,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$130.glGetTexGendv$MH, "glGetTexGendv");
        try {
            mh$.invokeExact(coord, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexGenfv$MH() {
        return RuntimeHelper.requireNonNull(constants$130.glGetTexGenfv$MH,"glGetTexGenfv");
    }
    public static void glGetTexGenfv ( int coord,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$130.glGetTexGenfv$MH, "glGetTexGenfv");
        try {
            mh$.invokeExact(coord, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexGeniv$MH() {
        return RuntimeHelper.requireNonNull(constants$130.glGetTexGeniv$MH,"glGetTexGeniv");
    }
    public static void glGetTexGeniv ( int coord,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$130.glGetTexGeniv$MH, "glGetTexGeniv");
        try {
            mh$.invokeExact(coord, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnvf$MH() {
        return RuntimeHelper.requireNonNull(constants$130.glTexEnvf$MH,"glTexEnvf");
    }
    public static void glTexEnvf ( int target,  int pname,  float param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$130.glTexEnvf$MH, "glTexEnvf");
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnvi$MH() {
        return RuntimeHelper.requireNonNull(constants$131.glTexEnvi$MH,"glTexEnvi");
    }
    public static void glTexEnvi ( int target,  int pname,  int param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$131.glTexEnvi$MH, "glTexEnvi");
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnvfv$MH() {
        return RuntimeHelper.requireNonNull(constants$131.glTexEnvfv$MH,"glTexEnvfv");
    }
    public static void glTexEnvfv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$131.glTexEnvfv$MH, "glTexEnvfv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexEnviv$MH() {
        return RuntimeHelper.requireNonNull(constants$131.glTexEnviv$MH,"glTexEnviv");
    }
    public static void glTexEnviv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$131.glTexEnviv$MH, "glTexEnviv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexEnvfv$MH() {
        return RuntimeHelper.requireNonNull(constants$131.glGetTexEnvfv$MH,"glGetTexEnvfv");
    }
    public static void glGetTexEnvfv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$131.glGetTexEnvfv$MH, "glGetTexEnvfv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexEnviv$MH() {
        return RuntimeHelper.requireNonNull(constants$131.glGetTexEnviv$MH,"glGetTexEnviv");
    }
    public static void glGetTexEnviv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$131.glGetTexEnviv$MH, "glGetTexEnviv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameterf$MH() {
        return RuntimeHelper.requireNonNull(constants$131.glTexParameterf$MH,"glTexParameterf");
    }
    public static void glTexParameterf ( int target,  int pname,  float param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$131.glTexParameterf$MH, "glTexParameterf");
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameteri$MH() {
        return RuntimeHelper.requireNonNull(constants$132.glTexParameteri$MH,"glTexParameteri");
    }
    public static void glTexParameteri ( int target,  int pname,  int param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$132.glTexParameteri$MH, "glTexParameteri");
        try {
            mh$.invokeExact(target, pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$132.glTexParameterfv$MH,"glTexParameterfv");
    }
    public static void glTexParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$132.glTexParameterfv$MH, "glTexParameterfv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$132.glTexParameteriv$MH,"glTexParameteriv");
    }
    public static void glTexParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$132.glTexParameteriv$MH, "glTexParameteriv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$132.glGetTexParameterfv$MH,"glGetTexParameterfv");
    }
    public static void glGetTexParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$132.glGetTexParameterfv$MH, "glGetTexParameterfv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$132.glGetTexParameteriv$MH,"glGetTexParameteriv");
    }
    public static void glGetTexParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$132.glGetTexParameteriv$MH, "glGetTexParameteriv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexLevelParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$132.glGetTexLevelParameterfv$MH,"glGetTexLevelParameterfv");
    }
    public static void glGetTexLevelParameterfv ( int target,  int level,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$132.glGetTexLevelParameterfv$MH, "glGetTexLevelParameterfv");
        try {
            mh$.invokeExact(target, level, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexLevelParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$133.glGetTexLevelParameteriv$MH,"glGetTexLevelParameteriv");
    }
    public static void glGetTexLevelParameteriv ( int target,  int level,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$133.glGetTexLevelParameteriv$MH, "glGetTexLevelParameteriv");
        try {
            mh$.invokeExact(target, level, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$133.glTexImage1D$MH,"glTexImage1D");
    }
    public static void glTexImage1D ( int target,  int level,  int internalFormat,  int width,  int border,  int format,  int type,  Addressable pixels) {
        var mh$ = RuntimeHelper.requireNonNull(constants$133.glTexImage1D$MH, "glTexImage1D");
        try {
            mh$.invokeExact(target, level, internalFormat, width, border, format, type, pixels.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$133.glTexImage2D$MH,"glTexImage2D");
    }
    public static void glTexImage2D ( int target,  int level,  int internalFormat,  int width,  int height,  int border,  int format,  int type,  Addressable pixels) {
        var mh$ = RuntimeHelper.requireNonNull(constants$133.glTexImage2D$MH, "glTexImage2D");
        try {
            mh$.invokeExact(target, level, internalFormat, width, height, border, format, type, pixels.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetTexImage$MH() {
        return RuntimeHelper.requireNonNull(constants$133.glGetTexImage$MH,"glGetTexImage");
    }
    public static void glGetTexImage ( int target,  int level,  int format,  int type,  Addressable pixels) {
        var mh$ = RuntimeHelper.requireNonNull(constants$133.glGetTexImage$MH, "glGetTexImage");
        try {
            mh$.invokeExact(target, level, format, type, pixels.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGenTextures$MH() {
        return RuntimeHelper.requireNonNull(constants$133.glGenTextures$MH,"glGenTextures");
    }
    public static void glGenTextures ( int n,  Addressable textures) {
        var mh$ = RuntimeHelper.requireNonNull(constants$133.glGenTextures$MH, "glGenTextures");
        try {
            mh$.invokeExact(n, textures.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDeleteTextures$MH() {
        return RuntimeHelper.requireNonNull(constants$133.glDeleteTextures$MH,"glDeleteTextures");
    }
    public static void glDeleteTextures ( int n,  Addressable textures) {
        var mh$ = RuntimeHelper.requireNonNull(constants$133.glDeleteTextures$MH, "glDeleteTextures");
        try {
            mh$.invokeExact(n, textures.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBindTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$134.glBindTexture$MH,"glBindTexture");
    }
    public static void glBindTexture ( int target,  int texture) {
        var mh$ = RuntimeHelper.requireNonNull(constants$134.glBindTexture$MH, "glBindTexture");
        try {
            mh$.invokeExact(target, texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPrioritizeTextures$MH() {
        return RuntimeHelper.requireNonNull(constants$134.glPrioritizeTextures$MH,"glPrioritizeTextures");
    }
    public static void glPrioritizeTextures ( int n,  Addressable textures,  Addressable priorities) {
        var mh$ = RuntimeHelper.requireNonNull(constants$134.glPrioritizeTextures$MH, "glPrioritizeTextures");
        try {
            mh$.invokeExact(n, textures.address(), priorities.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glAreTexturesResident$MH() {
        return RuntimeHelper.requireNonNull(constants$134.glAreTexturesResident$MH,"glAreTexturesResident");
    }
    public static byte glAreTexturesResident ( int n,  Addressable textures,  Addressable residences) {
        var mh$ = RuntimeHelper.requireNonNull(constants$134.glAreTexturesResident$MH, "glAreTexturesResident");
        try {
            return (byte)mh$.invokeExact(n, textures.address(), residences.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glIsTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$134.glIsTexture$MH,"glIsTexture");
    }
    public static byte glIsTexture ( int texture) {
        var mh$ = RuntimeHelper.requireNonNull(constants$134.glIsTexture$MH, "glIsTexture");
        try {
            return (byte)mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexSubImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$134.glTexSubImage1D$MH,"glTexSubImage1D");
    }
    public static void glTexSubImage1D ( int target,  int level,  int xoffset,  int width,  int format,  int type,  Addressable pixels) {
        var mh$ = RuntimeHelper.requireNonNull(constants$134.glTexSubImage1D$MH, "glTexSubImage1D");
        try {
            mh$.invokeExact(target, level, xoffset, width, format, type, pixels.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexSubImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$134.glTexSubImage2D$MH,"glTexSubImage2D");
    }
    public static void glTexSubImage2D ( int target,  int level,  int xoffset,  int yoffset,  int width,  int height,  int format,  int type,  Addressable pixels) {
        var mh$ = RuntimeHelper.requireNonNull(constants$134.glTexSubImage2D$MH, "glTexSubImage2D");
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, width, height, format, type, pixels.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$135.glCopyTexImage1D$MH,"glCopyTexImage1D");
    }
    public static void glCopyTexImage1D ( int target,  int level,  int internalformat,  int x,  int y,  int width,  int border) {
        var mh$ = RuntimeHelper.requireNonNull(constants$135.glCopyTexImage1D$MH, "glCopyTexImage1D");
        try {
            mh$.invokeExact(target, level, internalformat, x, y, width, border);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$135.glCopyTexImage2D$MH,"glCopyTexImage2D");
    }
    public static void glCopyTexImage2D ( int target,  int level,  int internalformat,  int x,  int y,  int width,  int height,  int border) {
        var mh$ = RuntimeHelper.requireNonNull(constants$135.glCopyTexImage2D$MH, "glCopyTexImage2D");
        try {
            mh$.invokeExact(target, level, internalformat, x, y, width, height, border);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexSubImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$135.glCopyTexSubImage1D$MH,"glCopyTexSubImage1D");
    }
    public static void glCopyTexSubImage1D ( int target,  int level,  int xoffset,  int x,  int y,  int width) {
        var mh$ = RuntimeHelper.requireNonNull(constants$135.glCopyTexSubImage1D$MH, "glCopyTexSubImage1D");
        try {
            mh$.invokeExact(target, level, xoffset, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexSubImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$135.glCopyTexSubImage2D$MH,"glCopyTexSubImage2D");
    }
    public static void glCopyTexSubImage2D ( int target,  int level,  int xoffset,  int yoffset,  int x,  int y,  int width,  int height) {
        var mh$ = RuntimeHelper.requireNonNull(constants$135.glCopyTexSubImage2D$MH, "glCopyTexSubImage2D");
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap1d$MH() {
        return RuntimeHelper.requireNonNull(constants$135.glMap1d$MH,"glMap1d");
    }
    public static void glMap1d ( int target,  double u1,  double u2,  int stride,  int order,  Addressable points) {
        var mh$ = RuntimeHelper.requireNonNull(constants$135.glMap1d$MH, "glMap1d");
        try {
            mh$.invokeExact(target, u1, u2, stride, order, points.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap1f$MH() {
        return RuntimeHelper.requireNonNull(constants$135.glMap1f$MH,"glMap1f");
    }
    public static void glMap1f ( int target,  float u1,  float u2,  int stride,  int order,  Addressable points) {
        var mh$ = RuntimeHelper.requireNonNull(constants$135.glMap1f$MH, "glMap1f");
        try {
            mh$.invokeExact(target, u1, u2, stride, order, points.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap2d$MH() {
        return RuntimeHelper.requireNonNull(constants$136.glMap2d$MH,"glMap2d");
    }
    public static void glMap2d ( int target,  double u1,  double u2,  int ustride,  int uorder,  double v1,  double v2,  int vstride,  int vorder,  Addressable points) {
        var mh$ = RuntimeHelper.requireNonNull(constants$136.glMap2d$MH, "glMap2d");
        try {
            mh$.invokeExact(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMap2f$MH() {
        return RuntimeHelper.requireNonNull(constants$136.glMap2f$MH,"glMap2f");
    }
    public static void glMap2f ( int target,  float u1,  float u2,  int ustride,  int uorder,  float v1,  float v2,  int vstride,  int vorder,  Addressable points) {
        var mh$ = RuntimeHelper.requireNonNull(constants$136.glMap2f$MH, "glMap2f");
        try {
            mh$.invokeExact(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapdv$MH() {
        return RuntimeHelper.requireNonNull(constants$136.glGetMapdv$MH,"glGetMapdv");
    }
    public static void glGetMapdv ( int target,  int query,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$136.glGetMapdv$MH, "glGetMapdv");
        try {
            mh$.invokeExact(target, query, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapfv$MH() {
        return RuntimeHelper.requireNonNull(constants$136.glGetMapfv$MH,"glGetMapfv");
    }
    public static void glGetMapfv ( int target,  int query,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$136.glGetMapfv$MH, "glGetMapfv");
        try {
            mh$.invokeExact(target, query, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMapiv$MH() {
        return RuntimeHelper.requireNonNull(constants$136.glGetMapiv$MH,"glGetMapiv");
    }
    public static void glGetMapiv ( int target,  int query,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$136.glGetMapiv$MH, "glGetMapiv");
        try {
            mh$.invokeExact(target, query, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1d$MH() {
        return RuntimeHelper.requireNonNull(constants$136.glEvalCoord1d$MH,"glEvalCoord1d");
    }
    public static void glEvalCoord1d ( double u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$136.glEvalCoord1d$MH, "glEvalCoord1d");
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1f$MH() {
        return RuntimeHelper.requireNonNull(constants$137.glEvalCoord1f$MH,"glEvalCoord1f");
    }
    public static void glEvalCoord1f ( float u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$137.glEvalCoord1f$MH, "glEvalCoord1f");
        try {
            mh$.invokeExact(u);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1dv$MH() {
        return RuntimeHelper.requireNonNull(constants$137.glEvalCoord1dv$MH,"glEvalCoord1dv");
    }
    public static void glEvalCoord1dv ( Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$137.glEvalCoord1dv$MH, "glEvalCoord1dv");
        try {
            mh$.invokeExact(u.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord1fv$MH() {
        return RuntimeHelper.requireNonNull(constants$137.glEvalCoord1fv$MH,"glEvalCoord1fv");
    }
    public static void glEvalCoord1fv ( Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$137.glEvalCoord1fv$MH, "glEvalCoord1fv");
        try {
            mh$.invokeExact(u.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2d$MH() {
        return RuntimeHelper.requireNonNull(constants$137.glEvalCoord2d$MH,"glEvalCoord2d");
    }
    public static void glEvalCoord2d ( double u,  double v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$137.glEvalCoord2d$MH, "glEvalCoord2d");
        try {
            mh$.invokeExact(u, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2f$MH() {
        return RuntimeHelper.requireNonNull(constants$137.glEvalCoord2f$MH,"glEvalCoord2f");
    }
    public static void glEvalCoord2f ( float u,  float v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$137.glEvalCoord2f$MH, "glEvalCoord2f");
        try {
            mh$.invokeExact(u, v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$137.glEvalCoord2dv$MH,"glEvalCoord2dv");
    }
    public static void glEvalCoord2dv ( Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$137.glEvalCoord2dv$MH, "glEvalCoord2dv");
        try {
            mh$.invokeExact(u.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalCoord2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$138.glEvalCoord2fv$MH,"glEvalCoord2fv");
    }
    public static void glEvalCoord2fv ( Addressable u) {
        var mh$ = RuntimeHelper.requireNonNull(constants$138.glEvalCoord2fv$MH, "glEvalCoord2fv");
        try {
            mh$.invokeExact(u.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid1d$MH() {
        return RuntimeHelper.requireNonNull(constants$138.glMapGrid1d$MH,"glMapGrid1d");
    }
    public static void glMapGrid1d ( int un,  double u1,  double u2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$138.glMapGrid1d$MH, "glMapGrid1d");
        try {
            mh$.invokeExact(un, u1, u2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid1f$MH() {
        return RuntimeHelper.requireNonNull(constants$138.glMapGrid1f$MH,"glMapGrid1f");
    }
    public static void glMapGrid1f ( int un,  float u1,  float u2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$138.glMapGrid1f$MH, "glMapGrid1f");
        try {
            mh$.invokeExact(un, u1, u2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid2d$MH() {
        return RuntimeHelper.requireNonNull(constants$138.glMapGrid2d$MH,"glMapGrid2d");
    }
    public static void glMapGrid2d ( int un,  double u1,  double u2,  int vn,  double v1,  double v2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$138.glMapGrid2d$MH, "glMapGrid2d");
        try {
            mh$.invokeExact(un, u1, u2, vn, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMapGrid2f$MH() {
        return RuntimeHelper.requireNonNull(constants$138.glMapGrid2f$MH,"glMapGrid2f");
    }
    public static void glMapGrid2f ( int un,  float u1,  float u2,  int vn,  float v1,  float v2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$138.glMapGrid2f$MH, "glMapGrid2f");
        try {
            mh$.invokeExact(un, u1, u2, vn, v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalPoint1$MH() {
        return RuntimeHelper.requireNonNull(constants$138.glEvalPoint1$MH,"glEvalPoint1");
    }
    public static void glEvalPoint1 ( int i) {
        var mh$ = RuntimeHelper.requireNonNull(constants$138.glEvalPoint1$MH, "glEvalPoint1");
        try {
            mh$.invokeExact(i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalPoint2$MH() {
        return RuntimeHelper.requireNonNull(constants$139.glEvalPoint2$MH,"glEvalPoint2");
    }
    public static void glEvalPoint2 ( int i,  int j) {
        var mh$ = RuntimeHelper.requireNonNull(constants$139.glEvalPoint2$MH, "glEvalPoint2");
        try {
            mh$.invokeExact(i, j);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalMesh1$MH() {
        return RuntimeHelper.requireNonNull(constants$139.glEvalMesh1$MH,"glEvalMesh1");
    }
    public static void glEvalMesh1 ( int mode,  int i1,  int i2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$139.glEvalMesh1$MH, "glEvalMesh1");
        try {
            mh$.invokeExact(mode, i1, i2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glEvalMesh2$MH() {
        return RuntimeHelper.requireNonNull(constants$139.glEvalMesh2$MH,"glEvalMesh2");
    }
    public static void glEvalMesh2 ( int mode,  int i1,  int i2,  int j1,  int j2) {
        var mh$ = RuntimeHelper.requireNonNull(constants$139.glEvalMesh2$MH, "glEvalMesh2");
        try {
            mh$.invokeExact(mode, i1, i2, j1, j2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogf$MH() {
        return RuntimeHelper.requireNonNull(constants$139.glFogf$MH,"glFogf");
    }
    public static void glFogf ( int pname,  float param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$139.glFogf$MH, "glFogf");
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogi$MH() {
        return RuntimeHelper.requireNonNull(constants$139.glFogi$MH,"glFogi");
    }
    public static void glFogi ( int pname,  int param) {
        var mh$ = RuntimeHelper.requireNonNull(constants$139.glFogi$MH, "glFogi");
        try {
            mh$.invokeExact(pname, param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogfv$MH() {
        return RuntimeHelper.requireNonNull(constants$139.glFogfv$MH,"glFogfv");
    }
    public static void glFogfv ( int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$139.glFogfv$MH, "glFogfv");
        try {
            mh$.invokeExact(pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFogiv$MH() {
        return RuntimeHelper.requireNonNull(constants$140.glFogiv$MH,"glFogiv");
    }
    public static void glFogiv ( int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$140.glFogiv$MH, "glFogiv");
        try {
            mh$.invokeExact(pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glFeedbackBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$140.glFeedbackBuffer$MH,"glFeedbackBuffer");
    }
    public static void glFeedbackBuffer ( int size,  int type,  Addressable buffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$140.glFeedbackBuffer$MH, "glFeedbackBuffer");
        try {
            mh$.invokeExact(size, type, buffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPassThrough$MH() {
        return RuntimeHelper.requireNonNull(constants$140.glPassThrough$MH,"glPassThrough");
    }
    public static void glPassThrough ( float token) {
        var mh$ = RuntimeHelper.requireNonNull(constants$140.glPassThrough$MH, "glPassThrough");
        try {
            mh$.invokeExact(token);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSelectBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$140.glSelectBuffer$MH,"glSelectBuffer");
    }
    public static void glSelectBuffer ( int size,  Addressable buffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$140.glSelectBuffer$MH, "glSelectBuffer");
        try {
            mh$.invokeExact(size, buffer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glInitNames$MH() {
        return RuntimeHelper.requireNonNull(constants$140.glInitNames$MH,"glInitNames");
    }
    public static void glInitNames () {
        var mh$ = RuntimeHelper.requireNonNull(constants$140.glInitNames$MH, "glInitNames");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadName$MH() {
        return RuntimeHelper.requireNonNull(constants$140.glLoadName$MH,"glLoadName");
    }
    public static void glLoadName ( int name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$140.glLoadName$MH, "glLoadName");
        try {
            mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPushName$MH() {
        return RuntimeHelper.requireNonNull(constants$141.glPushName$MH,"glPushName");
    }
    public static void glPushName ( int name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$141.glPushName$MH, "glPushName");
        try {
            mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glPopName$MH() {
        return RuntimeHelper.requireNonNull(constants$141.glPopName$MH,"glPopName");
    }
    public static void glPopName () {
        var mh$ = RuntimeHelper.requireNonNull(constants$141.glPopName$MH, "glPopName");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glDrawRangeElements$MH() {
        return RuntimeHelper.requireNonNull(constants$141.glDrawRangeElements$MH,"glDrawRangeElements");
    }
    public static void glDrawRangeElements ( int mode,  int start,  int end,  int count,  int type,  Addressable indices) {
        var mh$ = RuntimeHelper.requireNonNull(constants$141.glDrawRangeElements$MH, "glDrawRangeElements");
        try {
            mh$.invokeExact(mode, start, end, count, type, indices.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexImage3D$MH() {
        return RuntimeHelper.requireNonNull(constants$141.glTexImage3D$MH,"glTexImage3D");
    }
    public static void glTexImage3D ( int target,  int level,  int internalFormat,  int width,  int height,  int depth,  int border,  int format,  int type,  Addressable pixels) {
        var mh$ = RuntimeHelper.requireNonNull(constants$141.glTexImage3D$MH, "glTexImage3D");
        try {
            mh$.invokeExact(target, level, internalFormat, width, height, depth, border, format, type, pixels.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glTexSubImage3D$MH() {
        return RuntimeHelper.requireNonNull(constants$141.glTexSubImage3D$MH,"glTexSubImage3D");
    }
    public static void glTexSubImage3D ( int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth,  int format,  int type,  Addressable pixels) {
        var mh$ = RuntimeHelper.requireNonNull(constants$141.glTexSubImage3D$MH, "glTexSubImage3D");
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyTexSubImage3D$MH() {
        return RuntimeHelper.requireNonNull(constants$141.glCopyTexSubImage3D$MH,"glCopyTexSubImage3D");
    }
    public static void glCopyTexSubImage3D ( int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int x,  int y,  int width,  int height) {
        var mh$ = RuntimeHelper.requireNonNull(constants$141.glCopyTexSubImage3D$MH, "glCopyTexSubImage3D");
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, zoffset, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorTable$MH() {
        return RuntimeHelper.requireNonNull(constants$143.glColorTable$MH,"glColorTable");
    }
    public static void glColorTable ( int target,  int internalformat,  int width,  int format,  int type,  Addressable table) {
        var mh$ = RuntimeHelper.requireNonNull(constants$143.glColorTable$MH, "glColorTable");
        try {
            mh$.invokeExact(target, internalformat, width, format, type, table.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorSubTable$MH() {
        return RuntimeHelper.requireNonNull(constants$143.glColorSubTable$MH,"glColorSubTable");
    }
    public static void glColorSubTable ( int target,  int start,  int count,  int format,  int type,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$143.glColorSubTable$MH, "glColorSubTable");
        try {
            mh$.invokeExact(target, start, count, format, type, data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorTableParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$143.glColorTableParameteriv$MH,"glColorTableParameteriv");
    }
    public static void glColorTableParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$143.glColorTableParameteriv$MH, "glColorTableParameteriv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glColorTableParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$143.glColorTableParameterfv$MH,"glColorTableParameterfv");
    }
    public static void glColorTableParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$143.glColorTableParameterfv$MH, "glColorTableParameterfv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyColorSubTable$MH() {
        return RuntimeHelper.requireNonNull(constants$144.glCopyColorSubTable$MH,"glCopyColorSubTable");
    }
    public static void glCopyColorSubTable ( int target,  int start,  int x,  int y,  int width) {
        var mh$ = RuntimeHelper.requireNonNull(constants$144.glCopyColorSubTable$MH, "glCopyColorSubTable");
        try {
            mh$.invokeExact(target, start, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyColorTable$MH() {
        return RuntimeHelper.requireNonNull(constants$144.glCopyColorTable$MH,"glCopyColorTable");
    }
    public static void glCopyColorTable ( int target,  int internalformat,  int x,  int y,  int width) {
        var mh$ = RuntimeHelper.requireNonNull(constants$144.glCopyColorTable$MH, "glCopyColorTable");
        try {
            mh$.invokeExact(target, internalformat, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetColorTable$MH() {
        return RuntimeHelper.requireNonNull(constants$144.glGetColorTable$MH,"glGetColorTable");
    }
    public static void glGetColorTable ( int target,  int format,  int type,  Addressable table) {
        var mh$ = RuntimeHelper.requireNonNull(constants$144.glGetColorTable$MH, "glGetColorTable");
        try {
            mh$.invokeExact(target, format, type, table.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetColorTableParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$144.glGetColorTableParameterfv$MH,"glGetColorTableParameterfv");
    }
    public static void glGetColorTableParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$144.glGetColorTableParameterfv$MH, "glGetColorTableParameterfv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetColorTableParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$144.glGetColorTableParameteriv$MH,"glGetColorTableParameteriv");
    }
    public static void glGetColorTableParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$144.glGetColorTableParameteriv$MH, "glGetColorTableParameteriv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendEquation$MH() {
        return RuntimeHelper.requireNonNull(constants$144.glBlendEquation$MH,"glBlendEquation");
    }
    public static void glBlendEquation ( int mode) {
        var mh$ = RuntimeHelper.requireNonNull(constants$144.glBlendEquation$MH, "glBlendEquation");
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glBlendColor$MH() {
        return RuntimeHelper.requireNonNull(constants$145.glBlendColor$MH,"glBlendColor");
    }
    public static void glBlendColor ( float red,  float green,  float blue,  float alpha) {
        var mh$ = RuntimeHelper.requireNonNull(constants$145.glBlendColor$MH, "glBlendColor");
        try {
            mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glHistogram$MH() {
        return RuntimeHelper.requireNonNull(constants$145.glHistogram$MH,"glHistogram");
    }
    public static void glHistogram ( int target,  int width,  int internalformat,  byte sink) {
        var mh$ = RuntimeHelper.requireNonNull(constants$145.glHistogram$MH, "glHistogram");
        try {
            mh$.invokeExact(target, width, internalformat, sink);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glResetHistogram$MH() {
        return RuntimeHelper.requireNonNull(constants$145.glResetHistogram$MH,"glResetHistogram");
    }
    public static void glResetHistogram ( int target) {
        var mh$ = RuntimeHelper.requireNonNull(constants$145.glResetHistogram$MH, "glResetHistogram");
        try {
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetHistogram$MH() {
        return RuntimeHelper.requireNonNull(constants$145.glGetHistogram$MH,"glGetHistogram");
    }
    public static void glGetHistogram ( int target,  byte reset,  int format,  int type,  Addressable values) {
        var mh$ = RuntimeHelper.requireNonNull(constants$145.glGetHistogram$MH, "glGetHistogram");
        try {
            mh$.invokeExact(target, reset, format, type, values.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetHistogramParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$145.glGetHistogramParameterfv$MH,"glGetHistogramParameterfv");
    }
    public static void glGetHistogramParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$145.glGetHistogramParameterfv$MH, "glGetHistogramParameterfv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetHistogramParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$145.glGetHistogramParameteriv$MH,"glGetHistogramParameteriv");
    }
    public static void glGetHistogramParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$145.glGetHistogramParameteriv$MH, "glGetHistogramParameteriv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMinmax$MH() {
        return RuntimeHelper.requireNonNull(constants$146.glMinmax$MH,"glMinmax");
    }
    public static void glMinmax ( int target,  int internalformat,  byte sink) {
        var mh$ = RuntimeHelper.requireNonNull(constants$146.glMinmax$MH, "glMinmax");
        try {
            mh$.invokeExact(target, internalformat, sink);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glResetMinmax$MH() {
        return RuntimeHelper.requireNonNull(constants$146.glResetMinmax$MH,"glResetMinmax");
    }
    public static void glResetMinmax ( int target) {
        var mh$ = RuntimeHelper.requireNonNull(constants$146.glResetMinmax$MH, "glResetMinmax");
        try {
            mh$.invokeExact(target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMinmax$MH() {
        return RuntimeHelper.requireNonNull(constants$146.glGetMinmax$MH,"glGetMinmax");
    }
    public static void glGetMinmax ( int target,  byte reset,  int format,  int types,  Addressable values) {
        var mh$ = RuntimeHelper.requireNonNull(constants$146.glGetMinmax$MH, "glGetMinmax");
        try {
            mh$.invokeExact(target, reset, format, types, values.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMinmaxParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$146.glGetMinmaxParameterfv$MH,"glGetMinmaxParameterfv");
    }
    public static void glGetMinmaxParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$146.glGetMinmaxParameterfv$MH, "glGetMinmaxParameterfv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetMinmaxParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$146.glGetMinmaxParameteriv$MH,"glGetMinmaxParameteriv");
    }
    public static void glGetMinmaxParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$146.glGetMinmaxParameteriv$MH, "glGetMinmaxParameteriv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionFilter1D$MH() {
        return RuntimeHelper.requireNonNull(constants$146.glConvolutionFilter1D$MH,"glConvolutionFilter1D");
    }
    public static void glConvolutionFilter1D ( int target,  int internalformat,  int width,  int format,  int type,  Addressable image) {
        var mh$ = RuntimeHelper.requireNonNull(constants$146.glConvolutionFilter1D$MH, "glConvolutionFilter1D");
        try {
            mh$.invokeExact(target, internalformat, width, format, type, image.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionFilter2D$MH() {
        return RuntimeHelper.requireNonNull(constants$147.glConvolutionFilter2D$MH,"glConvolutionFilter2D");
    }
    public static void glConvolutionFilter2D ( int target,  int internalformat,  int width,  int height,  int format,  int type,  Addressable image) {
        var mh$ = RuntimeHelper.requireNonNull(constants$147.glConvolutionFilter2D$MH, "glConvolutionFilter2D");
        try {
            mh$.invokeExact(target, internalformat, width, height, format, type, image.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionParameterf$MH() {
        return RuntimeHelper.requireNonNull(constants$147.glConvolutionParameterf$MH,"glConvolutionParameterf");
    }
    public static void glConvolutionParameterf ( int target,  int pname,  float params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$147.glConvolutionParameterf$MH, "glConvolutionParameterf");
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$147.glConvolutionParameterfv$MH,"glConvolutionParameterfv");
    }
    public static void glConvolutionParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$147.glConvolutionParameterfv$MH, "glConvolutionParameterfv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionParameteri$MH() {
        return RuntimeHelper.requireNonNull(constants$147.glConvolutionParameteri$MH,"glConvolutionParameteri");
    }
    public static void glConvolutionParameteri ( int target,  int pname,  int params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$147.glConvolutionParameteri$MH, "glConvolutionParameteri");
        try {
            mh$.invokeExact(target, pname, params);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glConvolutionParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$147.glConvolutionParameteriv$MH,"glConvolutionParameteriv");
    }
    public static void glConvolutionParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$147.glConvolutionParameteriv$MH, "glConvolutionParameteriv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyConvolutionFilter1D$MH() {
        return RuntimeHelper.requireNonNull(constants$147.glCopyConvolutionFilter1D$MH,"glCopyConvolutionFilter1D");
    }
    public static void glCopyConvolutionFilter1D ( int target,  int internalformat,  int x,  int y,  int width) {
        var mh$ = RuntimeHelper.requireNonNull(constants$147.glCopyConvolutionFilter1D$MH, "glCopyConvolutionFilter1D");
        try {
            mh$.invokeExact(target, internalformat, x, y, width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCopyConvolutionFilter2D$MH() {
        return RuntimeHelper.requireNonNull(constants$148.glCopyConvolutionFilter2D$MH,"glCopyConvolutionFilter2D");
    }
    public static void glCopyConvolutionFilter2D ( int target,  int internalformat,  int x,  int y,  int width,  int height) {
        var mh$ = RuntimeHelper.requireNonNull(constants$148.glCopyConvolutionFilter2D$MH, "glCopyConvolutionFilter2D");
        try {
            mh$.invokeExact(target, internalformat, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetConvolutionFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$148.glGetConvolutionFilter$MH,"glGetConvolutionFilter");
    }
    public static void glGetConvolutionFilter ( int target,  int format,  int type,  Addressable image) {
        var mh$ = RuntimeHelper.requireNonNull(constants$148.glGetConvolutionFilter$MH, "glGetConvolutionFilter");
        try {
            mh$.invokeExact(target, format, type, image.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetConvolutionParameterfv$MH() {
        return RuntimeHelper.requireNonNull(constants$148.glGetConvolutionParameterfv$MH,"glGetConvolutionParameterfv");
    }
    public static void glGetConvolutionParameterfv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$148.glGetConvolutionParameterfv$MH, "glGetConvolutionParameterfv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetConvolutionParameteriv$MH() {
        return RuntimeHelper.requireNonNull(constants$148.glGetConvolutionParameteriv$MH,"glGetConvolutionParameteriv");
    }
    public static void glGetConvolutionParameteriv ( int target,  int pname,  Addressable params) {
        var mh$ = RuntimeHelper.requireNonNull(constants$148.glGetConvolutionParameteriv$MH, "glGetConvolutionParameteriv");
        try {
            mh$.invokeExact(target, pname, params.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSeparableFilter2D$MH() {
        return RuntimeHelper.requireNonNull(constants$148.glSeparableFilter2D$MH,"glSeparableFilter2D");
    }
    public static void glSeparableFilter2D ( int target,  int internalformat,  int width,  int height,  int format,  int type,  Addressable row,  Addressable column) {
        var mh$ = RuntimeHelper.requireNonNull(constants$148.glSeparableFilter2D$MH, "glSeparableFilter2D");
        try {
            mh$.invokeExact(target, internalformat, width, height, format, type, row.address(), column.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetSeparableFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$148.glGetSeparableFilter$MH,"glGetSeparableFilter");
    }
    public static void glGetSeparableFilter ( int target,  int format,  int type,  Addressable row,  Addressable column,  Addressable span) {
        var mh$ = RuntimeHelper.requireNonNull(constants$148.glGetSeparableFilter$MH, "glGetSeparableFilter");
        try {
            mh$.invokeExact(target, format, type, row.address(), column.address(), span.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glActiveTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$149.glActiveTexture$MH,"glActiveTexture");
    }
    public static void glActiveTexture ( int texture) {
        var mh$ = RuntimeHelper.requireNonNull(constants$149.glActiveTexture$MH, "glActiveTexture");
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClientActiveTexture$MH() {
        return RuntimeHelper.requireNonNull(constants$149.glClientActiveTexture$MH,"glClientActiveTexture");
    }
    public static void glClientActiveTexture ( int texture) {
        var mh$ = RuntimeHelper.requireNonNull(constants$149.glClientActiveTexture$MH, "glClientActiveTexture");
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$149.glCompressedTexImage1D$MH,"glCompressedTexImage1D");
    }
    public static void glCompressedTexImage1D ( int target,  int level,  int internalformat,  int width,  int border,  int imageSize,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$149.glCompressedTexImage1D$MH, "glCompressedTexImage1D");
        try {
            mh$.invokeExact(target, level, internalformat, width, border, imageSize, data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$149.glCompressedTexImage2D$MH,"glCompressedTexImage2D");
    }
    public static void glCompressedTexImage2D ( int target,  int level,  int internalformat,  int width,  int height,  int border,  int imageSize,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$149.glCompressedTexImage2D$MH, "glCompressedTexImage2D");
        try {
            mh$.invokeExact(target, level, internalformat, width, height, border, imageSize, data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexImage3D$MH() {
        return RuntimeHelper.requireNonNull(constants$149.glCompressedTexImage3D$MH,"glCompressedTexImage3D");
    }
    public static void glCompressedTexImage3D ( int target,  int level,  int internalformat,  int width,  int height,  int depth,  int border,  int imageSize,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$149.glCompressedTexImage3D$MH, "glCompressedTexImage3D");
        try {
            mh$.invokeExact(target, level, internalformat, width, height, depth, border, imageSize, data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexSubImage1D$MH() {
        return RuntimeHelper.requireNonNull(constants$149.glCompressedTexSubImage1D$MH,"glCompressedTexSubImage1D");
    }
    public static void glCompressedTexSubImage1D ( int target,  int level,  int xoffset,  int width,  int format,  int imageSize,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$149.glCompressedTexSubImage1D$MH, "glCompressedTexSubImage1D");
        try {
            mh$.invokeExact(target, level, xoffset, width, format, imageSize, data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexSubImage2D$MH() {
        return RuntimeHelper.requireNonNull(constants$150.glCompressedTexSubImage2D$MH,"glCompressedTexSubImage2D");
    }
    public static void glCompressedTexSubImage2D ( int target,  int level,  int xoffset,  int yoffset,  int width,  int height,  int format,  int imageSize,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$150.glCompressedTexSubImage2D$MH, "glCompressedTexSubImage2D");
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, width, height, format, imageSize, data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glCompressedTexSubImage3D$MH() {
        return RuntimeHelper.requireNonNull(constants$150.glCompressedTexSubImage3D$MH,"glCompressedTexSubImage3D");
    }
    public static void glCompressedTexSubImage3D ( int target,  int level,  int xoffset,  int yoffset,  int zoffset,  int width,  int height,  int depth,  int format,  int imageSize,  Addressable data) {
        var mh$ = RuntimeHelper.requireNonNull(constants$150.glCompressedTexSubImage3D$MH, "glCompressedTexSubImage3D");
        try {
            mh$.invokeExact(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glGetCompressedTexImage$MH() {
        return RuntimeHelper.requireNonNull(constants$150.glGetCompressedTexImage$MH,"glGetCompressedTexImage");
    }
    public static void glGetCompressedTexImage ( int target,  int lod,  Addressable img) {
        var mh$ = RuntimeHelper.requireNonNull(constants$150.glGetCompressedTexImage$MH, "glGetCompressedTexImage");
        try {
            mh$.invokeExact(target, lod, img.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1d$MH() {
        return RuntimeHelper.requireNonNull(constants$150.glMultiTexCoord1d$MH,"glMultiTexCoord1d");
    }
    public static void glMultiTexCoord1d ( int target,  double s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$150.glMultiTexCoord1d$MH, "glMultiTexCoord1d");
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1dv$MH() {
        return RuntimeHelper.requireNonNull(constants$150.glMultiTexCoord1dv$MH,"glMultiTexCoord1dv");
    }
    public static void glMultiTexCoord1dv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$150.glMultiTexCoord1dv$MH, "glMultiTexCoord1dv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1f$MH() {
        return RuntimeHelper.requireNonNull(constants$150.glMultiTexCoord1f$MH,"glMultiTexCoord1f");
    }
    public static void glMultiTexCoord1f ( int target,  float s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$150.glMultiTexCoord1f$MH, "glMultiTexCoord1f");
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1fv$MH() {
        return RuntimeHelper.requireNonNull(constants$151.glMultiTexCoord1fv$MH,"glMultiTexCoord1fv");
    }
    public static void glMultiTexCoord1fv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$151.glMultiTexCoord1fv$MH, "glMultiTexCoord1fv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1i$MH() {
        return RuntimeHelper.requireNonNull(constants$151.glMultiTexCoord1i$MH,"glMultiTexCoord1i");
    }
    public static void glMultiTexCoord1i ( int target,  int s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$151.glMultiTexCoord1i$MH, "glMultiTexCoord1i");
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1iv$MH() {
        return RuntimeHelper.requireNonNull(constants$151.glMultiTexCoord1iv$MH,"glMultiTexCoord1iv");
    }
    public static void glMultiTexCoord1iv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$151.glMultiTexCoord1iv$MH, "glMultiTexCoord1iv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1s$MH() {
        return RuntimeHelper.requireNonNull(constants$151.glMultiTexCoord1s$MH,"glMultiTexCoord1s");
    }
    public static void glMultiTexCoord1s ( int target,  short s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$151.glMultiTexCoord1s$MH, "glMultiTexCoord1s");
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1sv$MH() {
        return RuntimeHelper.requireNonNull(constants$151.glMultiTexCoord1sv$MH,"glMultiTexCoord1sv");
    }
    public static void glMultiTexCoord1sv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$151.glMultiTexCoord1sv$MH, "glMultiTexCoord1sv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2d$MH() {
        return RuntimeHelper.requireNonNull(constants$151.glMultiTexCoord2d$MH,"glMultiTexCoord2d");
    }
    public static void glMultiTexCoord2d ( int target,  double s,  double t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$151.glMultiTexCoord2d$MH, "glMultiTexCoord2d");
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2dv$MH() {
        return RuntimeHelper.requireNonNull(constants$152.glMultiTexCoord2dv$MH,"glMultiTexCoord2dv");
    }
    public static void glMultiTexCoord2dv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$152.glMultiTexCoord2dv$MH, "glMultiTexCoord2dv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2f$MH() {
        return RuntimeHelper.requireNonNull(constants$152.glMultiTexCoord2f$MH,"glMultiTexCoord2f");
    }
    public static void glMultiTexCoord2f ( int target,  float s,  float t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$152.glMultiTexCoord2f$MH, "glMultiTexCoord2f");
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2fv$MH() {
        return RuntimeHelper.requireNonNull(constants$152.glMultiTexCoord2fv$MH,"glMultiTexCoord2fv");
    }
    public static void glMultiTexCoord2fv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$152.glMultiTexCoord2fv$MH, "glMultiTexCoord2fv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2i$MH() {
        return RuntimeHelper.requireNonNull(constants$152.glMultiTexCoord2i$MH,"glMultiTexCoord2i");
    }
    public static void glMultiTexCoord2i ( int target,  int s,  int t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$152.glMultiTexCoord2i$MH, "glMultiTexCoord2i");
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2iv$MH() {
        return RuntimeHelper.requireNonNull(constants$152.glMultiTexCoord2iv$MH,"glMultiTexCoord2iv");
    }
    public static void glMultiTexCoord2iv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$152.glMultiTexCoord2iv$MH, "glMultiTexCoord2iv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2s$MH() {
        return RuntimeHelper.requireNonNull(constants$152.glMultiTexCoord2s$MH,"glMultiTexCoord2s");
    }
    public static void glMultiTexCoord2s ( int target,  short s,  short t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$152.glMultiTexCoord2s$MH, "glMultiTexCoord2s");
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2sv$MH() {
        return RuntimeHelper.requireNonNull(constants$153.glMultiTexCoord2sv$MH,"glMultiTexCoord2sv");
    }
    public static void glMultiTexCoord2sv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$153.glMultiTexCoord2sv$MH, "glMultiTexCoord2sv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3d$MH() {
        return RuntimeHelper.requireNonNull(constants$153.glMultiTexCoord3d$MH,"glMultiTexCoord3d");
    }
    public static void glMultiTexCoord3d ( int target,  double s,  double t,  double r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$153.glMultiTexCoord3d$MH, "glMultiTexCoord3d");
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3dv$MH() {
        return RuntimeHelper.requireNonNull(constants$153.glMultiTexCoord3dv$MH,"glMultiTexCoord3dv");
    }
    public static void glMultiTexCoord3dv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$153.glMultiTexCoord3dv$MH, "glMultiTexCoord3dv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3f$MH() {
        return RuntimeHelper.requireNonNull(constants$153.glMultiTexCoord3f$MH,"glMultiTexCoord3f");
    }
    public static void glMultiTexCoord3f ( int target,  float s,  float t,  float r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$153.glMultiTexCoord3f$MH, "glMultiTexCoord3f");
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3fv$MH() {
        return RuntimeHelper.requireNonNull(constants$153.glMultiTexCoord3fv$MH,"glMultiTexCoord3fv");
    }
    public static void glMultiTexCoord3fv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$153.glMultiTexCoord3fv$MH, "glMultiTexCoord3fv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3i$MH() {
        return RuntimeHelper.requireNonNull(constants$153.glMultiTexCoord3i$MH,"glMultiTexCoord3i");
    }
    public static void glMultiTexCoord3i ( int target,  int s,  int t,  int r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$153.glMultiTexCoord3i$MH, "glMultiTexCoord3i");
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3iv$MH() {
        return RuntimeHelper.requireNonNull(constants$154.glMultiTexCoord3iv$MH,"glMultiTexCoord3iv");
    }
    public static void glMultiTexCoord3iv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$154.glMultiTexCoord3iv$MH, "glMultiTexCoord3iv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3s$MH() {
        return RuntimeHelper.requireNonNull(constants$154.glMultiTexCoord3s$MH,"glMultiTexCoord3s");
    }
    public static void glMultiTexCoord3s ( int target,  short s,  short t,  short r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$154.glMultiTexCoord3s$MH, "glMultiTexCoord3s");
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3sv$MH() {
        return RuntimeHelper.requireNonNull(constants$154.glMultiTexCoord3sv$MH,"glMultiTexCoord3sv");
    }
    public static void glMultiTexCoord3sv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$154.glMultiTexCoord3sv$MH, "glMultiTexCoord3sv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4d$MH() {
        return RuntimeHelper.requireNonNull(constants$154.glMultiTexCoord4d$MH,"glMultiTexCoord4d");
    }
    public static void glMultiTexCoord4d ( int target,  double s,  double t,  double r,  double q) {
        var mh$ = RuntimeHelper.requireNonNull(constants$154.glMultiTexCoord4d$MH, "glMultiTexCoord4d");
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4dv$MH() {
        return RuntimeHelper.requireNonNull(constants$154.glMultiTexCoord4dv$MH,"glMultiTexCoord4dv");
    }
    public static void glMultiTexCoord4dv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$154.glMultiTexCoord4dv$MH, "glMultiTexCoord4dv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4f$MH() {
        return RuntimeHelper.requireNonNull(constants$154.glMultiTexCoord4f$MH,"glMultiTexCoord4f");
    }
    public static void glMultiTexCoord4f ( int target,  float s,  float t,  float r,  float q) {
        var mh$ = RuntimeHelper.requireNonNull(constants$154.glMultiTexCoord4f$MH, "glMultiTexCoord4f");
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4fv$MH() {
        return RuntimeHelper.requireNonNull(constants$155.glMultiTexCoord4fv$MH,"glMultiTexCoord4fv");
    }
    public static void glMultiTexCoord4fv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$155.glMultiTexCoord4fv$MH, "glMultiTexCoord4fv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4i$MH() {
        return RuntimeHelper.requireNonNull(constants$155.glMultiTexCoord4i$MH,"glMultiTexCoord4i");
    }
    public static void glMultiTexCoord4i ( int target,  int s,  int t,  int r,  int q) {
        var mh$ = RuntimeHelper.requireNonNull(constants$155.glMultiTexCoord4i$MH, "glMultiTexCoord4i");
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4iv$MH() {
        return RuntimeHelper.requireNonNull(constants$155.glMultiTexCoord4iv$MH,"glMultiTexCoord4iv");
    }
    public static void glMultiTexCoord4iv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$155.glMultiTexCoord4iv$MH, "glMultiTexCoord4iv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4s$MH() {
        return RuntimeHelper.requireNonNull(constants$155.glMultiTexCoord4s$MH,"glMultiTexCoord4s");
    }
    public static void glMultiTexCoord4s ( int target,  short s,  short t,  short r,  short q) {
        var mh$ = RuntimeHelper.requireNonNull(constants$155.glMultiTexCoord4s$MH, "glMultiTexCoord4s");
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4sv$MH() {
        return RuntimeHelper.requireNonNull(constants$155.glMultiTexCoord4sv$MH,"glMultiTexCoord4sv");
    }
    public static void glMultiTexCoord4sv ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$155.glMultiTexCoord4sv$MH, "glMultiTexCoord4sv");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadTransposeMatrixd$MH() {
        return RuntimeHelper.requireNonNull(constants$155.glLoadTransposeMatrixd$MH,"glLoadTransposeMatrixd");
    }
    public static void glLoadTransposeMatrixd ( Addressable m) {
        var mh$ = RuntimeHelper.requireNonNull(constants$155.glLoadTransposeMatrixd$MH, "glLoadTransposeMatrixd");
        try {
            mh$.invokeExact(m.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glLoadTransposeMatrixf$MH() {
        return RuntimeHelper.requireNonNull(constants$156.glLoadTransposeMatrixf$MH,"glLoadTransposeMatrixf");
    }
    public static void glLoadTransposeMatrixf ( Addressable m) {
        var mh$ = RuntimeHelper.requireNonNull(constants$156.glLoadTransposeMatrixf$MH, "glLoadTransposeMatrixf");
        try {
            mh$.invokeExact(m.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultTransposeMatrixd$MH() {
        return RuntimeHelper.requireNonNull(constants$156.glMultTransposeMatrixd$MH,"glMultTransposeMatrixd");
    }
    public static void glMultTransposeMatrixd ( Addressable m) {
        var mh$ = RuntimeHelper.requireNonNull(constants$156.glMultTransposeMatrixd$MH, "glMultTransposeMatrixd");
        try {
            mh$.invokeExact(m.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultTransposeMatrixf$MH() {
        return RuntimeHelper.requireNonNull(constants$156.glMultTransposeMatrixf$MH,"glMultTransposeMatrixf");
    }
    public static void glMultTransposeMatrixf ( Addressable m) {
        var mh$ = RuntimeHelper.requireNonNull(constants$156.glMultTransposeMatrixf$MH, "glMultTransposeMatrixf");
        try {
            mh$.invokeExact(m.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glSampleCoverage$MH() {
        return RuntimeHelper.requireNonNull(constants$156.glSampleCoverage$MH,"glSampleCoverage");
    }
    public static void glSampleCoverage ( float value,  byte invert) {
        var mh$ = RuntimeHelper.requireNonNull(constants$156.glSampleCoverage$MH, "glSampleCoverage");
        try {
            mh$.invokeExact(value, invert);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glActiveTextureARB$MH() {
        return RuntimeHelper.requireNonNull(constants$159.glActiveTextureARB$MH,"glActiveTextureARB");
    }
    public static void glActiveTextureARB ( int texture) {
        var mh$ = RuntimeHelper.requireNonNull(constants$159.glActiveTextureARB$MH, "glActiveTextureARB");
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glClientActiveTextureARB$MH() {
        return RuntimeHelper.requireNonNull(constants$159.glClientActiveTextureARB$MH,"glClientActiveTextureARB");
    }
    public static void glClientActiveTextureARB ( int texture) {
        var mh$ = RuntimeHelper.requireNonNull(constants$159.glClientActiveTextureARB$MH, "glClientActiveTextureARB");
        try {
            mh$.invokeExact(texture);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$160.glMultiTexCoord1dARB$MH,"glMultiTexCoord1dARB");
    }
    public static void glMultiTexCoord1dARB ( int target,  double s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$160.glMultiTexCoord1dARB$MH, "glMultiTexCoord1dARB");
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$160.glMultiTexCoord1dvARB$MH,"glMultiTexCoord1dvARB");
    }
    public static void glMultiTexCoord1dvARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$160.glMultiTexCoord1dvARB$MH, "glMultiTexCoord1dvARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$160.glMultiTexCoord1fARB$MH,"glMultiTexCoord1fARB");
    }
    public static void glMultiTexCoord1fARB ( int target,  float s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$160.glMultiTexCoord1fARB$MH, "glMultiTexCoord1fARB");
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$160.glMultiTexCoord1fvARB$MH,"glMultiTexCoord1fvARB");
    }
    public static void glMultiTexCoord1fvARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$160.glMultiTexCoord1fvARB$MH, "glMultiTexCoord1fvARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$160.glMultiTexCoord1iARB$MH,"glMultiTexCoord1iARB");
    }
    public static void glMultiTexCoord1iARB ( int target,  int s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$160.glMultiTexCoord1iARB$MH, "glMultiTexCoord1iARB");
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$160.glMultiTexCoord1ivARB$MH,"glMultiTexCoord1ivARB");
    }
    public static void glMultiTexCoord1ivARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$160.glMultiTexCoord1ivARB$MH, "glMultiTexCoord1ivARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$161.glMultiTexCoord1sARB$MH,"glMultiTexCoord1sARB");
    }
    public static void glMultiTexCoord1sARB ( int target,  short s) {
        var mh$ = RuntimeHelper.requireNonNull(constants$161.glMultiTexCoord1sARB$MH, "glMultiTexCoord1sARB");
        try {
            mh$.invokeExact(target, s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord1svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$161.glMultiTexCoord1svARB$MH,"glMultiTexCoord1svARB");
    }
    public static void glMultiTexCoord1svARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$161.glMultiTexCoord1svARB$MH, "glMultiTexCoord1svARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$161.glMultiTexCoord2dARB$MH,"glMultiTexCoord2dARB");
    }
    public static void glMultiTexCoord2dARB ( int target,  double s,  double t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$161.glMultiTexCoord2dARB$MH, "glMultiTexCoord2dARB");
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$161.glMultiTexCoord2dvARB$MH,"glMultiTexCoord2dvARB");
    }
    public static void glMultiTexCoord2dvARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$161.glMultiTexCoord2dvARB$MH, "glMultiTexCoord2dvARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$161.glMultiTexCoord2fARB$MH,"glMultiTexCoord2fARB");
    }
    public static void glMultiTexCoord2fARB ( int target,  float s,  float t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$161.glMultiTexCoord2fARB$MH, "glMultiTexCoord2fARB");
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$161.glMultiTexCoord2fvARB$MH,"glMultiTexCoord2fvARB");
    }
    public static void glMultiTexCoord2fvARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$161.glMultiTexCoord2fvARB$MH, "glMultiTexCoord2fvARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$162.glMultiTexCoord2iARB$MH,"glMultiTexCoord2iARB");
    }
    public static void glMultiTexCoord2iARB ( int target,  int s,  int t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$162.glMultiTexCoord2iARB$MH, "glMultiTexCoord2iARB");
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$162.glMultiTexCoord2ivARB$MH,"glMultiTexCoord2ivARB");
    }
    public static void glMultiTexCoord2ivARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$162.glMultiTexCoord2ivARB$MH, "glMultiTexCoord2ivARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$162.glMultiTexCoord2sARB$MH,"glMultiTexCoord2sARB");
    }
    public static void glMultiTexCoord2sARB ( int target,  short s,  short t) {
        var mh$ = RuntimeHelper.requireNonNull(constants$162.glMultiTexCoord2sARB$MH, "glMultiTexCoord2sARB");
        try {
            mh$.invokeExact(target, s, t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord2svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$162.glMultiTexCoord2svARB$MH,"glMultiTexCoord2svARB");
    }
    public static void glMultiTexCoord2svARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$162.glMultiTexCoord2svARB$MH, "glMultiTexCoord2svARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$162.glMultiTexCoord3dARB$MH,"glMultiTexCoord3dARB");
    }
    public static void glMultiTexCoord3dARB ( int target,  double s,  double t,  double r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$162.glMultiTexCoord3dARB$MH, "glMultiTexCoord3dARB");
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$162.glMultiTexCoord3dvARB$MH,"glMultiTexCoord3dvARB");
    }
    public static void glMultiTexCoord3dvARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$162.glMultiTexCoord3dvARB$MH, "glMultiTexCoord3dvARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$163.glMultiTexCoord3fARB$MH,"glMultiTexCoord3fARB");
    }
    public static void glMultiTexCoord3fARB ( int target,  float s,  float t,  float r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$163.glMultiTexCoord3fARB$MH, "glMultiTexCoord3fARB");
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$163.glMultiTexCoord3fvARB$MH,"glMultiTexCoord3fvARB");
    }
    public static void glMultiTexCoord3fvARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$163.glMultiTexCoord3fvARB$MH, "glMultiTexCoord3fvARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$163.glMultiTexCoord3iARB$MH,"glMultiTexCoord3iARB");
    }
    public static void glMultiTexCoord3iARB ( int target,  int s,  int t,  int r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$163.glMultiTexCoord3iARB$MH, "glMultiTexCoord3iARB");
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$163.glMultiTexCoord3ivARB$MH,"glMultiTexCoord3ivARB");
    }
    public static void glMultiTexCoord3ivARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$163.glMultiTexCoord3ivARB$MH, "glMultiTexCoord3ivARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$163.glMultiTexCoord3sARB$MH,"glMultiTexCoord3sARB");
    }
    public static void glMultiTexCoord3sARB ( int target,  short s,  short t,  short r) {
        var mh$ = RuntimeHelper.requireNonNull(constants$163.glMultiTexCoord3sARB$MH, "glMultiTexCoord3sARB");
        try {
            mh$.invokeExact(target, s, t, r);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord3svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$163.glMultiTexCoord3svARB$MH,"glMultiTexCoord3svARB");
    }
    public static void glMultiTexCoord3svARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$163.glMultiTexCoord3svARB$MH, "glMultiTexCoord3svARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4dARB$MH() {
        return RuntimeHelper.requireNonNull(constants$164.glMultiTexCoord4dARB$MH,"glMultiTexCoord4dARB");
    }
    public static void glMultiTexCoord4dARB ( int target,  double s,  double t,  double r,  double q) {
        var mh$ = RuntimeHelper.requireNonNull(constants$164.glMultiTexCoord4dARB$MH, "glMultiTexCoord4dARB");
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4dvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$164.glMultiTexCoord4dvARB$MH,"glMultiTexCoord4dvARB");
    }
    public static void glMultiTexCoord4dvARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$164.glMultiTexCoord4dvARB$MH, "glMultiTexCoord4dvARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4fARB$MH() {
        return RuntimeHelper.requireNonNull(constants$164.glMultiTexCoord4fARB$MH,"glMultiTexCoord4fARB");
    }
    public static void glMultiTexCoord4fARB ( int target,  float s,  float t,  float r,  float q) {
        var mh$ = RuntimeHelper.requireNonNull(constants$164.glMultiTexCoord4fARB$MH, "glMultiTexCoord4fARB");
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4fvARB$MH() {
        return RuntimeHelper.requireNonNull(constants$164.glMultiTexCoord4fvARB$MH,"glMultiTexCoord4fvARB");
    }
    public static void glMultiTexCoord4fvARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$164.glMultiTexCoord4fvARB$MH, "glMultiTexCoord4fvARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4iARB$MH() {
        return RuntimeHelper.requireNonNull(constants$164.glMultiTexCoord4iARB$MH,"glMultiTexCoord4iARB");
    }
    public static void glMultiTexCoord4iARB ( int target,  int s,  int t,  int r,  int q) {
        var mh$ = RuntimeHelper.requireNonNull(constants$164.glMultiTexCoord4iARB$MH, "glMultiTexCoord4iARB");
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4ivARB$MH() {
        return RuntimeHelper.requireNonNull(constants$164.glMultiTexCoord4ivARB$MH,"glMultiTexCoord4ivARB");
    }
    public static void glMultiTexCoord4ivARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$164.glMultiTexCoord4ivARB$MH, "glMultiTexCoord4ivARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4sARB$MH() {
        return RuntimeHelper.requireNonNull(constants$165.glMultiTexCoord4sARB$MH,"glMultiTexCoord4sARB");
    }
    public static void glMultiTexCoord4sARB ( int target,  short s,  short t,  short r,  short q) {
        var mh$ = RuntimeHelper.requireNonNull(constants$165.glMultiTexCoord4sARB$MH, "glMultiTexCoord4sARB");
        try {
            mh$.invokeExact(target, s, t, r, q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glMultiTexCoord4svARB$MH() {
        return RuntimeHelper.requireNonNull(constants$165.glMultiTexCoord4svARB$MH,"glMultiTexCoord4svARB");
    }
    public static void glMultiTexCoord4svARB ( int target,  Addressable v) {
        var mh$ = RuntimeHelper.requireNonNull(constants$165.glMultiTexCoord4svARB$MH, "glMultiTexCoord4svARB");
        try {
            mh$.invokeExact(target, v.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout int_least16_t = C_SHORT;
    public static ValueLayout int_least32_t = C_INT;
    public static ValueLayout int_least64_t = C_LONG;
    public static ValueLayout int_fast16_t = C_LONG;
    public static ValueLayout int_fast32_t = C_LONG;
    public static ValueLayout int_fast64_t = C_LONG;
    public static ValueLayout intptr_t = C_LONG;
    public static ValueLayout intmax_t = C_LONG;
    public static ValueLayout khronos_int32_t = C_INT;
    public static ValueLayout khronos_int64_t = C_LONG;
    public static ValueLayout khronos_int16_t = C_SHORT;
    public static ValueLayout khronos_intptr_t = C_LONG;
    public static ValueLayout khronos_ssize_t = C_LONG;
    public static ValueLayout khronos_float_t = C_FLOAT;
    public static ValueLayout khronos_stime_nanoseconds_t = C_LONG;
    public static int KHRONOS_FALSE() {
        return (int)0L;
    }
    public static int KHRONOS_TRUE() {
        return (int)1L;
    }
    public static int KHRONOS_BOOLEAN_ENUM_FORCE_SIZE() {
        return (int)2147483647L;
    }
    public static ValueLayout GLsizeiptr = C_LONG;
    public static ValueLayout GLintptr = C_LONG;
    public static ValueLayout GLchar = C_CHAR;
    public static ValueLayout GLint64 = C_LONG;
    public static ValueLayout GLcharARB = C_CHAR;
    public static ValueLayout GLsizeiptrARB = C_LONG;
    public static ValueLayout GLintptrARB = C_LONG;
    public static ValueLayout GLfixed = C_INT;
    public static ValueLayout GLint64EXT = C_LONG;
    public static ValueLayout GLvdpauSurfaceNV = C_LONG;
    public static MethodHandle glBlendEquationSeparateATI$MH() {
        return RuntimeHelper.requireNonNull(constants$1014.glBlendEquationSeparateATI$MH,"glBlendEquationSeparateATI");
    }
    public static void glBlendEquationSeparateATI ( int modeRGB,  int modeA) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1014.glBlendEquationSeparateATI$MH, "glBlendEquationSeparateATI");
        try {
            mh$.invokeExact(modeRGB, modeA);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXChooseVisual$MH() {
        return RuntimeHelper.requireNonNull(constants$1015.glXChooseVisual$MH,"glXChooseVisual");
    }
    public static MemoryAddress glXChooseVisual ( Addressable dpy,  int screen,  Addressable attribList) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1015.glXChooseVisual$MH, "glXChooseVisual");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dpy.address(), screen, attribList.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXCreateContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1015.glXCreateContext$MH,"glXCreateContext");
    }
    public static MemoryAddress glXCreateContext ( Addressable dpy,  Addressable vis,  Addressable shareList,  int direct) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1015.glXCreateContext$MH, "glXCreateContext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dpy.address(), vis.address(), shareList.address(), direct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXDestroyContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1015.glXDestroyContext$MH,"glXDestroyContext");
    }
    public static void glXDestroyContext ( Addressable dpy,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1015.glXDestroyContext$MH, "glXDestroyContext");
        try {
            mh$.invokeExact(dpy.address(), ctx.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXMakeCurrent$MH() {
        return RuntimeHelper.requireNonNull(constants$1015.glXMakeCurrent$MH,"glXMakeCurrent");
    }
    public static int glXMakeCurrent ( Addressable dpy,  long drawable,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1015.glXMakeCurrent$MH, "glXMakeCurrent");
        try {
            return (int)mh$.invokeExact(dpy.address(), drawable, ctx.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXCopyContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1015.glXCopyContext$MH,"glXCopyContext");
    }
    public static void glXCopyContext ( Addressable dpy,  Addressable src,  Addressable dst,  long mask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1015.glXCopyContext$MH, "glXCopyContext");
        try {
            mh$.invokeExact(dpy.address(), src.address(), dst.address(), mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXSwapBuffers$MH() {
        return RuntimeHelper.requireNonNull(constants$1016.glXSwapBuffers$MH,"glXSwapBuffers");
    }
    public static void glXSwapBuffers ( Addressable dpy,  long drawable) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1016.glXSwapBuffers$MH, "glXSwapBuffers");
        try {
            mh$.invokeExact(dpy.address(), drawable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXCreateGLXPixmap$MH() {
        return RuntimeHelper.requireNonNull(constants$1016.glXCreateGLXPixmap$MH,"glXCreateGLXPixmap");
    }
    public static long glXCreateGLXPixmap ( Addressable dpy,  Addressable visual,  long pixmap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1016.glXCreateGLXPixmap$MH, "glXCreateGLXPixmap");
        try {
            return (long)mh$.invokeExact(dpy.address(), visual.address(), pixmap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXDestroyGLXPixmap$MH() {
        return RuntimeHelper.requireNonNull(constants$1016.glXDestroyGLXPixmap$MH,"glXDestroyGLXPixmap");
    }
    public static void glXDestroyGLXPixmap ( Addressable dpy,  long pixmap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1016.glXDestroyGLXPixmap$MH, "glXDestroyGLXPixmap");
        try {
            mh$.invokeExact(dpy.address(), pixmap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXQueryExtension$MH() {
        return RuntimeHelper.requireNonNull(constants$1016.glXQueryExtension$MH,"glXQueryExtension");
    }
    public static int glXQueryExtension ( Addressable dpy,  Addressable errorb,  Addressable event) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1016.glXQueryExtension$MH, "glXQueryExtension");
        try {
            return (int)mh$.invokeExact(dpy.address(), errorb.address(), event.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXQueryVersion$MH() {
        return RuntimeHelper.requireNonNull(constants$1016.glXQueryVersion$MH,"glXQueryVersion");
    }
    public static int glXQueryVersion ( Addressable dpy,  Addressable maj,  Addressable min) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1016.glXQueryVersion$MH, "glXQueryVersion");
        try {
            return (int)mh$.invokeExact(dpy.address(), maj.address(), min.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXIsDirect$MH() {
        return RuntimeHelper.requireNonNull(constants$1016.glXIsDirect$MH,"glXIsDirect");
    }
    public static int glXIsDirect ( Addressable dpy,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1016.glXIsDirect$MH, "glXIsDirect");
        try {
            return (int)mh$.invokeExact(dpy.address(), ctx.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXGetConfig$MH() {
        return RuntimeHelper.requireNonNull(constants$1017.glXGetConfig$MH,"glXGetConfig");
    }
    public static int glXGetConfig ( Addressable dpy,  Addressable visual,  int attrib,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1017.glXGetConfig$MH, "glXGetConfig");
        try {
            return (int)mh$.invokeExact(dpy.address(), visual.address(), attrib, value.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXGetCurrentContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1017.glXGetCurrentContext$MH,"glXGetCurrentContext");
    }
    public static MemoryAddress glXGetCurrentContext () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1017.glXGetCurrentContext$MH, "glXGetCurrentContext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXGetCurrentDrawable$MH() {
        return RuntimeHelper.requireNonNull(constants$1017.glXGetCurrentDrawable$MH,"glXGetCurrentDrawable");
    }
    public static long glXGetCurrentDrawable () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1017.glXGetCurrentDrawable$MH, "glXGetCurrentDrawable");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXWaitGL$MH() {
        return RuntimeHelper.requireNonNull(constants$1017.glXWaitGL$MH,"glXWaitGL");
    }
    public static void glXWaitGL () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1017.glXWaitGL$MH, "glXWaitGL");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXWaitX$MH() {
        return RuntimeHelper.requireNonNull(constants$1017.glXWaitX$MH,"glXWaitX");
    }
    public static void glXWaitX () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1017.glXWaitX$MH, "glXWaitX");
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXUseXFont$MH() {
        return RuntimeHelper.requireNonNull(constants$1017.glXUseXFont$MH,"glXUseXFont");
    }
    public static void glXUseXFont ( long font,  int first,  int count,  int list) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1017.glXUseXFont$MH, "glXUseXFont");
        try {
            mh$.invokeExact(font, first, count, list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXQueryExtensionsString$MH() {
        return RuntimeHelper.requireNonNull(constants$1018.glXQueryExtensionsString$MH,"glXQueryExtensionsString");
    }
    public static MemoryAddress glXQueryExtensionsString ( Addressable dpy,  int screen) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1018.glXQueryExtensionsString$MH, "glXQueryExtensionsString");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dpy.address(), screen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXQueryServerString$MH() {
        return RuntimeHelper.requireNonNull(constants$1018.glXQueryServerString$MH,"glXQueryServerString");
    }
    public static MemoryAddress glXQueryServerString ( Addressable dpy,  int screen,  int name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1018.glXQueryServerString$MH, "glXQueryServerString");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dpy.address(), screen, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXGetClientString$MH() {
        return RuntimeHelper.requireNonNull(constants$1018.glXGetClientString$MH,"glXGetClientString");
    }
    public static MemoryAddress glXGetClientString ( Addressable dpy,  int name) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1018.glXGetClientString$MH, "glXGetClientString");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dpy.address(), name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXGetCurrentDisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$1018.glXGetCurrentDisplay$MH,"glXGetCurrentDisplay");
    }
    public static MemoryAddress glXGetCurrentDisplay () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1018.glXGetCurrentDisplay$MH, "glXGetCurrentDisplay");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXChooseFBConfig$MH() {
        return RuntimeHelper.requireNonNull(constants$1018.glXChooseFBConfig$MH,"glXChooseFBConfig");
    }
    public static MemoryAddress glXChooseFBConfig ( Addressable dpy,  int screen,  Addressable attribList,  Addressable nitems) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1018.glXChooseFBConfig$MH, "glXChooseFBConfig");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dpy.address(), screen, attribList.address(), nitems.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXGetFBConfigAttrib$MH() {
        return RuntimeHelper.requireNonNull(constants$1018.glXGetFBConfigAttrib$MH,"glXGetFBConfigAttrib");
    }
    public static int glXGetFBConfigAttrib ( Addressable dpy,  Addressable config,  int attribute,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1018.glXGetFBConfigAttrib$MH, "glXGetFBConfigAttrib");
        try {
            return (int)mh$.invokeExact(dpy.address(), config.address(), attribute, value.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXGetFBConfigs$MH() {
        return RuntimeHelper.requireNonNull(constants$1019.glXGetFBConfigs$MH,"glXGetFBConfigs");
    }
    public static MemoryAddress glXGetFBConfigs ( Addressable dpy,  int screen,  Addressable nelements) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1019.glXGetFBConfigs$MH, "glXGetFBConfigs");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dpy.address(), screen, nelements.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXGetVisualFromFBConfig$MH() {
        return RuntimeHelper.requireNonNull(constants$1019.glXGetVisualFromFBConfig$MH,"glXGetVisualFromFBConfig");
    }
    public static MemoryAddress glXGetVisualFromFBConfig ( Addressable dpy,  Addressable config) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1019.glXGetVisualFromFBConfig$MH, "glXGetVisualFromFBConfig");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dpy.address(), config.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXCreateWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1019.glXCreateWindow$MH,"glXCreateWindow");
    }
    public static long glXCreateWindow ( Addressable dpy,  Addressable config,  long win,  Addressable attribList) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1019.glXCreateWindow$MH, "glXCreateWindow");
        try {
            return (long)mh$.invokeExact(dpy.address(), config.address(), win, attribList.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXDestroyWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1019.glXDestroyWindow$MH,"glXDestroyWindow");
    }
    public static void glXDestroyWindow ( Addressable dpy,  long window) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1019.glXDestroyWindow$MH, "glXDestroyWindow");
        try {
            mh$.invokeExact(dpy.address(), window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXCreatePixmap$MH() {
        return RuntimeHelper.requireNonNull(constants$1019.glXCreatePixmap$MH,"glXCreatePixmap");
    }
    public static long glXCreatePixmap ( Addressable dpy,  Addressable config,  long pixmap,  Addressable attribList) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1019.glXCreatePixmap$MH, "glXCreatePixmap");
        try {
            return (long)mh$.invokeExact(dpy.address(), config.address(), pixmap, attribList.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXDestroyPixmap$MH() {
        return RuntimeHelper.requireNonNull(constants$1019.glXDestroyPixmap$MH,"glXDestroyPixmap");
    }
    public static void glXDestroyPixmap ( Addressable dpy,  long pixmap) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1019.glXDestroyPixmap$MH, "glXDestroyPixmap");
        try {
            mh$.invokeExact(dpy.address(), pixmap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXCreatePbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$1020.glXCreatePbuffer$MH,"glXCreatePbuffer");
    }
    public static long glXCreatePbuffer ( Addressable dpy,  Addressable config,  Addressable attribList) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1020.glXCreatePbuffer$MH, "glXCreatePbuffer");
        try {
            return (long)mh$.invokeExact(dpy.address(), config.address(), attribList.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXDestroyPbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$1020.glXDestroyPbuffer$MH,"glXDestroyPbuffer");
    }
    public static void glXDestroyPbuffer ( Addressable dpy,  long pbuf) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1020.glXDestroyPbuffer$MH, "glXDestroyPbuffer");
        try {
            mh$.invokeExact(dpy.address(), pbuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXQueryDrawable$MH() {
        return RuntimeHelper.requireNonNull(constants$1020.glXQueryDrawable$MH,"glXQueryDrawable");
    }
    public static void glXQueryDrawable ( Addressable dpy,  long draw,  int attribute,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1020.glXQueryDrawable$MH, "glXQueryDrawable");
        try {
            mh$.invokeExact(dpy.address(), draw, attribute, value.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXCreateNewContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1020.glXCreateNewContext$MH,"glXCreateNewContext");
    }
    public static MemoryAddress glXCreateNewContext ( Addressable dpy,  Addressable config,  int renderType,  Addressable shareList,  int direct) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1020.glXCreateNewContext$MH, "glXCreateNewContext");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(dpy.address(), config.address(), renderType, shareList.address(), direct);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXMakeContextCurrent$MH() {
        return RuntimeHelper.requireNonNull(constants$1020.glXMakeContextCurrent$MH,"glXMakeContextCurrent");
    }
    public static int glXMakeContextCurrent ( Addressable dpy,  long draw,  long read,  Addressable ctx) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1020.glXMakeContextCurrent$MH, "glXMakeContextCurrent");
        try {
            return (int)mh$.invokeExact(dpy.address(), draw, read, ctx.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXGetCurrentReadDrawable$MH() {
        return RuntimeHelper.requireNonNull(constants$1020.glXGetCurrentReadDrawable$MH,"glXGetCurrentReadDrawable");
    }
    public static long glXGetCurrentReadDrawable () {
        var mh$ = RuntimeHelper.requireNonNull(constants$1020.glXGetCurrentReadDrawable$MH, "glXGetCurrentReadDrawable");
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXQueryContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1021.glXQueryContext$MH,"glXQueryContext");
    }
    public static int glXQueryContext ( Addressable dpy,  Addressable ctx,  int attribute,  Addressable value) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1021.glXQueryContext$MH, "glXQueryContext");
        try {
            return (int)mh$.invokeExact(dpy.address(), ctx.address(), attribute, value.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXSelectEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$1021.glXSelectEvent$MH,"glXSelectEvent");
    }
    public static void glXSelectEvent ( Addressable dpy,  long drawable,  long mask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1021.glXSelectEvent$MH, "glXSelectEvent");
        try {
            mh$.invokeExact(dpy.address(), drawable, mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXGetSelectedEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$1021.glXGetSelectedEvent$MH,"glXGetSelectedEvent");
    }
    public static void glXGetSelectedEvent ( Addressable dpy,  long drawable,  Addressable mask) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1021.glXGetSelectedEvent$MH, "glXGetSelectedEvent");
        try {
            mh$.invokeExact(dpy.address(), drawable, mask.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXGetProcAddressARB$MH() {
        return RuntimeHelper.requireNonNull(constants$1027.glXGetProcAddressARB$MH,"glXGetProcAddressARB");
    }
    public static MemoryAddress glXGetProcAddressARB ( Addressable x0) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1027.glXGetProcAddressARB$MH, "glXGetProcAddressARB");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(x0.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXGetProcAddress$MH() {
        return RuntimeHelper.requireNonNull(constants$1028.glXGetProcAddress$MH,"glXGetProcAddress");
    }
    public static MemoryAddress glXGetProcAddress ( Addressable procname) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1028.glXGetProcAddress$MH, "glXGetProcAddress");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(procname.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static ValueLayout __gwchar_t = C_INT;
    public static MethodHandle imaxabs$MH() {
        return RuntimeHelper.requireNonNull(constants$1045.imaxabs$MH,"imaxabs");
    }
    public static long imaxabs ( long __n) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1045.imaxabs$MH, "imaxabs");
        try {
            return (long)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle imaxdiv$MH() {
        return RuntimeHelper.requireNonNull(constants$1046.imaxdiv$MH,"imaxdiv");
    }
    public static MemorySegment imaxdiv ( SegmentAllocator allocator,  long __numer,  long __denom) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1046.imaxdiv$MH, "imaxdiv");
        try {
            return (jdk.incubator.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment imaxdiv ( ResourceScope scope,  long __numer,  long __denom) {
        return imaxdiv(SegmentAllocator.ofScope(scope), __numer, __denom);
    }
    public static MethodHandle strtoimax$MH() {
        return RuntimeHelper.requireNonNull(constants$1046.strtoimax$MH,"strtoimax");
    }
    public static long strtoimax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1046.strtoimax$MH, "strtoimax");
        try {
            return (long)mh$.invokeExact(__nptr.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoumax$MH() {
        return RuntimeHelper.requireNonNull(constants$1046.strtoumax$MH,"strtoumax");
    }
    public static long strtoumax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1046.strtoumax$MH, "strtoumax");
        try {
            return (long)mh$.invokeExact(__nptr.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoimax$MH() {
        return RuntimeHelper.requireNonNull(constants$1046.wcstoimax$MH,"wcstoimax");
    }
    public static long wcstoimax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1046.wcstoimax$MH, "wcstoimax");
        try {
            return (long)mh$.invokeExact(__nptr.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoumax$MH() {
        return RuntimeHelper.requireNonNull(constants$1046.wcstoumax$MH,"wcstoumax");
    }
    public static long wcstoumax ( Addressable __nptr,  Addressable __endptr,  int __base) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1046.wcstoumax$MH, "wcstoumax");
        try {
            return (long)mh$.invokeExact(__nptr.address(), __endptr.address(), __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXAllocateMemoryNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1059.glXAllocateMemoryNV$MH,"glXAllocateMemoryNV");
    }
    public static MemoryAddress glXAllocateMemoryNV ( int size,  float readfreq,  float writefreq,  float priority) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1059.glXAllocateMemoryNV$MH, "glXAllocateMemoryNV");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(size, readfreq, writefreq, priority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXFreeMemoryNV$MH() {
        return RuntimeHelper.requireNonNull(constants$1060.glXFreeMemoryNV$MH,"glXFreeMemoryNV");
    }
    public static void glXFreeMemoryNV ( Addressable pointer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1060.glXFreeMemoryNV$MH, "glXFreeMemoryNV");
        try {
            mh$.invokeExact(pointer.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXBindTexImageARB$MH() {
        return RuntimeHelper.requireNonNull(constants$1060.glXBindTexImageARB$MH,"glXBindTexImageARB");
    }
    public static int glXBindTexImageARB ( Addressable dpy,  long pbuffer,  int buffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1060.glXBindTexImageARB$MH, "glXBindTexImageARB");
        try {
            return (int)mh$.invokeExact(dpy.address(), pbuffer, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXReleaseTexImageARB$MH() {
        return RuntimeHelper.requireNonNull(constants$1061.glXReleaseTexImageARB$MH,"glXReleaseTexImageARB");
    }
    public static int glXReleaseTexImageARB ( Addressable dpy,  long pbuffer,  int buffer) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1061.glXReleaseTexImageARB$MH, "glXReleaseTexImageARB");
        try {
            return (int)mh$.invokeExact(dpy.address(), pbuffer, buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXDrawableAttribARB$MH() {
        return RuntimeHelper.requireNonNull(constants$1061.glXDrawableAttribARB$MH,"glXDrawableAttribARB");
    }
    public static int glXDrawableAttribARB ( Addressable dpy,  long draw,  Addressable attribList) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1061.glXDrawableAttribARB$MH, "glXDrawableAttribARB");
        try {
            return (int)mh$.invokeExact(dpy.address(), draw, attribList.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXGetFrameUsageMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1061.glXGetFrameUsageMESA$MH,"glXGetFrameUsageMESA");
    }
    public static int glXGetFrameUsageMESA ( Addressable dpy,  long drawable,  Addressable usage) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1061.glXGetFrameUsageMESA$MH, "glXGetFrameUsageMESA");
        try {
            return (int)mh$.invokeExact(dpy.address(), drawable, usage.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXBeginFrameTrackingMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1061.glXBeginFrameTrackingMESA$MH,"glXBeginFrameTrackingMESA");
    }
    public static int glXBeginFrameTrackingMESA ( Addressable dpy,  long drawable) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1061.glXBeginFrameTrackingMESA$MH, "glXBeginFrameTrackingMESA");
        try {
            return (int)mh$.invokeExact(dpy.address(), drawable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXEndFrameTrackingMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1061.glXEndFrameTrackingMESA$MH,"glXEndFrameTrackingMESA");
    }
    public static int glXEndFrameTrackingMESA ( Addressable dpy,  long drawable) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1061.glXEndFrameTrackingMESA$MH, "glXEndFrameTrackingMESA");
        try {
            return (int)mh$.invokeExact(dpy.address(), drawable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glXQueryFrameTrackingMESA$MH() {
        return RuntimeHelper.requireNonNull(constants$1061.glXQueryFrameTrackingMESA$MH,"glXQueryFrameTrackingMESA");
    }
    public static int glXQueryFrameTrackingMESA ( Addressable dpy,  long drawable,  Addressable swapCount,  Addressable missedFrames,  Addressable lastMissedUsage) {
        var mh$ = RuntimeHelper.requireNonNull(constants$1061.glXQueryFrameTrackingMESA$MH, "glXQueryFrameTrackingMESA");
        try {
            return (int)mh$.invokeExact(dpy.address(), drawable, swapCount.address(), missedFrames.address(), lastMissedUsage.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    public static int __TIMESIZE() {
        return (int)64L;
    }
    public static int __BYTE_ORDER() {
        return (int)1234L;
    }
    public static int __FLOAT_WORD_ORDER() {
        return (int)1234L;
    }
    public static int LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int BYTE_ORDER() {
        return (int)1234L;
    }
    public static MemorySegment __FD_ZERO_STOS() {
        return constants$1063.__FD_ZERO_STOS$SEGMENT;
    }
    public static long _SIGSET_NWORDS() {
        return 16L;
    }
    public static int __NFDBITS() {
        return (int)64L;
    }
    public static int FD_SETSIZE() {
        return (int)1024L;
    }
    public static int NFDBITS() {
        return (int)64L;
    }
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return (int)0L;
    }
    public static long None() {
        return 0L;
    }
    public static long ParentRelative() {
        return 1L;
    }
    public static long CopyFromParent() {
        return 0L;
    }
    public static long PointerWindow() {
        return 0L;
    }
    public static long InputFocus() {
        return 1L;
    }
    public static long PointerRoot() {
        return 1L;
    }
    public static long AnyPropertyType() {
        return 0L;
    }
    public static long AnyKey() {
        return 0L;
    }
    public static long AnyButton() {
        return 0L;
    }
    public static long AllTemporary() {
        return 0L;
    }
    public static long CurrentTime() {
        return 0L;
    }
    public static long NoSymbol() {
        return 0L;
    }
    public static long NoEventMask() {
        return 0L;
    }
    public static long KeyPressMask() {
        return 1L;
    }
    public static long KeyReleaseMask() {
        return 2L;
    }
    public static long ButtonPressMask() {
        return 4L;
    }
    public static long ButtonReleaseMask() {
        return 8L;
    }
    public static long EnterWindowMask() {
        return 16L;
    }
    public static long LeaveWindowMask() {
        return 32L;
    }
    public static long PointerMotionMask() {
        return 64L;
    }
    public static long PointerMotionHintMask() {
        return 128L;
    }
    public static long Button1MotionMask() {
        return 256L;
    }
    public static long Button2MotionMask() {
        return 512L;
    }
    public static long Button3MotionMask() {
        return 1024L;
    }
    public static long Button4MotionMask() {
        return 2048L;
    }
    public static long Button5MotionMask() {
        return 4096L;
    }
    public static long ButtonMotionMask() {
        return 8192L;
    }
    public static long KeymapStateMask() {
        return 16384L;
    }
    public static long ExposureMask() {
        return 32768L;
    }
    public static long VisibilityChangeMask() {
        return 65536L;
    }
    public static long StructureNotifyMask() {
        return 131072L;
    }
    public static long ResizeRedirectMask() {
        return 262144L;
    }
    public static long SubstructureNotifyMask() {
        return 524288L;
    }
    public static long SubstructureRedirectMask() {
        return 1048576L;
    }
    public static long FocusChangeMask() {
        return 2097152L;
    }
    public static long PropertyChangeMask() {
        return 4194304L;
    }
    public static long ColormapChangeMask() {
        return 8388608L;
    }
    public static long OwnerGrabButtonMask() {
        return 16777216L;
    }
    public static int ShiftMask() {
        return (int)1L;
    }
    public static int LockMask() {
        return (int)2L;
    }
    public static int ControlMask() {
        return (int)4L;
    }
    public static int Mod1Mask() {
        return (int)8L;
    }
    public static int Mod2Mask() {
        return (int)16L;
    }
    public static int Mod3Mask() {
        return (int)32L;
    }
    public static int Mod4Mask() {
        return (int)64L;
    }
    public static int Mod5Mask() {
        return (int)128L;
    }
    public static int Button1Mask() {
        return (int)256L;
    }
    public static int Button2Mask() {
        return (int)512L;
    }
    public static int Button3Mask() {
        return (int)1024L;
    }
    public static int Button4Mask() {
        return (int)2048L;
    }
    public static int Button5Mask() {
        return (int)4096L;
    }
    public static int AnyModifier() {
        return (int)32768L;
    }
    public static int RevertToNone() {
        return (int)0L;
    }
    public static int RevertToPointerRoot() {
        return (int)1L;
    }
    public static long CWBackPixmap() {
        return 1L;
    }
    public static long CWBackPixel() {
        return 2L;
    }
    public static long CWBorderPixmap() {
        return 4L;
    }
    public static long CWBorderPixel() {
        return 8L;
    }
    public static long CWBitGravity() {
        return 16L;
    }
    public static long CWWinGravity() {
        return 32L;
    }
    public static long CWBackingStore() {
        return 64L;
    }
    public static long CWBackingPlanes() {
        return 128L;
    }
    public static long CWBackingPixel() {
        return 256L;
    }
    public static long CWOverrideRedirect() {
        return 512L;
    }
    public static long CWSaveUnder() {
        return 1024L;
    }
    public static long CWEventMask() {
        return 2048L;
    }
    public static long CWDontPropagate() {
        return 4096L;
    }
    public static long CWColormap() {
        return 8192L;
    }
    public static long CWCursor() {
        return 16384L;
    }
    public static int CWX() {
        return (int)1L;
    }
    public static int CWY() {
        return (int)2L;
    }
    public static int CWWidth() {
        return (int)4L;
    }
    public static int CWHeight() {
        return (int)8L;
    }
    public static int CWBorderWidth() {
        return (int)16L;
    }
    public static int CWSibling() {
        return (int)32L;
    }
    public static int CWStackMode() {
        return (int)64L;
    }
    public static long GCFunction() {
        return 1L;
    }
    public static long GCPlaneMask() {
        return 2L;
    }
    public static long GCForeground() {
        return 4L;
    }
    public static long GCBackground() {
        return 8L;
    }
    public static long GCLineWidth() {
        return 16L;
    }
    public static long GCLineStyle() {
        return 32L;
    }
    public static long GCCapStyle() {
        return 64L;
    }
    public static long GCJoinStyle() {
        return 128L;
    }
    public static long GCFillStyle() {
        return 256L;
    }
    public static long GCFillRule() {
        return 512L;
    }
    public static long GCTile() {
        return 1024L;
    }
    public static long GCStipple() {
        return 2048L;
    }
    public static long GCTileStipXOrigin() {
        return 4096L;
    }
    public static long GCTileStipYOrigin() {
        return 8192L;
    }
    public static long GCFont() {
        return 16384L;
    }
    public static long GCSubwindowMode() {
        return 32768L;
    }
    public static long GCGraphicsExposures() {
        return 65536L;
    }
    public static long GCClipXOrigin() {
        return 131072L;
    }
    public static long GCClipYOrigin() {
        return 262144L;
    }
    public static long GCClipMask() {
        return 524288L;
    }
    public static long GCDashOffset() {
        return 1048576L;
    }
    public static long GCDashList() {
        return 2097152L;
    }
    public static long GCArcMode() {
        return 4194304L;
    }
    public static int DoRed() {
        return (int)1L;
    }
    public static int DoGreen() {
        return (int)2L;
    }
    public static int DoBlue() {
        return (int)4L;
    }
    public static long KBKeyClickPercent() {
        return 1L;
    }
    public static long KBBellPercent() {
        return 2L;
    }
    public static long KBBellPitch() {
        return 4L;
    }
    public static long KBBellDuration() {
        return 8L;
    }
    public static long KBLed() {
        return 16L;
    }
    public static long KBLedMode() {
        return 32L;
    }
    public static long KBKey() {
        return 64L;
    }
    public static long KBAutoRepeatMode() {
        return 128L;
    }
    public static MemoryAddress NULL() {
        return constants$1063.NULL$ADDR;
    }
    public static long AllPlanes() {
        return -1L;
    }
    public static MemorySegment XNRequiredCharSet() {
        return constants$1063.XNRequiredCharSet$SEGMENT;
    }
    public static MemorySegment XNQueryOrientation() {
        return constants$1063.XNQueryOrientation$SEGMENT;
    }
    public static MemorySegment XNBaseFontName() {
        return constants$1064.XNBaseFontName$SEGMENT;
    }
    public static MemorySegment XNOMAutomatic() {
        return constants$1064.XNOMAutomatic$SEGMENT;
    }
    public static MemorySegment XNMissingCharSet() {
        return constants$1064.XNMissingCharSet$SEGMENT;
    }
    public static MemorySegment XNDefaultString() {
        return constants$1064.XNDefaultString$SEGMENT;
    }
    public static MemorySegment XNOrientation() {
        return constants$1064.XNOrientation$SEGMENT;
    }
    public static MemorySegment XNDirectionalDependentDrawing() {
        return constants$1064.XNDirectionalDependentDrawing$SEGMENT;
    }
    public static MemorySegment XNContextualDrawing() {
        return constants$1065.XNContextualDrawing$SEGMENT;
    }
    public static MemorySegment XNFontInfo() {
        return constants$1065.XNFontInfo$SEGMENT;
    }
    public static long XIMPreeditArea() {
        return 1L;
    }
    public static long XIMPreeditCallbacks() {
        return 2L;
    }
    public static long XIMPreeditPosition() {
        return 4L;
    }
    public static long XIMPreeditNothing() {
        return 8L;
    }
    public static long XIMPreeditNone() {
        return 16L;
    }
    public static long XIMStatusArea() {
        return 256L;
    }
    public static long XIMStatusCallbacks() {
        return 512L;
    }
    public static long XIMStatusNothing() {
        return 1024L;
    }
    public static long XIMStatusNone() {
        return 2048L;
    }
    public static MemorySegment XNVaNestedList() {
        return constants$1065.XNVaNestedList$SEGMENT;
    }
    public static MemorySegment XNQueryInputStyle() {
        return constants$1065.XNQueryInputStyle$SEGMENT;
    }
    public static MemorySegment XNClientWindow() {
        return constants$1065.XNClientWindow$SEGMENT;
    }
    public static MemorySegment XNInputStyle() {
        return constants$1065.XNInputStyle$SEGMENT;
    }
    public static MemorySegment XNFocusWindow() {
        return constants$1066.XNFocusWindow$SEGMENT;
    }
    public static MemorySegment XNResourceName() {
        return constants$1066.XNResourceName$SEGMENT;
    }
    public static MemorySegment XNResourceClass() {
        return constants$1066.XNResourceClass$SEGMENT;
    }
    public static MemorySegment XNGeometryCallback() {
        return constants$1066.XNGeometryCallback$SEGMENT;
    }
    public static MemorySegment XNDestroyCallback() {
        return constants$1066.XNDestroyCallback$SEGMENT;
    }
    public static MemorySegment XNFilterEvents() {
        return constants$1066.XNFilterEvents$SEGMENT;
    }
    public static MemorySegment XNPreeditStartCallback() {
        return constants$1067.XNPreeditStartCallback$SEGMENT;
    }
    public static MemorySegment XNPreeditDoneCallback() {
        return constants$1067.XNPreeditDoneCallback$SEGMENT;
    }
    public static MemorySegment XNPreeditDrawCallback() {
        return constants$1067.XNPreeditDrawCallback$SEGMENT;
    }
    public static MemorySegment XNPreeditCaretCallback() {
        return constants$1067.XNPreeditCaretCallback$SEGMENT;
    }
    public static MemorySegment XNPreeditStateNotifyCallback() {
        return constants$1067.XNPreeditStateNotifyCallback$SEGMENT;
    }
    public static MemorySegment XNPreeditAttributes() {
        return constants$1067.XNPreeditAttributes$SEGMENT;
    }
    public static MemorySegment XNStatusStartCallback() {
        return constants$1068.XNStatusStartCallback$SEGMENT;
    }
    public static MemorySegment XNStatusDoneCallback() {
        return constants$1068.XNStatusDoneCallback$SEGMENT;
    }
    public static MemorySegment XNStatusDrawCallback() {
        return constants$1068.XNStatusDrawCallback$SEGMENT;
    }
    public static MemorySegment XNStatusAttributes() {
        return constants$1068.XNStatusAttributes$SEGMENT;
    }
    public static MemorySegment XNArea() {
        return constants$1068.XNArea$SEGMENT;
    }
    public static MemorySegment XNAreaNeeded() {
        return constants$1068.XNAreaNeeded$SEGMENT;
    }
    public static MemorySegment XNSpotLocation() {
        return constants$1069.XNSpotLocation$SEGMENT;
    }
    public static MemorySegment XNColormap() {
        return constants$1069.XNColormap$SEGMENT;
    }
    public static MemorySegment XNStdColormap() {
        return constants$1069.XNStdColormap$SEGMENT;
    }
    public static MemorySegment XNForeground() {
        return constants$1069.XNForeground$SEGMENT;
    }
    public static MemorySegment XNBackground() {
        return constants$1069.XNBackground$SEGMENT;
    }
    public static MemorySegment XNBackgroundPixmap() {
        return constants$1069.XNBackgroundPixmap$SEGMENT;
    }
    public static MemorySegment XNFontSet() {
        return constants$1070.XNFontSet$SEGMENT;
    }
    public static MemorySegment XNLineSpace() {
        return constants$1070.XNLineSpace$SEGMENT;
    }
    public static MemorySegment XNCursor() {
        return constants$1070.XNCursor$SEGMENT;
    }
    public static MemorySegment XNQueryIMValuesList() {
        return constants$1070.XNQueryIMValuesList$SEGMENT;
    }
    public static MemorySegment XNQueryICValuesList() {
        return constants$1070.XNQueryICValuesList$SEGMENT;
    }
    public static MemorySegment XNVisiblePosition() {
        return constants$1070.XNVisiblePosition$SEGMENT;
    }
    public static MemorySegment XNR6PreeditCallback() {
        return constants$1071.XNR6PreeditCallback$SEGMENT;
    }
    public static MemorySegment XNStringConversionCallback() {
        return constants$1071.XNStringConversionCallback$SEGMENT;
    }
    public static MemorySegment XNStringConversion() {
        return constants$1071.XNStringConversion$SEGMENT;
    }
    public static MemorySegment XNResetState() {
        return constants$1071.XNResetState$SEGMENT;
    }
    public static MemorySegment XNHotKey() {
        return constants$1071.XNHotKey$SEGMENT;
    }
    public static MemorySegment XNHotKeyState() {
        return constants$1071.XNHotKeyState$SEGMENT;
    }
    public static MemorySegment XNPreeditState() {
        return constants$1072.XNPreeditState$SEGMENT;
    }
    public static MemorySegment XNSeparatorofNestedList() {
        return constants$1072.XNSeparatorofNestedList$SEGMENT;
    }
    public static int XBufferOverflow() {
        return (int)-1L;
    }
    public static long XIMReverse() {
        return 1L;
    }
    public static long XIMUnderline() {
        return 2L;
    }
    public static long XIMHighlight() {
        return 4L;
    }
    public static long XIMPrimary() {
        return 32L;
    }
    public static long XIMSecondary() {
        return 64L;
    }
    public static long XIMTertiary() {
        return 128L;
    }
    public static long XIMVisibleToForward() {
        return 256L;
    }
    public static long XIMVisibleToBackword() {
        return 512L;
    }
    public static long XIMVisibleToCenter() {
        return 1024L;
    }
    public static long XIMPreeditUnKnown() {
        return 0L;
    }
    public static long XIMPreeditEnable() {
        return 1L;
    }
    public static long XIMPreeditDisable() {
        return 2L;
    }
    public static long XIMInitialState() {
        return 1L;
    }
    public static long XIMPreserveState() {
        return 2L;
    }
    public static int XIMStringConversionLeftEdge() {
        return (int)1L;
    }
    public static int XIMStringConversionRightEdge() {
        return (int)2L;
    }
    public static int XIMStringConversionTopEdge() {
        return (int)4L;
    }
    public static int XIMStringConversionBottomEdge() {
        return (int)8L;
    }
    public static int XIMStringConversionConcealed() {
        return (int)16L;
    }
    public static int XIMStringConversionWrapped() {
        return (int)32L;
    }
    public static int XIMStringConversionBuffer() {
        return (int)1L;
    }
    public static int XIMStringConversionLine() {
        return (int)2L;
    }
    public static int XIMStringConversionWord() {
        return (int)3L;
    }
    public static int XIMStringConversionChar() {
        return (int)4L;
    }
    public static int XIMStringConversionSubstitution() {
        return (int)1L;
    }
    public static int XIMStringConversionRetrieval() {
        return (int)2L;
    }
    public static long XIMHotKeyStateON() {
        return 1L;
    }
    public static long XIMHotKeyStateOFF() {
        return 2L;
    }
    public static long USPosition() {
        return 1L;
    }
    public static long USSize() {
        return 2L;
    }
    public static long PPosition() {
        return 4L;
    }
    public static long PSize() {
        return 8L;
    }
    public static long PMinSize() {
        return 16L;
    }
    public static long PMaxSize() {
        return 32L;
    }
    public static long PResizeInc() {
        return 64L;
    }
    public static long PAspect() {
        return 128L;
    }
    public static long PBaseSize() {
        return 256L;
    }
    public static long PWinGravity() {
        return 512L;
    }
    public static long PAllHints() {
        return 252L;
    }
    public static long InputHint() {
        return 1L;
    }
    public static long StateHint() {
        return 2L;
    }
    public static long IconPixmapHint() {
        return 4L;
    }
    public static long IconWindowHint() {
        return 8L;
    }
    public static long IconPositionHint() {
        return 16L;
    }
    public static long IconMaskHint() {
        return 32L;
    }
    public static long WindowGroupHint() {
        return 64L;
    }
    public static long AllHints() {
        return 127L;
    }
    public static long XUrgencyHint() {
        return 256L;
    }
    public static int XNoMemory() {
        return (int)-1L;
    }
    public static int XLocaleNotSupported() {
        return (int)-2L;
    }
    public static int XConverterNotFound() {
        return (int)-3L;
    }
    public static long ReleaseByFreeingColormap() {
        return 1L;
    }
    public static int GL_ALL_ATTRIB_BITS() {
        return (int)4294967295L;
    }
    public static int GL_ALL_CLIENT_ATTRIB_BITS() {
        return (int)4294967295L;
    }
    public static int GL_CLIENT_ALL_ATTRIB_BITS() {
        return (int)4294967295L;
    }
    public static int __WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int __WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int INT8_MIN() {
        return (int)-128L;
    }
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT8_MAX() {
        return (int)127L;
    }
    public static int INT16_MAX() {
        return (int)32767L;
    }
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT8_MAX() {
        return (int)255L;
    }
    public static int UINT16_MAX() {
        return (int)65535L;
    }
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT64_MAX() {
        return -1L;
    }
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_LEAST8_MAX() {
        return (int)255L;
    }
    public static int UINT_LEAST16_MAX() {
        return (int)65535L;
    }
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    public static long INT_FAST16_MIN() {
        return -9223372036854775808L;
    }
    public static long INT_FAST32_MIN() {
        return -9223372036854775808L;
    }
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    public static int INT_FAST8_MAX() {
        return (int)127L;
    }
    public static long INT_FAST16_MAX() {
        return 9223372036854775807L;
    }
    public static long INT_FAST32_MAX() {
        return 9223372036854775807L;
    }
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    public static int UINT_FAST8_MAX() {
        return (int)255L;
    }
    public static long UINT_FAST16_MAX() {
        return -1L;
    }
    public static long UINT_FAST32_MAX() {
        return -1L;
    }
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTPTR_MAX() {
        return -1L;
    }
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }
    public static long UINTMAX_MAX() {
        return -1L;
    }
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }
    public static int SIG_ATOMIC_MIN() {
        return (int)-2147483648L;
    }
    public static int SIG_ATOMIC_MAX() {
        return (int)2147483647L;
    }
    public static long SIZE_MAX() {
        return -1L;
    }
    public static int WCHAR_MIN() {
        return (int)-2147483648L;
    }
    public static int WCHAR_MAX() {
        return (int)2147483647L;
    }
    public static int WINT_MIN() {
        return (int)0L;
    }
    public static int WINT_MAX() {
        return (int)4294967295L;
    }
    public static int GL_INVALID_INDEX() {
        return (int)4294967295L;
    }
    public static long GL_TIMEOUT_IGNORED() {
        return -1L;
    }
    public static int GL_ALL_SHADER_BITS() {
        return (int)4294967295L;
    }
    public static int GL_ALL_BARRIER_BITS() {
        return (int)4294967295L;
    }
    public static int GL_ALL_PIXELS_AMD() {
        return (int)4294967295L;
    }
    public static int GL_QUERY_ALL_EVENT_BITS_AMD() {
        return (int)4294967295L;
    }
    public static int GL_ALL_BARRIER_BITS_EXT() {
        return (int)4294967295L;
    }
    public static int GL_NEXT_BUFFER_NV() {
        return (int)-2L;
    }
    public static int GL_SKIP_COMPONENTS4_NV() {
        return (int)-3L;
    }
    public static int GL_SKIP_COMPONENTS3_NV() {
        return (int)-4L;
    }
    public static int GL_SKIP_COMPONENTS2_NV() {
        return (int)-5L;
    }
    public static int GL_SKIP_COMPONENTS1_NV() {
        return (int)-6L;
    }
    public static int GL_TEXCOORD4_BIT_PGI() {
        return (int)2147483648L;
    }
    public static MemorySegment GLX_EXTENSION_NAME() {
        return constants$1072.GLX_EXTENSION_NAME$SEGMENT;
    }
    public static int GLX_DONT_CARE() {
        return (int)4294967295L;
    }
    public static MemorySegment __PRI64_PREFIX() {
        return constants$1072.__PRI64_PREFIX$SEGMENT;
    }
    public static MemorySegment __PRIPTR_PREFIX() {
        return constants$1072.__PRIPTR_PREFIX$SEGMENT;
    }
    public static MemorySegment PRId8() {
        return constants$1072.PRId8$SEGMENT;
    }
    public static MemorySegment PRId16() {
        return constants$1073.PRId16$SEGMENT;
    }
    public static MemorySegment PRId32() {
        return constants$1073.PRId32$SEGMENT;
    }
    public static MemorySegment PRId64() {
        return constants$1073.PRId64$SEGMENT;
    }
    public static MemorySegment PRIdLEAST8() {
        return constants$1073.PRIdLEAST8$SEGMENT;
    }
    public static MemorySegment PRIdLEAST16() {
        return constants$1073.PRIdLEAST16$SEGMENT;
    }
    public static MemorySegment PRIdLEAST32() {
        return constants$1073.PRIdLEAST32$SEGMENT;
    }
    public static MemorySegment PRIdLEAST64() {
        return constants$1074.PRIdLEAST64$SEGMENT;
    }
    public static MemorySegment PRIdFAST8() {
        return constants$1074.PRIdFAST8$SEGMENT;
    }
    public static MemorySegment PRIdFAST16() {
        return constants$1074.PRIdFAST16$SEGMENT;
    }
    public static MemorySegment PRIdFAST32() {
        return constants$1074.PRIdFAST32$SEGMENT;
    }
    public static MemorySegment PRIdFAST64() {
        return constants$1074.PRIdFAST64$SEGMENT;
    }
    public static MemorySegment PRIi8() {
        return constants$1074.PRIi8$SEGMENT;
    }
    public static MemorySegment PRIi16() {
        return constants$1075.PRIi16$SEGMENT;
    }
    public static MemorySegment PRIi32() {
        return constants$1075.PRIi32$SEGMENT;
    }
    public static MemorySegment PRIi64() {
        return constants$1075.PRIi64$SEGMENT;
    }
    public static MemorySegment PRIiLEAST8() {
        return constants$1075.PRIiLEAST8$SEGMENT;
    }
    public static MemorySegment PRIiLEAST16() {
        return constants$1075.PRIiLEAST16$SEGMENT;
    }
    public static MemorySegment PRIiLEAST32() {
        return constants$1075.PRIiLEAST32$SEGMENT;
    }
    public static MemorySegment PRIiLEAST64() {
        return constants$1076.PRIiLEAST64$SEGMENT;
    }
    public static MemorySegment PRIiFAST8() {
        return constants$1076.PRIiFAST8$SEGMENT;
    }
    public static MemorySegment PRIiFAST16() {
        return constants$1076.PRIiFAST16$SEGMENT;
    }
    public static MemorySegment PRIiFAST32() {
        return constants$1076.PRIiFAST32$SEGMENT;
    }
    public static MemorySegment PRIiFAST64() {
        return constants$1076.PRIiFAST64$SEGMENT;
    }
    public static MemorySegment PRIo8() {
        return constants$1076.PRIo8$SEGMENT;
    }
    public static MemorySegment PRIo16() {
        return constants$1077.PRIo16$SEGMENT;
    }
    public static MemorySegment PRIo32() {
        return constants$1077.PRIo32$SEGMENT;
    }
    public static MemorySegment PRIo64() {
        return constants$1077.PRIo64$SEGMENT;
    }
    public static MemorySegment PRIoLEAST8() {
        return constants$1077.PRIoLEAST8$SEGMENT;
    }
    public static MemorySegment PRIoLEAST16() {
        return constants$1077.PRIoLEAST16$SEGMENT;
    }
    public static MemorySegment PRIoLEAST32() {
        return constants$1077.PRIoLEAST32$SEGMENT;
    }
    public static MemorySegment PRIoLEAST64() {
        return constants$1078.PRIoLEAST64$SEGMENT;
    }
    public static MemorySegment PRIoFAST8() {
        return constants$1078.PRIoFAST8$SEGMENT;
    }
    public static MemorySegment PRIoFAST16() {
        return constants$1078.PRIoFAST16$SEGMENT;
    }
    public static MemorySegment PRIoFAST32() {
        return constants$1078.PRIoFAST32$SEGMENT;
    }
    public static MemorySegment PRIoFAST64() {
        return constants$1078.PRIoFAST64$SEGMENT;
    }
    public static MemorySegment PRIu8() {
        return constants$1078.PRIu8$SEGMENT;
    }
    public static MemorySegment PRIu16() {
        return constants$1079.PRIu16$SEGMENT;
    }
    public static MemorySegment PRIu32() {
        return constants$1079.PRIu32$SEGMENT;
    }
    public static MemorySegment PRIu64() {
        return constants$1079.PRIu64$SEGMENT;
    }
    public static MemorySegment PRIuLEAST8() {
        return constants$1079.PRIuLEAST8$SEGMENT;
    }
    public static MemorySegment PRIuLEAST16() {
        return constants$1079.PRIuLEAST16$SEGMENT;
    }
    public static MemorySegment PRIuLEAST32() {
        return constants$1079.PRIuLEAST32$SEGMENT;
    }
    public static MemorySegment PRIuLEAST64() {
        return constants$1080.PRIuLEAST64$SEGMENT;
    }
    public static MemorySegment PRIuFAST8() {
        return constants$1080.PRIuFAST8$SEGMENT;
    }
    public static MemorySegment PRIuFAST16() {
        return constants$1080.PRIuFAST16$SEGMENT;
    }
    public static MemorySegment PRIuFAST32() {
        return constants$1080.PRIuFAST32$SEGMENT;
    }
    public static MemorySegment PRIuFAST64() {
        return constants$1080.PRIuFAST64$SEGMENT;
    }
    public static MemorySegment PRIx8() {
        return constants$1080.PRIx8$SEGMENT;
    }
    public static MemorySegment PRIx16() {
        return constants$1081.PRIx16$SEGMENT;
    }
    public static MemorySegment PRIx32() {
        return constants$1081.PRIx32$SEGMENT;
    }
    public static MemorySegment PRIx64() {
        return constants$1081.PRIx64$SEGMENT;
    }
    public static MemorySegment PRIxLEAST8() {
        return constants$1081.PRIxLEAST8$SEGMENT;
    }
    public static MemorySegment PRIxLEAST16() {
        return constants$1081.PRIxLEAST16$SEGMENT;
    }
    public static MemorySegment PRIxLEAST32() {
        return constants$1081.PRIxLEAST32$SEGMENT;
    }
    public static MemorySegment PRIxLEAST64() {
        return constants$1082.PRIxLEAST64$SEGMENT;
    }
    public static MemorySegment PRIxFAST8() {
        return constants$1082.PRIxFAST8$SEGMENT;
    }
    public static MemorySegment PRIxFAST16() {
        return constants$1082.PRIxFAST16$SEGMENT;
    }
    public static MemorySegment PRIxFAST32() {
        return constants$1082.PRIxFAST32$SEGMENT;
    }
    public static MemorySegment PRIxFAST64() {
        return constants$1082.PRIxFAST64$SEGMENT;
    }
    public static MemorySegment PRIX8() {
        return constants$1082.PRIX8$SEGMENT;
    }
    public static MemorySegment PRIX16() {
        return constants$1083.PRIX16$SEGMENT;
    }
    public static MemorySegment PRIX32() {
        return constants$1083.PRIX32$SEGMENT;
    }
    public static MemorySegment PRIX64() {
        return constants$1083.PRIX64$SEGMENT;
    }
    public static MemorySegment PRIXLEAST8() {
        return constants$1083.PRIXLEAST8$SEGMENT;
    }
    public static MemorySegment PRIXLEAST16() {
        return constants$1083.PRIXLEAST16$SEGMENT;
    }
    public static MemorySegment PRIXLEAST32() {
        return constants$1083.PRIXLEAST32$SEGMENT;
    }
    public static MemorySegment PRIXLEAST64() {
        return constants$1084.PRIXLEAST64$SEGMENT;
    }
    public static MemorySegment PRIXFAST8() {
        return constants$1084.PRIXFAST8$SEGMENT;
    }
    public static MemorySegment PRIXFAST16() {
        return constants$1084.PRIXFAST16$SEGMENT;
    }
    public static MemorySegment PRIXFAST32() {
        return constants$1084.PRIXFAST32$SEGMENT;
    }
    public static MemorySegment PRIXFAST64() {
        return constants$1084.PRIXFAST64$SEGMENT;
    }
    public static MemorySegment PRIdMAX() {
        return constants$1084.PRIdMAX$SEGMENT;
    }
    public static MemorySegment PRIiMAX() {
        return constants$1085.PRIiMAX$SEGMENT;
    }
    public static MemorySegment PRIoMAX() {
        return constants$1085.PRIoMAX$SEGMENT;
    }
    public static MemorySegment PRIuMAX() {
        return constants$1085.PRIuMAX$SEGMENT;
    }
    public static MemorySegment PRIxMAX() {
        return constants$1085.PRIxMAX$SEGMENT;
    }
    public static MemorySegment PRIXMAX() {
        return constants$1085.PRIXMAX$SEGMENT;
    }
    public static MemorySegment PRIdPTR() {
        return constants$1085.PRIdPTR$SEGMENT;
    }
    public static MemorySegment PRIiPTR() {
        return constants$1086.PRIiPTR$SEGMENT;
    }
    public static MemorySegment PRIoPTR() {
        return constants$1086.PRIoPTR$SEGMENT;
    }
    public static MemorySegment PRIuPTR() {
        return constants$1086.PRIuPTR$SEGMENT;
    }
    public static MemorySegment PRIxPTR() {
        return constants$1086.PRIxPTR$SEGMENT;
    }
    public static MemorySegment PRIXPTR() {
        return constants$1086.PRIXPTR$SEGMENT;
    }
    public static MemorySegment SCNd8() {
        return constants$1086.SCNd8$SEGMENT;
    }
    public static MemorySegment SCNd16() {
        return constants$1087.SCNd16$SEGMENT;
    }
    public static MemorySegment SCNd32() {
        return constants$1087.SCNd32$SEGMENT;
    }
    public static MemorySegment SCNd64() {
        return constants$1087.SCNd64$SEGMENT;
    }
    public static MemorySegment SCNdLEAST8() {
        return constants$1087.SCNdLEAST8$SEGMENT;
    }
    public static MemorySegment SCNdLEAST16() {
        return constants$1087.SCNdLEAST16$SEGMENT;
    }
    public static MemorySegment SCNdLEAST32() {
        return constants$1087.SCNdLEAST32$SEGMENT;
    }
    public static MemorySegment SCNdLEAST64() {
        return constants$1088.SCNdLEAST64$SEGMENT;
    }
    public static MemorySegment SCNdFAST8() {
        return constants$1088.SCNdFAST8$SEGMENT;
    }
    public static MemorySegment SCNdFAST16() {
        return constants$1088.SCNdFAST16$SEGMENT;
    }
    public static MemorySegment SCNdFAST32() {
        return constants$1088.SCNdFAST32$SEGMENT;
    }
    public static MemorySegment SCNdFAST64() {
        return constants$1088.SCNdFAST64$SEGMENT;
    }
    public static MemorySegment SCNi8() {
        return constants$1088.SCNi8$SEGMENT;
    }
    public static MemorySegment SCNi16() {
        return constants$1089.SCNi16$SEGMENT;
    }
    public static MemorySegment SCNi32() {
        return constants$1089.SCNi32$SEGMENT;
    }
    public static MemorySegment SCNi64() {
        return constants$1089.SCNi64$SEGMENT;
    }
    public static MemorySegment SCNiLEAST8() {
        return constants$1089.SCNiLEAST8$SEGMENT;
    }
    public static MemorySegment SCNiLEAST16() {
        return constants$1089.SCNiLEAST16$SEGMENT;
    }
    public static MemorySegment SCNiLEAST32() {
        return constants$1089.SCNiLEAST32$SEGMENT;
    }
    public static MemorySegment SCNiLEAST64() {
        return constants$1090.SCNiLEAST64$SEGMENT;
    }
    public static MemorySegment SCNiFAST8() {
        return constants$1090.SCNiFAST8$SEGMENT;
    }
    public static MemorySegment SCNiFAST16() {
        return constants$1090.SCNiFAST16$SEGMENT;
    }
    public static MemorySegment SCNiFAST32() {
        return constants$1090.SCNiFAST32$SEGMENT;
    }
    public static MemorySegment SCNiFAST64() {
        return constants$1090.SCNiFAST64$SEGMENT;
    }
    public static MemorySegment SCNu8() {
        return constants$1090.SCNu8$SEGMENT;
    }
    public static MemorySegment SCNu16() {
        return constants$1091.SCNu16$SEGMENT;
    }
    public static MemorySegment SCNu32() {
        return constants$1091.SCNu32$SEGMENT;
    }
    public static MemorySegment SCNu64() {
        return constants$1091.SCNu64$SEGMENT;
    }
    public static MemorySegment SCNuLEAST8() {
        return constants$1091.SCNuLEAST8$SEGMENT;
    }
    public static MemorySegment SCNuLEAST16() {
        return constants$1091.SCNuLEAST16$SEGMENT;
    }
    public static MemorySegment SCNuLEAST32() {
        return constants$1091.SCNuLEAST32$SEGMENT;
    }
    public static MemorySegment SCNuLEAST64() {
        return constants$1092.SCNuLEAST64$SEGMENT;
    }
    public static MemorySegment SCNuFAST8() {
        return constants$1092.SCNuFAST8$SEGMENT;
    }
    public static MemorySegment SCNuFAST16() {
        return constants$1092.SCNuFAST16$SEGMENT;
    }
    public static MemorySegment SCNuFAST32() {
        return constants$1092.SCNuFAST32$SEGMENT;
    }
    public static MemorySegment SCNuFAST64() {
        return constants$1092.SCNuFAST64$SEGMENT;
    }
    public static MemorySegment SCNo8() {
        return constants$1092.SCNo8$SEGMENT;
    }
    public static MemorySegment SCNo16() {
        return constants$1093.SCNo16$SEGMENT;
    }
    public static MemorySegment SCNo32() {
        return constants$1093.SCNo32$SEGMENT;
    }
    public static MemorySegment SCNo64() {
        return constants$1093.SCNo64$SEGMENT;
    }
    public static MemorySegment SCNoLEAST8() {
        return constants$1093.SCNoLEAST8$SEGMENT;
    }
    public static MemorySegment SCNoLEAST16() {
        return constants$1093.SCNoLEAST16$SEGMENT;
    }
    public static MemorySegment SCNoLEAST32() {
        return constants$1093.SCNoLEAST32$SEGMENT;
    }
    public static MemorySegment SCNoLEAST64() {
        return constants$1094.SCNoLEAST64$SEGMENT;
    }
    public static MemorySegment SCNoFAST8() {
        return constants$1094.SCNoFAST8$SEGMENT;
    }
    public static MemorySegment SCNoFAST16() {
        return constants$1094.SCNoFAST16$SEGMENT;
    }
    public static MemorySegment SCNoFAST32() {
        return constants$1094.SCNoFAST32$SEGMENT;
    }
    public static MemorySegment SCNoFAST64() {
        return constants$1094.SCNoFAST64$SEGMENT;
    }
    public static MemorySegment SCNx8() {
        return constants$1094.SCNx8$SEGMENT;
    }
    public static MemorySegment SCNx16() {
        return constants$1095.SCNx16$SEGMENT;
    }
    public static MemorySegment SCNx32() {
        return constants$1095.SCNx32$SEGMENT;
    }
    public static MemorySegment SCNx64() {
        return constants$1095.SCNx64$SEGMENT;
    }
    public static MemorySegment SCNxLEAST8() {
        return constants$1095.SCNxLEAST8$SEGMENT;
    }
    public static MemorySegment SCNxLEAST16() {
        return constants$1095.SCNxLEAST16$SEGMENT;
    }
    public static MemorySegment SCNxLEAST32() {
        return constants$1095.SCNxLEAST32$SEGMENT;
    }
    public static MemorySegment SCNxLEAST64() {
        return constants$1096.SCNxLEAST64$SEGMENT;
    }
    public static MemorySegment SCNxFAST8() {
        return constants$1096.SCNxFAST8$SEGMENT;
    }
    public static MemorySegment SCNxFAST16() {
        return constants$1096.SCNxFAST16$SEGMENT;
    }
    public static MemorySegment SCNxFAST32() {
        return constants$1096.SCNxFAST32$SEGMENT;
    }
    public static MemorySegment SCNxFAST64() {
        return constants$1096.SCNxFAST64$SEGMENT;
    }
    public static MemorySegment SCNdMAX() {
        return constants$1096.SCNdMAX$SEGMENT;
    }
    public static MemorySegment SCNiMAX() {
        return constants$1097.SCNiMAX$SEGMENT;
    }
    public static MemorySegment SCNoMAX() {
        return constants$1097.SCNoMAX$SEGMENT;
    }
    public static MemorySegment SCNuMAX() {
        return constants$1097.SCNuMAX$SEGMENT;
    }
    public static MemorySegment SCNxMAX() {
        return constants$1097.SCNxMAX$SEGMENT;
    }
    public static MemorySegment SCNdPTR() {
        return constants$1097.SCNdPTR$SEGMENT;
    }
    public static MemorySegment SCNiPTR() {
        return constants$1097.SCNiPTR$SEGMENT;
    }
    public static MemorySegment SCNoPTR() {
        return constants$1098.SCNoPTR$SEGMENT;
    }
    public static MemorySegment SCNuPTR() {
        return constants$1098.SCNuPTR$SEGMENT;
    }
    public static MemorySegment SCNxPTR() {
        return constants$1098.SCNxPTR$SEGMENT;
    }
}


