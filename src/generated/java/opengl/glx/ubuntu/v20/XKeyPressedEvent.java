// Generated by jextract

package opengl.glx.ubuntu.v20;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class XKeyPressedEvent {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_INT.withName("type"),
        MemoryLayout.paddingLayout(32),
        C_LONG.withName("serial"),
        C_INT.withName("send_event"),
        MemoryLayout.paddingLayout(32),
        C_POINTER.withName("display"),
        C_LONG.withName("window"),
        C_LONG.withName("root"),
        C_LONG.withName("subwindow"),
        C_LONG.withName("time"),
        C_INT.withName("x"),
        C_INT.withName("y"),
        C_INT.withName("x_root"),
        C_INT.withName("y_root"),
        C_INT.withName("state"),
        C_INT.withName("keycode"),
        C_INT.withName("same_screen"),
        MemoryLayout.paddingLayout(32)
    );
    public static MemoryLayout $LAYOUT() {
        return XKeyPressedEvent.$struct$LAYOUT;
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return XKeyPressedEvent.type$VH;
    }
    public static int type$get(MemorySegment seg) {
        return (int)XKeyPressedEvent.type$VH.get(seg);
    }
    public static void type$set( MemorySegment seg, int x) {
        XKeyPressedEvent.type$VH.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)XKeyPressedEvent.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        XKeyPressedEvent.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle serial$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("serial"));
    public static VarHandle serial$VH() {
        return XKeyPressedEvent.serial$VH;
    }
    public static long serial$get(MemorySegment seg) {
        return (long)XKeyPressedEvent.serial$VH.get(seg);
    }
    public static void serial$set( MemorySegment seg, long x) {
        XKeyPressedEvent.serial$VH.set(seg, x);
    }
    public static long serial$get(MemorySegment seg, long index) {
        return (long)XKeyPressedEvent.serial$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void serial$set(MemorySegment seg, long index, long x) {
        XKeyPressedEvent.serial$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle send_event$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("send_event"));
    public static VarHandle send_event$VH() {
        return XKeyPressedEvent.send_event$VH;
    }
    public static int send_event$get(MemorySegment seg) {
        return (int)XKeyPressedEvent.send_event$VH.get(seg);
    }
    public static void send_event$set( MemorySegment seg, int x) {
        XKeyPressedEvent.send_event$VH.set(seg, x);
    }
    public static int send_event$get(MemorySegment seg, long index) {
        return (int)XKeyPressedEvent.send_event$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void send_event$set(MemorySegment seg, long index, int x) {
        XKeyPressedEvent.send_event$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle display$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("display")));
    public static VarHandle display$VH() {
        return XKeyPressedEvent.display$VH;
    }
    public static MemoryAddress display$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)XKeyPressedEvent.display$VH.get(seg);
    }
    public static void display$set( MemorySegment seg, MemoryAddress x) {
        XKeyPressedEvent.display$VH.set(seg, x);
    }
    public static MemoryAddress display$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)XKeyPressedEvent.display$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void display$set(MemorySegment seg, long index, MemoryAddress x) {
        XKeyPressedEvent.display$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle window$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("window"));
    public static VarHandle window$VH() {
        return XKeyPressedEvent.window$VH;
    }
    public static long window$get(MemorySegment seg) {
        return (long)XKeyPressedEvent.window$VH.get(seg);
    }
    public static void window$set( MemorySegment seg, long x) {
        XKeyPressedEvent.window$VH.set(seg, x);
    }
    public static long window$get(MemorySegment seg, long index) {
        return (long)XKeyPressedEvent.window$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void window$set(MemorySegment seg, long index, long x) {
        XKeyPressedEvent.window$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle root$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("root"));
    public static VarHandle root$VH() {
        return XKeyPressedEvent.root$VH;
    }
    public static long root$get(MemorySegment seg) {
        return (long)XKeyPressedEvent.root$VH.get(seg);
    }
    public static void root$set( MemorySegment seg, long x) {
        XKeyPressedEvent.root$VH.set(seg, x);
    }
    public static long root$get(MemorySegment seg, long index) {
        return (long)XKeyPressedEvent.root$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void root$set(MemorySegment seg, long index, long x) {
        XKeyPressedEvent.root$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle subwindow$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("subwindow"));
    public static VarHandle subwindow$VH() {
        return XKeyPressedEvent.subwindow$VH;
    }
    public static long subwindow$get(MemorySegment seg) {
        return (long)XKeyPressedEvent.subwindow$VH.get(seg);
    }
    public static void subwindow$set( MemorySegment seg, long x) {
        XKeyPressedEvent.subwindow$VH.set(seg, x);
    }
    public static long subwindow$get(MemorySegment seg, long index) {
        return (long)XKeyPressedEvent.subwindow$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void subwindow$set(MemorySegment seg, long index, long x) {
        XKeyPressedEvent.subwindow$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle time$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("time"));
    public static VarHandle time$VH() {
        return XKeyPressedEvent.time$VH;
    }
    public static long time$get(MemorySegment seg) {
        return (long)XKeyPressedEvent.time$VH.get(seg);
    }
    public static void time$set( MemorySegment seg, long x) {
        XKeyPressedEvent.time$VH.set(seg, x);
    }
    public static long time$get(MemorySegment seg, long index) {
        return (long)XKeyPressedEvent.time$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void time$set(MemorySegment seg, long index, long x) {
        XKeyPressedEvent.time$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle x$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("x"));
    public static VarHandle x$VH() {
        return XKeyPressedEvent.x$VH;
    }
    public static int x$get(MemorySegment seg) {
        return (int)XKeyPressedEvent.x$VH.get(seg);
    }
    public static void x$set( MemorySegment seg, int x) {
        XKeyPressedEvent.x$VH.set(seg, x);
    }
    public static int x$get(MemorySegment seg, long index) {
        return (int)XKeyPressedEvent.x$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void x$set(MemorySegment seg, long index, int x) {
        XKeyPressedEvent.x$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle y$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("y"));
    public static VarHandle y$VH() {
        return XKeyPressedEvent.y$VH;
    }
    public static int y$get(MemorySegment seg) {
        return (int)XKeyPressedEvent.y$VH.get(seg);
    }
    public static void y$set( MemorySegment seg, int x) {
        XKeyPressedEvent.y$VH.set(seg, x);
    }
    public static int y$get(MemorySegment seg, long index) {
        return (int)XKeyPressedEvent.y$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void y$set(MemorySegment seg, long index, int x) {
        XKeyPressedEvent.y$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle x_root$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("x_root"));
    public static VarHandle x_root$VH() {
        return XKeyPressedEvent.x_root$VH;
    }
    public static int x_root$get(MemorySegment seg) {
        return (int)XKeyPressedEvent.x_root$VH.get(seg);
    }
    public static void x_root$set( MemorySegment seg, int x) {
        XKeyPressedEvent.x_root$VH.set(seg, x);
    }
    public static int x_root$get(MemorySegment seg, long index) {
        return (int)XKeyPressedEvent.x_root$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void x_root$set(MemorySegment seg, long index, int x) {
        XKeyPressedEvent.x_root$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle y_root$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("y_root"));
    public static VarHandle y_root$VH() {
        return XKeyPressedEvent.y_root$VH;
    }
    public static int y_root$get(MemorySegment seg) {
        return (int)XKeyPressedEvent.y_root$VH.get(seg);
    }
    public static void y_root$set( MemorySegment seg, int x) {
        XKeyPressedEvent.y_root$VH.set(seg, x);
    }
    public static int y_root$get(MemorySegment seg, long index) {
        return (int)XKeyPressedEvent.y_root$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void y_root$set(MemorySegment seg, long index, int x) {
        XKeyPressedEvent.y_root$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle state$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("state"));
    public static VarHandle state$VH() {
        return XKeyPressedEvent.state$VH;
    }
    public static int state$get(MemorySegment seg) {
        return (int)XKeyPressedEvent.state$VH.get(seg);
    }
    public static void state$set( MemorySegment seg, int x) {
        XKeyPressedEvent.state$VH.set(seg, x);
    }
    public static int state$get(MemorySegment seg, long index) {
        return (int)XKeyPressedEvent.state$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void state$set(MemorySegment seg, long index, int x) {
        XKeyPressedEvent.state$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle keycode$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("keycode"));
    public static VarHandle keycode$VH() {
        return XKeyPressedEvent.keycode$VH;
    }
    public static int keycode$get(MemorySegment seg) {
        return (int)XKeyPressedEvent.keycode$VH.get(seg);
    }
    public static void keycode$set( MemorySegment seg, int x) {
        XKeyPressedEvent.keycode$VH.set(seg, x);
    }
    public static int keycode$get(MemorySegment seg, long index) {
        return (int)XKeyPressedEvent.keycode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void keycode$set(MemorySegment seg, long index, int x) {
        XKeyPressedEvent.keycode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle same_screen$VH = $struct$LAYOUT.varHandle(int.class, MemoryLayout.PathElement.groupElement("same_screen"));
    public static VarHandle same_screen$VH() {
        return XKeyPressedEvent.same_screen$VH;
    }
    public static int same_screen$get(MemorySegment seg) {
        return (int)XKeyPressedEvent.same_screen$VH.get(seg);
    }
    public static void same_screen$set( MemorySegment seg, int x) {
        XKeyPressedEvent.same_screen$VH.set(seg, x);
    }
    public static int same_screen$get(MemorySegment seg, long index) {
        return (int)XKeyPressedEvent.same_screen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void same_screen$set(MemorySegment seg, long index, int x) {
        XKeyPressedEvent.same_screen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


